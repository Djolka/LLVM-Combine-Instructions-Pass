/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Instruction Enum Values and Descriptors                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
namespace llvm {

namespace SystemZ {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    INLINEASM_BR	= 2,
    CFI_INSTRUCTION	= 3,
    EH_LABEL	= 4,
    GC_LABEL	= 5,
    ANNOTATION_LABEL	= 6,
    KILL	= 7,
    EXTRACT_SUBREG	= 8,
    INSERT_SUBREG	= 9,
    IMPLICIT_DEF	= 10,
    SUBREG_TO_REG	= 11,
    COPY_TO_REGCLASS	= 12,
    DBG_VALUE	= 13,
    DBG_VALUE_LIST	= 14,
    DBG_INSTR_REF	= 15,
    DBG_PHI	= 16,
    DBG_LABEL	= 17,
    REG_SEQUENCE	= 18,
    COPY	= 19,
    BUNDLE	= 20,
    LIFETIME_START	= 21,
    LIFETIME_END	= 22,
    PSEUDO_PROBE	= 23,
    ARITH_FENCE	= 24,
    STACKMAP	= 25,
    FENTRY_CALL	= 26,
    PATCHPOINT	= 27,
    LOAD_STACK_GUARD	= 28,
    PREALLOCATED_SETUP	= 29,
    PREALLOCATED_ARG	= 30,
    STATEPOINT	= 31,
    LOCAL_ESCAPE	= 32,
    FAULTING_OP	= 33,
    PATCHABLE_OP	= 34,
    PATCHABLE_FUNCTION_ENTER	= 35,
    PATCHABLE_RET	= 36,
    PATCHABLE_FUNCTION_EXIT	= 37,
    PATCHABLE_TAIL_CALL	= 38,
    PATCHABLE_EVENT_CALL	= 39,
    PATCHABLE_TYPED_EVENT_CALL	= 40,
    ICALL_BRANCH_FUNNEL	= 41,
    MEMBARRIER	= 42,
    G_ASSERT_SEXT	= 43,
    G_ASSERT_ZEXT	= 44,
    G_ASSERT_ALIGN	= 45,
    G_ADD	= 46,
    G_SUB	= 47,
    G_MUL	= 48,
    G_SDIV	= 49,
    G_UDIV	= 50,
    G_SREM	= 51,
    G_UREM	= 52,
    G_SDIVREM	= 53,
    G_UDIVREM	= 54,
    G_AND	= 55,
    G_OR	= 56,
    G_XOR	= 57,
    G_IMPLICIT_DEF	= 58,
    G_PHI	= 59,
    G_FRAME_INDEX	= 60,
    G_GLOBAL_VALUE	= 61,
    G_CONSTANT_POOL	= 62,
    G_EXTRACT	= 63,
    G_UNMERGE_VALUES	= 64,
    G_INSERT	= 65,
    G_MERGE_VALUES	= 66,
    G_BUILD_VECTOR	= 67,
    G_BUILD_VECTOR_TRUNC	= 68,
    G_CONCAT_VECTORS	= 69,
    G_PTRTOINT	= 70,
    G_INTTOPTR	= 71,
    G_BITCAST	= 72,
    G_FREEZE	= 73,
    G_INTRINSIC_FPTRUNC_ROUND	= 74,
    G_INTRINSIC_TRUNC	= 75,
    G_INTRINSIC_ROUND	= 76,
    G_INTRINSIC_LRINT	= 77,
    G_INTRINSIC_ROUNDEVEN	= 78,
    G_READCYCLECOUNTER	= 79,
    G_LOAD	= 80,
    G_SEXTLOAD	= 81,
    G_ZEXTLOAD	= 82,
    G_INDEXED_LOAD	= 83,
    G_INDEXED_SEXTLOAD	= 84,
    G_INDEXED_ZEXTLOAD	= 85,
    G_STORE	= 86,
    G_INDEXED_STORE	= 87,
    G_ATOMIC_CMPXCHG_WITH_SUCCESS	= 88,
    G_ATOMIC_CMPXCHG	= 89,
    G_ATOMICRMW_XCHG	= 90,
    G_ATOMICRMW_ADD	= 91,
    G_ATOMICRMW_SUB	= 92,
    G_ATOMICRMW_AND	= 93,
    G_ATOMICRMW_NAND	= 94,
    G_ATOMICRMW_OR	= 95,
    G_ATOMICRMW_XOR	= 96,
    G_ATOMICRMW_MAX	= 97,
    G_ATOMICRMW_MIN	= 98,
    G_ATOMICRMW_UMAX	= 99,
    G_ATOMICRMW_UMIN	= 100,
    G_ATOMICRMW_FADD	= 101,
    G_ATOMICRMW_FSUB	= 102,
    G_ATOMICRMW_FMAX	= 103,
    G_ATOMICRMW_FMIN	= 104,
    G_ATOMICRMW_UINC_WRAP	= 105,
    G_ATOMICRMW_UDEC_WRAP	= 106,
    G_FENCE	= 107,
    G_BRCOND	= 108,
    G_BRINDIRECT	= 109,
    G_INVOKE_REGION_START	= 110,
    G_INTRINSIC	= 111,
    G_INTRINSIC_W_SIDE_EFFECTS	= 112,
    G_ANYEXT	= 113,
    G_TRUNC	= 114,
    G_CONSTANT	= 115,
    G_FCONSTANT	= 116,
    G_VASTART	= 117,
    G_VAARG	= 118,
    G_SEXT	= 119,
    G_SEXT_INREG	= 120,
    G_ZEXT	= 121,
    G_SHL	= 122,
    G_LSHR	= 123,
    G_ASHR	= 124,
    G_FSHL	= 125,
    G_FSHR	= 126,
    G_ROTR	= 127,
    G_ROTL	= 128,
    G_ICMP	= 129,
    G_FCMP	= 130,
    G_SELECT	= 131,
    G_UADDO	= 132,
    G_UADDE	= 133,
    G_USUBO	= 134,
    G_USUBE	= 135,
    G_SADDO	= 136,
    G_SADDE	= 137,
    G_SSUBO	= 138,
    G_SSUBE	= 139,
    G_UMULO	= 140,
    G_SMULO	= 141,
    G_UMULH	= 142,
    G_SMULH	= 143,
    G_UADDSAT	= 144,
    G_SADDSAT	= 145,
    G_USUBSAT	= 146,
    G_SSUBSAT	= 147,
    G_USHLSAT	= 148,
    G_SSHLSAT	= 149,
    G_SMULFIX	= 150,
    G_UMULFIX	= 151,
    G_SMULFIXSAT	= 152,
    G_UMULFIXSAT	= 153,
    G_SDIVFIX	= 154,
    G_UDIVFIX	= 155,
    G_SDIVFIXSAT	= 156,
    G_UDIVFIXSAT	= 157,
    G_FADD	= 158,
    G_FSUB	= 159,
    G_FMUL	= 160,
    G_FMA	= 161,
    G_FMAD	= 162,
    G_FDIV	= 163,
    G_FREM	= 164,
    G_FPOW	= 165,
    G_FPOWI	= 166,
    G_FEXP	= 167,
    G_FEXP2	= 168,
    G_FLOG	= 169,
    G_FLOG2	= 170,
    G_FLOG10	= 171,
    G_FNEG	= 172,
    G_FPEXT	= 173,
    G_FPTRUNC	= 174,
    G_FPTOSI	= 175,
    G_FPTOUI	= 176,
    G_SITOFP	= 177,
    G_UITOFP	= 178,
    G_FABS	= 179,
    G_FCOPYSIGN	= 180,
    G_IS_FPCLASS	= 181,
    G_FCANONICALIZE	= 182,
    G_FMINNUM	= 183,
    G_FMAXNUM	= 184,
    G_FMINNUM_IEEE	= 185,
    G_FMAXNUM_IEEE	= 186,
    G_FMINIMUM	= 187,
    G_FMAXIMUM	= 188,
    G_PTR_ADD	= 189,
    G_PTRMASK	= 190,
    G_SMIN	= 191,
    G_SMAX	= 192,
    G_UMIN	= 193,
    G_UMAX	= 194,
    G_ABS	= 195,
    G_LROUND	= 196,
    G_LLROUND	= 197,
    G_BR	= 198,
    G_BRJT	= 199,
    G_INSERT_VECTOR_ELT	= 200,
    G_EXTRACT_VECTOR_ELT	= 201,
    G_SHUFFLE_VECTOR	= 202,
    G_CTTZ	= 203,
    G_CTTZ_ZERO_UNDEF	= 204,
    G_CTLZ	= 205,
    G_CTLZ_ZERO_UNDEF	= 206,
    G_CTPOP	= 207,
    G_BSWAP	= 208,
    G_BITREVERSE	= 209,
    G_FCEIL	= 210,
    G_FCOS	= 211,
    G_FSIN	= 212,
    G_FSQRT	= 213,
    G_FFLOOR	= 214,
    G_FRINT	= 215,
    G_FNEARBYINT	= 216,
    G_ADDRSPACE_CAST	= 217,
    G_BLOCK_ADDR	= 218,
    G_JUMP_TABLE	= 219,
    G_DYN_STACKALLOC	= 220,
    G_STRICT_FADD	= 221,
    G_STRICT_FSUB	= 222,
    G_STRICT_FMUL	= 223,
    G_STRICT_FDIV	= 224,
    G_STRICT_FREM	= 225,
    G_STRICT_FMA	= 226,
    G_STRICT_FSQRT	= 227,
    G_READ_REGISTER	= 228,
    G_WRITE_REGISTER	= 229,
    G_MEMCPY	= 230,
    G_MEMCPY_INLINE	= 231,
    G_MEMMOVE	= 232,
    G_MEMSET	= 233,
    G_BZERO	= 234,
    G_VECREDUCE_SEQ_FADD	= 235,
    G_VECREDUCE_SEQ_FMUL	= 236,
    G_VECREDUCE_FADD	= 237,
    G_VECREDUCE_FMUL	= 238,
    G_VECREDUCE_FMAX	= 239,
    G_VECREDUCE_FMIN	= 240,
    G_VECREDUCE_ADD	= 241,
    G_VECREDUCE_MUL	= 242,
    G_VECREDUCE_AND	= 243,
    G_VECREDUCE_OR	= 244,
    G_VECREDUCE_XOR	= 245,
    G_VECREDUCE_SMAX	= 246,
    G_VECREDUCE_SMIN	= 247,
    G_VECREDUCE_UMAX	= 248,
    G_VECREDUCE_UMIN	= 249,
    G_SBFX	= 250,
    G_UBFX	= 251,
    ADB_MemFoldPseudo	= 252,
    ADJCALLSTACKDOWN	= 253,
    ADJCALLSTACKUP	= 254,
    ADJDYNALLOC	= 255,
    AEB_MemFoldPseudo	= 256,
    AEXT128	= 257,
    AFIMux	= 258,
    AG_MemFoldPseudo	= 259,
    AHIMux	= 260,
    AHIMuxK	= 261,
    ALG_MemFoldPseudo	= 262,
    AL_MemFoldPseudo	= 263,
    ATOMIC_CMP_SWAPW	= 264,
    ATOMIC_LOADW_AFI	= 265,
    ATOMIC_LOADW_AR	= 266,
    ATOMIC_LOADW_MAX	= 267,
    ATOMIC_LOADW_MIN	= 268,
    ATOMIC_LOADW_NILH	= 269,
    ATOMIC_LOADW_NILHi	= 270,
    ATOMIC_LOADW_NR	= 271,
    ATOMIC_LOADW_NRi	= 272,
    ATOMIC_LOADW_OILH	= 273,
    ATOMIC_LOADW_OR	= 274,
    ATOMIC_LOADW_SR	= 275,
    ATOMIC_LOADW_UMAX	= 276,
    ATOMIC_LOADW_UMIN	= 277,
    ATOMIC_LOADW_XILF	= 278,
    ATOMIC_LOADW_XR	= 279,
    ATOMIC_LOAD_AFI	= 280,
    ATOMIC_LOAD_AGFI	= 281,
    ATOMIC_LOAD_AGHI	= 282,
    ATOMIC_LOAD_AGR	= 283,
    ATOMIC_LOAD_AHI	= 284,
    ATOMIC_LOAD_AR	= 285,
    ATOMIC_LOAD_MAX_32	= 286,
    ATOMIC_LOAD_MAX_64	= 287,
    ATOMIC_LOAD_MIN_32	= 288,
    ATOMIC_LOAD_MIN_64	= 289,
    ATOMIC_LOAD_NGR	= 290,
    ATOMIC_LOAD_NGRi	= 291,
    ATOMIC_LOAD_NIHF64	= 292,
    ATOMIC_LOAD_NIHF64i	= 293,
    ATOMIC_LOAD_NIHH64	= 294,
    ATOMIC_LOAD_NIHH64i	= 295,
    ATOMIC_LOAD_NIHL64	= 296,
    ATOMIC_LOAD_NIHL64i	= 297,
    ATOMIC_LOAD_NILF	= 298,
    ATOMIC_LOAD_NILF64	= 299,
    ATOMIC_LOAD_NILF64i	= 300,
    ATOMIC_LOAD_NILFi	= 301,
    ATOMIC_LOAD_NILH	= 302,
    ATOMIC_LOAD_NILH64	= 303,
    ATOMIC_LOAD_NILH64i	= 304,
    ATOMIC_LOAD_NILHi	= 305,
    ATOMIC_LOAD_NILL	= 306,
    ATOMIC_LOAD_NILL64	= 307,
    ATOMIC_LOAD_NILL64i	= 308,
    ATOMIC_LOAD_NILLi	= 309,
    ATOMIC_LOAD_NR	= 310,
    ATOMIC_LOAD_NRi	= 311,
    ATOMIC_LOAD_OGR	= 312,
    ATOMIC_LOAD_OIHF64	= 313,
    ATOMIC_LOAD_OIHH64	= 314,
    ATOMIC_LOAD_OIHL64	= 315,
    ATOMIC_LOAD_OILF	= 316,
    ATOMIC_LOAD_OILF64	= 317,
    ATOMIC_LOAD_OILH	= 318,
    ATOMIC_LOAD_OILH64	= 319,
    ATOMIC_LOAD_OILL	= 320,
    ATOMIC_LOAD_OILL64	= 321,
    ATOMIC_LOAD_OR	= 322,
    ATOMIC_LOAD_SGR	= 323,
    ATOMIC_LOAD_SR	= 324,
    ATOMIC_LOAD_UMAX_32	= 325,
    ATOMIC_LOAD_UMAX_64	= 326,
    ATOMIC_LOAD_UMIN_32	= 327,
    ATOMIC_LOAD_UMIN_64	= 328,
    ATOMIC_LOAD_XGR	= 329,
    ATOMIC_LOAD_XIHF64	= 330,
    ATOMIC_LOAD_XILF	= 331,
    ATOMIC_LOAD_XILF64	= 332,
    ATOMIC_LOAD_XR	= 333,
    ATOMIC_SWAPW	= 334,
    ATOMIC_SWAP_32	= 335,
    ATOMIC_SWAP_64	= 336,
    A_MemFoldPseudo	= 337,
    CFIMux	= 338,
    CGIBCall	= 339,
    CGIBReturn	= 340,
    CGRBCall	= 341,
    CGRBReturn	= 342,
    CHIMux	= 343,
    CIBCall	= 344,
    CIBReturn	= 345,
    CLCImm	= 346,
    CLCReg	= 347,
    CLFIMux	= 348,
    CLGIBCall	= 349,
    CLGIBReturn	= 350,
    CLGRBCall	= 351,
    CLGRBReturn	= 352,
    CLIBCall	= 353,
    CLIBReturn	= 354,
    CLMux	= 355,
    CLRBCall	= 356,
    CLRBReturn	= 357,
    CLSTLoop	= 358,
    CMux	= 359,
    CRBCall	= 360,
    CRBReturn	= 361,
    CallBASR	= 362,
    CallBASR_STACKEXT	= 363,
    CallBASR_XPLINK64	= 364,
    CallBCR	= 365,
    CallBR	= 366,
    CallBRASL	= 367,
    CallBRASL_XPLINK64	= 368,
    CallBRCL	= 369,
    CallJG	= 370,
    CondReturn	= 371,
    CondReturn_XPLINK	= 372,
    CondStore16	= 373,
    CondStore16Inv	= 374,
    CondStore16Mux	= 375,
    CondStore16MuxInv	= 376,
    CondStore32	= 377,
    CondStore32Inv	= 378,
    CondStore32Mux	= 379,
    CondStore32MuxInv	= 380,
    CondStore64	= 381,
    CondStore64Inv	= 382,
    CondStore8	= 383,
    CondStore8Inv	= 384,
    CondStore8Mux	= 385,
    CondStore8MuxInv	= 386,
    CondStoreF32	= 387,
    CondStoreF32Inv	= 388,
    CondStoreF64	= 389,
    CondStoreF64Inv	= 390,
    CondTrap	= 391,
    DDB_MemFoldPseudo	= 392,
    DEB_MemFoldPseudo	= 393,
    EXRL_Pseudo	= 394,
    GOT	= 395,
    IIFMux	= 396,
    IIHF64	= 397,
    IIHH64	= 398,
    IIHL64	= 399,
    IIHMux	= 400,
    IILF64	= 401,
    IILH64	= 402,
    IILL64	= 403,
    IILMux	= 404,
    L128	= 405,
    LBMux	= 406,
    LEFR	= 407,
    LFER	= 408,
    LHIMux	= 409,
    LHMux	= 410,
    LLCMux	= 411,
    LLCRMux	= 412,
    LLHMux	= 413,
    LLHRMux	= 414,
    LMux	= 415,
    LOCG_MemFoldPseudo	= 416,
    LOCHIMux	= 417,
    LOCMux	= 418,
    LOCMux_MemFoldPseudo	= 419,
    LOCRMux	= 420,
    LTDBRCompare_VecPseudo	= 421,
    LTEBRCompare_VecPseudo	= 422,
    LTXBRCompare_VecPseudo	= 423,
    LX	= 424,
    MADB_MemFoldPseudo	= 425,
    MAEB_MemFoldPseudo	= 426,
    MDB_MemFoldPseudo	= 427,
    MEEB_MemFoldPseudo	= 428,
    MSC_MemFoldPseudo	= 429,
    MSDB_MemFoldPseudo	= 430,
    MSEB_MemFoldPseudo	= 431,
    MSGC_MemFoldPseudo	= 432,
    MVCImm	= 433,
    MVCReg	= 434,
    MVSTLoop	= 435,
    MemsetImmImm	= 436,
    MemsetImmReg	= 437,
    MemsetRegImm	= 438,
    MemsetRegReg	= 439,
    NCImm	= 440,
    NCReg	= 441,
    NG_MemFoldPseudo	= 442,
    NIFMux	= 443,
    NIHF64	= 444,
    NIHH64	= 445,
    NIHL64	= 446,
    NIHMux	= 447,
    NILF64	= 448,
    NILH64	= 449,
    NILL64	= 450,
    NILMux	= 451,
    N_MemFoldPseudo	= 452,
    OCImm	= 453,
    OCReg	= 454,
    OG_MemFoldPseudo	= 455,
    OIFMux	= 456,
    OIHF64	= 457,
    OIHH64	= 458,
    OIHL64	= 459,
    OIHMux	= 460,
    OILF64	= 461,
    OILH64	= 462,
    OILL64	= 463,
    OILMux	= 464,
    O_MemFoldPseudo	= 465,
    PAIR128	= 466,
    PROBED_ALLOCA	= 467,
    PROBED_STACKALLOC	= 468,
    RISBHH	= 469,
    RISBHL	= 470,
    RISBLH	= 471,
    RISBLL	= 472,
    RISBMux	= 473,
    Return	= 474,
    Return_XPLINK	= 475,
    SDB_MemFoldPseudo	= 476,
    SEB_MemFoldPseudo	= 477,
    SELRMux	= 478,
    SG_MemFoldPseudo	= 479,
    SLG_MemFoldPseudo	= 480,
    SL_MemFoldPseudo	= 481,
    SRSTLoop	= 482,
    ST128	= 483,
    STCMux	= 484,
    STHMux	= 485,
    STMux	= 486,
    STOCMux	= 487,
    STX	= 488,
    S_MemFoldPseudo	= 489,
    Select32	= 490,
    Select64	= 491,
    SelectF128	= 492,
    SelectF32	= 493,
    SelectF64	= 494,
    SelectVR128	= 495,
    SelectVR32	= 496,
    SelectVR64	= 497,
    Serialize	= 498,
    TBEGIN_nofloat	= 499,
    TLS_GDCALL	= 500,
    TLS_LDCALL	= 501,
    TMHH64	= 502,
    TMHL64	= 503,
    TMHMux	= 504,
    TMLH64	= 505,
    TMLL64	= 506,
    TMLMux	= 507,
    Trap	= 508,
    VL32	= 509,
    VL64	= 510,
    VLR32	= 511,
    VLR64	= 512,
    VLVGP32	= 513,
    VST32	= 514,
    VST64	= 515,
    XCImm	= 516,
    XCReg	= 517,
    XG_MemFoldPseudo	= 518,
    XIFMux	= 519,
    XIHF64	= 520,
    XILF64	= 521,
    XPLINK_STACKALLOC	= 522,
    X_MemFoldPseudo	= 523,
    ZEXT128	= 524,
    A	= 525,
    AD	= 526,
    ADB	= 527,
    ADBR	= 528,
    ADR	= 529,
    ADTR	= 530,
    ADTRA	= 531,
    AE	= 532,
    AEB	= 533,
    AEBR	= 534,
    AER	= 535,
    AFI	= 536,
    AG	= 537,
    AGF	= 538,
    AGFI	= 539,
    AGFR	= 540,
    AGH	= 541,
    AGHI	= 542,
    AGHIK	= 543,
    AGR	= 544,
    AGRK	= 545,
    AGSI	= 546,
    AH	= 547,
    AHHHR	= 548,
    AHHLR	= 549,
    AHI	= 550,
    AHIK	= 551,
    AHY	= 552,
    AIH	= 553,
    AL	= 554,
    ALC	= 555,
    ALCG	= 556,
    ALCGR	= 557,
    ALCR	= 558,
    ALFI	= 559,
    ALG	= 560,
    ALGF	= 561,
    ALGFI	= 562,
    ALGFR	= 563,
    ALGHSIK	= 564,
    ALGR	= 565,
    ALGRK	= 566,
    ALGSI	= 567,
    ALHHHR	= 568,
    ALHHLR	= 569,
    ALHSIK	= 570,
    ALR	= 571,
    ALRK	= 572,
    ALSI	= 573,
    ALSIH	= 574,
    ALSIHN	= 575,
    ALY	= 576,
    AP	= 577,
    AR	= 578,
    ARK	= 579,
    ASI	= 580,
    AU	= 581,
    AUR	= 582,
    AW	= 583,
    AWR	= 584,
    AXBR	= 585,
    AXR	= 586,
    AXTR	= 587,
    AXTRA	= 588,
    AY	= 589,
    B	= 590,
    BAKR	= 591,
    BAL	= 592,
    BALR	= 593,
    BAS	= 594,
    BASR	= 595,
    BASSM	= 596,
    BAsmE	= 597,
    BAsmH	= 598,
    BAsmHE	= 599,
    BAsmL	= 600,
    BAsmLE	= 601,
    BAsmLH	= 602,
    BAsmM	= 603,
    BAsmNE	= 604,
    BAsmNH	= 605,
    BAsmNHE	= 606,
    BAsmNL	= 607,
    BAsmNLE	= 608,
    BAsmNLH	= 609,
    BAsmNM	= 610,
    BAsmNO	= 611,
    BAsmNP	= 612,
    BAsmNZ	= 613,
    BAsmO	= 614,
    BAsmP	= 615,
    BAsmZ	= 616,
    BC	= 617,
    BCAsm	= 618,
    BCR	= 619,
    BCRAsm	= 620,
    BCT	= 621,
    BCTG	= 622,
    BCTGR	= 623,
    BCTR	= 624,
    BI	= 625,
    BIAsmE	= 626,
    BIAsmH	= 627,
    BIAsmHE	= 628,
    BIAsmL	= 629,
    BIAsmLE	= 630,
    BIAsmLH	= 631,
    BIAsmM	= 632,
    BIAsmNE	= 633,
    BIAsmNH	= 634,
    BIAsmNHE	= 635,
    BIAsmNL	= 636,
    BIAsmNLE	= 637,
    BIAsmNLH	= 638,
    BIAsmNM	= 639,
    BIAsmNO	= 640,
    BIAsmNP	= 641,
    BIAsmNZ	= 642,
    BIAsmO	= 643,
    BIAsmP	= 644,
    BIAsmZ	= 645,
    BIC	= 646,
    BICAsm	= 647,
    BPP	= 648,
    BPRP	= 649,
    BR	= 650,
    BRAS	= 651,
    BRASL	= 652,
    BRAsmE	= 653,
    BRAsmH	= 654,
    BRAsmHE	= 655,
    BRAsmL	= 656,
    BRAsmLE	= 657,
    BRAsmLH	= 658,
    BRAsmM	= 659,
    BRAsmNE	= 660,
    BRAsmNH	= 661,
    BRAsmNHE	= 662,
    BRAsmNL	= 663,
    BRAsmNLE	= 664,
    BRAsmNLH	= 665,
    BRAsmNM	= 666,
    BRAsmNO	= 667,
    BRAsmNP	= 668,
    BRAsmNZ	= 669,
    BRAsmO	= 670,
    BRAsmP	= 671,
    BRAsmZ	= 672,
    BRC	= 673,
    BRCAsm	= 674,
    BRCL	= 675,
    BRCLAsm	= 676,
    BRCT	= 677,
    BRCTG	= 678,
    BRCTH	= 679,
    BRXH	= 680,
    BRXHG	= 681,
    BRXLE	= 682,
    BRXLG	= 683,
    BSA	= 684,
    BSG	= 685,
    BSM	= 686,
    BXH	= 687,
    BXHG	= 688,
    BXLE	= 689,
    BXLEG	= 690,
    C	= 691,
    CD	= 692,
    CDB	= 693,
    CDBR	= 694,
    CDFBR	= 695,
    CDFBRA	= 696,
    CDFR	= 697,
    CDFTR	= 698,
    CDGBR	= 699,
    CDGBRA	= 700,
    CDGR	= 701,
    CDGTR	= 702,
    CDGTRA	= 703,
    CDLFBR	= 704,
    CDLFTR	= 705,
    CDLGBR	= 706,
    CDLGTR	= 707,
    CDPT	= 708,
    CDR	= 709,
    CDS	= 710,
    CDSG	= 711,
    CDSTR	= 712,
    CDSY	= 713,
    CDTR	= 714,
    CDUTR	= 715,
    CDZT	= 716,
    CE	= 717,
    CEB	= 718,
    CEBR	= 719,
    CEDTR	= 720,
    CEFBR	= 721,
    CEFBRA	= 722,
    CEFR	= 723,
    CEGBR	= 724,
    CEGBRA	= 725,
    CEGR	= 726,
    CELFBR	= 727,
    CELGBR	= 728,
    CER	= 729,
    CEXTR	= 730,
    CFC	= 731,
    CFDBR	= 732,
    CFDBRA	= 733,
    CFDR	= 734,
    CFDTR	= 735,
    CFEBR	= 736,
    CFEBRA	= 737,
    CFER	= 738,
    CFI	= 739,
    CFXBR	= 740,
    CFXBRA	= 741,
    CFXR	= 742,
    CFXTR	= 743,
    CG	= 744,
    CGDBR	= 745,
    CGDBRA	= 746,
    CGDR	= 747,
    CGDTR	= 748,
    CGDTRA	= 749,
    CGEBR	= 750,
    CGEBRA	= 751,
    CGER	= 752,
    CGF	= 753,
    CGFI	= 754,
    CGFR	= 755,
    CGFRL	= 756,
    CGH	= 757,
    CGHI	= 758,
    CGHRL	= 759,
    CGHSI	= 760,
    CGIB	= 761,
    CGIBAsm	= 762,
    CGIBAsmE	= 763,
    CGIBAsmH	= 764,
    CGIBAsmHE	= 765,
    CGIBAsmL	= 766,
    CGIBAsmLE	= 767,
    CGIBAsmLH	= 768,
    CGIBAsmNE	= 769,
    CGIBAsmNH	= 770,
    CGIBAsmNHE	= 771,
    CGIBAsmNL	= 772,
    CGIBAsmNLE	= 773,
    CGIBAsmNLH	= 774,
    CGIJ	= 775,
    CGIJAsm	= 776,
    CGIJAsmE	= 777,
    CGIJAsmH	= 778,
    CGIJAsmHE	= 779,
    CGIJAsmL	= 780,
    CGIJAsmLE	= 781,
    CGIJAsmLH	= 782,
    CGIJAsmNE	= 783,
    CGIJAsmNH	= 784,
    CGIJAsmNHE	= 785,
    CGIJAsmNL	= 786,
    CGIJAsmNLE	= 787,
    CGIJAsmNLH	= 788,
    CGIT	= 789,
    CGITAsm	= 790,
    CGITAsmE	= 791,
    CGITAsmH	= 792,
    CGITAsmHE	= 793,
    CGITAsmL	= 794,
    CGITAsmLE	= 795,
    CGITAsmLH	= 796,
    CGITAsmNE	= 797,
    CGITAsmNH	= 798,
    CGITAsmNHE	= 799,
    CGITAsmNL	= 800,
    CGITAsmNLE	= 801,
    CGITAsmNLH	= 802,
    CGR	= 803,
    CGRB	= 804,
    CGRBAsm	= 805,
    CGRBAsmE	= 806,
    CGRBAsmH	= 807,
    CGRBAsmHE	= 808,
    CGRBAsmL	= 809,
    CGRBAsmLE	= 810,
    CGRBAsmLH	= 811,
    CGRBAsmNE	= 812,
    CGRBAsmNH	= 813,
    CGRBAsmNHE	= 814,
    CGRBAsmNL	= 815,
    CGRBAsmNLE	= 816,
    CGRBAsmNLH	= 817,
    CGRJ	= 818,
    CGRJAsm	= 819,
    CGRJAsmE	= 820,
    CGRJAsmH	= 821,
    CGRJAsmHE	= 822,
    CGRJAsmL	= 823,
    CGRJAsmLE	= 824,
    CGRJAsmLH	= 825,
    CGRJAsmNE	= 826,
    CGRJAsmNH	= 827,
    CGRJAsmNHE	= 828,
    CGRJAsmNL	= 829,
    CGRJAsmNLE	= 830,
    CGRJAsmNLH	= 831,
    CGRL	= 832,
    CGRT	= 833,
    CGRTAsm	= 834,
    CGRTAsmE	= 835,
    CGRTAsmH	= 836,
    CGRTAsmHE	= 837,
    CGRTAsmL	= 838,
    CGRTAsmLE	= 839,
    CGRTAsmLH	= 840,
    CGRTAsmNE	= 841,
    CGRTAsmNH	= 842,
    CGRTAsmNHE	= 843,
    CGRTAsmNL	= 844,
    CGRTAsmNLE	= 845,
    CGRTAsmNLH	= 846,
    CGXBR	= 847,
    CGXBRA	= 848,
    CGXR	= 849,
    CGXTR	= 850,
    CGXTRA	= 851,
    CH	= 852,
    CHF	= 853,
    CHHR	= 854,
    CHHSI	= 855,
    CHI	= 856,
    CHLR	= 857,
    CHRL	= 858,
    CHSI	= 859,
    CHY	= 860,
    CIB	= 861,
    CIBAsm	= 862,
    CIBAsmE	= 863,
    CIBAsmH	= 864,
    CIBAsmHE	= 865,
    CIBAsmL	= 866,
    CIBAsmLE	= 867,
    CIBAsmLH	= 868,
    CIBAsmNE	= 869,
    CIBAsmNH	= 870,
    CIBAsmNHE	= 871,
    CIBAsmNL	= 872,
    CIBAsmNLE	= 873,
    CIBAsmNLH	= 874,
    CIH	= 875,
    CIJ	= 876,
    CIJAsm	= 877,
    CIJAsmE	= 878,
    CIJAsmH	= 879,
    CIJAsmHE	= 880,
    CIJAsmL	= 881,
    CIJAsmLE	= 882,
    CIJAsmLH	= 883,
    CIJAsmNE	= 884,
    CIJAsmNH	= 885,
    CIJAsmNHE	= 886,
    CIJAsmNL	= 887,
    CIJAsmNLE	= 888,
    CIJAsmNLH	= 889,
    CIT	= 890,
    CITAsm	= 891,
    CITAsmE	= 892,
    CITAsmH	= 893,
    CITAsmHE	= 894,
    CITAsmL	= 895,
    CITAsmLE	= 896,
    CITAsmLH	= 897,
    CITAsmNE	= 898,
    CITAsmNH	= 899,
    CITAsmNHE	= 900,
    CITAsmNL	= 901,
    CITAsmNLE	= 902,
    CITAsmNLH	= 903,
    CKSM	= 904,
    CL	= 905,
    CLC	= 906,
    CLCL	= 907,
    CLCLE	= 908,
    CLCLU	= 909,
    CLFDBR	= 910,
    CLFDTR	= 911,
    CLFEBR	= 912,
    CLFHSI	= 913,
    CLFI	= 914,
    CLFIT	= 915,
    CLFITAsm	= 916,
    CLFITAsmE	= 917,
    CLFITAsmH	= 918,
    CLFITAsmHE	= 919,
    CLFITAsmL	= 920,
    CLFITAsmLE	= 921,
    CLFITAsmLH	= 922,
    CLFITAsmNE	= 923,
    CLFITAsmNH	= 924,
    CLFITAsmNHE	= 925,
    CLFITAsmNL	= 926,
    CLFITAsmNLE	= 927,
    CLFITAsmNLH	= 928,
    CLFXBR	= 929,
    CLFXTR	= 930,
    CLG	= 931,
    CLGDBR	= 932,
    CLGDTR	= 933,
    CLGEBR	= 934,
    CLGF	= 935,
    CLGFI	= 936,
    CLGFR	= 937,
    CLGFRL	= 938,
    CLGHRL	= 939,
    CLGHSI	= 940,
    CLGIB	= 941,
    CLGIBAsm	= 942,
    CLGIBAsmE	= 943,
    CLGIBAsmH	= 944,
    CLGIBAsmHE	= 945,
    CLGIBAsmL	= 946,
    CLGIBAsmLE	= 947,
    CLGIBAsmLH	= 948,
    CLGIBAsmNE	= 949,
    CLGIBAsmNH	= 950,
    CLGIBAsmNHE	= 951,
    CLGIBAsmNL	= 952,
    CLGIBAsmNLE	= 953,
    CLGIBAsmNLH	= 954,
    CLGIJ	= 955,
    CLGIJAsm	= 956,
    CLGIJAsmE	= 957,
    CLGIJAsmH	= 958,
    CLGIJAsmHE	= 959,
    CLGIJAsmL	= 960,
    CLGIJAsmLE	= 961,
    CLGIJAsmLH	= 962,
    CLGIJAsmNE	= 963,
    CLGIJAsmNH	= 964,
    CLGIJAsmNHE	= 965,
    CLGIJAsmNL	= 966,
    CLGIJAsmNLE	= 967,
    CLGIJAsmNLH	= 968,
    CLGIT	= 969,
    CLGITAsm	= 970,
    CLGITAsmE	= 971,
    CLGITAsmH	= 972,
    CLGITAsmHE	= 973,
    CLGITAsmL	= 974,
    CLGITAsmLE	= 975,
    CLGITAsmLH	= 976,
    CLGITAsmNE	= 977,
    CLGITAsmNH	= 978,
    CLGITAsmNHE	= 979,
    CLGITAsmNL	= 980,
    CLGITAsmNLE	= 981,
    CLGITAsmNLH	= 982,
    CLGR	= 983,
    CLGRB	= 984,
    CLGRBAsm	= 985,
    CLGRBAsmE	= 986,
    CLGRBAsmH	= 987,
    CLGRBAsmHE	= 988,
    CLGRBAsmL	= 989,
    CLGRBAsmLE	= 990,
    CLGRBAsmLH	= 991,
    CLGRBAsmNE	= 992,
    CLGRBAsmNH	= 993,
    CLGRBAsmNHE	= 994,
    CLGRBAsmNL	= 995,
    CLGRBAsmNLE	= 996,
    CLGRBAsmNLH	= 997,
    CLGRJ	= 998,
    CLGRJAsm	= 999,
    CLGRJAsmE	= 1000,
    CLGRJAsmH	= 1001,
    CLGRJAsmHE	= 1002,
    CLGRJAsmL	= 1003,
    CLGRJAsmLE	= 1004,
    CLGRJAsmLH	= 1005,
    CLGRJAsmNE	= 1006,
    CLGRJAsmNH	= 1007,
    CLGRJAsmNHE	= 1008,
    CLGRJAsmNL	= 1009,
    CLGRJAsmNLE	= 1010,
    CLGRJAsmNLH	= 1011,
    CLGRL	= 1012,
    CLGRT	= 1013,
    CLGRTAsm	= 1014,
    CLGRTAsmE	= 1015,
    CLGRTAsmH	= 1016,
    CLGRTAsmHE	= 1017,
    CLGRTAsmL	= 1018,
    CLGRTAsmLE	= 1019,
    CLGRTAsmLH	= 1020,
    CLGRTAsmNE	= 1021,
    CLGRTAsmNH	= 1022,
    CLGRTAsmNHE	= 1023,
    CLGRTAsmNL	= 1024,
    CLGRTAsmNLE	= 1025,
    CLGRTAsmNLH	= 1026,
    CLGT	= 1027,
    CLGTAsm	= 1028,
    CLGTAsmE	= 1029,
    CLGTAsmH	= 1030,
    CLGTAsmHE	= 1031,
    CLGTAsmL	= 1032,
    CLGTAsmLE	= 1033,
    CLGTAsmLH	= 1034,
    CLGTAsmNE	= 1035,
    CLGTAsmNH	= 1036,
    CLGTAsmNHE	= 1037,
    CLGTAsmNL	= 1038,
    CLGTAsmNLE	= 1039,
    CLGTAsmNLH	= 1040,
    CLGXBR	= 1041,
    CLGXTR	= 1042,
    CLHF	= 1043,
    CLHHR	= 1044,
    CLHHSI	= 1045,
    CLHLR	= 1046,
    CLHRL	= 1047,
    CLI	= 1048,
    CLIB	= 1049,
    CLIBAsm	= 1050,
    CLIBAsmE	= 1051,
    CLIBAsmH	= 1052,
    CLIBAsmHE	= 1053,
    CLIBAsmL	= 1054,
    CLIBAsmLE	= 1055,
    CLIBAsmLH	= 1056,
    CLIBAsmNE	= 1057,
    CLIBAsmNH	= 1058,
    CLIBAsmNHE	= 1059,
    CLIBAsmNL	= 1060,
    CLIBAsmNLE	= 1061,
    CLIBAsmNLH	= 1062,
    CLIH	= 1063,
    CLIJ	= 1064,
    CLIJAsm	= 1065,
    CLIJAsmE	= 1066,
    CLIJAsmH	= 1067,
    CLIJAsmHE	= 1068,
    CLIJAsmL	= 1069,
    CLIJAsmLE	= 1070,
    CLIJAsmLH	= 1071,
    CLIJAsmNE	= 1072,
    CLIJAsmNH	= 1073,
    CLIJAsmNHE	= 1074,
    CLIJAsmNL	= 1075,
    CLIJAsmNLE	= 1076,
    CLIJAsmNLH	= 1077,
    CLIY	= 1078,
    CLM	= 1079,
    CLMH	= 1080,
    CLMY	= 1081,
    CLR	= 1082,
    CLRB	= 1083,
    CLRBAsm	= 1084,
    CLRBAsmE	= 1085,
    CLRBAsmH	= 1086,
    CLRBAsmHE	= 1087,
    CLRBAsmL	= 1088,
    CLRBAsmLE	= 1089,
    CLRBAsmLH	= 1090,
    CLRBAsmNE	= 1091,
    CLRBAsmNH	= 1092,
    CLRBAsmNHE	= 1093,
    CLRBAsmNL	= 1094,
    CLRBAsmNLE	= 1095,
    CLRBAsmNLH	= 1096,
    CLRJ	= 1097,
    CLRJAsm	= 1098,
    CLRJAsmE	= 1099,
    CLRJAsmH	= 1100,
    CLRJAsmHE	= 1101,
    CLRJAsmL	= 1102,
    CLRJAsmLE	= 1103,
    CLRJAsmLH	= 1104,
    CLRJAsmNE	= 1105,
    CLRJAsmNH	= 1106,
    CLRJAsmNHE	= 1107,
    CLRJAsmNL	= 1108,
    CLRJAsmNLE	= 1109,
    CLRJAsmNLH	= 1110,
    CLRL	= 1111,
    CLRT	= 1112,
    CLRTAsm	= 1113,
    CLRTAsmE	= 1114,
    CLRTAsmH	= 1115,
    CLRTAsmHE	= 1116,
    CLRTAsmL	= 1117,
    CLRTAsmLE	= 1118,
    CLRTAsmLH	= 1119,
    CLRTAsmNE	= 1120,
    CLRTAsmNH	= 1121,
    CLRTAsmNHE	= 1122,
    CLRTAsmNL	= 1123,
    CLRTAsmNLE	= 1124,
    CLRTAsmNLH	= 1125,
    CLST	= 1126,
    CLT	= 1127,
    CLTAsm	= 1128,
    CLTAsmE	= 1129,
    CLTAsmH	= 1130,
    CLTAsmHE	= 1131,
    CLTAsmL	= 1132,
    CLTAsmLE	= 1133,
    CLTAsmLH	= 1134,
    CLTAsmNE	= 1135,
    CLTAsmNH	= 1136,
    CLTAsmNHE	= 1137,
    CLTAsmNL	= 1138,
    CLTAsmNLE	= 1139,
    CLTAsmNLH	= 1140,
    CLY	= 1141,
    CMPSC	= 1142,
    CP	= 1143,
    CPDT	= 1144,
    CPSDRdd	= 1145,
    CPSDRds	= 1146,
    CPSDRsd	= 1147,
    CPSDRss	= 1148,
    CPXT	= 1149,
    CPYA	= 1150,
    CR	= 1151,
    CRB	= 1152,
    CRBAsm	= 1153,
    CRBAsmE	= 1154,
    CRBAsmH	= 1155,
    CRBAsmHE	= 1156,
    CRBAsmL	= 1157,
    CRBAsmLE	= 1158,
    CRBAsmLH	= 1159,
    CRBAsmNE	= 1160,
    CRBAsmNH	= 1161,
    CRBAsmNHE	= 1162,
    CRBAsmNL	= 1163,
    CRBAsmNLE	= 1164,
    CRBAsmNLH	= 1165,
    CRDTE	= 1166,
    CRDTEOpt	= 1167,
    CRJ	= 1168,
    CRJAsm	= 1169,
    CRJAsmE	= 1170,
    CRJAsmH	= 1171,
    CRJAsmHE	= 1172,
    CRJAsmL	= 1173,
    CRJAsmLE	= 1174,
    CRJAsmLH	= 1175,
    CRJAsmNE	= 1176,
    CRJAsmNH	= 1177,
    CRJAsmNHE	= 1178,
    CRJAsmNL	= 1179,
    CRJAsmNLE	= 1180,
    CRJAsmNLH	= 1181,
    CRL	= 1182,
    CRT	= 1183,
    CRTAsm	= 1184,
    CRTAsmE	= 1185,
    CRTAsmH	= 1186,
    CRTAsmHE	= 1187,
    CRTAsmL	= 1188,
    CRTAsmLE	= 1189,
    CRTAsmLH	= 1190,
    CRTAsmNE	= 1191,
    CRTAsmNH	= 1192,
    CRTAsmNHE	= 1193,
    CRTAsmNL	= 1194,
    CRTAsmNLE	= 1195,
    CRTAsmNLH	= 1196,
    CS	= 1197,
    CSCH	= 1198,
    CSDTR	= 1199,
    CSG	= 1200,
    CSP	= 1201,
    CSPG	= 1202,
    CSST	= 1203,
    CSXTR	= 1204,
    CSY	= 1205,
    CU12	= 1206,
    CU12Opt	= 1207,
    CU14	= 1208,
    CU14Opt	= 1209,
    CU21	= 1210,
    CU21Opt	= 1211,
    CU24	= 1212,
    CU24Opt	= 1213,
    CU41	= 1214,
    CU42	= 1215,
    CUDTR	= 1216,
    CUSE	= 1217,
    CUTFU	= 1218,
    CUTFUOpt	= 1219,
    CUUTF	= 1220,
    CUUTFOpt	= 1221,
    CUXTR	= 1222,
    CVB	= 1223,
    CVBG	= 1224,
    CVBY	= 1225,
    CVD	= 1226,
    CVDG	= 1227,
    CVDY	= 1228,
    CXBR	= 1229,
    CXFBR	= 1230,
    CXFBRA	= 1231,
    CXFR	= 1232,
    CXFTR	= 1233,
    CXGBR	= 1234,
    CXGBRA	= 1235,
    CXGR	= 1236,
    CXGTR	= 1237,
    CXGTRA	= 1238,
    CXLFBR	= 1239,
    CXLFTR	= 1240,
    CXLGBR	= 1241,
    CXLGTR	= 1242,
    CXPT	= 1243,
    CXR	= 1244,
    CXSTR	= 1245,
    CXTR	= 1246,
    CXUTR	= 1247,
    CXZT	= 1248,
    CY	= 1249,
    CZDT	= 1250,
    CZXT	= 1251,
    D	= 1252,
    DD	= 1253,
    DDB	= 1254,
    DDBR	= 1255,
    DDR	= 1256,
    DDTR	= 1257,
    DDTRA	= 1258,
    DE	= 1259,
    DEB	= 1260,
    DEBR	= 1261,
    DER	= 1262,
    DFLTCC	= 1263,
    DIAG	= 1264,
    DIDBR	= 1265,
    DIEBR	= 1266,
    DL	= 1267,
    DLG	= 1268,
    DLGR	= 1269,
    DLR	= 1270,
    DP	= 1271,
    DR	= 1272,
    DSG	= 1273,
    DSGF	= 1274,
    DSGFR	= 1275,
    DSGR	= 1276,
    DXBR	= 1277,
    DXR	= 1278,
    DXTR	= 1279,
    DXTRA	= 1280,
    EAR	= 1281,
    ECAG	= 1282,
    ECCTR	= 1283,
    ECPGA	= 1284,
    ECTG	= 1285,
    ED	= 1286,
    EDMK	= 1287,
    EEDTR	= 1288,
    EEXTR	= 1289,
    EFPC	= 1290,
    EPAIR	= 1291,
    EPAR	= 1292,
    EPCTR	= 1293,
    EPSW	= 1294,
    EREG	= 1295,
    EREGG	= 1296,
    ESAIR	= 1297,
    ESAR	= 1298,
    ESDTR	= 1299,
    ESEA	= 1300,
    ESTA	= 1301,
    ESXTR	= 1302,
    ETND	= 1303,
    EX	= 1304,
    EXRL	= 1305,
    FIDBR	= 1306,
    FIDBRA	= 1307,
    FIDR	= 1308,
    FIDTR	= 1309,
    FIEBR	= 1310,
    FIEBRA	= 1311,
    FIER	= 1312,
    FIXBR	= 1313,
    FIXBRA	= 1314,
    FIXR	= 1315,
    FIXTR	= 1316,
    FLOGR	= 1317,
    HDR	= 1318,
    HER	= 1319,
    HSCH	= 1320,
    IAC	= 1321,
    IC	= 1322,
    IC32	= 1323,
    IC32Y	= 1324,
    ICM	= 1325,
    ICMH	= 1326,
    ICMY	= 1327,
    ICY	= 1328,
    IDTE	= 1329,
    IDTEOpt	= 1330,
    IEDTR	= 1331,
    IEXTR	= 1332,
    IIHF	= 1333,
    IIHH	= 1334,
    IIHL	= 1335,
    IILF	= 1336,
    IILH	= 1337,
    IILL	= 1338,
    IPK	= 1339,
    IPM	= 1340,
    IPTE	= 1341,
    IPTEOpt	= 1342,
    IPTEOptOpt	= 1343,
    IRBM	= 1344,
    ISKE	= 1345,
    IVSK	= 1346,
    InsnE	= 1347,
    InsnRI	= 1348,
    InsnRIE	= 1349,
    InsnRIL	= 1350,
    InsnRILU	= 1351,
    InsnRIS	= 1352,
    InsnRR	= 1353,
    InsnRRE	= 1354,
    InsnRRF	= 1355,
    InsnRRS	= 1356,
    InsnRS	= 1357,
    InsnRSE	= 1358,
    InsnRSI	= 1359,
    InsnRSY	= 1360,
    InsnRX	= 1361,
    InsnRXE	= 1362,
    InsnRXF	= 1363,
    InsnRXY	= 1364,
    InsnS	= 1365,
    InsnSI	= 1366,
    InsnSIL	= 1367,
    InsnSIY	= 1368,
    InsnSS	= 1369,
    InsnSSE	= 1370,
    InsnSSF	= 1371,
    InsnVRI	= 1372,
    InsnVRR	= 1373,
    InsnVRS	= 1374,
    InsnVRV	= 1375,
    InsnVRX	= 1376,
    InsnVSI	= 1377,
    J	= 1378,
    JAsmE	= 1379,
    JAsmH	= 1380,
    JAsmHE	= 1381,
    JAsmL	= 1382,
    JAsmLE	= 1383,
    JAsmLH	= 1384,
    JAsmM	= 1385,
    JAsmNE	= 1386,
    JAsmNH	= 1387,
    JAsmNHE	= 1388,
    JAsmNL	= 1389,
    JAsmNLE	= 1390,
    JAsmNLH	= 1391,
    JAsmNM	= 1392,
    JAsmNO	= 1393,
    JAsmNP	= 1394,
    JAsmNZ	= 1395,
    JAsmO	= 1396,
    JAsmP	= 1397,
    JAsmZ	= 1398,
    JG	= 1399,
    JGAsmE	= 1400,
    JGAsmH	= 1401,
    JGAsmHE	= 1402,
    JGAsmL	= 1403,
    JGAsmLE	= 1404,
    JGAsmLH	= 1405,
    JGAsmM	= 1406,
    JGAsmNE	= 1407,
    JGAsmNH	= 1408,
    JGAsmNHE	= 1409,
    JGAsmNL	= 1410,
    JGAsmNLE	= 1411,
    JGAsmNLH	= 1412,
    JGAsmNM	= 1413,
    JGAsmNO	= 1414,
    JGAsmNP	= 1415,
    JGAsmNZ	= 1416,
    JGAsmO	= 1417,
    JGAsmP	= 1418,
    JGAsmZ	= 1419,
    KDB	= 1420,
    KDBR	= 1421,
    KDSA	= 1422,
    KDTR	= 1423,
    KEB	= 1424,
    KEBR	= 1425,
    KIMD	= 1426,
    KLMD	= 1427,
    KM	= 1428,
    KMA	= 1429,
    KMAC	= 1430,
    KMC	= 1431,
    KMCTR	= 1432,
    KMF	= 1433,
    KMO	= 1434,
    KXBR	= 1435,
    KXTR	= 1436,
    L	= 1437,
    LA	= 1438,
    LAA	= 1439,
    LAAG	= 1440,
    LAAL	= 1441,
    LAALG	= 1442,
    LAE	= 1443,
    LAEY	= 1444,
    LAM	= 1445,
    LAMY	= 1446,
    LAN	= 1447,
    LANG	= 1448,
    LAO	= 1449,
    LAOG	= 1450,
    LARL	= 1451,
    LASP	= 1452,
    LAT	= 1453,
    LAX	= 1454,
    LAXG	= 1455,
    LAY	= 1456,
    LB	= 1457,
    LBEAR	= 1458,
    LBH	= 1459,
    LBR	= 1460,
    LCBB	= 1461,
    LCCTL	= 1462,
    LCDBR	= 1463,
    LCDFR	= 1464,
    LCDFR_32	= 1465,
    LCDR	= 1466,
    LCEBR	= 1467,
    LCER	= 1468,
    LCGFR	= 1469,
    LCGR	= 1470,
    LCR	= 1471,
    LCTL	= 1472,
    LCTLG	= 1473,
    LCXBR	= 1474,
    LCXR	= 1475,
    LD	= 1476,
    LDE	= 1477,
    LDE32	= 1478,
    LDEB	= 1479,
    LDEBR	= 1480,
    LDER	= 1481,
    LDETR	= 1482,
    LDGR	= 1483,
    LDR	= 1484,
    LDR32	= 1485,
    LDXBR	= 1486,
    LDXBRA	= 1487,
    LDXR	= 1488,
    LDXTR	= 1489,
    LDY	= 1490,
    LE	= 1491,
    LEDBR	= 1492,
    LEDBRA	= 1493,
    LEDR	= 1494,
    LEDTR	= 1495,
    LER	= 1496,
    LEXBR	= 1497,
    LEXBRA	= 1498,
    LEXR	= 1499,
    LEY	= 1500,
    LFAS	= 1501,
    LFH	= 1502,
    LFHAT	= 1503,
    LFPC	= 1504,
    LG	= 1505,
    LGAT	= 1506,
    LGB	= 1507,
    LGBR	= 1508,
    LGDR	= 1509,
    LGF	= 1510,
    LGFI	= 1511,
    LGFR	= 1512,
    LGFRL	= 1513,
    LGG	= 1514,
    LGH	= 1515,
    LGHI	= 1516,
    LGHR	= 1517,
    LGHRL	= 1518,
    LGR	= 1519,
    LGRL	= 1520,
    LGSC	= 1521,
    LH	= 1522,
    LHH	= 1523,
    LHI	= 1524,
    LHR	= 1525,
    LHRL	= 1526,
    LHY	= 1527,
    LLC	= 1528,
    LLCH	= 1529,
    LLCR	= 1530,
    LLGC	= 1531,
    LLGCR	= 1532,
    LLGF	= 1533,
    LLGFAT	= 1534,
    LLGFR	= 1535,
    LLGFRL	= 1536,
    LLGFSG	= 1537,
    LLGH	= 1538,
    LLGHR	= 1539,
    LLGHRL	= 1540,
    LLGT	= 1541,
    LLGTAT	= 1542,
    LLGTR	= 1543,
    LLH	= 1544,
    LLHH	= 1545,
    LLHR	= 1546,
    LLHRL	= 1547,
    LLIHF	= 1548,
    LLIHH	= 1549,
    LLIHL	= 1550,
    LLILF	= 1551,
    LLILH	= 1552,
    LLILL	= 1553,
    LLZRGF	= 1554,
    LM	= 1555,
    LMD	= 1556,
    LMG	= 1557,
    LMH	= 1558,
    LMY	= 1559,
    LNDBR	= 1560,
    LNDFR	= 1561,
    LNDFR_32	= 1562,
    LNDR	= 1563,
    LNEBR	= 1564,
    LNER	= 1565,
    LNGFR	= 1566,
    LNGR	= 1567,
    LNR	= 1568,
    LNXBR	= 1569,
    LNXR	= 1570,
    LOC	= 1571,
    LOCAsm	= 1572,
    LOCAsmE	= 1573,
    LOCAsmH	= 1574,
    LOCAsmHE	= 1575,
    LOCAsmL	= 1576,
    LOCAsmLE	= 1577,
    LOCAsmLH	= 1578,
    LOCAsmM	= 1579,
    LOCAsmNE	= 1580,
    LOCAsmNH	= 1581,
    LOCAsmNHE	= 1582,
    LOCAsmNL	= 1583,
    LOCAsmNLE	= 1584,
    LOCAsmNLH	= 1585,
    LOCAsmNM	= 1586,
    LOCAsmNO	= 1587,
    LOCAsmNP	= 1588,
    LOCAsmNZ	= 1589,
    LOCAsmO	= 1590,
    LOCAsmP	= 1591,
    LOCAsmZ	= 1592,
    LOCFH	= 1593,
    LOCFHAsm	= 1594,
    LOCFHAsmE	= 1595,
    LOCFHAsmH	= 1596,
    LOCFHAsmHE	= 1597,
    LOCFHAsmL	= 1598,
    LOCFHAsmLE	= 1599,
    LOCFHAsmLH	= 1600,
    LOCFHAsmM	= 1601,
    LOCFHAsmNE	= 1602,
    LOCFHAsmNH	= 1603,
    LOCFHAsmNHE	= 1604,
    LOCFHAsmNL	= 1605,
    LOCFHAsmNLE	= 1606,
    LOCFHAsmNLH	= 1607,
    LOCFHAsmNM	= 1608,
    LOCFHAsmNO	= 1609,
    LOCFHAsmNP	= 1610,
    LOCFHAsmNZ	= 1611,
    LOCFHAsmO	= 1612,
    LOCFHAsmP	= 1613,
    LOCFHAsmZ	= 1614,
    LOCFHR	= 1615,
    LOCFHRAsm	= 1616,
    LOCFHRAsmE	= 1617,
    LOCFHRAsmH	= 1618,
    LOCFHRAsmHE	= 1619,
    LOCFHRAsmL	= 1620,
    LOCFHRAsmLE	= 1621,
    LOCFHRAsmLH	= 1622,
    LOCFHRAsmM	= 1623,
    LOCFHRAsmNE	= 1624,
    LOCFHRAsmNH	= 1625,
    LOCFHRAsmNHE	= 1626,
    LOCFHRAsmNL	= 1627,
    LOCFHRAsmNLE	= 1628,
    LOCFHRAsmNLH	= 1629,
    LOCFHRAsmNM	= 1630,
    LOCFHRAsmNO	= 1631,
    LOCFHRAsmNP	= 1632,
    LOCFHRAsmNZ	= 1633,
    LOCFHRAsmO	= 1634,
    LOCFHRAsmP	= 1635,
    LOCFHRAsmZ	= 1636,
    LOCG	= 1637,
    LOCGAsm	= 1638,
    LOCGAsmE	= 1639,
    LOCGAsmH	= 1640,
    LOCGAsmHE	= 1641,
    LOCGAsmL	= 1642,
    LOCGAsmLE	= 1643,
    LOCGAsmLH	= 1644,
    LOCGAsmM	= 1645,
    LOCGAsmNE	= 1646,
    LOCGAsmNH	= 1647,
    LOCGAsmNHE	= 1648,
    LOCGAsmNL	= 1649,
    LOCGAsmNLE	= 1650,
    LOCGAsmNLH	= 1651,
    LOCGAsmNM	= 1652,
    LOCGAsmNO	= 1653,
    LOCGAsmNP	= 1654,
    LOCGAsmNZ	= 1655,
    LOCGAsmO	= 1656,
    LOCGAsmP	= 1657,
    LOCGAsmZ	= 1658,
    LOCGHI	= 1659,
    LOCGHIAsm	= 1660,
    LOCGHIAsmE	= 1661,
    LOCGHIAsmH	= 1662,
    LOCGHIAsmHE	= 1663,
    LOCGHIAsmL	= 1664,
    LOCGHIAsmLE	= 1665,
    LOCGHIAsmLH	= 1666,
    LOCGHIAsmM	= 1667,
    LOCGHIAsmNE	= 1668,
    LOCGHIAsmNH	= 1669,
    LOCGHIAsmNHE	= 1670,
    LOCGHIAsmNL	= 1671,
    LOCGHIAsmNLE	= 1672,
    LOCGHIAsmNLH	= 1673,
    LOCGHIAsmNM	= 1674,
    LOCGHIAsmNO	= 1675,
    LOCGHIAsmNP	= 1676,
    LOCGHIAsmNZ	= 1677,
    LOCGHIAsmO	= 1678,
    LOCGHIAsmP	= 1679,
    LOCGHIAsmZ	= 1680,
    LOCGR	= 1681,
    LOCGRAsm	= 1682,
    LOCGRAsmE	= 1683,
    LOCGRAsmH	= 1684,
    LOCGRAsmHE	= 1685,
    LOCGRAsmL	= 1686,
    LOCGRAsmLE	= 1687,
    LOCGRAsmLH	= 1688,
    LOCGRAsmM	= 1689,
    LOCGRAsmNE	= 1690,
    LOCGRAsmNH	= 1691,
    LOCGRAsmNHE	= 1692,
    LOCGRAsmNL	= 1693,
    LOCGRAsmNLE	= 1694,
    LOCGRAsmNLH	= 1695,
    LOCGRAsmNM	= 1696,
    LOCGRAsmNO	= 1697,
    LOCGRAsmNP	= 1698,
    LOCGRAsmNZ	= 1699,
    LOCGRAsmO	= 1700,
    LOCGRAsmP	= 1701,
    LOCGRAsmZ	= 1702,
    LOCHHI	= 1703,
    LOCHHIAsm	= 1704,
    LOCHHIAsmE	= 1705,
    LOCHHIAsmH	= 1706,
    LOCHHIAsmHE	= 1707,
    LOCHHIAsmL	= 1708,
    LOCHHIAsmLE	= 1709,
    LOCHHIAsmLH	= 1710,
    LOCHHIAsmM	= 1711,
    LOCHHIAsmNE	= 1712,
    LOCHHIAsmNH	= 1713,
    LOCHHIAsmNHE	= 1714,
    LOCHHIAsmNL	= 1715,
    LOCHHIAsmNLE	= 1716,
    LOCHHIAsmNLH	= 1717,
    LOCHHIAsmNM	= 1718,
    LOCHHIAsmNO	= 1719,
    LOCHHIAsmNP	= 1720,
    LOCHHIAsmNZ	= 1721,
    LOCHHIAsmO	= 1722,
    LOCHHIAsmP	= 1723,
    LOCHHIAsmZ	= 1724,
    LOCHI	= 1725,
    LOCHIAsm	= 1726,
    LOCHIAsmE	= 1727,
    LOCHIAsmH	= 1728,
    LOCHIAsmHE	= 1729,
    LOCHIAsmL	= 1730,
    LOCHIAsmLE	= 1731,
    LOCHIAsmLH	= 1732,
    LOCHIAsmM	= 1733,
    LOCHIAsmNE	= 1734,
    LOCHIAsmNH	= 1735,
    LOCHIAsmNHE	= 1736,
    LOCHIAsmNL	= 1737,
    LOCHIAsmNLE	= 1738,
    LOCHIAsmNLH	= 1739,
    LOCHIAsmNM	= 1740,
    LOCHIAsmNO	= 1741,
    LOCHIAsmNP	= 1742,
    LOCHIAsmNZ	= 1743,
    LOCHIAsmO	= 1744,
    LOCHIAsmP	= 1745,
    LOCHIAsmZ	= 1746,
    LOCR	= 1747,
    LOCRAsm	= 1748,
    LOCRAsmE	= 1749,
    LOCRAsmH	= 1750,
    LOCRAsmHE	= 1751,
    LOCRAsmL	= 1752,
    LOCRAsmLE	= 1753,
    LOCRAsmLH	= 1754,
    LOCRAsmM	= 1755,
    LOCRAsmNE	= 1756,
    LOCRAsmNH	= 1757,
    LOCRAsmNHE	= 1758,
    LOCRAsmNL	= 1759,
    LOCRAsmNLE	= 1760,
    LOCRAsmNLH	= 1761,
    LOCRAsmNM	= 1762,
    LOCRAsmNO	= 1763,
    LOCRAsmNP	= 1764,
    LOCRAsmNZ	= 1765,
    LOCRAsmO	= 1766,
    LOCRAsmP	= 1767,
    LOCRAsmZ	= 1768,
    LPCTL	= 1769,
    LPD	= 1770,
    LPDBR	= 1771,
    LPDFR	= 1772,
    LPDFR_32	= 1773,
    LPDG	= 1774,
    LPDR	= 1775,
    LPEBR	= 1776,
    LPER	= 1777,
    LPGFR	= 1778,
    LPGR	= 1779,
    LPP	= 1780,
    LPQ	= 1781,
    LPR	= 1782,
    LPSW	= 1783,
    LPSWE	= 1784,
    LPSWEY	= 1785,
    LPTEA	= 1786,
    LPXBR	= 1787,
    LPXR	= 1788,
    LR	= 1789,
    LRA	= 1790,
    LRAG	= 1791,
    LRAY	= 1792,
    LRDR	= 1793,
    LRER	= 1794,
    LRL	= 1795,
    LRV	= 1796,
    LRVG	= 1797,
    LRVGR	= 1798,
    LRVH	= 1799,
    LRVR	= 1800,
    LSCTL	= 1801,
    LT	= 1802,
    LTDBR	= 1803,
    LTDBRCompare	= 1804,
    LTDR	= 1805,
    LTDTR	= 1806,
    LTEBR	= 1807,
    LTEBRCompare	= 1808,
    LTER	= 1809,
    LTG	= 1810,
    LTGF	= 1811,
    LTGFR	= 1812,
    LTGR	= 1813,
    LTR	= 1814,
    LTXBR	= 1815,
    LTXBRCompare	= 1816,
    LTXR	= 1817,
    LTXTR	= 1818,
    LURA	= 1819,
    LURAG	= 1820,
    LXD	= 1821,
    LXDB	= 1822,
    LXDBR	= 1823,
    LXDR	= 1824,
    LXDTR	= 1825,
    LXE	= 1826,
    LXEB	= 1827,
    LXEBR	= 1828,
    LXER	= 1829,
    LXR	= 1830,
    LY	= 1831,
    LZDR	= 1832,
    LZER	= 1833,
    LZRF	= 1834,
    LZRG	= 1835,
    LZXR	= 1836,
    M	= 1837,
    MAD	= 1838,
    MADB	= 1839,
    MADBR	= 1840,
    MADR	= 1841,
    MAE	= 1842,
    MAEB	= 1843,
    MAEBR	= 1844,
    MAER	= 1845,
    MAY	= 1846,
    MAYH	= 1847,
    MAYHR	= 1848,
    MAYL	= 1849,
    MAYLR	= 1850,
    MAYR	= 1851,
    MC	= 1852,
    MD	= 1853,
    MDB	= 1854,
    MDBR	= 1855,
    MDE	= 1856,
    MDEB	= 1857,
    MDEBR	= 1858,
    MDER	= 1859,
    MDR	= 1860,
    MDTR	= 1861,
    MDTRA	= 1862,
    ME	= 1863,
    MEE	= 1864,
    MEEB	= 1865,
    MEEBR	= 1866,
    MEER	= 1867,
    MER	= 1868,
    MFY	= 1869,
    MG	= 1870,
    MGH	= 1871,
    MGHI	= 1872,
    MGRK	= 1873,
    MH	= 1874,
    MHI	= 1875,
    MHY	= 1876,
    ML	= 1877,
    MLG	= 1878,
    MLGR	= 1879,
    MLR	= 1880,
    MP	= 1881,
    MR	= 1882,
    MS	= 1883,
    MSC	= 1884,
    MSCH	= 1885,
    MSD	= 1886,
    MSDB	= 1887,
    MSDBR	= 1888,
    MSDR	= 1889,
    MSE	= 1890,
    MSEB	= 1891,
    MSEBR	= 1892,
    MSER	= 1893,
    MSFI	= 1894,
    MSG	= 1895,
    MSGC	= 1896,
    MSGF	= 1897,
    MSGFI	= 1898,
    MSGFR	= 1899,
    MSGR	= 1900,
    MSGRKC	= 1901,
    MSR	= 1902,
    MSRKC	= 1903,
    MSTA	= 1904,
    MSY	= 1905,
    MVC	= 1906,
    MVCDK	= 1907,
    MVCIN	= 1908,
    MVCK	= 1909,
    MVCL	= 1910,
    MVCLE	= 1911,
    MVCLU	= 1912,
    MVCOS	= 1913,
    MVCP	= 1914,
    MVCRL	= 1915,
    MVCS	= 1916,
    MVCSK	= 1917,
    MVGHI	= 1918,
    MVHHI	= 1919,
    MVHI	= 1920,
    MVI	= 1921,
    MVIY	= 1922,
    MVN	= 1923,
    MVO	= 1924,
    MVPG	= 1925,
    MVST	= 1926,
    MVZ	= 1927,
    MXBR	= 1928,
    MXD	= 1929,
    MXDB	= 1930,
    MXDBR	= 1931,
    MXDR	= 1932,
    MXR	= 1933,
    MXTR	= 1934,
    MXTRA	= 1935,
    MY	= 1936,
    MYH	= 1937,
    MYHR	= 1938,
    MYL	= 1939,
    MYLR	= 1940,
    MYR	= 1941,
    N	= 1942,
    NC	= 1943,
    NCGRK	= 1944,
    NCRK	= 1945,
    NG	= 1946,
    NGR	= 1947,
    NGRK	= 1948,
    NI	= 1949,
    NIAI	= 1950,
    NIHF	= 1951,
    NIHH	= 1952,
    NIHL	= 1953,
    NILF	= 1954,
    NILH	= 1955,
    NILL	= 1956,
    NIY	= 1957,
    NNGRK	= 1958,
    NNPA	= 1959,
    NNRK	= 1960,
    NOGRK	= 1961,
    NOP_bare	= 1962,
    NORK	= 1963,
    NR	= 1964,
    NRK	= 1965,
    NTSTG	= 1966,
    NXGRK	= 1967,
    NXRK	= 1968,
    NY	= 1969,
    O	= 1970,
    OC	= 1971,
    OCGRK	= 1972,
    OCRK	= 1973,
    OG	= 1974,
    OGR	= 1975,
    OGRK	= 1976,
    OI	= 1977,
    OIHF	= 1978,
    OIHH	= 1979,
    OIHL	= 1980,
    OILF	= 1981,
    OILH	= 1982,
    OILL	= 1983,
    OIY	= 1984,
    OR	= 1985,
    ORK	= 1986,
    OY	= 1987,
    PACK	= 1988,
    PALB	= 1989,
    PC	= 1990,
    PCC	= 1991,
    PCKMO	= 1992,
    PFD	= 1993,
    PFDRL	= 1994,
    PFMF	= 1995,
    PFPO	= 1996,
    PGIN	= 1997,
    PGOUT	= 1998,
    PKA	= 1999,
    PKU	= 2000,
    PLO	= 2001,
    POPCNT	= 2002,
    POPCNTOpt	= 2003,
    PPA	= 2004,
    PPNO	= 2005,
    PR	= 2006,
    PRNO	= 2007,
    PT	= 2008,
    PTF	= 2009,
    PTFF	= 2010,
    PTI	= 2011,
    PTLB	= 2012,
    QADTR	= 2013,
    QAXTR	= 2014,
    QCTRI	= 2015,
    QPACI	= 2016,
    QSI	= 2017,
    RCHP	= 2018,
    RDP	= 2019,
    RDPOpt	= 2020,
    RISBG	= 2021,
    RISBG32	= 2022,
    RISBGN	= 2023,
    RISBHG	= 2024,
    RISBLG	= 2025,
    RLL	= 2026,
    RLLG	= 2027,
    RNSBG	= 2028,
    ROSBG	= 2029,
    RP	= 2030,
    RRBE	= 2031,
    RRBM	= 2032,
    RRDTR	= 2033,
    RRXTR	= 2034,
    RSCH	= 2035,
    RXSBG	= 2036,
    S	= 2037,
    SAC	= 2038,
    SACF	= 2039,
    SAL	= 2040,
    SAM24	= 2041,
    SAM31	= 2042,
    SAM64	= 2043,
    SAR	= 2044,
    SCCTR	= 2045,
    SCHM	= 2046,
    SCK	= 2047,
    SCKC	= 2048,
    SCKPF	= 2049,
    SD	= 2050,
    SDB	= 2051,
    SDBR	= 2052,
    SDR	= 2053,
    SDTR	= 2054,
    SDTRA	= 2055,
    SE	= 2056,
    SEB	= 2057,
    SEBR	= 2058,
    SELFHR	= 2059,
    SELFHRAsm	= 2060,
    SELFHRAsmE	= 2061,
    SELFHRAsmH	= 2062,
    SELFHRAsmHE	= 2063,
    SELFHRAsmL	= 2064,
    SELFHRAsmLE	= 2065,
    SELFHRAsmLH	= 2066,
    SELFHRAsmM	= 2067,
    SELFHRAsmNE	= 2068,
    SELFHRAsmNH	= 2069,
    SELFHRAsmNHE	= 2070,
    SELFHRAsmNL	= 2071,
    SELFHRAsmNLE	= 2072,
    SELFHRAsmNLH	= 2073,
    SELFHRAsmNM	= 2074,
    SELFHRAsmNO	= 2075,
    SELFHRAsmNP	= 2076,
    SELFHRAsmNZ	= 2077,
    SELFHRAsmO	= 2078,
    SELFHRAsmP	= 2079,
    SELFHRAsmZ	= 2080,
    SELGR	= 2081,
    SELGRAsm	= 2082,
    SELGRAsmE	= 2083,
    SELGRAsmH	= 2084,
    SELGRAsmHE	= 2085,
    SELGRAsmL	= 2086,
    SELGRAsmLE	= 2087,
    SELGRAsmLH	= 2088,
    SELGRAsmM	= 2089,
    SELGRAsmNE	= 2090,
    SELGRAsmNH	= 2091,
    SELGRAsmNHE	= 2092,
    SELGRAsmNL	= 2093,
    SELGRAsmNLE	= 2094,
    SELGRAsmNLH	= 2095,
    SELGRAsmNM	= 2096,
    SELGRAsmNO	= 2097,
    SELGRAsmNP	= 2098,
    SELGRAsmNZ	= 2099,
    SELGRAsmO	= 2100,
    SELGRAsmP	= 2101,
    SELGRAsmZ	= 2102,
    SELR	= 2103,
    SELRAsm	= 2104,
    SELRAsmE	= 2105,
    SELRAsmH	= 2106,
    SELRAsmHE	= 2107,
    SELRAsmL	= 2108,
    SELRAsmLE	= 2109,
    SELRAsmLH	= 2110,
    SELRAsmM	= 2111,
    SELRAsmNE	= 2112,
    SELRAsmNH	= 2113,
    SELRAsmNHE	= 2114,
    SELRAsmNL	= 2115,
    SELRAsmNLE	= 2116,
    SELRAsmNLH	= 2117,
    SELRAsmNM	= 2118,
    SELRAsmNO	= 2119,
    SELRAsmNP	= 2120,
    SELRAsmNZ	= 2121,
    SELRAsmO	= 2122,
    SELRAsmP	= 2123,
    SELRAsmZ	= 2124,
    SER	= 2125,
    SFASR	= 2126,
    SFPC	= 2127,
    SG	= 2128,
    SGF	= 2129,
    SGFR	= 2130,
    SGH	= 2131,
    SGR	= 2132,
    SGRK	= 2133,
    SH	= 2134,
    SHHHR	= 2135,
    SHHLR	= 2136,
    SHY	= 2137,
    SIE	= 2138,
    SIGA	= 2139,
    SIGP	= 2140,
    SL	= 2141,
    SLA	= 2142,
    SLAG	= 2143,
    SLAK	= 2144,
    SLB	= 2145,
    SLBG	= 2146,
    SLBGR	= 2147,
    SLBR	= 2148,
    SLDA	= 2149,
    SLDL	= 2150,
    SLDT	= 2151,
    SLFI	= 2152,
    SLG	= 2153,
    SLGF	= 2154,
    SLGFI	= 2155,
    SLGFR	= 2156,
    SLGR	= 2157,
    SLGRK	= 2158,
    SLHHHR	= 2159,
    SLHHLR	= 2160,
    SLL	= 2161,
    SLLG	= 2162,
    SLLK	= 2163,
    SLR	= 2164,
    SLRK	= 2165,
    SLXT	= 2166,
    SLY	= 2167,
    SORTL	= 2168,
    SP	= 2169,
    SPCTR	= 2170,
    SPKA	= 2171,
    SPM	= 2172,
    SPT	= 2173,
    SPX	= 2174,
    SQD	= 2175,
    SQDB	= 2176,
    SQDBR	= 2177,
    SQDR	= 2178,
    SQE	= 2179,
    SQEB	= 2180,
    SQEBR	= 2181,
    SQER	= 2182,
    SQXBR	= 2183,
    SQXR	= 2184,
    SR	= 2185,
    SRA	= 2186,
    SRAG	= 2187,
    SRAK	= 2188,
    SRDA	= 2189,
    SRDL	= 2190,
    SRDT	= 2191,
    SRK	= 2192,
    SRL	= 2193,
    SRLG	= 2194,
    SRLK	= 2195,
    SRNM	= 2196,
    SRNMB	= 2197,
    SRNMT	= 2198,
    SRP	= 2199,
    SRST	= 2200,
    SRSTU	= 2201,
    SRXT	= 2202,
    SSAIR	= 2203,
    SSAR	= 2204,
    SSCH	= 2205,
    SSKE	= 2206,
    SSKEOpt	= 2207,
    SSM	= 2208,
    ST	= 2209,
    STAM	= 2210,
    STAMY	= 2211,
    STAP	= 2212,
    STBEAR	= 2213,
    STC	= 2214,
    STCH	= 2215,
    STCK	= 2216,
    STCKC	= 2217,
    STCKE	= 2218,
    STCKF	= 2219,
    STCM	= 2220,
    STCMH	= 2221,
    STCMY	= 2222,
    STCPS	= 2223,
    STCRW	= 2224,
    STCTG	= 2225,
    STCTL	= 2226,
    STCY	= 2227,
    STD	= 2228,
    STDY	= 2229,
    STE	= 2230,
    STEY	= 2231,
    STFH	= 2232,
    STFL	= 2233,
    STFLE	= 2234,
    STFPC	= 2235,
    STG	= 2236,
    STGRL	= 2237,
    STGSC	= 2238,
    STH	= 2239,
    STHH	= 2240,
    STHRL	= 2241,
    STHY	= 2242,
    STIDP	= 2243,
    STM	= 2244,
    STMG	= 2245,
    STMH	= 2246,
    STMY	= 2247,
    STNSM	= 2248,
    STOC	= 2249,
    STOCAsm	= 2250,
    STOCAsmE	= 2251,
    STOCAsmH	= 2252,
    STOCAsmHE	= 2253,
    STOCAsmL	= 2254,
    STOCAsmLE	= 2255,
    STOCAsmLH	= 2256,
    STOCAsmM	= 2257,
    STOCAsmNE	= 2258,
    STOCAsmNH	= 2259,
    STOCAsmNHE	= 2260,
    STOCAsmNL	= 2261,
    STOCAsmNLE	= 2262,
    STOCAsmNLH	= 2263,
    STOCAsmNM	= 2264,
    STOCAsmNO	= 2265,
    STOCAsmNP	= 2266,
    STOCAsmNZ	= 2267,
    STOCAsmO	= 2268,
    STOCAsmP	= 2269,
    STOCAsmZ	= 2270,
    STOCFH	= 2271,
    STOCFHAsm	= 2272,
    STOCFHAsmE	= 2273,
    STOCFHAsmH	= 2274,
    STOCFHAsmHE	= 2275,
    STOCFHAsmL	= 2276,
    STOCFHAsmLE	= 2277,
    STOCFHAsmLH	= 2278,
    STOCFHAsmM	= 2279,
    STOCFHAsmNE	= 2280,
    STOCFHAsmNH	= 2281,
    STOCFHAsmNHE	= 2282,
    STOCFHAsmNL	= 2283,
    STOCFHAsmNLE	= 2284,
    STOCFHAsmNLH	= 2285,
    STOCFHAsmNM	= 2286,
    STOCFHAsmNO	= 2287,
    STOCFHAsmNP	= 2288,
    STOCFHAsmNZ	= 2289,
    STOCFHAsmO	= 2290,
    STOCFHAsmP	= 2291,
    STOCFHAsmZ	= 2292,
    STOCG	= 2293,
    STOCGAsm	= 2294,
    STOCGAsmE	= 2295,
    STOCGAsmH	= 2296,
    STOCGAsmHE	= 2297,
    STOCGAsmL	= 2298,
    STOCGAsmLE	= 2299,
    STOCGAsmLH	= 2300,
    STOCGAsmM	= 2301,
    STOCGAsmNE	= 2302,
    STOCGAsmNH	= 2303,
    STOCGAsmNHE	= 2304,
    STOCGAsmNL	= 2305,
    STOCGAsmNLE	= 2306,
    STOCGAsmNLH	= 2307,
    STOCGAsmNM	= 2308,
    STOCGAsmNO	= 2309,
    STOCGAsmNP	= 2310,
    STOCGAsmNZ	= 2311,
    STOCGAsmO	= 2312,
    STOCGAsmP	= 2313,
    STOCGAsmZ	= 2314,
    STOSM	= 2315,
    STPQ	= 2316,
    STPT	= 2317,
    STPX	= 2318,
    STRAG	= 2319,
    STRL	= 2320,
    STRV	= 2321,
    STRVG	= 2322,
    STRVH	= 2323,
    STSCH	= 2324,
    STSI	= 2325,
    STURA	= 2326,
    STURG	= 2327,
    STY	= 2328,
    SU	= 2329,
    SUR	= 2330,
    SVC	= 2331,
    SW	= 2332,
    SWR	= 2333,
    SXBR	= 2334,
    SXR	= 2335,
    SXTR	= 2336,
    SXTRA	= 2337,
    SY	= 2338,
    TABORT	= 2339,
    TAM	= 2340,
    TAR	= 2341,
    TB	= 2342,
    TBDR	= 2343,
    TBEDR	= 2344,
    TBEGIN	= 2345,
    TBEGINC	= 2346,
    TCDB	= 2347,
    TCEB	= 2348,
    TCXB	= 2349,
    TDCDT	= 2350,
    TDCET	= 2351,
    TDCXT	= 2352,
    TDGDT	= 2353,
    TDGET	= 2354,
    TDGXT	= 2355,
    TEND	= 2356,
    THDER	= 2357,
    THDR	= 2358,
    TM	= 2359,
    TMHH	= 2360,
    TMHL	= 2361,
    TMLH	= 2362,
    TMLL	= 2363,
    TMY	= 2364,
    TP	= 2365,
    TPI	= 2366,
    TPROT	= 2367,
    TR	= 2368,
    TRACE	= 2369,
    TRACG	= 2370,
    TRAP2	= 2371,
    TRAP4	= 2372,
    TRE	= 2373,
    TROO	= 2374,
    TROOOpt	= 2375,
    TROT	= 2376,
    TROTOpt	= 2377,
    TRT	= 2378,
    TRTE	= 2379,
    TRTEOpt	= 2380,
    TRTO	= 2381,
    TRTOOpt	= 2382,
    TRTR	= 2383,
    TRTRE	= 2384,
    TRTREOpt	= 2385,
    TRTT	= 2386,
    TRTTOpt	= 2387,
    TS	= 2388,
    TSCH	= 2389,
    UNPK	= 2390,
    UNPKA	= 2391,
    UNPKU	= 2392,
    UPT	= 2393,
    VA	= 2394,
    VAB	= 2395,
    VAC	= 2396,
    VACC	= 2397,
    VACCB	= 2398,
    VACCC	= 2399,
    VACCCQ	= 2400,
    VACCF	= 2401,
    VACCG	= 2402,
    VACCH	= 2403,
    VACCQ	= 2404,
    VACQ	= 2405,
    VAF	= 2406,
    VAG	= 2407,
    VAH	= 2408,
    VAP	= 2409,
    VAQ	= 2410,
    VAVG	= 2411,
    VAVGB	= 2412,
    VAVGF	= 2413,
    VAVGG	= 2414,
    VAVGH	= 2415,
    VAVGL	= 2416,
    VAVGLB	= 2417,
    VAVGLF	= 2418,
    VAVGLG	= 2419,
    VAVGLH	= 2420,
    VBPERM	= 2421,
    VCDG	= 2422,
    VCDGB	= 2423,
    VCDLG	= 2424,
    VCDLGB	= 2425,
    VCEFB	= 2426,
    VCELFB	= 2427,
    VCEQ	= 2428,
    VCEQB	= 2429,
    VCEQBS	= 2430,
    VCEQF	= 2431,
    VCEQFS	= 2432,
    VCEQG	= 2433,
    VCEQGS	= 2434,
    VCEQH	= 2435,
    VCEQHS	= 2436,
    VCFEB	= 2437,
    VCFN	= 2438,
    VCFPL	= 2439,
    VCFPS	= 2440,
    VCGD	= 2441,
    VCGDB	= 2442,
    VCH	= 2443,
    VCHB	= 2444,
    VCHBS	= 2445,
    VCHF	= 2446,
    VCHFS	= 2447,
    VCHG	= 2448,
    VCHGS	= 2449,
    VCHH	= 2450,
    VCHHS	= 2451,
    VCHL	= 2452,
    VCHLB	= 2453,
    VCHLBS	= 2454,
    VCHLF	= 2455,
    VCHLFS	= 2456,
    VCHLG	= 2457,
    VCHLGS	= 2458,
    VCHLH	= 2459,
    VCHLHS	= 2460,
    VCKSM	= 2461,
    VCLFEB	= 2462,
    VCLFNH	= 2463,
    VCLFNL	= 2464,
    VCLFP	= 2465,
    VCLGD	= 2466,
    VCLGDB	= 2467,
    VCLZ	= 2468,
    VCLZB	= 2469,
    VCLZDP	= 2470,
    VCLZF	= 2471,
    VCLZG	= 2472,
    VCLZH	= 2473,
    VCNF	= 2474,
    VCP	= 2475,
    VCRNF	= 2476,
    VCSFP	= 2477,
    VCSPH	= 2478,
    VCTZ	= 2479,
    VCTZB	= 2480,
    VCTZF	= 2481,
    VCTZG	= 2482,
    VCTZH	= 2483,
    VCVB	= 2484,
    VCVBG	= 2485,
    VCVBGOpt	= 2486,
    VCVBOpt	= 2487,
    VCVD	= 2488,
    VCVDG	= 2489,
    VDP	= 2490,
    VEC	= 2491,
    VECB	= 2492,
    VECF	= 2493,
    VECG	= 2494,
    VECH	= 2495,
    VECL	= 2496,
    VECLB	= 2497,
    VECLF	= 2498,
    VECLG	= 2499,
    VECLH	= 2500,
    VERIM	= 2501,
    VERIMB	= 2502,
    VERIMF	= 2503,
    VERIMG	= 2504,
    VERIMH	= 2505,
    VERLL	= 2506,
    VERLLB	= 2507,
    VERLLF	= 2508,
    VERLLG	= 2509,
    VERLLH	= 2510,
    VERLLV	= 2511,
    VERLLVB	= 2512,
    VERLLVF	= 2513,
    VERLLVG	= 2514,
    VERLLVH	= 2515,
    VESL	= 2516,
    VESLB	= 2517,
    VESLF	= 2518,
    VESLG	= 2519,
    VESLH	= 2520,
    VESLV	= 2521,
    VESLVB	= 2522,
    VESLVF	= 2523,
    VESLVG	= 2524,
    VESLVH	= 2525,
    VESRA	= 2526,
    VESRAB	= 2527,
    VESRAF	= 2528,
    VESRAG	= 2529,
    VESRAH	= 2530,
    VESRAV	= 2531,
    VESRAVB	= 2532,
    VESRAVF	= 2533,
    VESRAVG	= 2534,
    VESRAVH	= 2535,
    VESRL	= 2536,
    VESRLB	= 2537,
    VESRLF	= 2538,
    VESRLG	= 2539,
    VESRLH	= 2540,
    VESRLV	= 2541,
    VESRLVB	= 2542,
    VESRLVF	= 2543,
    VESRLVG	= 2544,
    VESRLVH	= 2545,
    VFA	= 2546,
    VFADB	= 2547,
    VFAE	= 2548,
    VFAEB	= 2549,
    VFAEBS	= 2550,
    VFAEF	= 2551,
    VFAEFS	= 2552,
    VFAEH	= 2553,
    VFAEHS	= 2554,
    VFAEZB	= 2555,
    VFAEZBS	= 2556,
    VFAEZF	= 2557,
    VFAEZFS	= 2558,
    VFAEZH	= 2559,
    VFAEZHS	= 2560,
    VFASB	= 2561,
    VFCE	= 2562,
    VFCEDB	= 2563,
    VFCEDBS	= 2564,
    VFCESB	= 2565,
    VFCESBS	= 2566,
    VFCH	= 2567,
    VFCHDB	= 2568,
    VFCHDBS	= 2569,
    VFCHE	= 2570,
    VFCHEDB	= 2571,
    VFCHEDBS	= 2572,
    VFCHESB	= 2573,
    VFCHESBS	= 2574,
    VFCHSB	= 2575,
    VFCHSBS	= 2576,
    VFD	= 2577,
    VFDDB	= 2578,
    VFDSB	= 2579,
    VFEE	= 2580,
    VFEEB	= 2581,
    VFEEBS	= 2582,
    VFEEF	= 2583,
    VFEEFS	= 2584,
    VFEEH	= 2585,
    VFEEHS	= 2586,
    VFEEZB	= 2587,
    VFEEZBS	= 2588,
    VFEEZF	= 2589,
    VFEEZFS	= 2590,
    VFEEZH	= 2591,
    VFEEZHS	= 2592,
    VFENE	= 2593,
    VFENEB	= 2594,
    VFENEBS	= 2595,
    VFENEF	= 2596,
    VFENEFS	= 2597,
    VFENEH	= 2598,
    VFENEHS	= 2599,
    VFENEZB	= 2600,
    VFENEZBS	= 2601,
    VFENEZF	= 2602,
    VFENEZFS	= 2603,
    VFENEZH	= 2604,
    VFENEZHS	= 2605,
    VFI	= 2606,
    VFIDB	= 2607,
    VFISB	= 2608,
    VFKEDB	= 2609,
    VFKEDBS	= 2610,
    VFKESB	= 2611,
    VFKESBS	= 2612,
    VFKHDB	= 2613,
    VFKHDBS	= 2614,
    VFKHEDB	= 2615,
    VFKHEDBS	= 2616,
    VFKHESB	= 2617,
    VFKHESBS	= 2618,
    VFKHSB	= 2619,
    VFKHSBS	= 2620,
    VFLCDB	= 2621,
    VFLCSB	= 2622,
    VFLL	= 2623,
    VFLLS	= 2624,
    VFLNDB	= 2625,
    VFLNSB	= 2626,
    VFLPDB	= 2627,
    VFLPSB	= 2628,
    VFLR	= 2629,
    VFLRD	= 2630,
    VFM	= 2631,
    VFMA	= 2632,
    VFMADB	= 2633,
    VFMASB	= 2634,
    VFMAX	= 2635,
    VFMAXDB	= 2636,
    VFMAXSB	= 2637,
    VFMDB	= 2638,
    VFMIN	= 2639,
    VFMINDB	= 2640,
    VFMINSB	= 2641,
    VFMS	= 2642,
    VFMSB	= 2643,
    VFMSDB	= 2644,
    VFMSSB	= 2645,
    VFNMA	= 2646,
    VFNMADB	= 2647,
    VFNMASB	= 2648,
    VFNMS	= 2649,
    VFNMSDB	= 2650,
    VFNMSSB	= 2651,
    VFPSO	= 2652,
    VFPSODB	= 2653,
    VFPSOSB	= 2654,
    VFS	= 2655,
    VFSDB	= 2656,
    VFSQ	= 2657,
    VFSQDB	= 2658,
    VFSQSB	= 2659,
    VFSSB	= 2660,
    VFTCI	= 2661,
    VFTCIDB	= 2662,
    VFTCISB	= 2663,
    VGBM	= 2664,
    VGEF	= 2665,
    VGEG	= 2666,
    VGFM	= 2667,
    VGFMA	= 2668,
    VGFMAB	= 2669,
    VGFMAF	= 2670,
    VGFMAG	= 2671,
    VGFMAH	= 2672,
    VGFMB	= 2673,
    VGFMF	= 2674,
    VGFMG	= 2675,
    VGFMH	= 2676,
    VGM	= 2677,
    VGMB	= 2678,
    VGMF	= 2679,
    VGMG	= 2680,
    VGMH	= 2681,
    VISTR	= 2682,
    VISTRB	= 2683,
    VISTRBS	= 2684,
    VISTRF	= 2685,
    VISTRFS	= 2686,
    VISTRH	= 2687,
    VISTRHS	= 2688,
    VL	= 2689,
    VLAlign	= 2690,
    VLBB	= 2691,
    VLBR	= 2692,
    VLBRF	= 2693,
    VLBRG	= 2694,
    VLBRH	= 2695,
    VLBRQ	= 2696,
    VLBRREP	= 2697,
    VLBRREPF	= 2698,
    VLBRREPG	= 2699,
    VLBRREPH	= 2700,
    VLC	= 2701,
    VLCB	= 2702,
    VLCF	= 2703,
    VLCG	= 2704,
    VLCH	= 2705,
    VLDE	= 2706,
    VLDEB	= 2707,
    VLEB	= 2708,
    VLEBRF	= 2709,
    VLEBRG	= 2710,
    VLEBRH	= 2711,
    VLED	= 2712,
    VLEDB	= 2713,
    VLEF	= 2714,
    VLEG	= 2715,
    VLEH	= 2716,
    VLEIB	= 2717,
    VLEIF	= 2718,
    VLEIG	= 2719,
    VLEIH	= 2720,
    VLER	= 2721,
    VLERF	= 2722,
    VLERG	= 2723,
    VLERH	= 2724,
    VLGV	= 2725,
    VLGVB	= 2726,
    VLGVF	= 2727,
    VLGVG	= 2728,
    VLGVH	= 2729,
    VLIP	= 2730,
    VLL	= 2731,
    VLLEBRZ	= 2732,
    VLLEBRZE	= 2733,
    VLLEBRZF	= 2734,
    VLLEBRZG	= 2735,
    VLLEBRZH	= 2736,
    VLLEZ	= 2737,
    VLLEZB	= 2738,
    VLLEZF	= 2739,
    VLLEZG	= 2740,
    VLLEZH	= 2741,
    VLLEZLF	= 2742,
    VLM	= 2743,
    VLMAlign	= 2744,
    VLP	= 2745,
    VLPB	= 2746,
    VLPF	= 2747,
    VLPG	= 2748,
    VLPH	= 2749,
    VLR	= 2750,
    VLREP	= 2751,
    VLREPB	= 2752,
    VLREPF	= 2753,
    VLREPG	= 2754,
    VLREPH	= 2755,
    VLRL	= 2756,
    VLRLR	= 2757,
    VLVG	= 2758,
    VLVGB	= 2759,
    VLVGF	= 2760,
    VLVGG	= 2761,
    VLVGH	= 2762,
    VLVGP	= 2763,
    VMAE	= 2764,
    VMAEB	= 2765,
    VMAEF	= 2766,
    VMAEH	= 2767,
    VMAH	= 2768,
    VMAHB	= 2769,
    VMAHF	= 2770,
    VMAHH	= 2771,
    VMAL	= 2772,
    VMALB	= 2773,
    VMALE	= 2774,
    VMALEB	= 2775,
    VMALEF	= 2776,
    VMALEH	= 2777,
    VMALF	= 2778,
    VMALH	= 2779,
    VMALHB	= 2780,
    VMALHF	= 2781,
    VMALHH	= 2782,
    VMALHW	= 2783,
    VMALO	= 2784,
    VMALOB	= 2785,
    VMALOF	= 2786,
    VMALOH	= 2787,
    VMAO	= 2788,
    VMAOB	= 2789,
    VMAOF	= 2790,
    VMAOH	= 2791,
    VME	= 2792,
    VMEB	= 2793,
    VMEF	= 2794,
    VMEH	= 2795,
    VMH	= 2796,
    VMHB	= 2797,
    VMHF	= 2798,
    VMHH	= 2799,
    VML	= 2800,
    VMLB	= 2801,
    VMLE	= 2802,
    VMLEB	= 2803,
    VMLEF	= 2804,
    VMLEH	= 2805,
    VMLF	= 2806,
    VMLH	= 2807,
    VMLHB	= 2808,
    VMLHF	= 2809,
    VMLHH	= 2810,
    VMLHW	= 2811,
    VMLO	= 2812,
    VMLOB	= 2813,
    VMLOF	= 2814,
    VMLOH	= 2815,
    VMN	= 2816,
    VMNB	= 2817,
    VMNF	= 2818,
    VMNG	= 2819,
    VMNH	= 2820,
    VMNL	= 2821,
    VMNLB	= 2822,
    VMNLF	= 2823,
    VMNLG	= 2824,
    VMNLH	= 2825,
    VMO	= 2826,
    VMOB	= 2827,
    VMOF	= 2828,
    VMOH	= 2829,
    VMP	= 2830,
    VMRH	= 2831,
    VMRHB	= 2832,
    VMRHF	= 2833,
    VMRHG	= 2834,
    VMRHH	= 2835,
    VMRL	= 2836,
    VMRLB	= 2837,
    VMRLF	= 2838,
    VMRLG	= 2839,
    VMRLH	= 2840,
    VMSL	= 2841,
    VMSLG	= 2842,
    VMSP	= 2843,
    VMX	= 2844,
    VMXB	= 2845,
    VMXF	= 2846,
    VMXG	= 2847,
    VMXH	= 2848,
    VMXL	= 2849,
    VMXLB	= 2850,
    VMXLF	= 2851,
    VMXLG	= 2852,
    VMXLH	= 2853,
    VN	= 2854,
    VNC	= 2855,
    VNN	= 2856,
    VNO	= 2857,
    VNX	= 2858,
    VO	= 2859,
    VOC	= 2860,
    VONE	= 2861,
    VPDI	= 2862,
    VPERM	= 2863,
    VPK	= 2864,
    VPKF	= 2865,
    VPKG	= 2866,
    VPKH	= 2867,
    VPKLS	= 2868,
    VPKLSF	= 2869,
    VPKLSFS	= 2870,
    VPKLSG	= 2871,
    VPKLSGS	= 2872,
    VPKLSH	= 2873,
    VPKLSHS	= 2874,
    VPKS	= 2875,
    VPKSF	= 2876,
    VPKSFS	= 2877,
    VPKSG	= 2878,
    VPKSGS	= 2879,
    VPKSH	= 2880,
    VPKSHS	= 2881,
    VPKZ	= 2882,
    VPKZR	= 2883,
    VPOPCT	= 2884,
    VPOPCTB	= 2885,
    VPOPCTF	= 2886,
    VPOPCTG	= 2887,
    VPOPCTH	= 2888,
    VPSOP	= 2889,
    VREP	= 2890,
    VREPB	= 2891,
    VREPF	= 2892,
    VREPG	= 2893,
    VREPH	= 2894,
    VREPI	= 2895,
    VREPIB	= 2896,
    VREPIF	= 2897,
    VREPIG	= 2898,
    VREPIH	= 2899,
    VRP	= 2900,
    VS	= 2901,
    VSB	= 2902,
    VSBCBI	= 2903,
    VSBCBIQ	= 2904,
    VSBI	= 2905,
    VSBIQ	= 2906,
    VSCBI	= 2907,
    VSCBIB	= 2908,
    VSCBIF	= 2909,
    VSCBIG	= 2910,
    VSCBIH	= 2911,
    VSCBIQ	= 2912,
    VSCEF	= 2913,
    VSCEG	= 2914,
    VSCHDP	= 2915,
    VSCHP	= 2916,
    VSCHSP	= 2917,
    VSCHXP	= 2918,
    VSCSHP	= 2919,
    VSDP	= 2920,
    VSEG	= 2921,
    VSEGB	= 2922,
    VSEGF	= 2923,
    VSEGH	= 2924,
    VSEL	= 2925,
    VSF	= 2926,
    VSG	= 2927,
    VSH	= 2928,
    VSL	= 2929,
    VSLB	= 2930,
    VSLD	= 2931,
    VSLDB	= 2932,
    VSP	= 2933,
    VSQ	= 2934,
    VSRA	= 2935,
    VSRAB	= 2936,
    VSRD	= 2937,
    VSRL	= 2938,
    VSRLB	= 2939,
    VSRP	= 2940,
    VSRPR	= 2941,
    VST	= 2942,
    VSTAlign	= 2943,
    VSTBR	= 2944,
    VSTBRF	= 2945,
    VSTBRG	= 2946,
    VSTBRH	= 2947,
    VSTBRQ	= 2948,
    VSTEB	= 2949,
    VSTEBRF	= 2950,
    VSTEBRG	= 2951,
    VSTEBRH	= 2952,
    VSTEF	= 2953,
    VSTEG	= 2954,
    VSTEH	= 2955,
    VSTER	= 2956,
    VSTERF	= 2957,
    VSTERG	= 2958,
    VSTERH	= 2959,
    VSTL	= 2960,
    VSTM	= 2961,
    VSTMAlign	= 2962,
    VSTRC	= 2963,
    VSTRCB	= 2964,
    VSTRCBS	= 2965,
    VSTRCF	= 2966,
    VSTRCFS	= 2967,
    VSTRCH	= 2968,
    VSTRCHS	= 2969,
    VSTRCZB	= 2970,
    VSTRCZBS	= 2971,
    VSTRCZF	= 2972,
    VSTRCZFS	= 2973,
    VSTRCZH	= 2974,
    VSTRCZHS	= 2975,
    VSTRL	= 2976,
    VSTRLR	= 2977,
    VSTRS	= 2978,
    VSTRSB	= 2979,
    VSTRSF	= 2980,
    VSTRSH	= 2981,
    VSTRSZB	= 2982,
    VSTRSZF	= 2983,
    VSTRSZH	= 2984,
    VSUM	= 2985,
    VSUMB	= 2986,
    VSUMG	= 2987,
    VSUMGF	= 2988,
    VSUMGH	= 2989,
    VSUMH	= 2990,
    VSUMQ	= 2991,
    VSUMQF	= 2992,
    VSUMQG	= 2993,
    VTM	= 2994,
    VTP	= 2995,
    VUPH	= 2996,
    VUPHB	= 2997,
    VUPHF	= 2998,
    VUPHH	= 2999,
    VUPKZ	= 3000,
    VUPKZH	= 3001,
    VUPKZL	= 3002,
    VUPL	= 3003,
    VUPLB	= 3004,
    VUPLF	= 3005,
    VUPLH	= 3006,
    VUPLHB	= 3007,
    VUPLHF	= 3008,
    VUPLHH	= 3009,
    VUPLHW	= 3010,
    VUPLL	= 3011,
    VUPLLB	= 3012,
    VUPLLF	= 3013,
    VUPLLH	= 3014,
    VX	= 3015,
    VZERO	= 3016,
    WCDGB	= 3017,
    WCDLGB	= 3018,
    WCEFB	= 3019,
    WCELFB	= 3020,
    WCFEB	= 3021,
    WCGDB	= 3022,
    WCLFEB	= 3023,
    WCLGDB	= 3024,
    WFADB	= 3025,
    WFASB	= 3026,
    WFAXB	= 3027,
    WFC	= 3028,
    WFCDB	= 3029,
    WFCEDB	= 3030,
    WFCEDBS	= 3031,
    WFCESB	= 3032,
    WFCESBS	= 3033,
    WFCEXB	= 3034,
    WFCEXBS	= 3035,
    WFCHDB	= 3036,
    WFCHDBS	= 3037,
    WFCHEDB	= 3038,
    WFCHEDBS	= 3039,
    WFCHESB	= 3040,
    WFCHESBS	= 3041,
    WFCHEXB	= 3042,
    WFCHEXBS	= 3043,
    WFCHSB	= 3044,
    WFCHSBS	= 3045,
    WFCHXB	= 3046,
    WFCHXBS	= 3047,
    WFCSB	= 3048,
    WFCXB	= 3049,
    WFDDB	= 3050,
    WFDSB	= 3051,
    WFDXB	= 3052,
    WFIDB	= 3053,
    WFISB	= 3054,
    WFIXB	= 3055,
    WFK	= 3056,
    WFKDB	= 3057,
    WFKEDB	= 3058,
    WFKEDBS	= 3059,
    WFKESB	= 3060,
    WFKESBS	= 3061,
    WFKEXB	= 3062,
    WFKEXBS	= 3063,
    WFKHDB	= 3064,
    WFKHDBS	= 3065,
    WFKHEDB	= 3066,
    WFKHEDBS	= 3067,
    WFKHESB	= 3068,
    WFKHESBS	= 3069,
    WFKHEXB	= 3070,
    WFKHEXBS	= 3071,
    WFKHSB	= 3072,
    WFKHSBS	= 3073,
    WFKHXB	= 3074,
    WFKHXBS	= 3075,
    WFKSB	= 3076,
    WFKXB	= 3077,
    WFLCDB	= 3078,
    WFLCSB	= 3079,
    WFLCXB	= 3080,
    WFLLD	= 3081,
    WFLLS	= 3082,
    WFLNDB	= 3083,
    WFLNSB	= 3084,
    WFLNXB	= 3085,
    WFLPDB	= 3086,
    WFLPSB	= 3087,
    WFLPXB	= 3088,
    WFLRD	= 3089,
    WFLRX	= 3090,
    WFMADB	= 3091,
    WFMASB	= 3092,
    WFMAXB	= 3093,
    WFMAXDB	= 3094,
    WFMAXSB	= 3095,
    WFMAXXB	= 3096,
    WFMDB	= 3097,
    WFMINDB	= 3098,
    WFMINSB	= 3099,
    WFMINXB	= 3100,
    WFMSB	= 3101,
    WFMSDB	= 3102,
    WFMSSB	= 3103,
    WFMSXB	= 3104,
    WFMXB	= 3105,
    WFNMADB	= 3106,
    WFNMASB	= 3107,
    WFNMAXB	= 3108,
    WFNMSDB	= 3109,
    WFNMSSB	= 3110,
    WFNMSXB	= 3111,
    WFPSODB	= 3112,
    WFPSOSB	= 3113,
    WFPSOXB	= 3114,
    WFSDB	= 3115,
    WFSQDB	= 3116,
    WFSQSB	= 3117,
    WFSQXB	= 3118,
    WFSSB	= 3119,
    WFSXB	= 3120,
    WFTCIDB	= 3121,
    WFTCISB	= 3122,
    WFTCIXB	= 3123,
    WLDEB	= 3124,
    WLEDB	= 3125,
    X	= 3126,
    XC	= 3127,
    XG	= 3128,
    XGR	= 3129,
    XGRK	= 3130,
    XI	= 3131,
    XIHF	= 3132,
    XILF	= 3133,
    XIY	= 3134,
    XR	= 3135,
    XRK	= 3136,
    XSCH	= 3137,
    XY	= 3138,
    ZAP	= 3139,
    INSTRUCTION_LIST_END = 3140
  };

} // end namespace SystemZ
} // end namespace llvm
#endif // GET_INSTRINFO_ENUM

#ifdef GET_INSTRINFO_SCHED_ENUM
#undef GET_INSTRINFO_SCHED_ENUM
namespace llvm {

namespace SystemZ {
namespace Sched {
  enum {
    NoInstrModel	= 0,
    ADJDYNALLOC	= 1,
    CallBRCL_BRC_BRCAsm_BRCL_BRCLAsm	= 2,
    CallJG_J_JAsmE_JAsmH_JAsmHE_JAsmL_JAsmLE_JAsmLH_JAsmM_JAsmNE_JAsmNH_JAsmNHE_JAsmNL_JAsmNLE_JAsmNLH_JAsmNM_JAsmNO_JAsmNP_JAsmNZ_JAsmO_JAsmP_JAsmZ_JG_JGAsmE_JGAsmH_JGAsmHE_JGAsmL_JGAsmLE_JGAsmLH_JGAsmM_JGAsmNE_JGAsmNH_JGAsmNHE_JGAsmNL_JGAsmNLE_JGAsmNLH_JGAsmNM_JGAsmNO_JGAsmNP_JGAsmNZ_JGAsmO_JGAsmP_JGAsmZ	= 3,
    CallBCR_BC_BCAsm_BCR_BCRAsm	= 4,
    CallBR_B_BAsmE_BAsmH_BAsmHE_BAsmL_BAsmLE_BAsmLH_BAsmM_BAsmNE_BAsmNH_BAsmNHE_BAsmNL_BAsmNLE_BAsmNLH_BAsmNM_BAsmNO_BAsmNP_BAsmNZ_BAsmO_BAsmP_BAsmZ_BR_BRAsmE_BRAsmH_BRAsmHE_BRAsmL_BRAsmLE_BRAsmLH_BRAsmM_BRAsmNE_BRAsmNH_BRAsmNHE_BRAsmNL_BRAsmNLE_BRAsmNLH_BRAsmNM_BRAsmNO_BRAsmNP_BRAsmNZ_BRAsmO_BRAsmP_BRAsmZ	= 5,
    BI_BIAsmE_BIAsmH_BIAsmHE_BIAsmL_BIAsmLE_BIAsmLH_BIAsmM_BIAsmNE_BIAsmNH_BIAsmNHE_BIAsmNL_BIAsmNLE_BIAsmNLH_BIAsmNM_BIAsmNO_BIAsmNP_BIAsmNZ_BIAsmO_BIAsmP_BIAsmZ_BIC_BICAsm	= 6,
    BRCT_BRCTG	= 7,
    BRCTH	= 8,
    BCT_BCTG_BCTGR_BCTR	= 9,
    BRXH_BRXHG_BRXLE_BRXLG_BXH_BXHG_BXLE_BXLEG	= 10,
    CGIJ_CGIJAsm_CGIJAsmE_CGIJAsmH_CGIJAsmHE_CGIJAsmL_CGIJAsmLE_CGIJAsmLH_CGIJAsmNE_CGIJAsmNH_CGIJAsmNHE_CGIJAsmNL_CGIJAsmNLE_CGIJAsmNLH_CGRJ_CGRJAsm_CGRJAsmE_CGRJAsmH_CGRJAsmHE_CGRJAsmL_CGRJAsmLE_CGRJAsmLH_CGRJAsmNE_CGRJAsmNH_CGRJAsmNHE_CGRJAsmNL_CGRJAsmNLE_CGRJAsmNLH_CIJ_CIJAsm_CIJAsmE_CIJAsmH_CIJAsmHE_CIJAsmL_CIJAsmLE_CIJAsmLH_CIJAsmNE_CIJAsmNH_CIJAsmNHE_CIJAsmNL_CIJAsmNLE_CIJAsmNLH_CLGIJ_CLGIJAsm_CLGIJAsmE_CLGIJAsmH_CLGIJAsmHE_CLGIJAsmL_CLGIJAsmLE_CLGIJAsmLH_CLGIJAsmNE_CLGIJAsmNH_CLGIJAsmNHE_CLGIJAsmNL_CLGIJAsmNLE_CLGIJAsmNLH_CLGRJ_CLGRJAsm_CLGRJAsmE_CLGRJAsmH_CLGRJAsmHE_CLGRJAsmL_CLGRJAsmLE_CLGRJAsmLH_CLGRJAsmNE_CLGRJAsmNH_CLGRJAsmNHE_CLGRJAsmNL_CLGRJAsmNLE_CLGRJAsmNLH_CLIJ_CLIJAsm_CLIJAsmE_CLIJAsmH_CLIJAsmHE_CLIJAsmL_CLIJAsmLE_CLIJAsmLH_CLIJAsmNE_CLIJAsmNH_CLIJAsmNHE_CLIJAsmNL_CLIJAsmNLE_CLIJAsmNLH_CLRJ_CLRJAsm_CLRJAsmE_CLRJAsmH_CLRJAsmHE_CLRJAsmL_CLRJAsmLE_CLRJAsmLH_CLRJAsmNE_CLRJAsmNH_CLRJAsmNHE_CLRJAsmNL_CLRJAsmNLE_CLRJAsmNLH_CRJ_CRJAsm_CRJAsmE_CRJAsmH_CRJAsmHE_CRJAsmL_CRJAsmLE_CRJAsmLH_CRJAsmNE_CRJAsmNH_CRJAsmNHE_CRJAsmNL_CRJAsmNLE_CRJAsmNLH	= 11,
    CGIBCall_CGIBReturn_CGRBCall_CGRBReturn_CIBCall_CIBReturn_CLGIBCall_CLGIBReturn_CLGRBCall_CLGRBReturn_CLIBCall_CLIBReturn_CLRBCall_CLRBReturn_CRBCall_CRBReturn_CGIB_CGIBAsm_CGIBAsmE_CGIBAsmH_CGIBAsmHE_CGIBAsmL_CGIBAsmLE_CGIBAsmLH_CGIBAsmNE_CGIBAsmNH_CGIBAsmNHE_CGIBAsmNL_CGIBAsmNLE_CGIBAsmNLH_CGRB_CGRBAsm_CGRBAsmE_CGRBAsmH_CGRBAsmHE_CGRBAsmL_CGRBAsmLE_CGRBAsmLH_CGRBAsmNE_CGRBAsmNH_CGRBAsmNHE_CGRBAsmNL_CGRBAsmNLE_CGRBAsmNLH_CIB_CIBAsm_CIBAsmE_CIBAsmH_CIBAsmHE_CIBAsmL_CIBAsmLE_CIBAsmLH_CIBAsmNE_CIBAsmNH_CIBAsmNHE_CIBAsmNL_CIBAsmNLE_CIBAsmNLH_CLGIB_CLGIBAsm_CLGIBAsmE_CLGIBAsmH_CLGIBAsmHE_CLGIBAsmL_CLGIBAsmLE_CLGIBAsmLH_CLGIBAsmNE_CLGIBAsmNH_CLGIBAsmNHE_CLGIBAsmNL_CLGIBAsmNLE_CLGIBAsmNLH_CLGRB_CLGRBAsm_CLGRBAsmE_CLGRBAsmH_CLGRBAsmHE_CLGRBAsmL_CLGRBAsmLE_CLGRBAsmLH_CLGRBAsmNE_CLGRBAsmNH_CLGRBAsmNHE_CLGRBAsmNL_CLGRBAsmNLE_CLGRBAsmNLH_CLIB_CLIBAsm_CLIBAsmE_CLIBAsmH_CLIBAsmHE_CLIBAsmL_CLIBAsmLE_CLIBAsmLH_CLIBAsmNE_CLIBAsmNH_CLIBAsmNHE_CLIBAsmNL_CLIBAsmNLE_CLIBAsmNLH_CLRB_CLRBAsm_CLRBAsmE_CLRBAsmH_CLRBAsmHE_CLRBAsmL_CLRBAsmLE_CLRBAsmLH_CLRBAsmNE_CLRBAsmNH_CLRBAsmNHE_CLRBAsmNL_CLRBAsmNLE_CLRBAsmNLH_CRB_CRBAsm_CRBAsmE_CRBAsmH_CRBAsmHE_CRBAsmL_CRBAsmLE_CRBAsmLH_CRBAsmNE_CRBAsmNH_CRBAsmNHE_CRBAsmNL_CRBAsmNLE_CRBAsmNLH	= 12,
    CondTrap_Trap	= 13,
    CGIT_CGITAsm_CGITAsmE_CGITAsmH_CGITAsmHE_CGITAsmL_CGITAsmLE_CGITAsmLH_CGITAsmNE_CGITAsmNH_CGITAsmNHE_CGITAsmNL_CGITAsmNLE_CGITAsmNLH_CGRT_CGRTAsm_CGRTAsmE_CGRTAsmH_CGRTAsmHE_CGRTAsmL_CGRTAsmLE_CGRTAsmLH_CGRTAsmNE_CGRTAsmNH_CGRTAsmNHE_CGRTAsmNL_CGRTAsmNLE_CGRTAsmNLH_CIT_CITAsm_CITAsmE_CITAsmH_CITAsmHE_CITAsmL_CITAsmLE_CITAsmLH_CITAsmNE_CITAsmNH_CITAsmNHE_CITAsmNL_CITAsmNLE_CITAsmNLH_CRT_CRTAsm_CRTAsmE_CRTAsmH_CRTAsmHE_CRTAsmL_CRTAsmLE_CRTAsmLH_CRTAsmNE_CRTAsmNH_CRTAsmNHE_CRTAsmNL_CRTAsmNLE_CRTAsmNLH	= 14,
    CLGRT_CLGRTAsm_CLGRTAsmE_CLGRTAsmH_CLGRTAsmHE_CLGRTAsmL_CLGRTAsmLE_CLGRTAsmLH_CLGRTAsmNE_CLGRTAsmNH_CLGRTAsmNHE_CLGRTAsmNL_CLGRTAsmNLE_CLGRTAsmNLH_CLRT_CLRTAsm_CLRTAsmE_CLRTAsmH_CLRTAsmHE_CLRTAsmL_CLRTAsmLE_CLRTAsmLH_CLRTAsmNE_CLRTAsmNH_CLRTAsmNHE_CLRTAsmNL_CLRTAsmNLE_CLRTAsmNLH	= 15,
    CLFIT_CLFITAsm_CLFITAsmE_CLFITAsmH_CLFITAsmHE_CLFITAsmL_CLFITAsmLE_CLFITAsmLH_CLFITAsmNE_CLFITAsmNH_CLFITAsmNHE_CLFITAsmNL_CLFITAsmNLE_CLFITAsmNLH_CLGIT_CLGITAsm_CLGITAsmE_CLGITAsmH_CLGITAsmHE_CLGITAsmL_CLGITAsmLE_CLGITAsmLH_CLGITAsmNE_CLGITAsmNH_CLGITAsmNHE_CLGITAsmNL_CLGITAsmNLE_CLGITAsmNLH	= 16,
    CLGT_CLGTAsm_CLGTAsmE_CLGTAsmH_CLGTAsmHE_CLGTAsmL_CLGTAsmLE_CLGTAsmLH_CLGTAsmNE_CLGTAsmNH_CLGTAsmNHE_CLGTAsmNL_CLGTAsmNLE_CLGTAsmNLH_CLT_CLTAsm_CLTAsmE_CLTAsmH_CLTAsmHE_CLTAsmL_CLTAsmLE_CLTAsmLH_CLTAsmNE_CLTAsmNH_CLTAsmNHE_CLTAsmNL_CLTAsmNLE_CLTAsmNLH	= 17,
    BRAS	= 18,
    CallBRASL_CallBRASL_XPLINK64_BRASL	= 19,
    CallBASR_CallBASR_STACKEXT_CallBASR_XPLINK64_BAS_BASR	= 20,
    TLS_GDCALL_TLS_LDCALL	= 21,
    Return_Return_XPLINK	= 22,
    CondReturn_CondReturn_XPLINK	= 23,
    MVGHI_MVHHI_MVHI	= 24,
    MVI_MVIY	= 25,
    MVC	= 26,
    MVCL_MVCLE_MVCLU	= 27,
    MVCRL	= 28,
    COPY_TO_REGCLASS_COPY	= 29,
    EXTRACT_SUBREG	= 30,
    INSERT_SUBREG	= 31,
    REG_SEQUENCE	= 32,
    LMux_L_LFH_LRL_LY	= 33,
    LCBB	= 34,
    LG_LGRL	= 35,
    L128	= 36,
    LLIHF_LLIHH_LLIHL	= 37,
    LLILF_LLILH_LLILL	= 38,
    LGFI_LGHI	= 39,
    LHIMux_LHI	= 40,
    LR	= 41,
    LZRF_LZRG	= 42,
    LAT_LFHAT_LGAT	= 43,
    LT_LTG	= 44,
    LTGR_LTR	= 45,
    STG_STGRL	= 46,
    ST128	= 47,
    STMux_ST_STFH_STRL_STY	= 48,
    MVST	= 49,
    LOCRMux	= 50,
    LOCFHR_LOCFHRAsm_LOCFHRAsmE_LOCFHRAsmH_LOCFHRAsmHE_LOCFHRAsmL_LOCFHRAsmLE_LOCFHRAsmLH_LOCFHRAsmM_LOCFHRAsmNE_LOCFHRAsmNH_LOCFHRAsmNHE_LOCFHRAsmNL_LOCFHRAsmNLE_LOCFHRAsmNLH_LOCFHRAsmNM_LOCFHRAsmNO_LOCFHRAsmNP_LOCFHRAsmNZ_LOCFHRAsmO_LOCFHRAsmP_LOCFHRAsmZ_LOCGR_LOCGRAsm_LOCGRAsmE_LOCGRAsmH_LOCGRAsmHE_LOCGRAsmL_LOCGRAsmLE_LOCGRAsmLH_LOCGRAsmM_LOCGRAsmNE_LOCGRAsmNH_LOCGRAsmNHE_LOCGRAsmNL_LOCGRAsmNLE_LOCGRAsmNLH_LOCGRAsmNM_LOCGRAsmNO_LOCGRAsmNP_LOCGRAsmNZ_LOCGRAsmO_LOCGRAsmP_LOCGRAsmZ_LOCR_LOCRAsm_LOCRAsmE_LOCRAsmH_LOCRAsmHE_LOCRAsmL_LOCRAsmLE_LOCRAsmLH_LOCRAsmM_LOCRAsmNE_LOCRAsmNH_LOCRAsmNHE_LOCRAsmNL_LOCRAsmNLE_LOCRAsmNLH_LOCRAsmNM_LOCRAsmNO_LOCRAsmNP_LOCRAsmNZ_LOCRAsmO_LOCRAsmP_LOCRAsmZ	= 51,
    LOCHIMux_LOCGHI_LOCGHIAsm_LOCGHIAsmE_LOCGHIAsmH_LOCGHIAsmHE_LOCGHIAsmL_LOCGHIAsmLE_LOCGHIAsmLH_LOCGHIAsmM_LOCGHIAsmNE_LOCGHIAsmNH_LOCGHIAsmNHE_LOCGHIAsmNL_LOCGHIAsmNLE_LOCGHIAsmNLH_LOCGHIAsmNM_LOCGHIAsmNO_LOCGHIAsmNP_LOCGHIAsmNZ_LOCGHIAsmO_LOCGHIAsmP_LOCGHIAsmZ_LOCHHI_LOCHHIAsm_LOCHHIAsmE_LOCHHIAsmH_LOCHHIAsmHE_LOCHHIAsmL_LOCHHIAsmLE_LOCHHIAsmLH_LOCHHIAsmM_LOCHHIAsmNE_LOCHHIAsmNH_LOCHHIAsmNHE_LOCHHIAsmNL_LOCHHIAsmNLE_LOCHHIAsmNLH_LOCHHIAsmNM_LOCHHIAsmNO_LOCHHIAsmNP_LOCHHIAsmNZ_LOCHHIAsmO_LOCHHIAsmP_LOCHHIAsmZ_LOCHI_LOCHIAsm_LOCHIAsmE_LOCHIAsmH_LOCHIAsmHE_LOCHIAsmL_LOCHIAsmLE_LOCHIAsmLH_LOCHIAsmM_LOCHIAsmNE_LOCHIAsmNH_LOCHIAsmNHE_LOCHIAsmNL_LOCHIAsmNLE_LOCHIAsmNLH_LOCHIAsmNM_LOCHIAsmNO_LOCHIAsmNP_LOCHIAsmNZ_LOCHIAsmO_LOCHIAsmP_LOCHIAsmZ	= 52,
    LOCMux_LOC_LOCAsm_LOCAsmE_LOCAsmH_LOCAsmHE_LOCAsmL_LOCAsmLE_LOCAsmLH_LOCAsmM_LOCAsmNE_LOCAsmNH_LOCAsmNHE_LOCAsmNL_LOCAsmNLE_LOCAsmNLH_LOCAsmNM_LOCAsmNO_LOCAsmNP_LOCAsmNZ_LOCAsmO_LOCAsmP_LOCAsmZ_LOCFH_LOCFHAsm_LOCFHAsmE_LOCFHAsmH_LOCFHAsmHE_LOCFHAsmL_LOCFHAsmLE_LOCFHAsmLH_LOCFHAsmM_LOCFHAsmNE_LOCFHAsmNH_LOCFHAsmNHE_LOCFHAsmNL_LOCFHAsmNLE_LOCFHAsmNLH_LOCFHAsmNM_LOCFHAsmNO_LOCFHAsmNP_LOCFHAsmNZ_LOCFHAsmO_LOCFHAsmP_LOCFHAsmZ_LOCG_LOCGAsm_LOCGAsmE_LOCGAsmH_LOCGAsmHE_LOCGAsmL_LOCGAsmLE_LOCGAsmLH_LOCGAsmM_LOCGAsmNE_LOCGAsmNH_LOCGAsmNHE_LOCGAsmNL_LOCGAsmNLE_LOCGAsmNLH_LOCGAsmNM_LOCGAsmNO_LOCGAsmNP_LOCGAsmNZ_LOCGAsmO_LOCGAsmP_LOCGAsmZ	= 53,
    STOCMux_STOC_STOCAsm_STOCAsmE_STOCAsmH_STOCAsmHE_STOCAsmL_STOCAsmLE_STOCAsmLH_STOCAsmM_STOCAsmNE_STOCAsmNH_STOCAsmNHE_STOCAsmNL_STOCAsmNLE_STOCAsmNLH_STOCAsmNM_STOCAsmNO_STOCAsmNP_STOCAsmNZ_STOCAsmO_STOCAsmP_STOCAsmZ_STOCFH_STOCFHAsm_STOCFHAsmE_STOCFHAsmH_STOCFHAsmHE_STOCFHAsmL_STOCFHAsmLE_STOCFHAsmLH_STOCFHAsmM_STOCFHAsmNE_STOCFHAsmNH_STOCFHAsmNHE_STOCFHAsmNL_STOCFHAsmNLE_STOCFHAsmNLH_STOCFHAsmNM_STOCFHAsmNO_STOCFHAsmNP_STOCFHAsmNZ_STOCFHAsmO_STOCFHAsmP_STOCFHAsmZ_STOCG_STOCGAsm_STOCGAsmE_STOCGAsmH_STOCGAsmHE_STOCGAsmL_STOCGAsmLE_STOCGAsmLH_STOCGAsmM_STOCGAsmNE_STOCGAsmNH_STOCGAsmNHE_STOCGAsmNL_STOCGAsmNLE_STOCGAsmNLH_STOCGAsmNM_STOCGAsmNO_STOCGAsmNP_STOCGAsmNZ_STOCGAsmO_STOCGAsmP_STOCGAsmZ	= 54,
    SELRMux	= 55,
    SELFHR_SELFHRAsm_SELFHRAsmE_SELFHRAsmH_SELFHRAsmHE_SELFHRAsmL_SELFHRAsmLE_SELFHRAsmLH_SELFHRAsmM_SELFHRAsmNE_SELFHRAsmNH_SELFHRAsmNHE_SELFHRAsmNL_SELFHRAsmNLE_SELFHRAsmNLH_SELFHRAsmNM_SELFHRAsmNO_SELFHRAsmNP_SELFHRAsmNZ_SELFHRAsmO_SELFHRAsmP_SELFHRAsmZ_SELGR_SELGRAsm_SELGRAsmE_SELGRAsmH_SELGRAsmHE_SELGRAsmL_SELGRAsmLE_SELGRAsmLH_SELGRAsmM_SELGRAsmNE_SELGRAsmNH_SELGRAsmNHE_SELGRAsmNL_SELGRAsmNLE_SELGRAsmNLH_SELGRAsmNM_SELGRAsmNO_SELGRAsmNP_SELGRAsmNZ_SELGRAsmO_SELGRAsmP_SELGRAsmZ_SELR_SELRAsm_SELRAsmE_SELRAsmH_SELRAsmHE_SELRAsmL_SELRAsmLE_SELRAsmLH_SELRAsmM_SELRAsmNE_SELRAsmNH_SELRAsmNHE_SELRAsmNL_SELRAsmNLE_SELRAsmNLH_SELRAsmNM_SELRAsmNO_SELRAsmNP_SELRAsmNZ_SELRAsmO_SELRAsmP_SELRAsmZ	= 56,
    LBR_LGR_LHR	= 57,
    LGBR_LGFR_LGHR	= 58,
    LTGF	= 59,
    LTGFR	= 60,
    LBMux_LB_LBH	= 61,
    LH_LHY	= 62,
    LHMux_LHH_LHRL	= 63,
    LGB_LGF_LGH	= 64,
    LGFRL_LGHRL	= 65,
    LLCRMux_LLCR	= 66,
    LLHRMux_LLHR	= 67,
    LLGCR_LLGFR_LLGHR_LLGTR	= 68,
    LLCMux_LLC	= 69,
    LLHMux_LLH	= 70,
    LLCH_LLHH	= 71,
    LLHRL	= 72,
    LLGC_LLGF_LLGFRL_LLGH_LLGHRL_LLGT	= 73,
    LLZRGF	= 74,
    LLGFAT_LLGTAT	= 75,
    STCMux_STC_STCH_STCY	= 76,
    STHMux_STH_STHH_STHRL_STHY	= 77,
    STCM_STCMH_STCMY	= 78,
    LM_LMG_LMH_LMY	= 79,
    LMD	= 80,
    STM_STMG_STMH_STMY	= 81,
    LRVGR_LRVR	= 82,
    LRV_LRVG_LRVH	= 83,
    STRV_STRVG_STRVH	= 84,
    MVCIN	= 85,
    LA_LARL_LAY	= 86,
    GOT	= 87,
    LPGR_LPR	= 88,
    LNGFR_LPGFR	= 89,
    LNGR_LNR	= 90,
    LCGR_LCR	= 91,
    LCGFR	= 92,
    IC_ICY	= 93,
    IC32_IC32Y	= 94,
    ICM_ICMH_ICMY	= 95,
    IIFMux_IIHMux_IILMux	= 96,
    IIHF64_IIHF	= 97,
    IIHH64_IIHH	= 98,
    IIHL64_IIHL	= 99,
    IILF64_IILF	= 100,
    IILH64_IILH	= 101,
    IILL64_IILL	= 102,
    A_AY	= 103,
    AH_AHY	= 104,
    AIH	= 105,
    AFIMux_AFI	= 106,
    AG	= 107,
    AGFI	= 108,
    AGHI_AGHIK	= 109,
    AGR_AGRK	= 110,
    AHI_AHIK	= 111,
    AHIMux_AHIMuxK	= 112,
    AL_ALY	= 113,
    ALFI_ALHSIK	= 114,
    ALG_ALGF	= 115,
    ALGHSIK	= 116,
    ALGFI_ALGFR	= 117,
    ALGR_ALGRK	= 118,
    ALR_ALRK	= 119,
    AR_ARK	= 120,
    AHHHR_ALHHHR	= 121,
    AHHLR_ALHHLR	= 122,
    ALSIH_ALSIHN	= 123,
    AGSI_ALGSI_ALSI_ASI	= 124,
    ALC_ALCG	= 125,
    ALCGR_ALCR	= 126,
    AGF_AGH	= 127,
    AGFR	= 128,
    S_SG_SY	= 129,
    SH_SHY	= 130,
    SGR_SGRK	= 131,
    SLFI	= 132,
    SL_SLG_SLGF_SLY	= 133,
    SLGFI_SLGFR	= 134,
    SLGR_SLGRK	= 135,
    SLR_SLRK	= 136,
    SR_SRK	= 137,
    SHHHR_SLHHHR	= 138,
    SHHLR_SLHHLR	= 139,
    SLB_SLBG	= 140,
    SLBGR_SLBR	= 141,
    SGF_SGH	= 142,
    SGFR	= 143,
    N_NG_NY	= 144,
    NGR_NGRK	= 145,
    NIFMux_NIHMux_NILMux	= 146,
    NI_NIY	= 147,
    NIHF64_NIHF	= 148,
    NIHH64_NIHH	= 149,
    NIHL64_NIHL	= 150,
    NILF64_NILF	= 151,
    NILH64_NILH	= 152,
    NILL64_NILL	= 153,
    NR_NRK	= 154,
    NC	= 155,
    O_OG_OY	= 156,
    OGR_OGRK	= 157,
    OI_OIY	= 158,
    OIFMux_OIHMux_OILMux	= 159,
    OIHF64_OIHF	= 160,
    OIHH64_OIHH	= 161,
    OIHL64_OIHL	= 162,
    OILF64_OILF	= 163,
    OILH64_OILH	= 164,
    OILL64_OILL	= 165,
    OR_ORK	= 166,
    OC	= 167,
    X_XG_XY	= 168,
    XI_XIY	= 169,
    XIFMux	= 170,
    XGR_XGRK	= 171,
    XIHF64_XIHF	= 172,
    XILF64_XILF	= 173,
    XR_XRK	= 174,
    XC	= 175,
    NCGRK_NCRK	= 176,
    OCGRK_OCRK	= 177,
    NNGRK_NNRK	= 178,
    NOGRK_NORK	= 179,
    NXGRK_NXRK	= 180,
    MS_MSGF_MSY	= 181,
    MSFI_MSR	= 182,
    MSG	= 183,
    MSGR	= 184,
    MSGFI_MSGFR	= 185,
    MLG	= 186,
    MLGR	= 187,
    MGHI	= 188,
    MHI	= 189,
    MH_MHY	= 190,
    MLR_MR	= 191,
    M_MFY_ML	= 192,
    MGH	= 193,
    MG	= 194,
    MGRK	= 195,
    MSC	= 196,
    MSGC	= 197,
    MSRKC	= 198,
    MSGRKC	= 199,
    DR	= 200,
    D	= 201,
    DSGFR_DSGR	= 202,
    DSG_DSGF	= 203,
    DLR	= 204,
    DLGR	= 205,
    DL_DLG	= 206,
    SLL_SLLG_SLLK	= 207,
    SRL_SRLG_SRLK	= 208,
    SRA_SRAG_SRAK	= 209,
    SLA_SLAG_SLAK	= 210,
    SLDA_SLDL_SRDA_SRDL	= 211,
    RLL_RLLG	= 212,
    RISBG_RISBG32_RISBGN	= 213,
    RISBHH_RISBHL_RISBHG	= 214,
    RISBLH_RISBLL_RISBLG	= 215,
    RISBMux	= 216,
    RNSBG_ROSBG_RXSBG	= 217,
    CMux_C_CG_CY	= 218,
    CRL	= 219,
    CFIMux_CHIMux_CFI_CHI	= 220,
    CGFI_CGHI	= 221,
    CGHSI_CGRL	= 222,
    CGR_CR	= 223,
    CIH	= 224,
    CHF	= 225,
    CHSI	= 226,
    CLMux_CL_CLY	= 227,
    CLFHSI	= 228,
    CLFIMux_CLFI	= 229,
    CLG	= 230,
    CLGHRL_CLGHSI	= 231,
    CLGF	= 232,
    CLGFRL	= 233,
    CLGFI_CLGFR	= 234,
    CLGR	= 235,
    CLGRL	= 236,
    CLHF	= 237,
    CLHHSI_CLHRL	= 238,
    CLIH	= 239,
    CLI_CLIY	= 240,
    CLR	= 241,
    CLRL	= 242,
    CHHR_CLHHR	= 243,
    CHLR_CLHLR	= 244,
    CH_CHY	= 245,
    CHRL	= 246,
    CGH	= 247,
    CGHRL	= 248,
    CHHSI	= 249,
    CGF	= 250,
    CGFRL	= 251,
    CGFR	= 252,
    CLC	= 253,
    CLCL_CLCLE_CLCLU	= 254,
    CLST	= 255,
    TM_TMY	= 256,
    TMHMux_TMLMux	= 257,
    TMHH64_TMHH	= 258,
    TMHL64_TMHL	= 259,
    TMLH64_TMLH	= 260,
    TMLL64_TMLL	= 261,
    CLM_CLMH_CLMY	= 262,
    PFD_PFDRL	= 263,
    BPP	= 264,
    BPRP	= 265,
    NIAI	= 266,
    Serialize	= 267,
    LAA_LAAG	= 268,
    LAAL_LAALG	= 269,
    LAN_LANG	= 270,
    LAO_LAOG	= 271,
    LAX_LAXG	= 272,
    TS	= 273,
    CS_CSG_CSY	= 274,
    CDS_CDSY	= 275,
    CDSG	= 276,
    CSST	= 277,
    PLO	= 278,
    LPQ	= 279,
    STPQ	= 280,
    LPD_LPDG	= 281,
    TR	= 282,
    TRT	= 283,
    TRTR	= 284,
    TRE	= 285,
    TRTE_TRTEOpt_TRTRE_TRTREOpt	= 286,
    TROO_TROOOpt_TROT_TROTOpt_TRTO_TRTOOpt_TRTT_TRTTOpt	= 287,
    CU12_CU12Opt_CU14_CU14Opt_CU21_CU21Opt_CU24_CU24Opt_CU41_CU42	= 288,
    CUTFU_CUTFUOpt_CUUTF_CUUTFOpt	= 289,
    KM_KMA_KMC_KMCTR_KMF_KMO	= 290,
    KDSA_KIMD_KLMD_KMAC	= 291,
    PCC_PPNO_PRNO	= 292,
    LGG	= 293,
    LLGFSG	= 294,
    LGSC_STGSC	= 295,
    CVBG	= 296,
    CVB_CVBY	= 297,
    CVDG	= 298,
    CVD_CVDY	= 299,
    MVN_MVO_MVZ	= 300,
    PACK_PKA_PKU	= 301,
    UNPKA_UNPKU	= 302,
    UNPK	= 303,
    AP_SP_ZAP	= 304,
    MP	= 305,
    DP	= 306,
    SRP	= 307,
    CP	= 308,
    TP	= 309,
    ED_EDMK	= 310,
    CPYA_EAR_SAR	= 311,
    LAE_LAEY	= 312,
    LAM_LAMY	= 313,
    STAM_STAMY	= 314,
    IPM	= 315,
    SPM	= 316,
    BAL_BALR	= 317,
    TAM	= 318,
    SAM24_SAM31_SAM64	= 319,
    BSM	= 320,
    BASSM	= 321,
    TBEGIN_TBEGINC	= 322,
    TEND	= 323,
    TABORT	= 324,
    ETND	= 325,
    NTSTG	= 326,
    PPA	= 327,
    FLOGR	= 328,
    POPCNT_POPCNTOpt	= 329,
    SRST_SRSTU	= 330,
    CUSE	= 331,
    CFC	= 332,
    UPT	= 333,
    CKSM	= 334,
    CMPSC	= 335,
    SORTL	= 336,
    DFLTCC	= 337,
    NNPA	= 338,
    EX_EXRL	= 339,
    InsnE_InsnRI_InsnRIE_InsnRIL_InsnRILU_InsnRIS_InsnRR_InsnRRE_InsnRRF_InsnRRS_InsnRS_InsnRSE_InsnRSI_InsnRSY_InsnRX_InsnRXE_InsnRXF_InsnRXY_InsnS_InsnSI_InsnSIL_InsnSIY_InsnSS_InsnSSE_InsnSSF_InsnVRI_InsnVRR_InsnVRS_InsnVRV_InsnVRX_InsnVSI	= 340,
    LZDR_LZER	= 341,
    LZXR	= 342,
    LER	= 343,
    LDGR_LDR_LDR32	= 344,
    LGDR	= 345,
    LXR	= 346,
    LTDBR_LTEBR	= 347,
    LTDBRCompare_LTEBRCompare	= 348,
    LTXBR_LTXBRCompare	= 349,
    CPSDRdd_CPSDRds_CPSDRsd_CPSDRss	= 350,
    LE_LEY	= 351,
    LD_LDE32_LDY	= 352,
    LX	= 353,
    STD_STDY_STE_STEY	= 354,
    STX	= 355,
    LEDBR_LEDBRA	= 356,
    LDXBR_LDXBRA_LEXBR_LEXBRA	= 357,
    LDEB	= 358,
    LDEBR	= 359,
    LXDB_LXEB	= 360,
    LXDBR_LXEBR	= 361,
    CDFBR_CDFBRA_CDGBR_CDGBRA_CEFBR_CEFBRA_CEGBR_CEGBRA	= 362,
    CXFBR_CXFBRA_CXGBR_CXGBRA	= 363,
    CDLFBR_CDLGBR_CELFBR_CELGBR	= 364,
    CXLFBR_CXLGBR	= 365,
    CFDBR_CFDBRA_CFEBR_CFEBRA_CGDBR_CGDBRA_CGEBR_CGEBRA	= 366,
    CFXBR_CFXBRA_CGXBR_CGXBRA	= 367,
    CLFEBR	= 368,
    CLFDBR	= 369,
    CLGDBR_CLGEBR	= 370,
    CLFXBR_CLGXBR	= 371,
    LCDBR_LCEBR_LNDBR_LNEBR_LPDBR_LPEBR	= 372,
    LCDFR_LCDFR_32_LNDFR_LNDFR_32_LPDFR_LPDFR_32	= 373,
    LCXBR_LNXBR_LPXBR	= 374,
    SQDB_SQEB	= 375,
    SQEBR	= 376,
    SQDBR	= 377,
    SQXBR	= 378,
    FIDBR_FIDBRA_FIEBR_FIEBRA	= 379,
    FIXBR_FIXBRA	= 380,
    ADB_AEB	= 381,
    ADBR_AEBR	= 382,
    AXBR	= 383,
    SDB_SEB	= 384,
    SDBR_SEBR	= 385,
    SXBR	= 386,
    MDB_MDEB_MEEB	= 387,
    MDBR_MDEBR_MEEBR	= 388,
    MXDB	= 389,
    MXDBR	= 390,
    MXBR	= 391,
    MAEB_MSEB	= 392,
    MAEBR_MSEBR	= 393,
    MADB_MSDB	= 394,
    MADBR_MSDBR	= 395,
    DEB	= 396,
    DDB	= 397,
    DEBR	= 398,
    DDBR	= 399,
    DXBR	= 400,
    DIDBR_DIEBR	= 401,
    CDB_CEB_KDB_KEB	= 402,
    CDBR_CEBR_KDBR_KEBR	= 403,
    CXBR_KXBR	= 404,
    TCDB_TCEB	= 405,
    TCXB	= 406,
    EFPC	= 407,
    STFPC	= 408,
    SFPC	= 409,
    LFPC	= 410,
    SFASR	= 411,
    LFAS	= 412,
    SRNM_SRNMB_SRNMT	= 413,
    LTDR_LTER	= 414,
    LTXR	= 415,
    LEDR_LRER	= 416,
    LEXR	= 417,
    LDXR_LRDR	= 418,
    LDE	= 419,
    LDER	= 420,
    LXD_LXE	= 421,
    LXDR_LXER	= 422,
    CDFR_CDGR_CEFR_CEGR	= 423,
    CXFR_CXGR	= 424,
    CFDR_CFER_CGDR_CGER	= 425,
    CFXR_CGXR	= 426,
    THDER_THDR	= 427,
    TBDR_TBEDR	= 428,
    LCDR_LCER_LNDR_LNER_LPDR_LPER	= 429,
    LCXR_LNXR_LPXR	= 430,
    HDR_HER	= 431,
    SQD_SQE	= 432,
    SQER	= 433,
    SQDR	= 434,
    SQXR	= 435,
    FIDR_FIER	= 436,
    FIXR	= 437,
    AD_AE_AU_AW	= 438,
    ADR_AER_AUR_AWR	= 439,
    AXR	= 440,
    SD_SE_SU_SW	= 441,
    SDR_SER_SUR_SWR	= 442,
    SXR	= 443,
    MD_MDE_ME_MEE	= 444,
    MDER_MDR_MEER_MER	= 445,
    MXD	= 446,
    MXDR	= 447,
    MXR	= 448,
    MY	= 449,
    MYH_MYL	= 450,
    MYR	= 451,
    MYHR_MYLR	= 452,
    MAD_MAE_MSD_MSE	= 453,
    MADR_MAER_MSDR_MSER	= 454,
    MAY	= 455,
    MAYH_MAYL	= 456,
    MAYR	= 457,
    MAYHR_MAYLR	= 458,
    DE	= 459,
    DD	= 460,
    DER	= 461,
    DDR	= 462,
    DXR	= 463,
    CD_CE	= 464,
    CDR_CER	= 465,
    CXR	= 466,
    LTDTR	= 467,
    LTXTR	= 468,
    LEDTR	= 469,
    LDXTR	= 470,
    LDETR	= 471,
    LXDTR	= 472,
    CDFTR	= 473,
    CDGTR_CDGTRA	= 474,
    CXFTR	= 475,
    CXGTR_CXGTRA	= 476,
    CDLFTR	= 477,
    CDLGTR	= 478,
    CXLFTR	= 479,
    CXLGTR	= 480,
    CFDTR_CGDTR_CGDTRA	= 481,
    CFXTR_CGXTR_CGXTRA	= 482,
    CLFDTR_CLGDTR	= 483,
    CLFXTR_CLGXTR	= 484,
    CDSTR_CDUTR	= 485,
    CXSTR_CXUTR	= 486,
    CSDTR_CUDTR	= 487,
    CSXTR_CUXTR	= 488,
    CDZT	= 489,
    CXZT	= 490,
    CZDT	= 491,
    CZXT	= 492,
    CDPT	= 493,
    CXPT	= 494,
    CPDT	= 495,
    CPXT	= 496,
    PFPO	= 497,
    FIDTR	= 498,
    FIXTR	= 499,
    EEDTR	= 500,
    EEXTR	= 501,
    ESDTR	= 502,
    ESXTR	= 503,
    ADTR_ADTRA	= 504,
    AXTR_AXTRA	= 505,
    SDTR_SDTRA	= 506,
    SXTR_SXTRA	= 507,
    MDTR_MDTRA	= 508,
    MXTR_MXTRA	= 509,
    DDTR_DDTRA	= 510,
    DXTR_DXTRA	= 511,
    QADTR	= 512,
    QAXTR	= 513,
    RRDTR	= 514,
    RRXTR	= 515,
    SLDT_SRDT	= 516,
    SLXT_SRXT	= 517,
    IEDTR	= 518,
    IEXTR	= 519,
    CDTR_KDTR	= 520,
    CXTR_KXTR	= 521,
    CEDTR	= 522,
    CEXTR	= 523,
    TDCDT_TDCET_TDGDT_TDGET	= 524,
    TDCXT_TDGXT	= 525,
    VLR32_VLR64_VLR	= 526,
    VLGV_VLGVB_VLGVF_VLGVG_VLGVH	= 527,
    VLVG_VLVGB_VLVGF_VLVGG_VLVGH	= 528,
    VLVGP32_VLVGP	= 529,
    VZERO	= 530,
    VONE	= 531,
    VGBM	= 532,
    VGM_VGMB_VGMF_VGMG_VGMH	= 533,
    VREPI_VREPIB_VREPIF_VREPIG_VREPIH	= 534,
    VLEIB_VLEIF_VLEIG_VLEIH	= 535,
    VL_VLAlign	= 536,
    VLBB_VLL	= 537,
    VL32_VL64	= 538,
    VLLEZ_VLLEZB_VLLEZF_VLLEZG_VLLEZH_VLLEZLF	= 539,
    VLREP_VLREPB_VLREPF_VLREPG_VLREPH	= 540,
    VLEB_VLEF_VLEG_VLEH	= 541,
    VGEF_VGEG	= 542,
    VLM_VLMAlign	= 543,
    VLRL_VLRLR	= 544,
    VST32_VST64_VST_VSTAlign_VSTL	= 545,
    VSTEF_VSTEG	= 546,
    VSTEB_VSTEH	= 547,
    VSTM_VSTMAlign	= 548,
    VSCEF_VSCEG	= 549,
    VSTRL_VSTRLR	= 550,
    VLBR_VLBRF_VLBRG_VLBRH_VLBRQ	= 551,
    VLER_VLERF_VLERG_VLERH	= 552,
    VLEBRF_VLEBRG_VLEBRH	= 553,
    VLLEBRZ_VLLEBRZE_VLLEBRZF_VLLEBRZG_VLLEBRZH	= 554,
    VLBRREP_VLBRREPF_VLBRREPG_VLBRREPH	= 555,
    VSTBR_VSTBRF_VSTBRG_VSTBRH_VSTBRQ	= 556,
    VSTER_VSTERF_VSTERG_VSTERH	= 557,
    VSTEBRH	= 558,
    VSTEBRF_VSTEBRG	= 559,
    VMRH_VMRHB_VMRHF_VMRHG_VMRHH	= 560,
    VMRL_VMRLB_VMRLF_VMRLG_VMRLH	= 561,
    VPERM	= 562,
    VPDI	= 563,
    VBPERM	= 564,
    VREP_VREPB_VREPF_VREPG_VREPH	= 565,
    VSEL	= 566,
    VPK_VPKF_VPKG_VPKH	= 567,
    VPKS_VPKSF_VPKSG_VPKSH	= 568,
    VPKSFS_VPKSGS_VPKSHS	= 569,
    VPKLS_VPKLSF_VPKLSG_VPKLSH	= 570,
    VPKLSFS_VPKLSGS_VPKLSHS	= 571,
    VSEG_VSEGB_VSEGF_VSEGH	= 572,
    VUPH_VUPHB_VUPHF_VUPHH	= 573,
    VUPL_VUPLB_VUPLF	= 574,
    VUPLH_VUPLHB_VUPLHF_VUPLHH_VUPLHW	= 575,
    VUPLL_VUPLLB_VUPLLF_VUPLLH	= 576,
    VA_VAB_VAC_VACQ_VAF_VAG_VAH_VAQ	= 577,
    VACC_VACCB_VACCC_VACCCQ_VACCF_VACCG_VACCH_VACCQ	= 578,
    VAVG_VAVGB_VAVGF_VAVGG_VAVGH	= 579,
    VAVGL_VAVGLB_VAVGLF_VAVGLG_VAVGLH	= 580,
    VN_VNC_VNN_VNO_VNX	= 581,
    VO_VOC	= 582,
    VCKSM	= 583,
    VCLZ_VCLZB_VCLZF_VCLZG_VCLZH	= 584,
    VCTZ_VCTZB_VCTZF_VCTZG_VCTZH	= 585,
    VX	= 586,
    VGFM	= 587,
    VGFMA_VGFMAB_VGFMAF_VGFMAG_VGFMAH	= 588,
    VGFMB_VGFMF_VGFMG_VGFMH	= 589,
    VLC_VLCB_VLCF_VLCG_VLCH	= 590,
    VLP_VLPB_VLPF_VLPG_VLPH	= 591,
    VMX_VMXB_VMXF_VMXG_VMXH	= 592,
    VMXL_VMXLB_VMXLF_VMXLG_VMXLH	= 593,
    VMN_VMNB_VMNF_VMNG_VMNH	= 594,
    VMNL_VMNLB_VMNLF_VMNLG_VMNLH	= 595,
    VMAL_VMALB_VMALF	= 596,
    VMALE_VMALEB_VMALEF_VMALEH	= 597,
    VMALH_VMALHB_VMALHF_VMALHH_VMALHW	= 598,
    VMALO_VMALOB_VMALOF_VMALOH	= 599,
    VMAO_VMAOB_VMAOF_VMAOH	= 600,
    VMAE_VMAEB_VMAEF_VMAEH	= 601,
    VMAH_VMAHB_VMAHF_VMAHH	= 602,
    VME_VMEB_VMEF_VMEH	= 603,
    VMH_VMHB_VMHF_VMHH	= 604,
    VML_VMLB_VMLF	= 605,
    VMLE_VMLEB_VMLEF_VMLEH	= 606,
    VMLH_VMLHB_VMLHF_VMLHH_VMLHW	= 607,
    VMLO_VMLOB_VMLOF_VMLOH	= 608,
    VMO_VMOB_VMOF_VMOH	= 609,
    VMSL_VMSLG	= 610,
    VPOPCT_VPOPCTB_VPOPCTF_VPOPCTG_VPOPCTH	= 611,
    VERLL_VERLLB_VERLLF_VERLLG_VERLLH	= 612,
    VERLLV_VERLLVB_VERLLVF_VERLLVG_VERLLVH	= 613,
    VERIM_VERIMB_VERIMF_VERIMG_VERIMH	= 614,
    VESL_VESLB_VESLF_VESLG_VESLH	= 615,
    VESLV_VESLVB_VESLVF_VESLVG_VESLVH	= 616,
    VESRA_VESRAB_VESRAF_VESRAG_VESRAH	= 617,
    VESRAV_VESRAVB_VESRAVF_VESRAVG_VESRAVH	= 618,
    VESRL_VESRLB_VESRLF_VESRLG_VESRLH	= 619,
    VESRLV_VESRLVB_VESRLVF_VESRLVG_VESRLVH	= 620,
    VSL_VSLDB	= 621,
    VSLB	= 622,
    VSRA_VSRL	= 623,
    VSRAB_VSRLB	= 624,
    VSLD	= 625,
    VSRD	= 626,
    VSB_VSBCBI_VSBCBIQ_VSBI_VSBIQ	= 627,
    VSCBI_VSCBIB_VSCBIF_VSCBIG_VSCBIH_VSCBIQ	= 628,
    VS_VSF_VSG_VSH_VSQ	= 629,
    VSUM_VSUMB_VSUMH	= 630,
    VSUMG_VSUMGF_VSUMGH	= 631,
    VSUMQ_VSUMQF_VSUMQG	= 632,
    VEC_VECB_VECF_VECG_VECH	= 633,
    VECL_VECLB_VECLF_VECLG_VECLH	= 634,
    VCEQ_VCEQB_VCEQF_VCEQG_VCEQH	= 635,
    VCEQBS_VCEQFS_VCEQGS_VCEQHS	= 636,
    VCH_VCHB_VCHF_VCHG_VCHH	= 637,
    VCHBS_VCHFS_VCHGS_VCHHS	= 638,
    VCHL_VCHLB_VCHLF_VCHLG_VCHLH	= 639,
    VCHLBS_VCHLFS_VCHLGS_VCHLHS	= 640,
    VTM	= 641,
    VCFPL_VCFPS	= 642,
    VCDG_VCDLG	= 643,
    VCDGB_VCDLGB	= 644,
    WCDGB_WCDLGB	= 645,
    VCEFB_VCELFB	= 646,
    WCEFB_WCELFB	= 647,
    VCLFP_VCSFP	= 648,
    VCGD_VCLGD	= 649,
    VCGDB_VCLGDB	= 650,
    WCGDB_WCLGDB	= 651,
    VCFEB_VCLFEB	= 652,
    WCFEB_WCLFEB	= 653,
    VLDE_VLED	= 654,
    VLDEB_VLEDB	= 655,
    WLDEB_WLEDB	= 656,
    VFLL_VFLR	= 657,
    VFLLS_VFLRD	= 658,
    WFLLS_WFLRD	= 659,
    WFLLD	= 660,
    WFLRX	= 661,
    VFI_VFIDB	= 662,
    WFIDB	= 663,
    VFISB	= 664,
    WFISB	= 665,
    WFIXB	= 666,
    VFPSO	= 667,
    VFPSODB_WFPSODB	= 668,
    VFPSOSB_WFPSOSB	= 669,
    WFPSOXB	= 670,
    VFLCDB_VFLNDB_VFLPDB_WFLCDB_WFLNDB_WFLPDB	= 671,
    VFLCSB_VFLNSB_VFLPSB_WFLCSB_WFLNSB_WFLPSB	= 672,
    WFLCXB_WFLNXB_WFLPXB	= 673,
    VFMAX_VFMIN	= 674,
    VFMAXDB_VFMINDB	= 675,
    WFMAXDB_WFMINDB	= 676,
    VFMAXSB_VFMINSB	= 677,
    WFMAXSB_WFMINSB	= 678,
    WFMAXXB_WFMINXB	= 679,
    VFTCI	= 680,
    VFTCIDB_WFTCIDB	= 681,
    VFTCISB_WFTCISB	= 682,
    WFTCIXB	= 683,
    VFA_VFS	= 684,
    VFADB_VFSDB	= 685,
    WFADB_WFSDB	= 686,
    VFASB_VFSSB	= 687,
    WFASB_WFSSB	= 688,
    WFAXB_WFSXB	= 689,
    VFM_VFMDB	= 690,
    WFMDB_WFMSB	= 691,
    VFMSB	= 692,
    WFMXB	= 693,
    VFMA_VFMS_VFNMA_VFNMS	= 694,
    VFMADB_VFMSDB_VFNMADB_VFNMSDB	= 695,
    WFMADB_WFMSDB_WFNMADB_WFNMSDB	= 696,
    VFMASB_VFMSSB_VFNMASB_VFNMSSB	= 697,
    WFMASB_WFMSSB_WFNMASB_WFNMSSB	= 698,
    WFMAXB_WFMSXB_WFNMAXB_WFNMSXB	= 699,
    VFD	= 700,
    VFDDB_WFDDB	= 701,
    WFDSB	= 702,
    VFDSB	= 703,
    WFDXB	= 704,
    VFSQ	= 705,
    VFSQDB_WFSQDB	= 706,
    WFSQSB	= 707,
    VFSQSB	= 708,
    WFSQXB	= 709,
    VFCE_VFCH_VFCHE	= 710,
    VFCEDB_VFCHDB_VFCHEDB_VFKEDB_VFKHDB_VFKHEDB	= 711,
    WFCEDB_WFCHDB_WFCHEDB	= 712,
    WFKEDB_WFKHDB_WFKHEDB	= 713,
    VFCESB_VFCHESB_VFCHSB_VFKESB_VFKHESB_VFKHSB	= 714,
    WFCESB_WFCHESB_WFCHSB	= 715,
    WFKESB_WFKHESB_WFKHSB	= 716,
    WFCEXB_WFCHEXB_WFCHXB	= 717,
    WFKEXB_WFKHEXB_WFKHXB	= 718,
    VFCEDBS_VFCHDBS_VFCHEDBS	= 719,
    VFKEDBS_VFKHDBS_VFKHEDBS	= 720,
    WFCEDBS_WFCHDBS_WFCHEDBS_WFKEDBS_WFKHDBS_WFKHEDBS	= 721,
    VFCESBS_VFCHESBS_VFCHSBS_VFKESBS_VFKHESBS_VFKHSBS	= 722,
    WFCESBS_WFCHESBS_WFCHSBS	= 723,
    WFKESBS_WFKHESBS_WFKHSBS	= 724,
    WFCEXBS_WFCHEXBS_WFCHXBS	= 725,
    WFKEXBS_WFKHEXBS_WFKHXBS	= 726,
    WFC_WFK	= 727,
    WFCDB_WFKDB	= 728,
    WFCSB_WFKSB	= 729,
    WFCXB_WFKXB	= 730,
    LEFR	= 731,
    LFER	= 732,
    VFAE_VFAEB	= 733,
    VFAEF_VFAEH	= 734,
    VFAEBS_VFAEFS_VFAEHS	= 735,
    VFAEZB_VFAEZF_VFAEZH	= 736,
    VFAEZBS_VFAEZFS_VFAEZHS	= 737,
    VFEE_VFEEB_VFEEF_VFEEH_VFEEZB_VFEEZF_VFEEZH	= 738,
    VFEEBS_VFEEFS_VFEEHS_VFEEZBS_VFEEZFS_VFEEZHS	= 739,
    VFENE_VFENEB_VFENEF_VFENEH_VFENEZB_VFENEZF_VFENEZH	= 740,
    VFENEBS_VFENEFS_VFENEHS_VFENEZBS_VFENEZFS_VFENEZHS	= 741,
    VISTR_VISTRB_VISTRF_VISTRH	= 742,
    VISTRBS_VISTRFS_VISTRHS	= 743,
    VSTRC_VSTRCB_VSTRCF_VSTRCH	= 744,
    VSTRCBS_VSTRCFS_VSTRCHS	= 745,
    VSTRCZB_VSTRCZF_VSTRCZH	= 746,
    VSTRCZBS_VSTRCZFS_VSTRCZHS	= 747,
    VSTRS_VSTRSB_VSTRSF_VSTRSH	= 748,
    VSTRSZB_VSTRSZF_VSTRSZH	= 749,
    VCFN	= 750,
    VCLFNH_VCLFNL	= 751,
    VCNF_VCRNF	= 752,
    VLIP	= 753,
    VPKZ	= 754,
    VUPKZ	= 755,
    VCVB_VCVBG_VCVBGOpt_VCVBOpt	= 756,
    VCVD_VCVDG	= 757,
    VAP_VSP	= 758,
    VMP_VMSP	= 759,
    VDP_VRP	= 760,
    VSDP	= 761,
    VSRP	= 762,
    VPSOP	= 763,
    VCP_VTP	= 764,
    VSCHDP_VSCHP_VSCHSP_VSCHXP	= 765,
    VSCSHP	= 766,
    VCSPH	= 767,
    VCLZDP	= 768,
    VSRPR	= 769,
    VPKZR	= 770,
    VUPKZH	= 771,
    VUPKZL	= 772,
    EPSW	= 773,
    LPSW_LPSWE_LPSWEY	= 774,
    IPK	= 775,
    SPKA	= 776,
    SSM	= 777,
    STNSM_STOSM	= 778,
    IAC	= 779,
    SAC_SACF	= 780,
    LCTL_LCTLG	= 781,
    STCTG_STCTL	= 782,
    EPAIR_EPAR_ESAIR_ESAR	= 783,
    SSAIR_SSAR	= 784,
    ESEA	= 785,
    SPX_STPX	= 786,
    LBEAR	= 787,
    STBEAR	= 788,
    ISKE	= 789,
    IVSK	= 790,
    SSKE_SSKEOpt	= 791,
    RRBE_RRBM	= 792,
    IRBM	= 793,
    PFMF	= 794,
    TB	= 795,
    PGIN	= 796,
    PGOUT	= 797,
    IPTE_IPTEOpt_IPTEOptOpt	= 798,
    IDTE_IDTEOpt	= 799,
    RDP_RDPOpt	= 800,
    CRDTE_CRDTEOpt	= 801,
    PTLB	= 802,
    CSP_CSPG	= 803,
    LPTEA	= 804,
    LRA_LRAG_LRAY	= 805,
    STRAG	= 806,
    LURA_LURAG	= 807,
    STURA_STURG	= 808,
    TPROT	= 809,
    MVCK_MVCP_MVCS	= 810,
    MVCDK_MVCSK	= 811,
    MVCOS	= 812,
    MVPG	= 813,
    LASP	= 814,
    PALB	= 815,
    PC	= 816,
    PR	= 817,
    PT_PTI	= 818,
    RP	= 819,
    BSA_BSG	= 820,
    TAR	= 821,
    BAKR	= 822,
    EREG_EREGG	= 823,
    ESTA_MSTA	= 824,
    PTFF	= 825,
    SCK_SCKC_SCKPF	= 826,
    SPT	= 827,
    STCK_STCKF	= 828,
    STCKE	= 829,
    STCKC	= 830,
    STPT	= 831,
    STAP	= 832,
    STIDP	= 833,
    STSI	= 834,
    STFL_STFLE	= 835,
    ECAG	= 836,
    ECTG	= 837,
    PTF	= 838,
    PCKMO	= 839,
    QPACI	= 840,
    SVC	= 841,
    MC	= 842,
    DIAG	= 843,
    TRACE_TRACG	= 844,
    TRAP2_TRAP4	= 845,
    SIGA_SIGP	= 846,
    SIE	= 847,
    LPP	= 848,
    ECPGA	= 849,
    ECCTR_EPCTR	= 850,
    LCCTL	= 851,
    LPCTL_LSCTL	= 852,
    QCTRI_QSI	= 853,
    SCCTR_SPCTR	= 854,
    CSCH_HSCH_RSCH_XSCH	= 855,
    MSCH_SSCH_STSCH_TSCH	= 856,
    RCHP	= 857,
    SCHM	= 858,
    STCPS_STCRW	= 859,
    TPI	= 860,
    SAL	= 861,
    LPSW_LPSWE	= 862,
    KIMD_KLMD_KMAC	= 863,
    POPCNT	= 864,
    VFI	= 865,
    VFM	= 866,
    VCVB_VCVBG	= 867,
    AGF	= 868,
    SGF	= 869,
    KM_KMC_KMCTR_KMF_KMO	= 870,
    PCC_PPNO	= 871,
    VLLEZ_VLLEZB_VLLEZF_VLLEZG_VLLEZH	= 872,
    VN_VNC_VNO	= 873,
    VO	= 874,
    VPOPCT	= 875,
    WFMDB	= 876,
    VFMA_VFMS	= 877,
    VFMADB_VFMSDB	= 878,
    WFMADB_WFMSDB	= 879,
    VFCEDB_VFCHDB_VFCHEDB	= 880,
    WFCEDBS_WFCHDBS_WFCHEDBS	= 881,
    LOCGR_LOCGRAsm_LOCGRAsmE_LOCGRAsmH_LOCGRAsmHE_LOCGRAsmL_LOCGRAsmLE_LOCGRAsmLH_LOCGRAsmM_LOCGRAsmNE_LOCGRAsmNH_LOCGRAsmNHE_LOCGRAsmNL_LOCGRAsmNLE_LOCGRAsmNLH_LOCGRAsmNM_LOCGRAsmNO_LOCGRAsmNP_LOCGRAsmNZ_LOCGRAsmO_LOCGRAsmP_LOCGRAsmZ_LOCR_LOCRAsm_LOCRAsmE_LOCRAsmH_LOCRAsmHE_LOCRAsmL_LOCRAsmLE_LOCRAsmLH_LOCRAsmM_LOCRAsmNE_LOCRAsmNH_LOCRAsmNHE_LOCRAsmNL_LOCRAsmNLE_LOCRAsmNLH_LOCRAsmNM_LOCRAsmNO_LOCRAsmNP_LOCRAsmNZ_LOCRAsmO_LOCRAsmP_LOCRAsmZ	= 882,
    LOC_LOCAsm_LOCAsmE_LOCAsmH_LOCAsmHE_LOCAsmL_LOCAsmLE_LOCAsmLH_LOCAsmM_LOCAsmNE_LOCAsmNH_LOCAsmNHE_LOCAsmNL_LOCAsmNLE_LOCAsmNLH_LOCAsmNM_LOCAsmNO_LOCAsmNP_LOCAsmNZ_LOCAsmO_LOCAsmP_LOCAsmZ_LOCG_LOCGAsm_LOCGAsmE_LOCGAsmH_LOCGAsmHE_LOCGAsmL_LOCGAsmLE_LOCGAsmLH_LOCGAsmM_LOCGAsmNE_LOCGAsmNH_LOCGAsmNHE_LOCGAsmNL_LOCGAsmNLE_LOCGAsmNLH_LOCGAsmNM_LOCGAsmNO_LOCGAsmNP_LOCGAsmNZ_LOCGAsmO_LOCGAsmP_LOCGAsmZ	= 883,
    STOC_STOCAsm_STOCAsmE_STOCAsmH_STOCAsmHE_STOCAsmL_STOCAsmLE_STOCAsmLH_STOCAsmM_STOCAsmNE_STOCAsmNH_STOCAsmNHE_STOCAsmNL_STOCAsmNLE_STOCAsmNLH_STOCAsmNM_STOCAsmNO_STOCAsmNP_STOCAsmNZ_STOCAsmO_STOCAsmP_STOCAsmZ_STOCG_STOCGAsm_STOCGAsmE_STOCGAsmH_STOCGAsmHE_STOCGAsmL_STOCGAsmLE_STOCGAsmLH_STOCGAsmM_STOCGAsmNE_STOCGAsmNH_STOCGAsmNHE_STOCGAsmNL_STOCGAsmNLE_STOCGAsmNLH_STOCGAsmNM_STOCGAsmNO_STOCGAsmNP_STOCGAsmNZ_STOCGAsmO_STOCGAsmP_STOCGAsmZ	= 884,
    ALSI_ASI	= 885,
    ALGF	= 886,
    PCC	= 887,
    CELFBR_CELGBR	= 888,
    MD_MEE	= 889,
    MDR_MEER	= 890,
    CFDTR	= 891,
    CFXTR	= 892,
    TDCDT_TDGDT	= 893,
    SCK	= 894,
    SCKPF	= 895,
    RISBG_RISBG32	= 896,
    SCHED_LIST_END = 897
  };
} // end namespace Sched
} // end namespace SystemZ
} // end namespace llvm
#endif // GET_INSTRINFO_SCHED_ENUM

#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC
namespace llvm {

static const MCPhysReg ImplicitList1[] = { SystemZ::FPC, SystemZ::CC };
static const MCPhysReg ImplicitList2[] = { SystemZ::CC };
static const MCPhysReg ImplicitList3[] = { SystemZ::FPC, SystemZ::R14D, SystemZ::CC };
static const MCPhysReg ImplicitList4[] = { SystemZ::FPC, SystemZ::R3D, SystemZ::CC };
static const MCPhysReg ImplicitList5[] = { SystemZ::FPC, SystemZ::R7D, SystemZ::CC };
static const MCPhysReg ImplicitList6[] = { SystemZ::FPC };
static const MCPhysReg ImplicitList7[] = { SystemZ::R15D, SystemZ::R15D, SystemZ::CC };
static const MCPhysReg ImplicitList8[] = { SystemZ::R15D, SystemZ::R1D, SystemZ::R15D, SystemZ::CC };
static const MCPhysReg ImplicitList9[] = { SystemZ::R14D, SystemZ::CC };
static const MCPhysReg ImplicitList10[] = { SystemZ::R3D, SystemZ::R4D, SystemZ::R3D, SystemZ::CC };
static const MCPhysReg ImplicitList11[] = { SystemZ::CC, SystemZ::CC };
static const MCPhysReg ImplicitList12[] = { SystemZ::R1D, SystemZ::R2D, SystemZ::R3D, SystemZ::CC, SystemZ::R1D, SystemZ::R2D, SystemZ::R3D };
static const MCPhysReg ImplicitList13[] = { SystemZ::R0L, SystemZ::CC };
static const MCPhysReg ImplicitList14[] = { SystemZ::R0L, SystemZ::R1D, SystemZ::CC, SystemZ::R1D };
static const MCPhysReg ImplicitList15[] = { SystemZ::R1L, SystemZ::CC };
static const MCPhysReg ImplicitList16[] = { SystemZ::R0L, SystemZ::R1D, SystemZ::CC };
static const MCPhysReg ImplicitList17[] = { SystemZ::R0L, SystemZ::R1L, SystemZ::CC };
static const MCPhysReg ImplicitList18[] = { SystemZ::R0D, SystemZ::R1D };
static const MCPhysReg ImplicitList19[] = { SystemZ::R2L, SystemZ::R2L };
static const MCPhysReg ImplicitList20[] = { SystemZ::R0L, SystemZ::R1L };
static const MCPhysReg ImplicitList21[] = { SystemZ::R0L };
static const MCPhysReg ImplicitList22[] = { SystemZ::R0D, SystemZ::R1D, SystemZ::R0D, SystemZ::CC };
static const MCPhysReg ImplicitList23[] = { SystemZ::R0L, SystemZ::R1D };
static const MCPhysReg ImplicitList24[] = { SystemZ::FPC, SystemZ::R0L, SystemZ::F4Q, SystemZ::CC, SystemZ::R1L, SystemZ::F0Q };
static const MCPhysReg ImplicitList25[] = { SystemZ::R0D, SystemZ::R0D, SystemZ::CC };
static const MCPhysReg ImplicitList26[] = { SystemZ::R1L };
static const MCPhysReg ImplicitList27[] = { SystemZ::R1L, SystemZ::R2D };
static const MCPhysReg ImplicitList28[] = { SystemZ::R0D, SystemZ::R1D, SystemZ::R2D, SystemZ::R3D, SystemZ::CC };
static const MCPhysReg ImplicitList29[] = { SystemZ::FPC, SystemZ::FPC };
static const MCPhysReg ImplicitList30[] = { SystemZ::R0L, SystemZ::R1L, SystemZ::R0L, SystemZ::CC };
static const MCPhysReg ImplicitList31[] = { SystemZ::CC, SystemZ::R0L, SystemZ::R1D };
static const MCPhysReg ImplicitList32[] = { SystemZ::R1D, SystemZ::CC };
static const MCPhysReg ImplicitList33[] = { SystemZ::R0D, SystemZ::R1D, SystemZ::R2D, SystemZ::R3D, SystemZ::R4D, SystemZ::R5D, SystemZ::CC, SystemZ::R0D, SystemZ::R1D, SystemZ::R2D, SystemZ::R3D, SystemZ::R5D };

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, MCOI_TIED_TO(0) }, };
static const MCOperandInfo OperandInfo10[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_IMM_0, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo20[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo21[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo22[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_IMM_0, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo24[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_IMM_0, 0 }, };
static const MCOperandInfo OperandInfo25[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo27[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_2, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo28[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_2, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo29[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_2, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo30[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo31[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo32[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo33[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo34[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo35[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo36[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo37[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_IMM_0, 0 }, };
static const MCOperandInfo OperandInfo38[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo39[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_2, 0 }, };
static const MCOperandInfo OperandInfo40[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_2, 0 }, };
static const MCOperandInfo OperandInfo41[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo42[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo43[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_2, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_IMM_0, 0 }, };
static const MCOperandInfo OperandInfo44[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo45[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo46[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo47[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo48[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo49[] = { { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo50[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo51[] = { { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo52[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo53[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo54[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo55[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo56[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo57[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo58[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo59[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo60[] = { { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo61[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo62[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo63[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo64[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo65[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo66[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo67[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo68[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo69[] = { { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo70[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo71[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo72[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo73[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo74[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo75[] = { { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo76[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo77[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo78[] = { { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo79[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo80[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo81[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo82[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo83[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo84[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo85[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo86[] = { { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo87[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo88[] = { { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo89[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo90[] = { { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo91[] = { { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo92[] = { { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo93[] = { { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo94[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo95[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo96[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo97[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo98[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo99[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo100[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo101[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo102[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo103[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo104[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo105[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo106[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo107[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo108[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo109[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo110[] = { { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo111[] = { { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo112[] = { { SystemZ::GRX32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo113[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo114[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo115[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo116[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo117[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo118[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo119[] = { { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo120[] = { { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo121[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo122[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo123[] = { { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo124[] = { { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo125[] = { { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo126[] = { { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo127[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo128[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo129[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo130[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo131[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo132[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo133[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo134[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo135[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo136[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo137[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo138[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo139[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo140[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo141[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo142[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo143[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo144[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo145[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo146[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo147[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo148[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo149[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo150[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo151[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo152[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo153[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo154[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo155[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo156[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo157[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo158[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo159[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo160[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo161[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo162[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo163[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo164[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo165[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo166[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo167[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo168[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo169[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo170[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo171[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo172[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo173[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo174[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo175[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo176[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo177[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo178[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo179[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo180[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo181[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo182[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo183[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo184[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo185[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo186[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo187[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo188[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo189[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo190[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo191[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo192[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo193[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo194[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo195[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo196[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo197[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo198[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo199[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo200[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo201[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo202[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo203[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo204[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo205[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo206[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo207[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo208[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo209[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo210[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo211[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo212[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo213[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(1) }, };
static const MCOperandInfo OperandInfo214[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo215[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(1) }, };
static const MCOperandInfo OperandInfo216[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(1) }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo217[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo218[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo219[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo220[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo221[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo222[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo223[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo224[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(1) }, };
static const MCOperandInfo OperandInfo225[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo226[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo227[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo228[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo229[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo230[] = { { SystemZ::AR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::AR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo231[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo232[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo233[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo234[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo235[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo236[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo237[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(1) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo238[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo239[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo240[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo241[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo242[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo243[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo244[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo245[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo246[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(1) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo247[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo248[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo249[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo250[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::AR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo251[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo252[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo253[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo254[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, };
static const MCOperandInfo OperandInfo255[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo256[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo257[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo258[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo259[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo260[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo261[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo262[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo263[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo264[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo265[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo266[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo267[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo268[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo269[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo270[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo271[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo272[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo273[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo274[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo275[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo276[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo277[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo278[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo279[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo280[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo281[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo282[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo283[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo284[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo285[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo286[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::AnyRegBitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo287[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo288[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo289[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo290[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, };
static const MCOperandInfo OperandInfo291[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(1) }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(2) }, };
static const MCOperandInfo OperandInfo292[] = { { SystemZ::AR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::AR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo293[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo294[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo295[] = { { SystemZ::CR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::CR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo296[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo297[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo298[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo299[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo300[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo301[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo302[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo303[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo304[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo305[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo306[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo307[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo308[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo309[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo310[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo311[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo312[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo313[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo314[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo315[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo316[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo317[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo318[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo319[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo320[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo321[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo322[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo323[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo324[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo325[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo326[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo327[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo328[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo329[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo330[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo331[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo332[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo333[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo334[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo335[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo336[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo337[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo338[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo339[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo340[] = { { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo341[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo342[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo343[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo344[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo345[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo346[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo347[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, };
static const MCOperandInfo OperandInfo348[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo349[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo350[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, };
static const MCOperandInfo OperandInfo351[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo352[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo353[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo354[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo355[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo356[] = { { SystemZ::AR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo357[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo358[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo359[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo360[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo361[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo362[] = { { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::FP128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo363[] = { { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo364[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo365[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo366[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo367[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo368[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo369[] = { { SystemZ::GRH32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo370[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo371[] = { { SystemZ::FP32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SystemZ::FP64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo372[] = { { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo373[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(1) }, };
static const MCOperandInfo OperandInfo374[] = { { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(1) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo375[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(1) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo376[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(1) }, };
static const MCOperandInfo OperandInfo377[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo378[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo379[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo380[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo381[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo382[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo383[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo384[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo385[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo386[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo387[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo388[] = { { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo389[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo390[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo391[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo392[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo393[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo394[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo395[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo396[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo397[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo398[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo399[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo400[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo401[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo402[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo403[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo404[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo405[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo406[] = { { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo407[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo408[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo409[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo410[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo411[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo412[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo413[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, MCOI_TIED_TO(0) }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR32BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, };
static const MCOperandInfo OperandInfo414[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::GR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo415[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo416[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::ADDR64BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_MEMORY, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_MEMORY, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo417[] = { { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo418[] = { { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo419[] = { { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo420[] = { { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo421[] = { { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo422[] = { { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo423[] = { { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo424[] = { { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR128BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo425[] = { { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo426[] = { { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo427[] = { { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo428[] = { { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo429[] = { { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR64BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo430[] = { { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SystemZ::VR32BitRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };

extern const MCInstrDesc SystemZInsts[] = {
  { 3139,	6,	0,	6,	304,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo144 },  // Inst #3139 = ZAP
  { 3138,	5,	1,	6,	168,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x2308cULL, ImplicitList2, OperandInfo128 },  // Inst #3138 = XY
  { 3137,	0,	0,	4,	855,	1,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList15, nullptr },  // Inst #3137 = XSCH
  { 3136,	3,	1,	4,	174,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo143 },  // Inst #3136 = XRK
  { 3135,	3,	1,	2,	174,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo142 },  // Inst #3135 = XR
  { 3134,	3,	0,	6,	169,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo121 },  // Inst #3134 = XIY
  { 3133,	3,	1,	6,	173,	0,	1,	0, 0x23000ULL, ImplicitList2, OperandInfo135 },  // Inst #3133 = XILF
  { 3132,	3,	1,	6,	172,	0,	1,	0, 0x23000ULL, ImplicitList2, OperandInfo141 },  // Inst #3132 = XIHF
  { 3131,	3,	0,	4,	169,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo121 },  // Inst #3131 = XI
  { 3130,	3,	1,	4,	171,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo105 },  // Inst #3130 = XGRK
  { 3129,	3,	1,	4,	171,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo138 },  // Inst #3129 = XGR
  { 3128,	5,	1,	6,	168,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x2310cULL, ImplicitList2, OperandInfo136 },  // Inst #3128 = XG
  { 3127,	5,	0,	6,	175,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo214 },  // Inst #3127 = XC
  { 3126,	5,	1,	4,	168,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x23088ULL, ImplicitList2, OperandInfo128 },  // Inst #3126 = X
  { 3125,	4,	1,	6,	656,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo423 },  // Inst #3125 = WLEDB
  { 3124,	2,	1,	6,	656,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo422 },  // Inst #3124 = WLDEB
  { 3123,	3,	1,	6,	683,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo383 },  // Inst #3123 = WFTCIXB
  { 3122,	3,	1,	6,	682,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo430 },  // Inst #3122 = WFTCISB
  { 3121,	3,	1,	6,	681,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo429 },  // Inst #3121 = WFTCIDB
  { 3120,	3,	1,	6,	689,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #3120 = WFSXB
  { 3119,	3,	1,	6,	688,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo420 },  // Inst #3119 = WFSSB
  { 3118,	2,	1,	6,	709,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo384 },  // Inst #3118 = WFSQXB
  { 3117,	2,	1,	6,	707,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo125 },  // Inst #3117 = WFSQSB
  { 3116,	2,	1,	6,	706,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo126 },  // Inst #3116 = WFSQDB
  { 3115,	3,	1,	6,	686,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo419 },  // Inst #3115 = WFSDB
  { 3114,	3,	1,	6,	670,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #3114 = WFPSOXB
  { 3113,	3,	1,	6,	669,	0,	0,	0, 0x0ULL, nullptr, OperandInfo430 },  // Inst #3113 = WFPSOSB
  { 3112,	3,	1,	6,	668,	0,	0,	0, 0x0ULL, nullptr, OperandInfo429 },  // Inst #3112 = WFPSODB
  { 3111,	4,	1,	6,	699,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo380 },  // Inst #3111 = WFNMSXB
  { 3110,	4,	1,	6,	698,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo426 },  // Inst #3110 = WFNMSSB
  { 3109,	4,	1,	6,	696,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo425 },  // Inst #3109 = WFNMSDB
  { 3108,	4,	1,	6,	699,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo380 },  // Inst #3108 = WFNMAXB
  { 3107,	4,	1,	6,	698,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo426 },  // Inst #3107 = WFNMASB
  { 3106,	4,	1,	6,	696,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo425 },  // Inst #3106 = WFNMADB
  { 3105,	3,	1,	6,	693,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #3105 = WFMXB
  { 3104,	4,	1,	6,	699,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo380 },  // Inst #3104 = WFMSXB
  { 3103,	4,	1,	6,	698,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo426 },  // Inst #3103 = WFMSSB
  { 3102,	4,	1,	6,	879,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo425 },  // Inst #3102 = WFMSDB
  { 3101,	3,	1,	6,	691,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo420 },  // Inst #3101 = WFMSB
  { 3100,	4,	1,	6,	679,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo377 },  // Inst #3100 = WFMINXB
  { 3099,	4,	1,	6,	678,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo428 },  // Inst #3099 = WFMINSB
  { 3098,	4,	1,	6,	676,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo427 },  // Inst #3098 = WFMINDB
  { 3097,	3,	1,	6,	876,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo419 },  // Inst #3097 = WFMDB
  { 3096,	4,	1,	6,	679,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo377 },  // Inst #3096 = WFMAXXB
  { 3095,	4,	1,	6,	678,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo428 },  // Inst #3095 = WFMAXSB
  { 3094,	4,	1,	6,	676,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo427 },  // Inst #3094 = WFMAXDB
  { 3093,	4,	1,	6,	699,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo380 },  // Inst #3093 = WFMAXB
  { 3092,	4,	1,	6,	698,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo426 },  // Inst #3092 = WFMASB
  { 3091,	4,	1,	6,	879,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo425 },  // Inst #3091 = WFMADB
  { 3090,	4,	1,	6,	661,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo424 },  // Inst #3090 = WFLRX
  { 3089,	4,	1,	6,	659,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo423 },  // Inst #3089 = WFLRD
  { 3088,	2,	1,	6,	673,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #3088 = WFLPXB
  { 3087,	2,	1,	6,	672,	0,	0,	0, 0x0ULL, nullptr, OperandInfo125 },  // Inst #3087 = WFLPSB
  { 3086,	2,	1,	6,	671,	0,	0,	0, 0x0ULL, nullptr, OperandInfo126 },  // Inst #3086 = WFLPDB
  { 3085,	2,	1,	6,	673,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #3085 = WFLNXB
  { 3084,	2,	1,	6,	672,	0,	0,	0, 0x0ULL, nullptr, OperandInfo125 },  // Inst #3084 = WFLNSB
  { 3083,	2,	1,	6,	671,	0,	0,	0, 0x0ULL, nullptr, OperandInfo126 },  // Inst #3083 = WFLNDB
  { 3082,	2,	1,	6,	659,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo422 },  // Inst #3082 = WFLLS
  { 3081,	2,	1,	6,	660,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo421 },  // Inst #3081 = WFLLD
  { 3080,	2,	1,	6,	673,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #3080 = WFLCXB
  { 3079,	2,	1,	6,	672,	0,	0,	0, 0x0ULL, nullptr, OperandInfo125 },  // Inst #3079 = WFLCSB
  { 3078,	2,	1,	6,	671,	0,	0,	0, 0x0ULL, nullptr, OperandInfo126 },  // Inst #3078 = WFLCDB
  { 3077,	2,	0,	6,	730,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo384 },  // Inst #3077 = WFKXB
  { 3076,	2,	0,	6,	729,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo125 },  // Inst #3076 = WFKSB
  { 3075,	3,	1,	6,	726,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #3075 = WFKHXBS
  { 3074,	3,	1,	6,	718,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #3074 = WFKHXB
  { 3073,	3,	1,	6,	724,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo420 },  // Inst #3073 = WFKHSBS
  { 3072,	3,	1,	6,	716,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo420 },  // Inst #3072 = WFKHSB
  { 3071,	3,	1,	6,	726,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #3071 = WFKHEXBS
  { 3070,	3,	1,	6,	718,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #3070 = WFKHEXB
  { 3069,	3,	1,	6,	724,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo420 },  // Inst #3069 = WFKHESBS
  { 3068,	3,	1,	6,	716,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo420 },  // Inst #3068 = WFKHESB
  { 3067,	3,	1,	6,	721,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo419 },  // Inst #3067 = WFKHEDBS
  { 3066,	3,	1,	6,	713,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo419 },  // Inst #3066 = WFKHEDB
  { 3065,	3,	1,	6,	721,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo419 },  // Inst #3065 = WFKHDBS
  { 3064,	3,	1,	6,	713,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo419 },  // Inst #3064 = WFKHDB
  { 3063,	3,	1,	6,	726,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #3063 = WFKEXBS
  { 3062,	3,	1,	6,	718,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #3062 = WFKEXB
  { 3061,	3,	1,	6,	724,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo420 },  // Inst #3061 = WFKESBS
  { 3060,	3,	1,	6,	716,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo420 },  // Inst #3060 = WFKESB
  { 3059,	3,	1,	6,	721,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo419 },  // Inst #3059 = WFKEDBS
  { 3058,	3,	1,	6,	713,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo419 },  // Inst #3058 = WFKEDB
  { 3057,	2,	0,	6,	728,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo126 },  // Inst #3057 = WFKDB
  { 3056,	4,	0,	6,	727,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo417 },  // Inst #3056 = WFK
  { 3055,	4,	1,	6,	666,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #3055 = WFIXB
  { 3054,	4,	1,	6,	665,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo418 },  // Inst #3054 = WFISB
  { 3053,	4,	1,	6,	663,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo417 },  // Inst #3053 = WFIDB
  { 3052,	3,	1,	6,	704,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #3052 = WFDXB
  { 3051,	3,	1,	6,	702,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo420 },  // Inst #3051 = WFDSB
  { 3050,	3,	1,	6,	701,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo419 },  // Inst #3050 = WFDDB
  { 3049,	2,	0,	6,	730,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo384 },  // Inst #3049 = WFCXB
  { 3048,	2,	0,	6,	729,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo125 },  // Inst #3048 = WFCSB
  { 3047,	3,	1,	6,	725,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #3047 = WFCHXBS
  { 3046,	3,	1,	6,	717,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #3046 = WFCHXB
  { 3045,	3,	1,	6,	723,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo420 },  // Inst #3045 = WFCHSBS
  { 3044,	3,	1,	6,	715,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo420 },  // Inst #3044 = WFCHSB
  { 3043,	3,	1,	6,	725,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #3043 = WFCHEXBS
  { 3042,	3,	1,	6,	717,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #3042 = WFCHEXB
  { 3041,	3,	1,	6,	723,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo420 },  // Inst #3041 = WFCHESBS
  { 3040,	3,	1,	6,	715,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo420 },  // Inst #3040 = WFCHESB
  { 3039,	3,	1,	6,	881,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo419 },  // Inst #3039 = WFCHEDBS
  { 3038,	3,	1,	6,	712,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo419 },  // Inst #3038 = WFCHEDB
  { 3037,	3,	1,	6,	881,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo419 },  // Inst #3037 = WFCHDBS
  { 3036,	3,	1,	6,	712,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo419 },  // Inst #3036 = WFCHDB
  { 3035,	3,	1,	6,	725,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #3035 = WFCEXBS
  { 3034,	3,	1,	6,	717,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #3034 = WFCEXB
  { 3033,	3,	1,	6,	723,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo420 },  // Inst #3033 = WFCESBS
  { 3032,	3,	1,	6,	715,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo420 },  // Inst #3032 = WFCESB
  { 3031,	3,	1,	6,	881,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo419 },  // Inst #3031 = WFCEDBS
  { 3030,	3,	1,	6,	712,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo419 },  // Inst #3030 = WFCEDB
  { 3029,	2,	0,	6,	728,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo126 },  // Inst #3029 = WFCDB
  { 3028,	4,	0,	6,	727,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo417 },  // Inst #3028 = WFC
  { 3027,	3,	1,	6,	689,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #3027 = WFAXB
  { 3026,	3,	1,	6,	688,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo420 },  // Inst #3026 = WFASB
  { 3025,	3,	1,	6,	686,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo419 },  // Inst #3025 = WFADB
  { 3024,	4,	1,	6,	651,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo417 },  // Inst #3024 = WCLGDB
  { 3023,	4,	1,	6,	653,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo418 },  // Inst #3023 = WCLFEB
  { 3022,	4,	1,	6,	651,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo417 },  // Inst #3022 = WCGDB
  { 3021,	4,	1,	6,	653,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo418 },  // Inst #3021 = WCFEB
  { 3020,	4,	1,	6,	647,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo418 },  // Inst #3020 = WCELFB
  { 3019,	4,	1,	6,	647,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo418 },  // Inst #3019 = WCEFB
  { 3018,	4,	1,	6,	645,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo417 },  // Inst #3018 = WCDLGB
  { 3017,	4,	1,	6,	645,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo417 },  // Inst #3017 = WCDGB
  { 3016,	1,	1,	6,	530,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo415 },  // Inst #3016 = VZERO
  { 3015,	3,	1,	6,	586,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #3015 = VX
  { 3014,	2,	1,	6,	576,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #3014 = VUPLLH
  { 3013,	2,	1,	6,	576,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #3013 = VUPLLF
  { 3012,	2,	1,	6,	576,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #3012 = VUPLLB
  { 3011,	3,	1,	6,	576,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #3011 = VUPLL
  { 3010,	2,	1,	6,	575,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #3010 = VUPLHW
  { 3009,	2,	1,	6,	575,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #3009 = VUPLHH
  { 3008,	2,	1,	6,	575,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #3008 = VUPLHF
  { 3007,	2,	1,	6,	575,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #3007 = VUPLHB
  { 3006,	3,	1,	6,	575,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #3006 = VUPLH
  { 3005,	2,	1,	6,	574,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #3005 = VUPLF
  { 3004,	2,	1,	6,	574,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #3004 = VUPLB
  { 3003,	3,	1,	6,	574,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #3003 = VUPL
  { 3002,	3,	1,	6,	772,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo383 },  // Inst #3002 = VUPKZL
  { 3001,	3,	1,	6,	771,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo383 },  // Inst #3001 = VUPKZH
  { 3000,	4,	0,	6,	755,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo410 },  // Inst #3000 = VUPKZ
  { 2999,	2,	1,	6,	573,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2999 = VUPHH
  { 2998,	2,	1,	6,	573,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2998 = VUPHF
  { 2997,	2,	1,	6,	573,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2997 = VUPHB
  { 2996,	3,	1,	6,	573,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2996 = VUPH
  { 2995,	1,	0,	6,	764,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo415 },  // Inst #2995 = VTP
  { 2994,	2,	0,	6,	641,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo384 },  // Inst #2994 = VTM
  { 2993,	3,	1,	6,	632,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2993 = VSUMQG
  { 2992,	3,	1,	6,	632,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2992 = VSUMQF
  { 2991,	4,	1,	6,	632,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2991 = VSUMQ
  { 2990,	3,	1,	6,	630,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2990 = VSUMH
  { 2989,	3,	1,	6,	631,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2989 = VSUMGH
  { 2988,	3,	1,	6,	631,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2988 = VSUMGF
  { 2987,	4,	1,	6,	631,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2987 = VSUMG
  { 2986,	3,	1,	6,	630,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2986 = VSUMB
  { 2985,	4,	1,	6,	630,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2985 = VSUM
  { 2984,	4,	1,	6,	749,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo380 },  // Inst #2984 = VSTRSZH
  { 2983,	4,	1,	6,	749,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo380 },  // Inst #2983 = VSTRSZF
  { 2982,	4,	1,	6,	749,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo380 },  // Inst #2982 = VSTRSZB
  { 2981,	5,	1,	6,	748,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo379 },  // Inst #2981 = VSTRSH
  { 2980,	5,	1,	6,	748,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo379 },  // Inst #2980 = VSTRSF
  { 2979,	5,	1,	6,	748,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo379 },  // Inst #2979 = VSTRSB
  { 2978,	6,	1,	6,	748,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo396 },  // Inst #2978 = VSTRS
  { 2977,	4,	0,	6,	550,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo407 },  // Inst #2977 = VSTRLR
  { 2976,	4,	0,	6,	550,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo410 },  // Inst #2976 = VSTRL
  { 2975,	5,	1,	6,	747,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo379 },  // Inst #2975 = VSTRCZHS
  { 2974,	5,	1,	6,	746,	0,	0,	0, 0x0ULL, nullptr, OperandInfo379 },  // Inst #2974 = VSTRCZH
  { 2973,	5,	1,	6,	747,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo379 },  // Inst #2973 = VSTRCZFS
  { 2972,	5,	1,	6,	746,	0,	0,	0, 0x0ULL, nullptr, OperandInfo379 },  // Inst #2972 = VSTRCZF
  { 2971,	5,	1,	6,	747,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo379 },  // Inst #2971 = VSTRCZBS
  { 2970,	5,	1,	6,	746,	0,	0,	0, 0x0ULL, nullptr, OperandInfo379 },  // Inst #2970 = VSTRCZB
  { 2969,	5,	1,	6,	745,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo379 },  // Inst #2969 = VSTRCHS
  { 2968,	5,	1,	6,	744,	0,	0,	0, 0x0ULL, nullptr, OperandInfo379 },  // Inst #2968 = VSTRCH
  { 2967,	5,	1,	6,	745,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo379 },  // Inst #2967 = VSTRCFS
  { 2966,	5,	1,	6,	744,	0,	0,	0, 0x0ULL, nullptr, OperandInfo379 },  // Inst #2966 = VSTRCF
  { 2965,	5,	1,	6,	745,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo379 },  // Inst #2965 = VSTRCBS
  { 2964,	5,	1,	6,	744,	0,	0,	0, 0x0ULL, nullptr, OperandInfo379 },  // Inst #2964 = VSTRCB
  { 2963,	6,	1,	6,	744,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo396 },  // Inst #2963 = VSTRC
  { 2962,	5,	0,	6,	548,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo409 },  // Inst #2962 = VSTMAlign
  { 2961,	4,	0,	6,	548,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo408 },  // Inst #2961 = VSTM
  { 2960,	4,	0,	6,	545,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo407 },  // Inst #2960 = VSTL
  { 2959,	4,	0,	6,	557,	0,	0,	0|(1ULL<<MCID::MayStore), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2959 = VSTERH
  { 2958,	4,	0,	6,	557,	0,	0,	0|(1ULL<<MCID::MayStore), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2958 = VSTERG
  { 2957,	4,	0,	6,	557,	0,	0,	0|(1ULL<<MCID::MayStore), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2957 = VSTERF
  { 2956,	5,	0,	6,	557,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo402 },  // Inst #2956 = VSTER
  { 2955,	5,	0,	6,	547,	0,	0,	0|(1ULL<<MCID::MayStore), 0x40ULL, nullptr, OperandInfo402 },  // Inst #2955 = VSTEH
  { 2954,	5,	0,	6,	546,	0,	0,	0|(1ULL<<MCID::MayStore), 0x100ULL, nullptr, OperandInfo402 },  // Inst #2954 = VSTEG
  { 2953,	5,	0,	6,	546,	0,	0,	0|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, OperandInfo402 },  // Inst #2953 = VSTEF
  { 2952,	5,	0,	6,	558,	0,	0,	0|(1ULL<<MCID::MayStore), 0x40ULL, nullptr, OperandInfo402 },  // Inst #2952 = VSTEBRH
  { 2951,	5,	0,	6,	559,	0,	0,	0|(1ULL<<MCID::MayStore), 0x100ULL, nullptr, OperandInfo402 },  // Inst #2951 = VSTEBRG
  { 2950,	5,	0,	6,	559,	0,	0,	0|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, OperandInfo402 },  // Inst #2950 = VSTEBRF
  { 2949,	5,	0,	6,	547,	0,	0,	0|(1ULL<<MCID::MayStore), 0x20ULL, nullptr, OperandInfo402 },  // Inst #2949 = VSTEB
  { 2948,	4,	0,	6,	556,	0,	0,	0|(1ULL<<MCID::MayStore), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2948 = VSTBRQ
  { 2947,	4,	0,	6,	556,	0,	0,	0|(1ULL<<MCID::MayStore), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2947 = VSTBRH
  { 2946,	4,	0,	6,	556,	0,	0,	0|(1ULL<<MCID::MayStore), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2946 = VSTBRG
  { 2945,	4,	0,	6,	556,	0,	0,	0|(1ULL<<MCID::MayStore), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2945 = VSTBRF
  { 2944,	5,	0,	6,	556,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo402 },  // Inst #2944 = VSTBR
  { 2943,	5,	0,	6,	545,	0,	0,	0|(1ULL<<MCID::MayStore), 0x200ULL, nullptr, OperandInfo402 },  // Inst #2943 = VSTAlign
  { 2942,	4,	0,	6,	545,	0,	0,	0|(1ULL<<MCID::MayStore), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2942 = VST
  { 2941,	5,	1,	6,	769,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2941 = VSRPR
  { 2940,	5,	1,	6,	762,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo381 },  // Inst #2940 = VSRP
  { 2939,	3,	1,	6,	624,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2939 = VSRLB
  { 2938,	3,	1,	6,	623,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2938 = VSRL
  { 2937,	4,	1,	6,	626,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2937 = VSRD
  { 2936,	3,	1,	6,	624,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2936 = VSRAB
  { 2935,	3,	1,	6,	623,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2935 = VSRA
  { 2934,	3,	1,	6,	629,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2934 = VSQ
  { 2933,	5,	1,	6,	758,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2933 = VSP
  { 2932,	4,	1,	6,	621,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2932 = VSLDB
  { 2931,	4,	1,	6,	625,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2931 = VSLD
  { 2930,	3,	1,	6,	622,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2930 = VSLB
  { 2929,	3,	1,	6,	621,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2929 = VSL
  { 2928,	3,	1,	6,	629,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2928 = VSH
  { 2927,	3,	1,	6,	629,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2927 = VSG
  { 2926,	3,	1,	6,	629,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2926 = VSF
  { 2925,	4,	1,	6,	566,	0,	0,	0, 0x0ULL, nullptr, OperandInfo380 },  // Inst #2925 = VSEL
  { 2924,	2,	1,	6,	572,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2924 = VSEGH
  { 2923,	2,	1,	6,	572,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2923 = VSEGF
  { 2922,	2,	1,	6,	572,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2922 = VSEGB
  { 2921,	3,	1,	6,	572,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2921 = VSEG
  { 2920,	5,	1,	6,	761,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2920 = VSDP
  { 2919,	3,	1,	6,	766,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2919 = VSCSHP
  { 2918,	4,	1,	6,	765,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2918 = VSCHXP
  { 2917,	4,	1,	6,	765,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2917 = VSCHSP
  { 2916,	5,	1,	6,	765,	0,	0,	0, 0x0ULL, nullptr, OperandInfo118 },  // Inst #2916 = VSCHP
  { 2915,	4,	1,	6,	765,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2915 = VSCHDP
  { 2914,	5,	0,	6,	549,	0,	0,	0|(1ULL<<MCID::MayStore), 0x100ULL, nullptr, OperandInfo416 },  // Inst #2914 = VSCEG
  { 2913,	5,	0,	6,	549,	0,	0,	0|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, OperandInfo416 },  // Inst #2913 = VSCEF
  { 2912,	3,	1,	6,	628,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2912 = VSCBIQ
  { 2911,	3,	1,	6,	628,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2911 = VSCBIH
  { 2910,	3,	1,	6,	628,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2910 = VSCBIG
  { 2909,	3,	1,	6,	628,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2909 = VSCBIF
  { 2908,	3,	1,	6,	628,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2908 = VSCBIB
  { 2907,	4,	1,	6,	628,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2907 = VSCBI
  { 2906,	4,	1,	6,	627,	0,	0,	0, 0x0ULL, nullptr, OperandInfo380 },  // Inst #2906 = VSBIQ
  { 2905,	5,	1,	6,	627,	0,	0,	0, 0x0ULL, nullptr, OperandInfo379 },  // Inst #2905 = VSBI
  { 2904,	4,	1,	6,	627,	0,	0,	0, 0x0ULL, nullptr, OperandInfo380 },  // Inst #2904 = VSBCBIQ
  { 2903,	5,	1,	6,	627,	0,	0,	0, 0x0ULL, nullptr, OperandInfo379 },  // Inst #2903 = VSBCBI
  { 2902,	3,	1,	6,	627,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2902 = VSB
  { 2901,	4,	1,	6,	629,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2901 = VS
  { 2900,	5,	1,	6,	760,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2900 = VRP
  { 2899,	2,	1,	6,	534,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo397 },  // Inst #2899 = VREPIH
  { 2898,	2,	1,	6,	534,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo397 },  // Inst #2898 = VREPIG
  { 2897,	2,	1,	6,	534,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo397 },  // Inst #2897 = VREPIF
  { 2896,	2,	1,	6,	534,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo397 },  // Inst #2896 = VREPIB
  { 2895,	3,	1,	6,	534,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo400 },  // Inst #2895 = VREPI
  { 2894,	3,	1,	6,	565,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2894 = VREPH
  { 2893,	3,	1,	6,	565,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2893 = VREPG
  { 2892,	3,	1,	6,	565,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2892 = VREPF
  { 2891,	3,	1,	6,	565,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2891 = VREPB
  { 2890,	4,	1,	6,	565,	0,	0,	0, 0x0ULL, nullptr, OperandInfo382 },  // Inst #2890 = VREP
  { 2889,	5,	1,	6,	763,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo381 },  // Inst #2889 = VPSOP
  { 2888,	2,	1,	6,	611,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2888 = VPOPCTH
  { 2887,	2,	1,	6,	611,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2887 = VPOPCTG
  { 2886,	2,	1,	6,	611,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2886 = VPOPCTF
  { 2885,	2,	1,	6,	611,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2885 = VPOPCTB
  { 2884,	3,	1,	6,	875,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2884 = VPOPCT
  { 2883,	5,	1,	6,	770,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2883 = VPKZR
  { 2882,	4,	1,	6,	754,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo410 },  // Inst #2882 = VPKZ
  { 2881,	3,	1,	6,	569,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2881 = VPKSHS
  { 2880,	3,	1,	6,	568,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2880 = VPKSH
  { 2879,	3,	1,	6,	569,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2879 = VPKSGS
  { 2878,	3,	1,	6,	568,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2878 = VPKSG
  { 2877,	3,	1,	6,	569,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2877 = VPKSFS
  { 2876,	3,	1,	6,	568,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2876 = VPKSF
  { 2875,	5,	1,	6,	568,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2875 = VPKS
  { 2874,	3,	1,	6,	571,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2874 = VPKLSHS
  { 2873,	3,	1,	6,	570,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2873 = VPKLSH
  { 2872,	3,	1,	6,	571,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2872 = VPKLSGS
  { 2871,	3,	1,	6,	570,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2871 = VPKLSG
  { 2870,	3,	1,	6,	571,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2870 = VPKLSFS
  { 2869,	3,	1,	6,	570,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2869 = VPKLSF
  { 2868,	5,	1,	6,	570,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2868 = VPKLS
  { 2867,	3,	1,	6,	567,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2867 = VPKH
  { 2866,	3,	1,	6,	567,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2866 = VPKG
  { 2865,	3,	1,	6,	567,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2865 = VPKF
  { 2864,	4,	1,	6,	567,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2864 = VPK
  { 2863,	4,	1,	6,	562,	0,	0,	0, 0x0ULL, nullptr, OperandInfo380 },  // Inst #2863 = VPERM
  { 2862,	4,	1,	6,	563,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2862 = VPDI
  { 2861,	1,	1,	6,	531,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo415 },  // Inst #2861 = VONE
  { 2860,	3,	1,	6,	582,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2860 = VOC
  { 2859,	3,	1,	6,	874,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2859 = VO
  { 2858,	3,	1,	6,	581,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2858 = VNX
  { 2857,	3,	1,	6,	873,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2857 = VNO
  { 2856,	3,	1,	6,	581,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2856 = VNN
  { 2855,	3,	1,	6,	873,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2855 = VNC
  { 2854,	3,	1,	6,	873,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2854 = VN
  { 2853,	3,	1,	6,	593,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2853 = VMXLH
  { 2852,	3,	1,	6,	593,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2852 = VMXLG
  { 2851,	3,	1,	6,	593,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2851 = VMXLF
  { 2850,	3,	1,	6,	593,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2850 = VMXLB
  { 2849,	4,	1,	6,	593,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo377 },  // Inst #2849 = VMXL
  { 2848,	3,	1,	6,	592,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2848 = VMXH
  { 2847,	3,	1,	6,	592,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2847 = VMXG
  { 2846,	3,	1,	6,	592,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2846 = VMXF
  { 2845,	3,	1,	6,	592,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2845 = VMXB
  { 2844,	4,	1,	6,	592,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo377 },  // Inst #2844 = VMX
  { 2843,	5,	1,	6,	759,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2843 = VMSP
  { 2842,	5,	1,	6,	610,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo379 },  // Inst #2842 = VMSLG
  { 2841,	6,	1,	6,	610,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo396 },  // Inst #2841 = VMSL
  { 2840,	3,	1,	6,	561,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2840 = VMRLH
  { 2839,	3,	1,	6,	561,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2839 = VMRLG
  { 2838,	3,	1,	6,	561,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2838 = VMRLF
  { 2837,	3,	1,	6,	561,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2837 = VMRLB
  { 2836,	4,	1,	6,	561,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2836 = VMRL
  { 2835,	3,	1,	6,	560,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2835 = VMRHH
  { 2834,	3,	1,	6,	560,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2834 = VMRHG
  { 2833,	3,	1,	6,	560,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2833 = VMRHF
  { 2832,	3,	1,	6,	560,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2832 = VMRHB
  { 2831,	4,	1,	6,	560,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2831 = VMRH
  { 2830,	5,	1,	6,	759,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2830 = VMP
  { 2829,	3,	1,	6,	609,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2829 = VMOH
  { 2828,	3,	1,	6,	609,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2828 = VMOF
  { 2827,	3,	1,	6,	609,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2827 = VMOB
  { 2826,	4,	1,	6,	609,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo377 },  // Inst #2826 = VMO
  { 2825,	3,	1,	6,	595,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2825 = VMNLH
  { 2824,	3,	1,	6,	595,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2824 = VMNLG
  { 2823,	3,	1,	6,	595,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2823 = VMNLF
  { 2822,	3,	1,	6,	595,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2822 = VMNLB
  { 2821,	4,	1,	6,	595,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo377 },  // Inst #2821 = VMNL
  { 2820,	3,	1,	6,	594,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2820 = VMNH
  { 2819,	3,	1,	6,	594,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2819 = VMNG
  { 2818,	3,	1,	6,	594,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2818 = VMNF
  { 2817,	3,	1,	6,	594,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2817 = VMNB
  { 2816,	4,	1,	6,	594,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo377 },  // Inst #2816 = VMN
  { 2815,	3,	1,	6,	608,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2815 = VMLOH
  { 2814,	3,	1,	6,	608,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2814 = VMLOF
  { 2813,	3,	1,	6,	608,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2813 = VMLOB
  { 2812,	4,	1,	6,	608,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo377 },  // Inst #2812 = VMLO
  { 2811,	3,	1,	6,	607,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2811 = VMLHW
  { 2810,	3,	1,	6,	607,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2810 = VMLHH
  { 2809,	3,	1,	6,	607,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2809 = VMLHF
  { 2808,	3,	1,	6,	607,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2808 = VMLHB
  { 2807,	4,	1,	6,	607,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo377 },  // Inst #2807 = VMLH
  { 2806,	3,	1,	6,	605,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2806 = VMLF
  { 2805,	3,	1,	6,	606,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2805 = VMLEH
  { 2804,	3,	1,	6,	606,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2804 = VMLEF
  { 2803,	3,	1,	6,	606,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2803 = VMLEB
  { 2802,	4,	1,	6,	606,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo377 },  // Inst #2802 = VMLE
  { 2801,	3,	1,	6,	605,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2801 = VMLB
  { 2800,	4,	1,	6,	605,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo377 },  // Inst #2800 = VML
  { 2799,	3,	1,	6,	604,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2799 = VMHH
  { 2798,	3,	1,	6,	604,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2798 = VMHF
  { 2797,	3,	1,	6,	604,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2797 = VMHB
  { 2796,	4,	1,	6,	604,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo377 },  // Inst #2796 = VMH
  { 2795,	3,	1,	6,	603,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2795 = VMEH
  { 2794,	3,	1,	6,	603,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2794 = VMEF
  { 2793,	3,	1,	6,	603,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2793 = VMEB
  { 2792,	4,	1,	6,	603,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo377 },  // Inst #2792 = VME
  { 2791,	4,	1,	6,	600,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2791 = VMAOH
  { 2790,	4,	1,	6,	600,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2790 = VMAOF
  { 2789,	4,	1,	6,	600,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2789 = VMAOB
  { 2788,	5,	1,	6,	600,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo379 },  // Inst #2788 = VMAO
  { 2787,	4,	1,	6,	599,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2787 = VMALOH
  { 2786,	4,	1,	6,	599,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2786 = VMALOF
  { 2785,	4,	1,	6,	599,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2785 = VMALOB
  { 2784,	5,	1,	6,	599,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo379 },  // Inst #2784 = VMALO
  { 2783,	4,	1,	6,	598,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2783 = VMALHW
  { 2782,	4,	1,	6,	598,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2782 = VMALHH
  { 2781,	4,	1,	6,	598,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2781 = VMALHF
  { 2780,	4,	1,	6,	598,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2780 = VMALHB
  { 2779,	5,	1,	6,	598,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo379 },  // Inst #2779 = VMALH
  { 2778,	4,	1,	6,	596,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2778 = VMALF
  { 2777,	4,	1,	6,	597,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2777 = VMALEH
  { 2776,	4,	1,	6,	597,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2776 = VMALEF
  { 2775,	4,	1,	6,	597,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2775 = VMALEB
  { 2774,	5,	1,	6,	597,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo379 },  // Inst #2774 = VMALE
  { 2773,	4,	1,	6,	596,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2773 = VMALB
  { 2772,	5,	1,	6,	596,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo379 },  // Inst #2772 = VMAL
  { 2771,	4,	1,	6,	602,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2771 = VMAHH
  { 2770,	4,	1,	6,	602,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2770 = VMAHF
  { 2769,	4,	1,	6,	602,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2769 = VMAHB
  { 2768,	5,	1,	6,	602,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo379 },  // Inst #2768 = VMAH
  { 2767,	4,	1,	6,	601,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2767 = VMAEH
  { 2766,	4,	1,	6,	601,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2766 = VMAEF
  { 2765,	4,	1,	6,	601,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2765 = VMAEB
  { 2764,	5,	1,	6,	601,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo379 },  // Inst #2764 = VMAE
  { 2763,	3,	1,	6,	529,	0,	0,	0, 0x0ULL, nullptr, OperandInfo414 },  // Inst #2763 = VLVGP
  { 2762,	5,	1,	6,	528,	0,	0,	0, 0x0ULL, nullptr, OperandInfo412 },  // Inst #2762 = VLVGH
  { 2761,	5,	1,	6,	528,	0,	0,	0, 0x0ULL, nullptr, OperandInfo413 },  // Inst #2761 = VLVGG
  { 2760,	5,	1,	6,	528,	0,	0,	0, 0x0ULL, nullptr, OperandInfo412 },  // Inst #2760 = VLVGF
  { 2759,	5,	1,	6,	528,	0,	0,	0, 0x0ULL, nullptr, OperandInfo412 },  // Inst #2759 = VLVGB
  { 2758,	6,	1,	6,	528,	0,	0,	0, 0x0ULL, nullptr, OperandInfo411 },  // Inst #2758 = VLVG
  { 2757,	4,	1,	6,	544,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo407 },  // Inst #2757 = VLRLR
  { 2756,	4,	1,	6,	544,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo410 },  // Inst #2756 = VLRL
  { 2755,	4,	1,	6,	540,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x40ULL, nullptr, OperandInfo401 },  // Inst #2755 = VLREPH
  { 2754,	4,	1,	6,	540,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x100ULL, nullptr, OperandInfo401 },  // Inst #2754 = VLREPG
  { 2753,	4,	1,	6,	540,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, OperandInfo401 },  // Inst #2753 = VLREPF
  { 2752,	4,	1,	6,	540,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x20ULL, nullptr, OperandInfo401 },  // Inst #2752 = VLREPB
  { 2751,	5,	1,	6,	540,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo402 },  // Inst #2751 = VLREP
  { 2750,	2,	1,	6,	526,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2750 = VLR
  { 2749,	2,	1,	6,	591,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2749 = VLPH
  { 2748,	2,	1,	6,	591,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2748 = VLPG
  { 2747,	2,	1,	6,	591,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2747 = VLPF
  { 2746,	2,	1,	6,	591,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2746 = VLPB
  { 2745,	3,	1,	6,	591,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2745 = VLP
  { 2744,	5,	2,	6,	543,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo409 },  // Inst #2744 = VLMAlign
  { 2743,	4,	2,	6,	543,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo408 },  // Inst #2743 = VLM
  { 2742,	4,	1,	6,	539,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, OperandInfo401 },  // Inst #2742 = VLLEZLF
  { 2741,	4,	1,	6,	872,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x40ULL, nullptr, OperandInfo401 },  // Inst #2741 = VLLEZH
  { 2740,	4,	1,	6,	872,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x100ULL, nullptr, OperandInfo401 },  // Inst #2740 = VLLEZG
  { 2739,	4,	1,	6,	872,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, OperandInfo401 },  // Inst #2739 = VLLEZF
  { 2738,	4,	1,	6,	872,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x20ULL, nullptr, OperandInfo401 },  // Inst #2738 = VLLEZB
  { 2737,	5,	1,	6,	872,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo402 },  // Inst #2737 = VLLEZ
  { 2736,	4,	1,	6,	554,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x40ULL, nullptr, OperandInfo401 },  // Inst #2736 = VLLEBRZH
  { 2735,	4,	1,	6,	554,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x100ULL, nullptr, OperandInfo401 },  // Inst #2735 = VLLEBRZG
  { 2734,	4,	1,	6,	554,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, OperandInfo401 },  // Inst #2734 = VLLEBRZF
  { 2733,	4,	1,	6,	554,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, OperandInfo401 },  // Inst #2733 = VLLEBRZE
  { 2732,	5,	1,	6,	554,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo402 },  // Inst #2732 = VLLEBRZ
  { 2731,	4,	1,	6,	537,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo407 },  // Inst #2731 = VLL
  { 2730,	3,	1,	6,	753,	0,	0,	0, 0x0ULL, nullptr, OperandInfo400 },  // Inst #2730 = VLIP
  { 2729,	4,	1,	6,	527,	0,	0,	0, 0x0ULL, nullptr, OperandInfo406 },  // Inst #2729 = VLGVH
  { 2728,	4,	1,	6,	527,	0,	0,	0, 0x0ULL, nullptr, OperandInfo406 },  // Inst #2728 = VLGVG
  { 2727,	4,	1,	6,	527,	0,	0,	0, 0x0ULL, nullptr, OperandInfo406 },  // Inst #2727 = VLGVF
  { 2726,	4,	1,	6,	527,	0,	0,	0, 0x0ULL, nullptr, OperandInfo406 },  // Inst #2726 = VLGVB
  { 2725,	5,	1,	6,	527,	0,	0,	0, 0x0ULL, nullptr, OperandInfo405 },  // Inst #2725 = VLGV
  { 2724,	4,	1,	6,	552,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2724 = VLERH
  { 2723,	4,	1,	6,	552,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2723 = VLERG
  { 2722,	4,	1,	6,	552,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2722 = VLERF
  { 2721,	5,	1,	6,	552,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo402 },  // Inst #2721 = VLER
  { 2720,	4,	1,	6,	535,	0,	0,	0, 0x0ULL, nullptr, OperandInfo404 },  // Inst #2720 = VLEIH
  { 2719,	4,	1,	6,	535,	0,	0,	0, 0x0ULL, nullptr, OperandInfo404 },  // Inst #2719 = VLEIG
  { 2718,	4,	1,	6,	535,	0,	0,	0, 0x0ULL, nullptr, OperandInfo404 },  // Inst #2718 = VLEIF
  { 2717,	4,	1,	6,	535,	0,	0,	0, 0x0ULL, nullptr, OperandInfo404 },  // Inst #2717 = VLEIB
  { 2716,	6,	1,	6,	541,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x40ULL, nullptr, OperandInfo403 },  // Inst #2716 = VLEH
  { 2715,	6,	1,	6,	541,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x100ULL, nullptr, OperandInfo403 },  // Inst #2715 = VLEG
  { 2714,	6,	1,	6,	541,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, OperandInfo403 },  // Inst #2714 = VLEF
  { 2713,	4,	1,	6,	655,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2713 = VLEDB
  { 2712,	5,	1,	6,	654,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo381 },  // Inst #2712 = VLED
  { 2711,	6,	1,	6,	553,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x40ULL, nullptr, OperandInfo403 },  // Inst #2711 = VLEBRH
  { 2710,	6,	1,	6,	553,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x100ULL, nullptr, OperandInfo403 },  // Inst #2710 = VLEBRG
  { 2709,	6,	1,	6,	553,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, OperandInfo403 },  // Inst #2709 = VLEBRF
  { 2708,	6,	1,	6,	541,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x20ULL, nullptr, OperandInfo403 },  // Inst #2708 = VLEB
  { 2707,	2,	1,	6,	655,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo384 },  // Inst #2707 = VLDEB
  { 2706,	4,	1,	6,	654,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2706 = VLDE
  { 2705,	2,	1,	6,	590,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2705 = VLCH
  { 2704,	2,	1,	6,	590,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2704 = VLCG
  { 2703,	2,	1,	6,	590,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2703 = VLCF
  { 2702,	2,	1,	6,	590,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2702 = VLCB
  { 2701,	3,	1,	6,	590,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2701 = VLC
  { 2700,	4,	1,	6,	555,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x40ULL, nullptr, OperandInfo401 },  // Inst #2700 = VLBRREPH
  { 2699,	4,	1,	6,	555,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x100ULL, nullptr, OperandInfo401 },  // Inst #2699 = VLBRREPG
  { 2698,	4,	1,	6,	555,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, OperandInfo401 },  // Inst #2698 = VLBRREPF
  { 2697,	5,	1,	6,	555,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo402 },  // Inst #2697 = VLBRREP
  { 2696,	4,	1,	6,	551,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2696 = VLBRQ
  { 2695,	4,	1,	6,	551,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2695 = VLBRH
  { 2694,	4,	1,	6,	551,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2694 = VLBRG
  { 2693,	4,	1,	6,	551,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2693 = VLBRF
  { 2692,	5,	1,	6,	551,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo402 },  // Inst #2692 = VLBR
  { 2691,	5,	1,	6,	537,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo402 },  // Inst #2691 = VLBB
  { 2690,	5,	1,	6,	536,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x200ULL, nullptr, OperandInfo402 },  // Inst #2690 = VLAlign
  { 2689,	4,	1,	6,	536,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x200ULL, nullptr, OperandInfo401 },  // Inst #2689 = VL
  { 2688,	2,	1,	6,	743,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo384 },  // Inst #2688 = VISTRHS
  { 2687,	3,	1,	6,	742,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2687 = VISTRH
  { 2686,	2,	1,	6,	743,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo384 },  // Inst #2686 = VISTRFS
  { 2685,	3,	1,	6,	742,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2685 = VISTRF
  { 2684,	2,	1,	6,	743,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo384 },  // Inst #2684 = VISTRBS
  { 2683,	3,	1,	6,	742,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2683 = VISTRB
  { 2682,	4,	1,	6,	742,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo382 },  // Inst #2682 = VISTR
  { 2681,	3,	1,	6,	533,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo400 },  // Inst #2681 = VGMH
  { 2680,	3,	1,	6,	533,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo400 },  // Inst #2680 = VGMG
  { 2679,	3,	1,	6,	533,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo400 },  // Inst #2679 = VGMF
  { 2678,	3,	1,	6,	533,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo400 },  // Inst #2678 = VGMB
  { 2677,	4,	1,	6,	533,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo399 },  // Inst #2677 = VGM
  { 2676,	3,	1,	6,	589,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2676 = VGFMH
  { 2675,	3,	1,	6,	589,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2675 = VGFMG
  { 2674,	3,	1,	6,	589,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2674 = VGFMF
  { 2673,	3,	1,	6,	589,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2673 = VGFMB
  { 2672,	4,	1,	6,	588,	0,	0,	0, 0x0ULL, nullptr, OperandInfo380 },  // Inst #2672 = VGFMAH
  { 2671,	4,	1,	6,	588,	0,	0,	0, 0x0ULL, nullptr, OperandInfo380 },  // Inst #2671 = VGFMAG
  { 2670,	4,	1,	6,	588,	0,	0,	0, 0x0ULL, nullptr, OperandInfo380 },  // Inst #2670 = VGFMAF
  { 2669,	4,	1,	6,	588,	0,	0,	0, 0x0ULL, nullptr, OperandInfo380 },  // Inst #2669 = VGFMAB
  { 2668,	5,	1,	6,	588,	0,	0,	0, 0x0ULL, nullptr, OperandInfo379 },  // Inst #2668 = VGFMA
  { 2667,	4,	1,	6,	587,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2667 = VGFM
  { 2666,	6,	1,	6,	542,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x100ULL, nullptr, OperandInfo398 },  // Inst #2666 = VGEG
  { 2665,	6,	1,	6,	542,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, OperandInfo398 },  // Inst #2665 = VGEF
  { 2664,	2,	1,	6,	532,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo397 },  // Inst #2664 = VGBM
  { 2663,	3,	1,	6,	682,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo383 },  // Inst #2663 = VFTCISB
  { 2662,	3,	1,	6,	681,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo383 },  // Inst #2662 = VFTCIDB
  { 2661,	5,	1,	6,	680,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo381 },  // Inst #2661 = VFTCI
  { 2660,	3,	1,	6,	687,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2660 = VFSSB
  { 2659,	2,	1,	6,	708,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo384 },  // Inst #2659 = VFSQSB
  { 2658,	2,	1,	6,	706,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo384 },  // Inst #2658 = VFSQDB
  { 2657,	4,	1,	6,	705,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2657 = VFSQ
  { 2656,	3,	1,	6,	685,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2656 = VFSDB
  { 2655,	5,	1,	6,	684,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo118 },  // Inst #2655 = VFS
  { 2654,	3,	1,	6,	669,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2654 = VFPSOSB
  { 2653,	3,	1,	6,	668,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2653 = VFPSODB
  { 2652,	5,	1,	6,	667,	0,	0,	0, 0x0ULL, nullptr, OperandInfo381 },  // Inst #2652 = VFPSO
  { 2651,	4,	1,	6,	697,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo380 },  // Inst #2651 = VFNMSSB
  { 2650,	4,	1,	6,	695,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo380 },  // Inst #2650 = VFNMSDB
  { 2649,	6,	1,	6,	694,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo396 },  // Inst #2649 = VFNMS
  { 2648,	4,	1,	6,	697,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo380 },  // Inst #2648 = VFNMASB
  { 2647,	4,	1,	6,	695,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo380 },  // Inst #2647 = VFNMADB
  { 2646,	6,	1,	6,	694,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo396 },  // Inst #2646 = VFNMA
  { 2645,	4,	1,	6,	697,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo380 },  // Inst #2645 = VFMSSB
  { 2644,	4,	1,	6,	878,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo380 },  // Inst #2644 = VFMSDB
  { 2643,	3,	1,	6,	692,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2643 = VFMSB
  { 2642,	6,	1,	6,	877,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo396 },  // Inst #2642 = VFMS
  { 2641,	4,	1,	6,	677,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo377 },  // Inst #2641 = VFMINSB
  { 2640,	4,	1,	6,	675,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo377 },  // Inst #2640 = VFMINDB
  { 2639,	6,	1,	6,	674,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo395 },  // Inst #2639 = VFMIN
  { 2638,	3,	1,	6,	690,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2638 = VFMDB
  { 2637,	4,	1,	6,	677,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo377 },  // Inst #2637 = VFMAXSB
  { 2636,	4,	1,	6,	675,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo377 },  // Inst #2636 = VFMAXDB
  { 2635,	6,	1,	6,	674,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo395 },  // Inst #2635 = VFMAX
  { 2634,	4,	1,	6,	697,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo380 },  // Inst #2634 = VFMASB
  { 2633,	4,	1,	6,	878,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo380 },  // Inst #2633 = VFMADB
  { 2632,	6,	1,	6,	877,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo396 },  // Inst #2632 = VFMA
  { 2631,	5,	1,	6,	866,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo118 },  // Inst #2631 = VFM
  { 2630,	4,	1,	6,	658,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2630 = VFLRD
  { 2629,	5,	1,	6,	657,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo381 },  // Inst #2629 = VFLR
  { 2628,	2,	1,	6,	672,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2628 = VFLPSB
  { 2627,	2,	1,	6,	671,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2627 = VFLPDB
  { 2626,	2,	1,	6,	672,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2626 = VFLNSB
  { 2625,	2,	1,	6,	671,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2625 = VFLNDB
  { 2624,	2,	1,	6,	658,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo384 },  // Inst #2624 = VFLLS
  { 2623,	4,	1,	6,	657,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2623 = VFLL
  { 2622,	2,	1,	6,	672,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2622 = VFLCSB
  { 2621,	2,	1,	6,	671,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2621 = VFLCDB
  { 2620,	3,	1,	6,	722,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #2620 = VFKHSBS
  { 2619,	3,	1,	6,	714,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2619 = VFKHSB
  { 2618,	3,	1,	6,	722,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #2618 = VFKHESBS
  { 2617,	3,	1,	6,	714,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2617 = VFKHESB
  { 2616,	3,	1,	6,	720,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #2616 = VFKHEDBS
  { 2615,	3,	1,	6,	711,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2615 = VFKHEDB
  { 2614,	3,	1,	6,	720,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #2614 = VFKHDBS
  { 2613,	3,	1,	6,	711,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2613 = VFKHDB
  { 2612,	3,	1,	6,	722,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #2612 = VFKESBS
  { 2611,	3,	1,	6,	714,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2611 = VFKESB
  { 2610,	3,	1,	6,	720,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #2610 = VFKEDBS
  { 2609,	3,	1,	6,	711,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2609 = VFKEDB
  { 2608,	4,	1,	6,	664,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2608 = VFISB
  { 2607,	4,	1,	6,	662,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2607 = VFIDB
  { 2606,	5,	1,	6,	865,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo381 },  // Inst #2606 = VFI
  { 2605,	3,	1,	6,	741,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2605 = VFENEZHS
  { 2604,	3,	1,	6,	740,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2604 = VFENEZH
  { 2603,	3,	1,	6,	741,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2603 = VFENEZFS
  { 2602,	3,	1,	6,	740,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2602 = VFENEZF
  { 2601,	3,	1,	6,	741,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2601 = VFENEZBS
  { 2600,	3,	1,	6,	740,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2600 = VFENEZB
  { 2599,	3,	1,	6,	741,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2599 = VFENEHS
  { 2598,	4,	1,	6,	740,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2598 = VFENEH
  { 2597,	3,	1,	6,	741,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2597 = VFENEFS
  { 2596,	4,	1,	6,	740,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2596 = VFENEF
  { 2595,	3,	1,	6,	741,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2595 = VFENEBS
  { 2594,	4,	1,	6,	740,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2594 = VFENEB
  { 2593,	5,	1,	6,	740,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2593 = VFENE
  { 2592,	3,	1,	6,	739,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2592 = VFEEZHS
  { 2591,	3,	1,	6,	738,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2591 = VFEEZH
  { 2590,	3,	1,	6,	739,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2590 = VFEEZFS
  { 2589,	3,	1,	6,	738,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2589 = VFEEZF
  { 2588,	3,	1,	6,	739,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2588 = VFEEZBS
  { 2587,	3,	1,	6,	738,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2587 = VFEEZB
  { 2586,	3,	1,	6,	739,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2586 = VFEEHS
  { 2585,	4,	1,	6,	738,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2585 = VFEEH
  { 2584,	3,	1,	6,	739,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2584 = VFEEFS
  { 2583,	4,	1,	6,	738,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2583 = VFEEF
  { 2582,	3,	1,	6,	739,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2582 = VFEEBS
  { 2581,	4,	1,	6,	738,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2581 = VFEEB
  { 2580,	5,	1,	6,	738,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2580 = VFEE
  { 2579,	3,	1,	6,	703,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2579 = VFDSB
  { 2578,	3,	1,	6,	701,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2578 = VFDDB
  { 2577,	5,	1,	6,	700,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo118 },  // Inst #2577 = VFD
  { 2576,	3,	1,	6,	722,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #2576 = VFCHSBS
  { 2575,	3,	1,	6,	714,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2575 = VFCHSB
  { 2574,	3,	1,	6,	722,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #2574 = VFCHESBS
  { 2573,	3,	1,	6,	714,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2573 = VFCHESB
  { 2572,	3,	1,	6,	719,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #2572 = VFCHEDBS
  { 2571,	3,	1,	6,	880,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2571 = VFCHEDB
  { 2570,	6,	1,	6,	710,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo395 },  // Inst #2570 = VFCHE
  { 2569,	3,	1,	6,	719,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #2569 = VFCHDBS
  { 2568,	3,	1,	6,	880,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2568 = VFCHDB
  { 2567,	6,	1,	6,	710,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo395 },  // Inst #2567 = VFCH
  { 2566,	3,	1,	6,	722,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #2566 = VFCESBS
  { 2565,	3,	1,	6,	714,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2565 = VFCESB
  { 2564,	3,	1,	6,	719,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo378 },  // Inst #2564 = VFCEDBS
  { 2563,	3,	1,	6,	880,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2563 = VFCEDB
  { 2562,	6,	1,	6,	710,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo395 },  // Inst #2562 = VFCE
  { 2561,	3,	1,	6,	687,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2561 = VFASB
  { 2560,	4,	1,	6,	737,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo377 },  // Inst #2560 = VFAEZHS
  { 2559,	4,	1,	6,	736,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2559 = VFAEZH
  { 2558,	4,	1,	6,	737,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo377 },  // Inst #2558 = VFAEZFS
  { 2557,	4,	1,	6,	736,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2557 = VFAEZF
  { 2556,	4,	1,	6,	737,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo377 },  // Inst #2556 = VFAEZBS
  { 2555,	4,	1,	6,	736,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2555 = VFAEZB
  { 2554,	4,	1,	6,	735,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo377 },  // Inst #2554 = VFAEHS
  { 2553,	4,	1,	6,	734,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2553 = VFAEH
  { 2552,	4,	1,	6,	735,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo377 },  // Inst #2552 = VFAEFS
  { 2551,	4,	1,	6,	734,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2551 = VFAEF
  { 2550,	4,	1,	6,	735,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo377 },  // Inst #2550 = VFAEBS
  { 2549,	4,	1,	6,	733,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2549 = VFAEB
  { 2548,	5,	1,	6,	733,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2548 = VFAE
  { 2547,	3,	1,	6,	685,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo378 },  // Inst #2547 = VFADB
  { 2546,	5,	1,	6,	684,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo118 },  // Inst #2546 = VFA
  { 2545,	3,	1,	6,	620,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2545 = VESRLVH
  { 2544,	3,	1,	6,	620,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2544 = VESRLVG
  { 2543,	3,	1,	6,	620,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2543 = VESRLVF
  { 2542,	3,	1,	6,	620,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2542 = VESRLVB
  { 2541,	4,	1,	6,	620,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2541 = VESRLV
  { 2540,	4,	1,	6,	619,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2540 = VESRLH
  { 2539,	4,	1,	6,	619,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2539 = VESRLG
  { 2538,	4,	1,	6,	619,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2538 = VESRLF
  { 2537,	4,	1,	6,	619,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2537 = VESRLB
  { 2536,	5,	1,	6,	619,	0,	0,	0, 0x0ULL, nullptr, OperandInfo393 },  // Inst #2536 = VESRL
  { 2535,	3,	1,	6,	618,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2535 = VESRAVH
  { 2534,	3,	1,	6,	618,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2534 = VESRAVG
  { 2533,	3,	1,	6,	618,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2533 = VESRAVF
  { 2532,	3,	1,	6,	618,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2532 = VESRAVB
  { 2531,	4,	1,	6,	618,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2531 = VESRAV
  { 2530,	4,	1,	6,	617,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2530 = VESRAH
  { 2529,	4,	1,	6,	617,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2529 = VESRAG
  { 2528,	4,	1,	6,	617,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2528 = VESRAF
  { 2527,	4,	1,	6,	617,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2527 = VESRAB
  { 2526,	5,	1,	6,	617,	0,	0,	0, 0x0ULL, nullptr, OperandInfo393 },  // Inst #2526 = VESRA
  { 2525,	3,	1,	6,	616,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2525 = VESLVH
  { 2524,	3,	1,	6,	616,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2524 = VESLVG
  { 2523,	3,	1,	6,	616,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2523 = VESLVF
  { 2522,	3,	1,	6,	616,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2522 = VESLVB
  { 2521,	4,	1,	6,	616,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2521 = VESLV
  { 2520,	4,	1,	6,	615,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2520 = VESLH
  { 2519,	4,	1,	6,	615,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2519 = VESLG
  { 2518,	4,	1,	6,	615,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2518 = VESLF
  { 2517,	4,	1,	6,	615,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2517 = VESLB
  { 2516,	5,	1,	6,	615,	0,	0,	0, 0x0ULL, nullptr, OperandInfo393 },  // Inst #2516 = VESL
  { 2515,	3,	1,	6,	613,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2515 = VERLLVH
  { 2514,	3,	1,	6,	613,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2514 = VERLLVG
  { 2513,	3,	1,	6,	613,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2513 = VERLLVF
  { 2512,	3,	1,	6,	613,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2512 = VERLLVB
  { 2511,	4,	1,	6,	613,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2511 = VERLLV
  { 2510,	4,	1,	6,	612,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2510 = VERLLH
  { 2509,	4,	1,	6,	612,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2509 = VERLLG
  { 2508,	4,	1,	6,	612,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2508 = VERLLF
  { 2507,	4,	1,	6,	612,	0,	0,	0, 0x0ULL, nullptr, OperandInfo394 },  // Inst #2507 = VERLLB
  { 2506,	5,	1,	6,	612,	0,	0,	0, 0x0ULL, nullptr, OperandInfo393 },  // Inst #2506 = VERLL
  { 2505,	5,	1,	6,	614,	0,	0,	0, 0x0ULL, nullptr, OperandInfo392 },  // Inst #2505 = VERIMH
  { 2504,	5,	1,	6,	614,	0,	0,	0, 0x0ULL, nullptr, OperandInfo392 },  // Inst #2504 = VERIMG
  { 2503,	5,	1,	6,	614,	0,	0,	0, 0x0ULL, nullptr, OperandInfo392 },  // Inst #2503 = VERIMF
  { 2502,	5,	1,	6,	614,	0,	0,	0, 0x0ULL, nullptr, OperandInfo392 },  // Inst #2502 = VERIMB
  { 2501,	6,	1,	6,	614,	0,	0,	0, 0x0ULL, nullptr, OperandInfo391 },  // Inst #2501 = VERIM
  { 2500,	2,	0,	6,	634,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo384 },  // Inst #2500 = VECLH
  { 2499,	2,	0,	6,	634,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo384 },  // Inst #2499 = VECLG
  { 2498,	2,	0,	6,	634,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo384 },  // Inst #2498 = VECLF
  { 2497,	2,	0,	6,	634,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo384 },  // Inst #2497 = VECLB
  { 2496,	3,	0,	6,	634,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo383 },  // Inst #2496 = VECL
  { 2495,	2,	0,	6,	633,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo384 },  // Inst #2495 = VECH
  { 2494,	2,	0,	6,	633,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo384 },  // Inst #2494 = VECG
  { 2493,	2,	0,	6,	633,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo384 },  // Inst #2493 = VECF
  { 2492,	2,	0,	6,	633,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo384 },  // Inst #2492 = VECB
  { 2491,	3,	0,	6,	633,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo383 },  // Inst #2491 = VEC
  { 2490,	5,	1,	6,	760,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2490 = VDP
  { 2489,	4,	1,	6,	757,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo390 },  // Inst #2489 = VCVDG
  { 2488,	4,	1,	6,	757,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo389 },  // Inst #2488 = VCVD
  { 2487,	4,	1,	6,	756,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo388 },  // Inst #2487 = VCVBOpt
  { 2486,	4,	1,	6,	756,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo387 },  // Inst #2486 = VCVBGOpt
  { 2485,	3,	1,	6,	867,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo386 },  // Inst #2485 = VCVBG
  { 2484,	3,	1,	6,	867,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo385 },  // Inst #2484 = VCVB
  { 2483,	2,	1,	6,	585,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2483 = VCTZH
  { 2482,	2,	1,	6,	585,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2482 = VCTZG
  { 2481,	2,	1,	6,	585,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2481 = VCTZF
  { 2480,	2,	1,	6,	585,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2480 = VCTZB
  { 2479,	3,	1,	6,	585,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2479 = VCTZ
  { 2478,	4,	1,	6,	767,	0,	0,	0, 0x0ULL, nullptr, OperandInfo377 },  // Inst #2478 = VCSPH
  { 2477,	5,	1,	6,	648,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo381 },  // Inst #2477 = VCSFP
  { 2476,	5,	1,	6,	752,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo118 },  // Inst #2476 = VCRNF
  { 2475,	3,	0,	6,	764,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo383 },  // Inst #2475 = VCP
  { 2474,	4,	1,	6,	752,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2474 = VCNF
  { 2473,	2,	1,	6,	584,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2473 = VCLZH
  { 2472,	2,	1,	6,	584,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2472 = VCLZG
  { 2471,	2,	1,	6,	584,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2471 = VCLZF
  { 2470,	3,	1,	6,	768,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo383 },  // Inst #2470 = VCLZDP
  { 2469,	2,	1,	6,	584,	0,	0,	0, 0x0ULL, nullptr, OperandInfo384 },  // Inst #2469 = VCLZB
  { 2468,	3,	1,	6,	584,	0,	0,	0, 0x0ULL, nullptr, OperandInfo383 },  // Inst #2468 = VCLZ
  { 2467,	4,	1,	6,	650,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2467 = VCLGDB
  { 2466,	5,	1,	6,	649,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo381 },  // Inst #2466 = VCLGD
  { 2465,	5,	1,	6,	648,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo381 },  // Inst #2465 = VCLFP
  { 2464,	4,	1,	6,	751,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2464 = VCLFNL
  { 2463,	4,	1,	6,	751,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2463 = VCLFNH
  { 2462,	4,	1,	6,	652,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2462 = VCLFEB
  { 2461,	3,	1,	6,	583,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2461 = VCKSM
  { 2460,	3,	1,	6,	640,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2460 = VCHLHS
  { 2459,	3,	1,	6,	639,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2459 = VCHLH
  { 2458,	3,	1,	6,	640,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2458 = VCHLGS
  { 2457,	3,	1,	6,	639,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2457 = VCHLG
  { 2456,	3,	1,	6,	640,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2456 = VCHLFS
  { 2455,	3,	1,	6,	639,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2455 = VCHLF
  { 2454,	3,	1,	6,	640,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2454 = VCHLBS
  { 2453,	3,	1,	6,	639,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2453 = VCHLB
  { 2452,	5,	1,	6,	639,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2452 = VCHL
  { 2451,	3,	1,	6,	638,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2451 = VCHHS
  { 2450,	3,	1,	6,	637,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2450 = VCHH
  { 2449,	3,	1,	6,	638,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2449 = VCHGS
  { 2448,	3,	1,	6,	637,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2448 = VCHG
  { 2447,	3,	1,	6,	638,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2447 = VCHFS
  { 2446,	3,	1,	6,	637,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2446 = VCHF
  { 2445,	3,	1,	6,	638,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2445 = VCHBS
  { 2444,	3,	1,	6,	637,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2444 = VCHB
  { 2443,	5,	1,	6,	637,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2443 = VCH
  { 2442,	4,	1,	6,	650,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2442 = VCGDB
  { 2441,	5,	1,	6,	649,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo381 },  // Inst #2441 = VCGD
  { 2440,	5,	1,	6,	642,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo381 },  // Inst #2440 = VCFPS
  { 2439,	5,	1,	6,	642,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo381 },  // Inst #2439 = VCFPL
  { 2438,	4,	1,	6,	750,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2438 = VCFN
  { 2437,	4,	1,	6,	652,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2437 = VCFEB
  { 2436,	3,	1,	6,	636,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2436 = VCEQHS
  { 2435,	3,	1,	6,	635,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2435 = VCEQH
  { 2434,	3,	1,	6,	636,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2434 = VCEQGS
  { 2433,	3,	1,	6,	635,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2433 = VCEQG
  { 2432,	3,	1,	6,	636,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2432 = VCEQFS
  { 2431,	3,	1,	6,	635,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2431 = VCEQF
  { 2430,	3,	1,	6,	636,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo378 },  // Inst #2430 = VCEQBS
  { 2429,	3,	1,	6,	635,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2429 = VCEQB
  { 2428,	5,	1,	6,	635,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2428 = VCEQ
  { 2427,	4,	1,	6,	646,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2427 = VCELFB
  { 2426,	4,	1,	6,	646,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2426 = VCEFB
  { 2425,	4,	1,	6,	644,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2425 = VCDLGB
  { 2424,	5,	1,	6,	643,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo381 },  // Inst #2424 = VCDLG
  { 2423,	4,	1,	6,	644,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo382 },  // Inst #2423 = VCDGB
  { 2422,	5,	1,	6,	643,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo381 },  // Inst #2422 = VCDG
  { 2421,	3,	1,	6,	564,	0,	0,	0, 0x0ULL, nullptr, OperandInfo378 },  // Inst #2421 = VBPERM
  { 2420,	3,	1,	6,	580,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2420 = VAVGLH
  { 2419,	3,	1,	6,	580,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2419 = VAVGLG
  { 2418,	3,	1,	6,	580,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2418 = VAVGLF
  { 2417,	3,	1,	6,	580,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2417 = VAVGLB
  { 2416,	4,	1,	6,	580,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo377 },  // Inst #2416 = VAVGL
  { 2415,	3,	1,	6,	579,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2415 = VAVGH
  { 2414,	3,	1,	6,	579,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2414 = VAVGG
  { 2413,	3,	1,	6,	579,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2413 = VAVGF
  { 2412,	3,	1,	6,	579,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2412 = VAVGB
  { 2411,	4,	1,	6,	579,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo377 },  // Inst #2411 = VAVG
  { 2410,	3,	1,	6,	577,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2410 = VAQ
  { 2409,	5,	1,	6,	758,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #2409 = VAP
  { 2408,	3,	1,	6,	577,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2408 = VAH
  { 2407,	3,	1,	6,	577,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2407 = VAG
  { 2406,	3,	1,	6,	577,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2406 = VAF
  { 2405,	4,	1,	6,	577,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2405 = VACQ
  { 2404,	3,	1,	6,	578,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2404 = VACCQ
  { 2403,	3,	1,	6,	578,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2403 = VACCH
  { 2402,	3,	1,	6,	578,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2402 = VACCG
  { 2401,	3,	1,	6,	578,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2401 = VACCF
  { 2400,	4,	1,	6,	578,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo380 },  // Inst #2400 = VACCCQ
  { 2399,	5,	1,	6,	578,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo379 },  // Inst #2399 = VACCC
  { 2398,	3,	1,	6,	578,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2398 = VACCB
  { 2397,	4,	1,	6,	578,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo377 },  // Inst #2397 = VACC
  { 2396,	5,	1,	6,	577,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo379 },  // Inst #2396 = VAC
  { 2395,	3,	1,	6,	577,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo378 },  // Inst #2395 = VAB
  { 2394,	4,	1,	6,	577,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo377 },  // Inst #2394 = VA
  { 2393,	0,	0,	2,	333,	6,	6,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList33, nullptr },  // Inst #2393 = UPT
  { 2392,	5,	0,	6,	302,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo214 },  // Inst #2392 = UNPKU
  { 2391,	5,	0,	6,	302,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo214 },  // Inst #2391 = UNPKA
  { 2390,	6,	0,	6,	303,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo144 },  // Inst #2390 = UNPK
  { 2389,	2,	0,	4,	856,	1,	1,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList15, OperandInfo180 },  // Inst #2389 = TSCH
  { 2388,	2,	0,	4,	273,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x20ULL, ImplicitList2, OperandInfo180 },  // Inst #2388 = TS
  { 2387,	4,	2,	4,	287,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo373 },  // Inst #2387 = TRTTOpt
  { 2386,	5,	2,	4,	287,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo374 },  // Inst #2386 = TRTT
  { 2385,	3,	2,	4,	286,	1,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList32, OperandInfo376 },  // Inst #2385 = TRTREOpt
  { 2384,	4,	2,	4,	286,	1,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList32, OperandInfo375 },  // Inst #2384 = TRTRE
  { 2383,	5,	0,	6,	284,	0,	3,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList31, OperandInfo214 },  // Inst #2383 = TRTR
  { 2382,	4,	2,	4,	287,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo373 },  // Inst #2382 = TRTOOpt
  { 2381,	5,	2,	4,	287,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo374 },  // Inst #2381 = TRTO
  { 2380,	3,	2,	4,	286,	1,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList32, OperandInfo376 },  // Inst #2380 = TRTEOpt
  { 2379,	4,	2,	4,	286,	1,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList32, OperandInfo375 },  // Inst #2379 = TRTE
  { 2378,	5,	0,	6,	283,	0,	3,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList31, OperandInfo214 },  // Inst #2378 = TRT
  { 2377,	4,	2,	4,	287,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo373 },  // Inst #2377 = TROTOpt
  { 2376,	5,	2,	4,	287,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo374 },  // Inst #2376 = TROT
  { 2375,	4,	2,	4,	287,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo373 },  // Inst #2375 = TROOOpt
  { 2374,	5,	2,	4,	287,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo374 },  // Inst #2374 = TROO
  { 2373,	4,	2,	4,	285,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList21, OperandInfo373 },  // Inst #2373 = TRE
  { 2372,	2,	0,	4,	845,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo180 },  // Inst #2372 = TRAP4
  { 2371,	0,	0,	2,	845,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #2371 = TRAP2
  { 2370,	4,	0,	6,	844,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo199 },  // Inst #2370 = TRACG
  { 2369,	4,	0,	4,	844,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo221 },  // Inst #2369 = TRACE
  { 2368,	5,	0,	6,	282,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo214 },  // Inst #2368 = TR
  { 2367,	4,	0,	6,	809,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo293 },  // Inst #2367 = TPROT
  { 2366,	2,	0,	4,	860,	0,	1,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo180 },  // Inst #2366 = TPI
  { 2365,	3,	0,	6,	309,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, OperandInfo372 },  // Inst #2365 = TP
  { 2364,	3,	0,	6,	256,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x4ULL, ImplicitList2, OperandInfo121 },  // Inst #2364 = TMY
  { 2363,	2,	0,	4,	261,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo185 },  // Inst #2363 = TMLL
  { 2362,	2,	0,	4,	260,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo185 },  // Inst #2362 = TMLH
  { 2361,	2,	0,	4,	259,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo210 },  // Inst #2361 = TMHL
  { 2360,	2,	0,	4,	258,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo210 },  // Inst #2360 = TMHH
  { 2359,	3,	0,	4,	256,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, OperandInfo121 },  // Inst #2359 = TM
  { 2358,	2,	1,	4,	427,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo94 },  // Inst #2358 = THDR
  { 2357,	2,	1,	4,	427,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo296 },  // Inst #2357 = THDER
  { 2356,	0,	0,	4,	323,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, nullptr },  // Inst #2356 = TEND
  { 2355,	4,	0,	6,	525,	0,	1,	0, 0x8ULL, ImplicitList2, OperandInfo97 },  // Inst #2355 = TDGXT
  { 2354,	4,	0,	6,	524,	0,	1,	0, 0x8ULL, ImplicitList2, OperandInfo175 },  // Inst #2354 = TDGET
  { 2353,	4,	0,	6,	893,	0,	1,	0, 0x8ULL, ImplicitList2, OperandInfo168 },  // Inst #2353 = TDGDT
  { 2352,	4,	0,	6,	525,	0,	1,	0, 0x8ULL, ImplicitList2, OperandInfo97 },  // Inst #2352 = TDCXT
  { 2351,	4,	0,	6,	524,	0,	1,	0, 0x8ULL, ImplicitList2, OperandInfo175 },  // Inst #2351 = TDCET
  { 2350,	4,	0,	6,	893,	0,	1,	0, 0x8ULL, ImplicitList2, OperandInfo168 },  // Inst #2350 = TDCDT
  { 2349,	4,	0,	6,	406,	0,	1,	0, 0x3008ULL, ImplicitList2, OperandInfo97 },  // Inst #2349 = TCXB
  { 2348,	4,	0,	6,	405,	0,	1,	0, 0x3008ULL, ImplicitList2, OperandInfo175 },  // Inst #2348 = TCEB
  { 2347,	4,	0,	6,	405,	0,	1,	0, 0x3008ULL, ImplicitList2, OperandInfo168 },  // Inst #2347 = TCDB
  { 2346,	3,	0,	6,	322,	0,	1,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo121 },  // Inst #2346 = TBEGINC
  { 2345,	3,	0,	6,	322,	0,	1,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo121 },  // Inst #2345 = TBEGIN
  { 2344,	3,	1,	4,	428,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo371 },  // Inst #2344 = TBEDR
  { 2343,	3,	1,	4,	428,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo258 },  // Inst #2343 = TBDR
  { 2342,	2,	0,	4,	795,	1,	2,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList25, OperandInfo149 },  // Inst #2342 = TB
  { 2341,	2,	0,	4,	821,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo356 },  // Inst #2341 = TAR
  { 2340,	0,	0,	2,	318,	0,	1,	0, 0x0ULL, ImplicitList2, nullptr },  // Inst #2340 = TAM
  { 2339,	2,	0,	4,	324,	0,	0,	0|(1ULL<<MCID::Barrier)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo180 },  // Inst #2339 = TABORT
  { 2338,	5,	1,	6,	129,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x223c8cULL, ImplicitList2, OperandInfo128 },  // Inst #2338 = SY
  { 2337,	4,	1,	4,	507,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo147 },  // Inst #2337 = SXTRA
  { 2336,	3,	1,	4,	507,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo146 },  // Inst #2336 = SXTR
  { 2335,	3,	1,	2,	443,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo145 },  // Inst #2335 = SXR
  { 2334,	3,	1,	4,	386,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x3fc00ULL, ImplicitList1, OperandInfo145 },  // Inst #2334 = SXBR
  { 2333,	3,	1,	2,	442,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo130 },  // Inst #2333 = SWR
  { 2332,	5,	1,	4,	441,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x108ULL, ImplicitList2, OperandInfo129 },  // Inst #2332 = SW
  { 2331,	1,	0,	2,	841,	0,	1,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo3 },  // Inst #2331 = SVC
  { 2330,	3,	1,	2,	442,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo134 },  // Inst #2330 = SUR
  { 2329,	5,	1,	4,	441,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x88ULL, ImplicitList2, OperandInfo133 },  // Inst #2329 = SU
  { 2328,	4,	0,	6,	48,	0,	0,	0|(1ULL<<MCID::MayStore), 0x8eULL, nullptr, OperandInfo167 },  // Inst #2328 = STY
  { 2327,	2,	0,	4,	808,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo149 },  // Inst #2327 = STURG
  { 2326,	2,	0,	4,	808,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo252 },  // Inst #2326 = STURA
  { 2325,	2,	0,	4,	834,	2,	2,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList30, OperandInfo180 },  // Inst #2325 = STSI
  { 2324,	2,	0,	4,	856,	1,	1,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList15, OperandInfo180 },  // Inst #2324 = STSCH
  { 2323,	4,	0,	6,	84,	0,	0,	0|(1ULL<<MCID::MayStore), 0x4cULL, nullptr, OperandInfo167 },  // Inst #2323 = STRVH
  { 2322,	4,	0,	6,	84,	0,	0,	0|(1ULL<<MCID::MayStore), 0x10cULL, nullptr, OperandInfo46 },  // Inst #2322 = STRVG
  { 2321,	4,	0,	6,	84,	0,	0,	0|(1ULL<<MCID::MayStore), 0x8cULL, nullptr, OperandInfo167 },  // Inst #2321 = STRV
  { 2320,	2,	0,	6,	48,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo207 },  // Inst #2320 = STRL
  { 2319,	4,	0,	6,	806,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo293 },  // Inst #2319 = STRAG
  { 2318,	2,	0,	4,	786,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, OperandInfo180 },  // Inst #2318 = STPX
  { 2317,	2,	0,	4,	831,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x100ULL, nullptr, OperandInfo180 },  // Inst #2317 = STPT
  { 2316,	4,	0,	6,	280,	0,	0,	0|(1ULL<<MCID::MayStore), 0x20cULL, nullptr, OperandInfo85 },  // Inst #2316 = STPQ
  { 2315,	3,	0,	4,	778,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo121 },  // Inst #2315 = STOSM
  { 2314,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2314 = STOCGAsmZ
  { 2313,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2313 = STOCGAsmP
  { 2312,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2312 = STOCGAsmO
  { 2311,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2311 = STOCGAsmNZ
  { 2310,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2310 = STOCGAsmNP
  { 2309,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2309 = STOCGAsmNO
  { 2308,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2308 = STOCGAsmNM
  { 2307,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2307 = STOCGAsmNLH
  { 2306,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2306 = STOCGAsmNLE
  { 2305,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2305 = STOCGAsmNL
  { 2304,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2304 = STOCGAsmNHE
  { 2303,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2303 = STOCGAsmNH
  { 2302,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2302 = STOCGAsmNE
  { 2301,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2301 = STOCGAsmM
  { 2300,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2300 = STOCGAsmLH
  { 2299,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2299 = STOCGAsmLE
  { 2298,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2298 = STOCGAsmL
  { 2297,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2297 = STOCGAsmHE
  { 2296,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2296 = STOCGAsmH
  { 2295,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo217 },  // Inst #2295 = STOCGAsmE
  { 2294,	4,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x104ULL, ImplicitList2, OperandInfo57 },  // Inst #2294 = STOCGAsm
  { 2293,	5,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x80104ULL, ImplicitList2, OperandInfo370 },  // Inst #2293 = STOCG
  { 2292,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2292 = STOCFHAsmZ
  { 2291,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2291 = STOCFHAsmP
  { 2290,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2290 = STOCFHAsmO
  { 2289,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2289 = STOCFHAsmNZ
  { 2288,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2288 = STOCFHAsmNP
  { 2287,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2287 = STOCFHAsmNO
  { 2286,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2286 = STOCFHAsmNM
  { 2285,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2285 = STOCFHAsmNLH
  { 2284,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2284 = STOCFHAsmNLE
  { 2283,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2283 = STOCFHAsmNL
  { 2282,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2282 = STOCFHAsmNHE
  { 2281,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2281 = STOCFHAsmNH
  { 2280,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2280 = STOCFHAsmNE
  { 2279,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2279 = STOCFHAsmM
  { 2278,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2278 = STOCFHAsmLH
  { 2277,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2277 = STOCFHAsmLE
  { 2276,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2276 = STOCFHAsmL
  { 2275,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2275 = STOCFHAsmHE
  { 2274,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2274 = STOCFHAsmH
  { 2273,	3,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo369 },  // Inst #2273 = STOCFHAsmE
  { 2272,	4,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo368 },  // Inst #2272 = STOCFHAsm
  { 2271,	5,	0,	6,	54,	1,	0,	0|(1ULL<<MCID::MayStore), 0x80084ULL, ImplicitList2, OperandInfo367 },  // Inst #2271 = STOCFH
  { 2270,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2270 = STOCAsmZ
  { 2269,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2269 = STOCAsmP
  { 2268,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2268 = STOCAsmO
  { 2267,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2267 = STOCAsmNZ
  { 2266,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2266 = STOCAsmNP
  { 2265,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2265 = STOCAsmNO
  { 2264,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2264 = STOCAsmNM
  { 2263,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2263 = STOCAsmNLH
  { 2262,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2262 = STOCAsmNLE
  { 2261,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2261 = STOCAsmNL
  { 2260,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2260 = STOCAsmNHE
  { 2259,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2259 = STOCAsmNH
  { 2258,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2258 = STOCAsmNE
  { 2257,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2257 = STOCAsmM
  { 2256,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2256 = STOCAsmLH
  { 2255,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2255 = STOCAsmLE
  { 2254,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2254 = STOCAsmL
  { 2253,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2253 = STOCAsmHE
  { 2252,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2252 = STOCAsmH
  { 2251,	3,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo225 },  // Inst #2251 = STOCAsmE
  { 2250,	4,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x84ULL, ImplicitList2, OperandInfo56 },  // Inst #2250 = STOCAsm
  { 2249,	5,	0,	6,	884,	1,	0,	0|(1ULL<<MCID::MayStore), 0x80084ULL, ImplicitList2, OperandInfo366 },  // Inst #2249 = STOC
  { 2248,	3,	0,	4,	778,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo121 },  // Inst #2248 = STNSM
  { 2247,	4,	0,	6,	81,	0,	0,	0|(1ULL<<MCID::MayStore), 0x4ULL, nullptr, OperandInfo221 },  // Inst #2247 = STMY
  { 2246,	4,	0,	6,	81,	0,	0,	0|(1ULL<<MCID::MayStore), 0x4ULL, nullptr, OperandInfo303 },  // Inst #2246 = STMH
  { 2245,	4,	0,	6,	81,	0,	0,	0|(1ULL<<MCID::MayStore), 0x4ULL, nullptr, OperandInfo199 },  // Inst #2245 = STMG
  { 2244,	4,	0,	4,	81,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo221 },  // Inst #2244 = STM
  { 2243,	2,	0,	4,	833,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x100ULL, nullptr, OperandInfo180 },  // Inst #2243 = STIDP
  { 2242,	4,	0,	6,	77,	0,	0,	0|(1ULL<<MCID::MayStore), 0x4cULL, nullptr, OperandInfo167 },  // Inst #2242 = STHY
  { 2241,	2,	0,	6,	77,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo207 },  // Inst #2241 = STHRL
  { 2240,	4,	0,	6,	77,	0,	0,	0|(1ULL<<MCID::MayStore), 0x4cULL, nullptr, OperandInfo204 },  // Inst #2240 = STHH
  { 2239,	4,	0,	4,	77,	0,	0,	0|(1ULL<<MCID::MayStore), 0x48ULL, nullptr, OperandInfo167 },  // Inst #2239 = STH
  { 2238,	4,	0,	6,	295,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0xcULL, nullptr, OperandInfo46 },  // Inst #2238 = STGSC
  { 2237,	2,	0,	6,	46,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo193 },  // Inst #2237 = STGRL
  { 2236,	4,	0,	6,	46,	0,	0,	0|(1ULL<<MCID::MayStore), 0x10eULL, nullptr, OperandInfo46 },  // Inst #2236 = STG
  { 2235,	2,	0,	4,	408,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, ImplicitList6, OperandInfo180 },  // Inst #2235 = STFPC
  { 2234,	2,	0,	4,	835,	1,	2,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList25, OperandInfo180 },  // Inst #2234 = STFLE
  { 2233,	2,	0,	4,	835,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, OperandInfo180 },  // Inst #2233 = STFL
  { 2232,	4,	0,	6,	48,	0,	0,	0|(1ULL<<MCID::MayStore), 0x8eULL, nullptr, OperandInfo204 },  // Inst #2232 = STFH
  { 2231,	4,	0,	6,	354,	0,	0,	0|(1ULL<<MCID::MayStore), 0x8eULL, nullptr, OperandInfo175 },  // Inst #2231 = STEY
  { 2230,	4,	0,	4,	354,	0,	0,	0|(1ULL<<MCID::MayStore), 0x8aULL, nullptr, OperandInfo175 },  // Inst #2230 = STE
  { 2229,	4,	0,	6,	354,	0,	0,	0|(1ULL<<MCID::MayStore), 0x10eULL, nullptr, OperandInfo168 },  // Inst #2229 = STDY
  { 2228,	4,	0,	4,	354,	0,	0,	0|(1ULL<<MCID::MayStore), 0x10aULL, nullptr, OperandInfo168 },  // Inst #2228 = STD
  { 2227,	4,	0,	6,	76,	0,	0,	0|(1ULL<<MCID::MayStore), 0x2cULL, nullptr, OperandInfo167 },  // Inst #2227 = STCY
  { 2226,	4,	0,	4,	782,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo295 },  // Inst #2226 = STCTL
  { 2225,	4,	0,	6,	782,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo295 },  // Inst #2225 = STCTG
  { 2224,	2,	0,	4,	859,	0,	1,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo180 },  // Inst #2224 = STCRW
  { 2223,	2,	0,	4,	859,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo180 },  // Inst #2223 = STCPS
  { 2222,	4,	0,	6,	78,	0,	0,	0|(1ULL<<MCID::MayStore), 0x4ULL, nullptr, OperandInfo209 },  // Inst #2222 = STCMY
  { 2221,	4,	0,	6,	78,	0,	0,	0|(1ULL<<MCID::MayStore), 0x4ULL, nullptr, OperandInfo218 },  // Inst #2221 = STCMH
  { 2220,	4,	0,	4,	78,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo209 },  // Inst #2220 = STCM
  { 2219,	2,	0,	4,	828,	0,	1,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x100ULL, ImplicitList2, OperandInfo180 },  // Inst #2219 = STCKF
  { 2218,	2,	0,	4,	829,	0,	1,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x200ULL, ImplicitList2, OperandInfo180 },  // Inst #2218 = STCKE
  { 2217,	2,	0,	4,	830,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x100ULL, nullptr, OperandInfo180 },  // Inst #2217 = STCKC
  { 2216,	2,	0,	4,	828,	0,	1,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x100ULL, ImplicitList2, OperandInfo180 },  // Inst #2216 = STCK
  { 2215,	4,	0,	6,	76,	0,	0,	0|(1ULL<<MCID::MayStore), 0x2cULL, nullptr, OperandInfo204 },  // Inst #2215 = STCH
  { 2214,	4,	0,	4,	76,	0,	0,	0|(1ULL<<MCID::MayStore), 0x28ULL, nullptr, OperandInfo167 },  // Inst #2214 = STC
  { 2213,	2,	0,	4,	788,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x100ULL, nullptr, OperandInfo180 },  // Inst #2213 = STBEAR
  { 2212,	2,	0,	4,	832,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x40ULL, nullptr, OperandInfo180 },  // Inst #2212 = STAP
  { 2211,	4,	0,	6,	314,	0,	0,	0|(1ULL<<MCID::MayStore), 0x4ULL, nullptr, OperandInfo292 },  // Inst #2211 = STAMY
  { 2210,	4,	0,	4,	314,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo292 },  // Inst #2210 = STAM
  { 2209,	4,	0,	4,	48,	0,	0,	0|(1ULL<<MCID::MayStore), 0x8aULL, nullptr, OperandInfo167 },  // Inst #2209 = ST
  { 2208,	2,	0,	4,	777,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x20ULL, nullptr, OperandInfo180 },  // Inst #2208 = SSM
  { 2207,	2,	0,	4,	791,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo252 },  // Inst #2207 = SSKEOpt
  { 2206,	3,	0,	4,	791,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo365 },  // Inst #2206 = SSKE
  { 2205,	2,	0,	4,	856,	1,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList15, OperandInfo180 },  // Inst #2205 = SSCH
  { 2204,	1,	0,	4,	784,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo253 },  // Inst #2204 = SSAR
  { 2203,	1,	0,	4,	784,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo83 },  // Inst #2203 = SSAIR
  { 2202,	5,	1,	6,	517,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x8ULL, nullptr, OperandInfo362 },  // Inst #2202 = SRXT
  { 2201,	4,	2,	4,	330,	1,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList13, OperandInfo224 },  // Inst #2201 = SRSTU
  { 2200,	4,	2,	4,	330,	1,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList13, OperandInfo224 },  // Inst #2200 = SRST
  { 2199,	6,	0,	6,	307,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo364 },  // Inst #2199 = SRP
  { 2198,	2,	0,	4,	413,	1,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList29, OperandInfo363 },  // Inst #2198 = SRNMT
  { 2197,	2,	0,	4,	413,	1,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList29, OperandInfo363 },  // Inst #2197 = SRNMB
  { 2196,	2,	0,	4,	413,	1,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList29, OperandInfo363 },  // Inst #2196 = SRNM
  { 2195,	4,	1,	6,	208,	0,	0,	0, 0x4ULL, nullptr, OperandInfo355 },  // Inst #2195 = SRLK
  { 2194,	4,	1,	6,	208,	0,	0,	0, 0x4ULL, nullptr, OperandInfo251 },  // Inst #2194 = SRLG
  { 2193,	4,	1,	4,	208,	0,	0,	0, 0x0ULL, nullptr, OperandInfo360 },  // Inst #2193 = SRL
  { 2192,	3,	1,	4,	137,	0,	1,	0, 0x223c00ULL, ImplicitList2, OperandInfo143 },  // Inst #2192 = SRK
  { 2191,	5,	1,	6,	516,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x8ULL, nullptr, OperandInfo45 },  // Inst #2191 = SRDT
  { 2190,	4,	1,	4,	211,	0,	0,	0, 0x0ULL, nullptr, OperandInfo361 },  // Inst #2190 = SRDL
  { 2189,	4,	1,	4,	211,	0,	1,	0, 0x3b800ULL, ImplicitList2, OperandInfo361 },  // Inst #2189 = SRDA
  { 2188,	4,	1,	6,	209,	0,	1,	0, 0x3b804ULL, ImplicitList2, OperandInfo355 },  // Inst #2188 = SRAK
  { 2187,	4,	1,	6,	209,	0,	1,	0, 0x3b804ULL, ImplicitList2, OperandInfo251 },  // Inst #2187 = SRAG
  { 2186,	4,	1,	4,	209,	0,	1,	0, 0x3b800ULL, ImplicitList2, OperandInfo360 },  // Inst #2186 = SRA
  { 2185,	3,	1,	2,	137,	0,	1,	0, 0x223c00ULL, ImplicitList2, OperandInfo142 },  // Inst #2185 = SR
  { 2184,	2,	1,	4,	435,	0,	0,	0, 0x0ULL, nullptr, OperandInfo96 },  // Inst #2184 = SQXR
  { 2183,	2,	1,	4,	378,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo96 },  // Inst #2183 = SQXBR
  { 2182,	2,	1,	4,	433,	0,	0,	0, 0x0ULL, nullptr, OperandInfo95 },  // Inst #2182 = SQER
  { 2181,	2,	1,	4,	376,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo95 },  // Inst #2181 = SQEBR
  { 2180,	4,	1,	6,	375,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x88ULL, ImplicitList6, OperandInfo175 },  // Inst #2180 = SQEB
  { 2179,	4,	1,	6,	432,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x88ULL, nullptr, OperandInfo175 },  // Inst #2179 = SQE
  { 2178,	2,	1,	4,	434,	0,	0,	0, 0x0ULL, nullptr, OperandInfo94 },  // Inst #2178 = SQDR
  { 2177,	2,	1,	4,	377,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo94 },  // Inst #2177 = SQDBR
  { 2176,	4,	1,	6,	375,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x108ULL, ImplicitList6, OperandInfo168 },  // Inst #2176 = SQDB
  { 2175,	4,	1,	6,	432,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x108ULL, nullptr, OperandInfo168 },  // Inst #2175 = SQD
  { 2174,	2,	0,	4,	786,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, OperandInfo180 },  // Inst #2174 = SPX
  { 2173,	2,	0,	4,	827,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x100ULL, nullptr, OperandInfo180 },  // Inst #2173 = SPT
  { 2172,	1,	0,	2,	316,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo253 },  // Inst #2172 = SPM
  { 2171,	2,	0,	4,	776,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo180 },  // Inst #2171 = SPKA
  { 2170,	2,	0,	4,	854,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo149 },  // Inst #2170 = SPCTR
  { 2169,	6,	0,	6,	304,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo144 },  // Inst #2169 = SP
  { 2168,	4,	2,	4,	336,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo215 },  // Inst #2168 = SORTL
  { 2167,	5,	1,	6,	133,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x101c8cULL, ImplicitList2, OperandInfo128 },  // Inst #2167 = SLY
  { 2166,	5,	1,	6,	517,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x8ULL, nullptr, OperandInfo362 },  // Inst #2166 = SLXT
  { 2165,	3,	1,	4,	136,	0,	1,	0, 0x101c00ULL, ImplicitList2, OperandInfo143 },  // Inst #2165 = SLRK
  { 2164,	3,	1,	2,	136,	0,	1,	0, 0x101c00ULL, ImplicitList2, OperandInfo142 },  // Inst #2164 = SLR
  { 2163,	4,	1,	6,	207,	0,	0,	0, 0x4ULL, nullptr, OperandInfo355 },  // Inst #2163 = SLLK
  { 2162,	4,	1,	6,	207,	0,	0,	0, 0x4ULL, nullptr, OperandInfo251 },  // Inst #2162 = SLLG
  { 2161,	4,	1,	4,	207,	0,	0,	0, 0x0ULL, nullptr, OperandInfo360 },  // Inst #2161 = SLL
  { 2160,	3,	1,	4,	139,	0,	1,	0, 0x101c00ULL, ImplicitList2, OperandInfo140 },  // Inst #2160 = SLHHLR
  { 2159,	3,	1,	4,	138,	0,	1,	0, 0x101c00ULL, ImplicitList2, OperandInfo139 },  // Inst #2159 = SLHHHR
  { 2158,	3,	1,	4,	135,	0,	1,	0, 0x101c00ULL, ImplicitList2, OperandInfo105 },  // Inst #2158 = SLGRK
  { 2157,	3,	1,	4,	135,	0,	1,	0, 0x101c00ULL, ImplicitList2, OperandInfo138 },  // Inst #2157 = SLGR
  { 2156,	3,	1,	4,	134,	0,	1,	0, 0x101c00ULL, ImplicitList2, OperandInfo137 },  // Inst #2156 = SLGFR
  { 2155,	3,	1,	6,	134,	0,	1,	0, 0x101c00ULL, ImplicitList2, OperandInfo84 },  // Inst #2155 = SLGFI
  { 2154,	5,	1,	6,	133,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x101c8cULL, ImplicitList2, OperandInfo136 },  // Inst #2154 = SLGF
  { 2153,	5,	1,	6,	133,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x101d0cULL, ImplicitList2, OperandInfo136 },  // Inst #2153 = SLG
  { 2152,	3,	1,	6,	132,	0,	1,	0, 0x101c00ULL, ImplicitList2, OperandInfo135 },  // Inst #2152 = SLFI
  { 2151,	5,	1,	6,	516,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x8ULL, nullptr, OperandInfo45 },  // Inst #2151 = SLDT
  { 2150,	4,	1,	4,	211,	0,	0,	0, 0x0ULL, nullptr, OperandInfo361 },  // Inst #2150 = SLDL
  { 2149,	4,	1,	4,	211,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo361 },  // Inst #2149 = SLDA
  { 2148,	3,	1,	4,	141,	1,	1,	0, 0x103c00ULL, ImplicitList11, OperandInfo142 },  // Inst #2148 = SLBR
  { 2147,	3,	1,	4,	141,	1,	1,	0, 0x103c00ULL, ImplicitList11, OperandInfo138 },  // Inst #2147 = SLBGR
  { 2146,	5,	1,	6,	140,	1,	1,	0|(1ULL<<MCID::MayLoad), 0x103d0cULL, ImplicitList11, OperandInfo136 },  // Inst #2146 = SLBG
  { 2145,	5,	1,	6,	140,	1,	1,	0|(1ULL<<MCID::MayLoad), 0x103c8cULL, ImplicitList11, OperandInfo128 },  // Inst #2145 = SLB
  { 2144,	4,	1,	6,	210,	0,	1,	0, 0x4ULL, ImplicitList2, OperandInfo355 },  // Inst #2144 = SLAK
  { 2143,	4,	1,	6,	210,	0,	1,	0, 0x4ULL, ImplicitList2, OperandInfo251 },  // Inst #2143 = SLAG
  { 2142,	4,	1,	4,	210,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo360 },  // Inst #2142 = SLA
  { 2141,	5,	1,	4,	133,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x101c88ULL, ImplicitList2, OperandInfo128 },  // Inst #2141 = SL
  { 2140,	4,	0,	4,	846,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo199 },  // Inst #2140 = SIGP
  { 2139,	2,	0,	4,	846,	4,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList28, OperandInfo180 },  // Inst #2139 = SIGA
  { 2138,	2,	0,	4,	847,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo180 },  // Inst #2138 = SIE
  { 2137,	5,	1,	6,	130,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x223c4cULL, ImplicitList2, OperandInfo128 },  // Inst #2137 = SHY
  { 2136,	3,	1,	4,	139,	0,	1,	0, 0x223c00ULL, ImplicitList2, OperandInfo140 },  // Inst #2136 = SHHLR
  { 2135,	3,	1,	4,	138,	0,	1,	0, 0x223c00ULL, ImplicitList2, OperandInfo139 },  // Inst #2135 = SHHHR
  { 2134,	5,	1,	4,	130,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x223c48ULL, ImplicitList2, OperandInfo128 },  // Inst #2134 = SH
  { 2133,	3,	1,	4,	131,	0,	1,	0, 0x223c00ULL, ImplicitList2, OperandInfo105 },  // Inst #2133 = SGRK
  { 2132,	3,	1,	4,	131,	0,	1,	0, 0x223c00ULL, ImplicitList2, OperandInfo138 },  // Inst #2132 = SGR
  { 2131,	5,	1,	6,	142,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x223c4cULL, ImplicitList2, OperandInfo136 },  // Inst #2131 = SGH
  { 2130,	3,	1,	4,	143,	0,	1,	0, 0x223c00ULL, ImplicitList2, OperandInfo137 },  // Inst #2130 = SGFR
  { 2129,	5,	1,	6,	869,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x223c8cULL, ImplicitList2, OperandInfo136 },  // Inst #2129 = SGF
  { 2128,	5,	1,	6,	129,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x223d0cULL, ImplicitList2, OperandInfo136 },  // Inst #2128 = SG
  { 2127,	1,	0,	4,	409,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList6, OperandInfo253 },  // Inst #2127 = SFPC
  { 2126,	1,	0,	4,	411,	0,	1,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList6, OperandInfo253 },  // Inst #2126 = SFASR
  { 2125,	3,	1,	2,	442,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo134 },  // Inst #2125 = SER
  { 2124,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2124 = SELRAsmZ
  { 2123,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2123 = SELRAsmP
  { 2122,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2122 = SELRAsmO
  { 2121,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2121 = SELRAsmNZ
  { 2120,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2120 = SELRAsmNP
  { 2119,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2119 = SELRAsmNO
  { 2118,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2118 = SELRAsmNM
  { 2117,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2117 = SELRAsmNLH
  { 2116,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2116 = SELRAsmNLE
  { 2115,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2115 = SELRAsmNL
  { 2114,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2114 = SELRAsmNHE
  { 2113,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2113 = SELRAsmNH
  { 2112,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2112 = SELRAsmNE
  { 2111,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2111 = SELRAsmM
  { 2110,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2110 = SELRAsmLH
  { 2109,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2109 = SELRAsmLE
  { 2108,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2108 = SELRAsmL
  { 2107,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2107 = SELRAsmHE
  { 2106,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2106 = SELRAsmH
  { 2105,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #2105 = SELRAsmE
  { 2104,	4,	1,	4,	56,	1,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, OperandInfo359 },  // Inst #2104 = SELRAsm
  { 2103,	5,	1,	4,	56,	1,	0,	0|(1ULL<<MCID::Commutable), 0x80000ULL, ImplicitList2, OperandInfo113 },  // Inst #2103 = SELR
  { 2102,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2102 = SELGRAsmZ
  { 2101,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2101 = SELGRAsmP
  { 2100,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2100 = SELGRAsmO
  { 2099,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2099 = SELGRAsmNZ
  { 2098,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2098 = SELGRAsmNP
  { 2097,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2097 = SELGRAsmNO
  { 2096,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2096 = SELGRAsmNM
  { 2095,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2095 = SELGRAsmNLH
  { 2094,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2094 = SELGRAsmNLE
  { 2093,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2093 = SELGRAsmNL
  { 2092,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2092 = SELGRAsmNHE
  { 2091,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2091 = SELGRAsmNH
  { 2090,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2090 = SELGRAsmNE
  { 2089,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2089 = SELGRAsmM
  { 2088,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2088 = SELGRAsmLH
  { 2087,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2087 = SELGRAsmLE
  { 2086,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2086 = SELGRAsmL
  { 2085,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2085 = SELGRAsmHE
  { 2084,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2084 = SELGRAsmH
  { 2083,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #2083 = SELGRAsmE
  { 2082,	4,	1,	4,	56,	1,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, OperandInfo266 },  // Inst #2082 = SELGRAsm
  { 2081,	5,	1,	4,	56,	1,	0,	0|(1ULL<<MCID::Commutable), 0x80000ULL, ImplicitList2, OperandInfo114 },  // Inst #2081 = SELGR
  { 2080,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2080 = SELFHRAsmZ
  { 2079,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2079 = SELFHRAsmP
  { 2078,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2078 = SELFHRAsmO
  { 2077,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2077 = SELFHRAsmNZ
  { 2076,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2076 = SELFHRAsmNP
  { 2075,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2075 = SELFHRAsmNO
  { 2074,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2074 = SELFHRAsmNM
  { 2073,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2073 = SELFHRAsmNLH
  { 2072,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2072 = SELFHRAsmNLE
  { 2071,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2071 = SELFHRAsmNL
  { 2070,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2070 = SELFHRAsmNHE
  { 2069,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2069 = SELFHRAsmNH
  { 2068,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2068 = SELFHRAsmNE
  { 2067,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2067 = SELFHRAsmM
  { 2066,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2066 = SELFHRAsmLH
  { 2065,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2065 = SELFHRAsmLE
  { 2064,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2064 = SELFHRAsmL
  { 2063,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2063 = SELFHRAsmHE
  { 2062,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2062 = SELFHRAsmH
  { 2061,	3,	1,	4,	56,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo139 },  // Inst #2061 = SELFHRAsmE
  { 2060,	4,	1,	4,	56,	1,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, OperandInfo358 },  // Inst #2060 = SELFHRAsm
  { 2059,	5,	1,	4,	56,	1,	0,	0|(1ULL<<MCID::Commutable), 0x80000ULL, ImplicitList2, OperandInfo357 },  // Inst #2059 = SELFHR
  { 2058,	3,	1,	4,	385,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x3fc00ULL, ImplicitList1, OperandInfo134 },  // Inst #2058 = SEBR
  { 2057,	5,	1,	6,	384,	1,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x3fc88ULL, ImplicitList1, OperandInfo133 },  // Inst #2057 = SEB
  { 2056,	5,	1,	4,	441,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x88ULL, ImplicitList2, OperandInfo133 },  // Inst #2056 = SE
  { 2055,	4,	1,	4,	506,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo132 },  // Inst #2055 = SDTRA
  { 2054,	3,	1,	4,	506,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo131 },  // Inst #2054 = SDTR
  { 2053,	3,	1,	2,	442,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo130 },  // Inst #2053 = SDR
  { 2052,	3,	1,	4,	385,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x3fc00ULL, ImplicitList1, OperandInfo130 },  // Inst #2052 = SDBR
  { 2051,	5,	1,	6,	384,	1,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x3fd08ULL, ImplicitList1, OperandInfo129 },  // Inst #2051 = SDB
  { 2050,	5,	1,	4,	441,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x108ULL, ImplicitList2, OperandInfo129 },  // Inst #2050 = SD
  { 2049,	0,	0,	2,	895,	1,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList21, nullptr },  // Inst #2049 = SCKPF
  { 2048,	2,	0,	4,	826,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x100ULL, nullptr, OperandInfo180 },  // Inst #2048 = SCKC
  { 2047,	2,	0,	4,	894,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x100ULL, ImplicitList2, OperandInfo180 },  // Inst #2047 = SCK
  { 2046,	0,	0,	4,	858,	2,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList27, nullptr },  // Inst #2046 = SCHM
  { 2045,	2,	0,	4,	854,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo149 },  // Inst #2045 = SCCTR
  { 2044,	2,	1,	4,	311,	0,	0,	0, 0x0ULL, nullptr, OperandInfo356 },  // Inst #2044 = SAR
  { 2043,	0,	0,	2,	319,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #2043 = SAM64
  { 2042,	0,	0,	2,	319,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #2042 = SAM31
  { 2041,	0,	0,	2,	319,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #2041 = SAM24
  { 2040,	0,	0,	4,	861,	1,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList26, nullptr },  // Inst #2040 = SAL
  { 2039,	2,	0,	4,	780,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo180 },  // Inst #2039 = SACF
  { 2038,	2,	0,	4,	780,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo180 },  // Inst #2038 = SAC
  { 2037,	5,	1,	4,	129,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x223c88ULL, ImplicitList2, OperandInfo128 },  // Inst #2037 = S
  { 2036,	6,	1,	6,	217,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo352 },  // Inst #2036 = RXSBG
  { 2035,	0,	0,	4,	855,	1,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList15, nullptr },  // Inst #2035 = RSCH
  { 2034,	5,	2,	4,	515,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo351 },  // Inst #2034 = RRXTR
  { 2033,	5,	2,	4,	514,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo247 },  // Inst #2033 = RRDTR
  { 2032,	2,	1,	4,	792,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #2032 = RRBM
  { 2031,	2,	0,	4,	792,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo252 },  // Inst #2031 = RRBE
  { 2030,	2,	0,	4,	819,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo180 },  // Inst #2030 = RP
  { 2029,	6,	1,	6,	217,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo352 },  // Inst #2029 = ROSBG
  { 2028,	6,	1,	6,	217,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo352 },  // Inst #2028 = RNSBG
  { 2027,	4,	1,	6,	212,	0,	0,	0, 0x4ULL, nullptr, OperandInfo251 },  // Inst #2027 = RLLG
  { 2026,	4,	1,	6,	212,	0,	0,	0, 0x4ULL, nullptr, OperandInfo355 },  // Inst #2026 = RLL
  { 2025,	6,	1,	6,	215,	0,	0,	0, 0x0ULL, nullptr, OperandInfo354 },  // Inst #2025 = RISBLG
  { 2024,	6,	1,	6,	214,	0,	0,	0, 0x0ULL, nullptr, OperandInfo353 },  // Inst #2024 = RISBHG
  { 2023,	6,	1,	6,	213,	0,	0,	0, 0x0ULL, nullptr, OperandInfo352 },  // Inst #2023 = RISBGN
  { 2022,	6,	1,	6,	896,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo109 },  // Inst #2022 = RISBG32
  { 2021,	6,	1,	6,	896,	0,	1,	0, 0x3b800ULL, ImplicitList2, OperandInfo352 },  // Inst #2021 = RISBG
  { 2020,	3,	0,	4,	800,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo105 },  // Inst #2020 = RDPOpt
  { 2019,	4,	0,	4,	800,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo266 },  // Inst #2019 = RDP
  { 2018,	0,	0,	4,	857,	1,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList15, nullptr },  // Inst #2018 = RCHP
  { 2017,	2,	0,	4,	853,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo180 },  // Inst #2017 = QSI
  { 2016,	2,	0,	4,	840,	1,	2,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList25, OperandInfo180 },  // Inst #2016 = QPACI
  { 2015,	2,	0,	4,	853,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo180 },  // Inst #2015 = QCTRI
  { 2014,	5,	2,	4,	513,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo351 },  // Inst #2014 = QAXTR
  { 2013,	5,	2,	4,	512,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo247 },  // Inst #2013 = QADTR
  { 2012,	0,	0,	4,	802,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #2012 = PTLB
  { 2011,	2,	0,	4,	818,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #2011 = PTI
  { 2010,	0,	0,	2,	825,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList16, nullptr },  // Inst #2010 = PTFF
  { 2009,	2,	1,	4,	838,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo350 },  // Inst #2009 = PTF
  { 2008,	2,	0,	4,	818,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo252 },  // Inst #2008 = PT
  { 2007,	4,	2,	4,	292,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo215 },  // Inst #2007 = PRNO
  { 2006,	0,	0,	2,	817,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, nullptr },  // Inst #2006 = PR
  { 2005,	4,	2,	4,	871,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo215 },  // Inst #2005 = PPNO
  { 2004,	3,	0,	4,	327,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo64 },  // Inst #2004 = PPA
  { 2003,	3,	1,	4,	329,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo64 },  // Inst #2003 = POPCNTOpt
  { 2002,	2,	1,	4,	864,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo149 },  // Inst #2002 = POPCNT
  { 2001,	6,	0,	6,	278,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo349 },  // Inst #2001 = PLO
  { 2000,	5,	0,	6,	301,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo348 },  // Inst #2000 = PKU
  { 1999,	5,	0,	6,	301,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo348 },  // Inst #1999 = PKA
  { 1998,	2,	0,	4,	797,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo149 },  // Inst #1998 = PGOUT
  { 1997,	2,	0,	4,	796,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo149 },  // Inst #1997 = PGIN
  { 1996,	0,	0,	2,	497,	3,	3,	0, 0x0ULL, ImplicitList24, nullptr },  // Inst #1996 = PFPO
  { 1995,	3,	1,	4,	794,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo347 },  // Inst #1995 = PFMF
  { 1994,	2,	0,	6,	263,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo159 },  // Inst #1994 = PFDRL
  { 1993,	4,	0,	6,	263,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0xcULL, nullptr, OperandInfo152 },  // Inst #1993 = PFD
  { 1992,	0,	0,	4,	839,	2,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList23, nullptr },  // Inst #1992 = PCKMO
  { 1991,	0,	0,	4,	887,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, nullptr },  // Inst #1991 = PCC
  { 1990,	2,	0,	4,	816,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo180 },  // Inst #1990 = PC
  { 1989,	0,	0,	4,	815,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #1989 = PALB
  { 1988,	6,	0,	6,	301,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo144 },  // Inst #1988 = PACK
  { 1987,	5,	1,	6,	156,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x2308cULL, ImplicitList2, OperandInfo128 },  // Inst #1987 = OY
  { 1986,	3,	1,	4,	166,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo143 },  // Inst #1986 = ORK
  { 1985,	3,	1,	2,	166,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo142 },  // Inst #1985 = OR
  { 1984,	3,	0,	6,	158,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo121 },  // Inst #1984 = OIY
  { 1983,	3,	1,	4,	165,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1983 = OILL
  { 1982,	3,	1,	4,	164,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1982 = OILH
  { 1981,	3,	1,	6,	163,	0,	1,	0, 0x23000ULL, ImplicitList2, OperandInfo135 },  // Inst #1981 = OILF
  { 1980,	3,	1,	4,	162,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1980 = OIHL
  { 1979,	3,	1,	4,	161,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1979 = OIHH
  { 1978,	3,	1,	6,	160,	0,	1,	0, 0x23000ULL, ImplicitList2, OperandInfo141 },  // Inst #1978 = OIHF
  { 1977,	3,	0,	4,	158,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo121 },  // Inst #1977 = OI
  { 1976,	3,	1,	4,	157,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo105 },  // Inst #1976 = OGRK
  { 1975,	3,	1,	4,	157,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo138 },  // Inst #1975 = OGR
  { 1974,	5,	1,	6,	156,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x2310cULL, ImplicitList2, OperandInfo136 },  // Inst #1974 = OG
  { 1973,	3,	1,	4,	177,	0,	1,	0, 0x23000ULL, ImplicitList2, OperandInfo143 },  // Inst #1973 = OCRK
  { 1972,	3,	1,	4,	177,	0,	1,	0, 0x23000ULL, ImplicitList2, OperandInfo105 },  // Inst #1972 = OCGRK
  { 1971,	5,	0,	6,	167,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo214 },  // Inst #1971 = OC
  { 1970,	5,	1,	4,	156,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x23088ULL, ImplicitList2, OperandInfo128 },  // Inst #1970 = O
  { 1969,	5,	1,	6,	144,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x2308cULL, ImplicitList2, OperandInfo128 },  // Inst #1969 = NY
  { 1968,	3,	1,	4,	180,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo143 },  // Inst #1968 = NXRK
  { 1967,	3,	1,	4,	180,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo105 },  // Inst #1967 = NXGRK
  { 1966,	4,	0,	6,	326,	0,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x10cULL, nullptr, OperandInfo46 },  // Inst #1966 = NTSTG
  { 1965,	3,	1,	4,	154,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo143 },  // Inst #1965 = NRK
  { 1964,	3,	1,	2,	154,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo142 },  // Inst #1964 = NR
  { 1963,	3,	1,	4,	179,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo143 },  // Inst #1963 = NORK
  { 1962,	0,	0,	4,	0,	0,	0,	0, 0x8ULL, nullptr, nullptr },  // Inst #1962 = NOP_bare
  { 1961,	3,	1,	4,	179,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo105 },  // Inst #1961 = NOGRK
  { 1960,	3,	1,	4,	178,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo143 },  // Inst #1960 = NNRK
  { 1959,	0,	0,	4,	338,	2,	2,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList22, nullptr },  // Inst #1959 = NNPA
  { 1958,	3,	1,	4,	178,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo105 },  // Inst #1958 = NNGRK
  { 1957,	3,	0,	6,	147,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo121 },  // Inst #1957 = NIY
  { 1956,	3,	1,	4,	153,	0,	1,	0|(1ULL<<MCID::ConvertibleTo3Addr), 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1956 = NILL
  { 1955,	3,	1,	4,	152,	0,	1,	0|(1ULL<<MCID::ConvertibleTo3Addr), 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1955 = NILH
  { 1954,	3,	1,	6,	151,	0,	1,	0|(1ULL<<MCID::ConvertibleTo3Addr), 0x23000ULL, ImplicitList2, OperandInfo135 },  // Inst #1954 = NILF
  { 1953,	3,	1,	4,	150,	0,	1,	0|(1ULL<<MCID::ConvertibleTo3Addr), 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1953 = NIHL
  { 1952,	3,	1,	4,	149,	0,	1,	0|(1ULL<<MCID::ConvertibleTo3Addr), 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1952 = NIHH
  { 1951,	3,	1,	6,	148,	0,	1,	0|(1ULL<<MCID::ConvertibleTo3Addr), 0x23000ULL, ImplicitList2, OperandInfo141 },  // Inst #1951 = NIHF
  { 1950,	2,	0,	4,	266,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo10 },  // Inst #1950 = NIAI
  { 1949,	3,	0,	4,	147,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo121 },  // Inst #1949 = NI
  { 1948,	3,	1,	4,	145,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo105 },  // Inst #1948 = NGRK
  { 1947,	3,	1,	4,	145,	0,	1,	0|(1ULL<<MCID::Commutable), 0x23000ULL, ImplicitList2, OperandInfo138 },  // Inst #1947 = NGR
  { 1946,	5,	1,	6,	144,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x2310cULL, ImplicitList2, OperandInfo136 },  // Inst #1946 = NG
  { 1945,	3,	1,	4,	176,	0,	1,	0, 0x23000ULL, ImplicitList2, OperandInfo143 },  // Inst #1945 = NCRK
  { 1944,	3,	1,	4,	176,	0,	1,	0, 0x23000ULL, ImplicitList2, OperandInfo105 },  // Inst #1944 = NCGRK
  { 1943,	5,	0,	6,	155,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo214 },  // Inst #1943 = NC
  { 1942,	5,	1,	4,	144,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x23088ULL, ImplicitList2, OperandInfo128 },  // Inst #1942 = N
  { 1941,	3,	1,	4,	451,	0,	0,	0, 0x0ULL, nullptr, OperandInfo346 },  // Inst #1941 = MYR
  { 1940,	3,	1,	4,	452,	0,	0,	0, 0x0ULL, nullptr, OperandInfo131 },  // Inst #1940 = MYLR
  { 1939,	5,	1,	6,	450,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x108ULL, nullptr, OperandInfo45 },  // Inst #1939 = MYL
  { 1938,	3,	1,	4,	452,	0,	0,	0, 0x0ULL, nullptr, OperandInfo131 },  // Inst #1938 = MYHR
  { 1937,	5,	1,	6,	450,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x108ULL, nullptr, OperandInfo45 },  // Inst #1937 = MYH
  { 1936,	5,	1,	6,	449,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x108ULL, nullptr, OperandInfo345 },  // Inst #1936 = MY
  { 1935,	4,	1,	4,	509,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo147 },  // Inst #1935 = MXTRA
  { 1934,	3,	1,	4,	509,	1,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo146 },  // Inst #1934 = MXTR
  { 1933,	3,	1,	2,	448,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo145 },  // Inst #1933 = MXR
  { 1932,	3,	1,	2,	447,	0,	0,	0, 0x0ULL, nullptr, OperandInfo344 },  // Inst #1932 = MXDR
  { 1931,	3,	1,	4,	390,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo344 },  // Inst #1931 = MXDBR
  { 1930,	5,	1,	6,	389,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x108ULL, ImplicitList6, OperandInfo343 },  // Inst #1930 = MXDB
  { 1929,	5,	1,	4,	446,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x108ULL, nullptr, OperandInfo343 },  // Inst #1929 = MXD
  { 1928,	3,	1,	4,	391,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo145 },  // Inst #1928 = MXBR
  { 1927,	5,	0,	6,	300,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo214 },  // Inst #1927 = MVZ
  { 1926,	4,	2,	4,	49,	1,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList13, OperandInfo224 },  // Inst #1926 = MVST
  { 1925,	2,	0,	4,	813,	1,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList13, OperandInfo149 },  // Inst #1925 = MVPG
  { 1924,	6,	0,	6,	300,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo144 },  // Inst #1924 = MVO
  { 1923,	5,	0,	6,	300,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo214 },  // Inst #1923 = MVN
  { 1922,	3,	0,	6,	25,	0,	0,	0|(1ULL<<MCID::MayStore), 0x4ULL, nullptr, OperandInfo121 },  // Inst #1922 = MVIY
  { 1921,	3,	0,	4,	25,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo121 },  // Inst #1921 = MVI
  { 1920,	3,	0,	6,	24,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo121 },  // Inst #1920 = MVHI
  { 1919,	3,	0,	6,	24,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo121 },  // Inst #1919 = MVHHI
  { 1918,	3,	0,	6,	24,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo121 },  // Inst #1918 = MVGHI
  { 1917,	4,	0,	6,	811,	2,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList20, OperandInfo293 },  // Inst #1917 = MVCSK
  { 1916,	6,	0,	6,	810,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo342 },  // Inst #1916 = MVCS
  { 1915,	4,	0,	6,	28,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList21, OperandInfo293 },  // Inst #1915 = MVCRL
  { 1914,	6,	0,	6,	810,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo342 },  // Inst #1914 = MVCP
  { 1913,	5,	0,	6,	812,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList21, OperandInfo235 },  // Inst #1913 = MVCOS
  { 1912,	6,	2,	6,	27,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo216 },  // Inst #1912 = MVCLU
  { 1911,	6,	2,	4,	27,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo216 },  // Inst #1911 = MVCLE
  { 1910,	4,	2,	2,	27,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo215 },  // Inst #1910 = MVCL
  { 1909,	6,	0,	6,	810,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo342 },  // Inst #1909 = MVCK
  { 1908,	5,	0,	6,	85,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo214 },  // Inst #1908 = MVCIN
  { 1907,	4,	0,	6,	811,	2,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList20, OperandInfo293 },  // Inst #1907 = MVCDK
  { 1906,	5,	0,	6,	26,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo214 },  // Inst #1906 = MVC
  { 1905,	5,	1,	6,	181,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x8cULL, nullptr, OperandInfo128 },  // Inst #1905 = MSY
  { 1904,	1,	0,	4,	824,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo341 },  // Inst #1904 = MSTA
  { 1903,	3,	1,	4,	198,	0,	1,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, OperandInfo143 },  // Inst #1903 = MSRKC
  { 1902,	3,	1,	4,	182,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo142 },  // Inst #1902 = MSR
  { 1901,	3,	1,	4,	199,	0,	1,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, OperandInfo105 },  // Inst #1901 = MSGRKC
  { 1900,	3,	1,	4,	184,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo138 },  // Inst #1900 = MSGR
  { 1899,	3,	1,	4,	185,	0,	0,	0, 0x0ULL, nullptr, OperandInfo137 },  // Inst #1899 = MSGFR
  { 1898,	3,	1,	6,	185,	0,	0,	0, 0x0ULL, nullptr, OperandInfo84 },  // Inst #1898 = MSGFI
  { 1897,	5,	1,	6,	181,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x8cULL, nullptr, OperandInfo136 },  // Inst #1897 = MSGF
  { 1896,	5,	1,	6,	197,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x10cULL, ImplicitList2, OperandInfo136 },  // Inst #1896 = MSGC
  { 1895,	5,	1,	6,	183,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x10cULL, nullptr, OperandInfo136 },  // Inst #1895 = MSG
  { 1894,	3,	1,	6,	182,	0,	0,	0, 0x0ULL, nullptr, OperandInfo135 },  // Inst #1894 = MSFI
  { 1893,	4,	1,	4,	454,	0,	0,	0, 0x0ULL, nullptr, OperandInfo337 },  // Inst #1893 = MSER
  { 1892,	4,	1,	4,	393,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo337 },  // Inst #1892 = MSEBR
  { 1891,	6,	1,	6,	392,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x88ULL, ImplicitList6, OperandInfo336 },  // Inst #1891 = MSEB
  { 1890,	6,	1,	6,	453,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x88ULL, nullptr, OperandInfo336 },  // Inst #1890 = MSE
  { 1889,	4,	1,	4,	454,	0,	0,	0, 0x0ULL, nullptr, OperandInfo335 },  // Inst #1889 = MSDR
  { 1888,	4,	1,	4,	395,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo335 },  // Inst #1888 = MSDBR
  { 1887,	6,	1,	6,	394,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x108ULL, ImplicitList6, OperandInfo334 },  // Inst #1887 = MSDB
  { 1886,	6,	1,	6,	453,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x108ULL, nullptr, OperandInfo334 },  // Inst #1886 = MSD
  { 1885,	2,	0,	4,	856,	1,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList15, OperandInfo180 },  // Inst #1885 = MSCH
  { 1884,	5,	1,	6,	196,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x8cULL, ImplicitList2, OperandInfo128 },  // Inst #1884 = MSC
  { 1883,	5,	1,	4,	181,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x88ULL, nullptr, OperandInfo128 },  // Inst #1883 = MS
  { 1882,	3,	1,	2,	191,	0,	0,	0, 0x0ULL, nullptr, OperandInfo249 },  // Inst #1882 = MR
  { 1881,	6,	0,	6,	305,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo144 },  // Inst #1881 = MP
  { 1880,	3,	1,	4,	191,	0,	0,	0, 0x0ULL, nullptr, OperandInfo249 },  // Inst #1880 = MLR
  { 1879,	3,	1,	4,	187,	0,	0,	0, 0x0ULL, nullptr, OperandInfo234 },  // Inst #1879 = MLGR
  { 1878,	5,	1,	6,	186,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x10cULL, nullptr, OperandInfo245 },  // Inst #1878 = MLG
  { 1877,	5,	1,	6,	192,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x8cULL, nullptr, OperandInfo245 },  // Inst #1877 = ML
  { 1876,	5,	1,	6,	190,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x4cULL, nullptr, OperandInfo128 },  // Inst #1876 = MHY
  { 1875,	3,	1,	4,	189,	0,	0,	0, 0x0ULL, nullptr, OperandInfo135 },  // Inst #1875 = MHI
  { 1874,	5,	1,	4,	190,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x48ULL, nullptr, OperandInfo128 },  // Inst #1874 = MH
  { 1873,	3,	1,	4,	195,	0,	0,	0, 0x0ULL, nullptr, OperandInfo104 },  // Inst #1873 = MGRK
  { 1872,	3,	1,	4,	188,	0,	0,	0, 0x0ULL, nullptr, OperandInfo84 },  // Inst #1872 = MGHI
  { 1871,	5,	1,	6,	193,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x4cULL, nullptr, OperandInfo136 },  // Inst #1871 = MGH
  { 1870,	5,	1,	6,	194,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x10cULL, nullptr, OperandInfo245 },  // Inst #1870 = MG
  { 1869,	5,	1,	6,	192,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x8cULL, nullptr, OperandInfo245 },  // Inst #1869 = MFY
  { 1868,	3,	1,	2,	445,	0,	0,	0, 0x0ULL, nullptr, OperandInfo340 },  // Inst #1868 = MER
  { 1867,	3,	1,	4,	890,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo134 },  // Inst #1867 = MEER
  { 1866,	3,	1,	4,	388,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo134 },  // Inst #1866 = MEEBR
  { 1865,	5,	1,	6,	387,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x88ULL, ImplicitList6, OperandInfo133 },  // Inst #1865 = MEEB
  { 1864,	5,	1,	6,	889,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x88ULL, nullptr, OperandInfo133 },  // Inst #1864 = MEE
  { 1863,	5,	1,	4,	444,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x88ULL, nullptr, OperandInfo129 },  // Inst #1863 = ME
  { 1862,	4,	1,	4,	508,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo132 },  // Inst #1862 = MDTRA
  { 1861,	3,	1,	4,	508,	1,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo131 },  // Inst #1861 = MDTR
  { 1860,	3,	1,	2,	890,	0,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo130 },  // Inst #1860 = MDR
  { 1859,	3,	1,	2,	445,	0,	0,	0, 0x0ULL, nullptr, OperandInfo340 },  // Inst #1859 = MDER
  { 1858,	3,	1,	4,	388,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo340 },  // Inst #1858 = MDEBR
  { 1857,	5,	1,	6,	387,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x88ULL, ImplicitList6, OperandInfo129 },  // Inst #1857 = MDEB
  { 1856,	5,	1,	4,	444,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x88ULL, nullptr, OperandInfo129 },  // Inst #1856 = MDE
  { 1855,	3,	1,	4,	388,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList6, OperandInfo130 },  // Inst #1855 = MDBR
  { 1854,	5,	1,	6,	387,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x108ULL, ImplicitList6, OperandInfo129 },  // Inst #1854 = MDB
  { 1853,	5,	1,	4,	889,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x108ULL, nullptr, OperandInfo129 },  // Inst #1853 = MD
  { 1852,	3,	0,	4,	842,	0,	0,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo121 },  // Inst #1852 = MC
  { 1851,	4,	1,	4,	457,	0,	0,	0, 0x0ULL, nullptr, OperandInfo339 },  // Inst #1851 = MAYR
  { 1850,	4,	1,	4,	458,	0,	0,	0, 0x0ULL, nullptr, OperandInfo335 },  // Inst #1850 = MAYLR
  { 1849,	6,	1,	6,	456,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x108ULL, nullptr, OperandInfo334 },  // Inst #1849 = MAYL
  { 1848,	4,	1,	4,	458,	0,	0,	0, 0x0ULL, nullptr, OperandInfo335 },  // Inst #1848 = MAYHR
  { 1847,	6,	1,	6,	456,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x108ULL, nullptr, OperandInfo334 },  // Inst #1847 = MAYH
  { 1846,	6,	1,	6,	455,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x108ULL, nullptr, OperandInfo338 },  // Inst #1846 = MAY
  { 1845,	4,	1,	4,	454,	0,	0,	0, 0x0ULL, nullptr, OperandInfo337 },  // Inst #1845 = MAER
  { 1844,	4,	1,	4,	393,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo337 },  // Inst #1844 = MAEBR
  { 1843,	6,	1,	6,	392,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x88ULL, ImplicitList6, OperandInfo336 },  // Inst #1843 = MAEB
  { 1842,	6,	1,	6,	453,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x88ULL, nullptr, OperandInfo336 },  // Inst #1842 = MAE
  { 1841,	4,	1,	4,	454,	0,	0,	0, 0x0ULL, nullptr, OperandInfo335 },  // Inst #1841 = MADR
  { 1840,	4,	1,	4,	395,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo335 },  // Inst #1840 = MADBR
  { 1839,	6,	1,	6,	394,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x108ULL, ImplicitList6, OperandInfo334 },  // Inst #1839 = MADB
  { 1838,	6,	1,	6,	453,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x108ULL, nullptr, OperandInfo334 },  // Inst #1838 = MAD
  { 1837,	5,	1,	4,	192,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x88ULL, nullptr, OperandInfo245 },  // Inst #1837 = M
  { 1836,	1,	1,	4,	342,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo333 },  // Inst #1836 = LZXR
  { 1835,	4,	1,	6,	42,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x10cULL, nullptr, OperandInfo46 },  // Inst #1835 = LZRG
  { 1834,	4,	1,	6,	42,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x8cULL, nullptr, OperandInfo167 },  // Inst #1834 = LZRF
  { 1833,	1,	1,	4,	341,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo332 },  // Inst #1833 = LZER
  { 1832,	1,	1,	4,	341,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo331 },  // Inst #1832 = LZDR
  { 1831,	4,	1,	6,	33,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad), 0x8dULL, nullptr, OperandInfo167 },  // Inst #1831 = LY
  { 1830,	2,	1,	4,	346,	0,	0,	0, 0x0ULL, nullptr, OperandInfo96 },  // Inst #1830 = LXR
  { 1829,	2,	1,	4,	422,	0,	0,	0, 0x0ULL, nullptr, OperandInfo330 },  // Inst #1829 = LXER
  { 1828,	2,	1,	4,	361,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo330 },  // Inst #1828 = LXEBR
  { 1827,	4,	1,	6,	360,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x88ULL, ImplicitList6, OperandInfo97 },  // Inst #1827 = LXEB
  { 1826,	4,	1,	6,	421,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x88ULL, nullptr, OperandInfo97 },  // Inst #1826 = LXE
  { 1825,	3,	1,	4,	472,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo329 },  // Inst #1825 = LXDTR
  { 1824,	2,	1,	4,	422,	0,	0,	0, 0x0ULL, nullptr, OperandInfo328 },  // Inst #1824 = LXDR
  { 1823,	2,	1,	4,	361,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo328 },  // Inst #1823 = LXDBR
  { 1822,	4,	1,	6,	360,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x108ULL, ImplicitList6, OperandInfo97 },  // Inst #1822 = LXDB
  { 1821,	4,	1,	6,	421,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x108ULL, nullptr, OperandInfo97 },  // Inst #1821 = LXD
  { 1820,	2,	1,	4,	807,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo149 },  // Inst #1820 = LURAG
  { 1819,	2,	1,	4,	807,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo252 },  // Inst #1819 = LURA
  { 1818,	2,	1,	4,	468,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo96 },  // Inst #1818 = LTXTR
  { 1817,	2,	1,	4,	415,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo96 },  // Inst #1817 = LTXR
  { 1816,	2,	0,	4,	349,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x3fc00ULL, ImplicitList1, OperandInfo96 },  // Inst #1816 = LTXBRCompare
  { 1815,	2,	1,	4,	349,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x3fc00ULL, ImplicitList1, OperandInfo96 },  // Inst #1815 = LTXBR
  { 1814,	2,	1,	2,	45,	0,	1,	0, 0x3b800ULL, ImplicitList2, OperandInfo219 },  // Inst #1814 = LTR
  { 1813,	2,	1,	4,	45,	0,	1,	0, 0x3b800ULL, ImplicitList2, OperandInfo149 },  // Inst #1813 = LTGR
  { 1812,	2,	1,	4,	60,	0,	1,	0, 0x3b800ULL, ImplicitList2, OperandInfo192 },  // Inst #1812 = LTGFR
  { 1811,	4,	1,	6,	59,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x3b88cULL, ImplicitList2, OperandInfo46 },  // Inst #1811 = LTGF
  { 1810,	4,	1,	6,	44,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x3b90cULL, ImplicitList2, OperandInfo46 },  // Inst #1810 = LTG
  { 1809,	2,	1,	2,	414,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo95 },  // Inst #1809 = LTER
  { 1808,	2,	0,	4,	348,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x3fc00ULL, ImplicitList1, OperandInfo95 },  // Inst #1808 = LTEBRCompare
  { 1807,	2,	1,	4,	347,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x3fc00ULL, ImplicitList1, OperandInfo95 },  // Inst #1807 = LTEBR
  { 1806,	2,	1,	4,	467,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo94 },  // Inst #1806 = LTDTR
  { 1805,	2,	1,	2,	414,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo94 },  // Inst #1805 = LTDR
  { 1804,	2,	0,	4,	348,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x3fc00ULL, ImplicitList1, OperandInfo94 },  // Inst #1804 = LTDBRCompare
  { 1803,	2,	1,	4,	347,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x3fc00ULL, ImplicitList1, OperandInfo94 },  // Inst #1803 = LTDBR
  { 1802,	4,	1,	6,	44,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x3b88cULL, ImplicitList2, OperandInfo167 },  // Inst #1802 = LT
  { 1801,	2,	0,	4,	852,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo180 },  // Inst #1801 = LSCTL
  { 1800,	2,	1,	4,	82,	0,	0,	0, 0x0ULL, nullptr, OperandInfo219 },  // Inst #1800 = LRVR
  { 1799,	4,	1,	6,	83,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x4cULL, nullptr, OperandInfo167 },  // Inst #1799 = LRVH
  { 1798,	2,	1,	4,	82,	0,	0,	0, 0x0ULL, nullptr, OperandInfo149 },  // Inst #1798 = LRVGR
  { 1797,	4,	1,	6,	83,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x10cULL, nullptr, OperandInfo46 },  // Inst #1797 = LRVG
  { 1796,	4,	1,	6,	83,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x8cULL, nullptr, OperandInfo167 },  // Inst #1796 = LRV
  { 1795,	2,	1,	6,	33,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo207 },  // Inst #1795 = LRL
  { 1794,	2,	1,	2,	416,	0,	0,	0, 0x0ULL, nullptr, OperandInfo299 },  // Inst #1794 = LRER
  { 1793,	2,	1,	2,	418,	0,	0,	0, 0x0ULL, nullptr, OperandInfo298 },  // Inst #1793 = LRDR
  { 1792,	4,	1,	6,	805,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0xcULL, ImplicitList2, OperandInfo46 },  // Inst #1792 = LRAY
  { 1791,	4,	1,	6,	805,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0xcULL, ImplicitList2, OperandInfo46 },  // Inst #1791 = LRAG
  { 1790,	4,	1,	4,	805,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x8ULL, ImplicitList2, OperandInfo46 },  // Inst #1790 = LRA
  { 1789,	2,	1,	2,	41,	0,	0,	0, 0x0ULL, nullptr, OperandInfo219 },  // Inst #1789 = LR
  { 1788,	2,	1,	4,	430,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo96 },  // Inst #1788 = LPXR
  { 1787,	2,	1,	4,	374,	0,	1,	0, 0x3fc00ULL, ImplicitList2, OperandInfo96 },  // Inst #1787 = LPXBR
  { 1786,	5,	2,	4,	804,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo327 },  // Inst #1786 = LPTEA
  { 1785,	2,	0,	6,	774,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x204ULL, ImplicitList2, OperandInfo180 },  // Inst #1785 = LPSWEY
  { 1784,	2,	0,	4,	862,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x200ULL, ImplicitList2, OperandInfo180 },  // Inst #1784 = LPSWE
  { 1783,	2,	0,	4,	862,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x100ULL, ImplicitList2, OperandInfo180 },  // Inst #1783 = LPSW
  { 1782,	2,	1,	2,	88,	0,	1,	0, 0x23c00ULL, ImplicitList2, OperandInfo219 },  // Inst #1782 = LPR
  { 1781,	4,	1,	6,	279,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x20cULL, nullptr, OperandInfo85 },  // Inst #1781 = LPQ
  { 1780,	2,	0,	4,	848,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x100ULL, nullptr, OperandInfo180 },  // Inst #1780 = LPP
  { 1779,	2,	1,	4,	88,	0,	1,	0, 0x23c00ULL, ImplicitList2, OperandInfo149 },  // Inst #1779 = LPGR
  { 1778,	2,	1,	4,	89,	0,	1,	0, 0x3b800ULL, ImplicitList2, OperandInfo192 },  // Inst #1778 = LPGFR
  { 1777,	2,	1,	2,	429,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo95 },  // Inst #1777 = LPER
  { 1776,	2,	1,	4,	372,	0,	1,	0, 0x3fc00ULL, ImplicitList2, OperandInfo95 },  // Inst #1776 = LPEBR
  { 1775,	2,	1,	2,	429,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo94 },  // Inst #1775 = LPDR
  { 1774,	5,	1,	6,	281,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, OperandInfo326 },  // Inst #1774 = LPDG
  { 1773,	2,	1,	4,	373,	0,	0,	0, 0x0ULL, nullptr, OperandInfo95 },  // Inst #1773 = LPDFR_32
  { 1772,	2,	1,	4,	373,	0,	0,	0, 0x0ULL, nullptr, OperandInfo94 },  // Inst #1772 = LPDFR
  { 1771,	2,	1,	4,	372,	0,	1,	0, 0x3fc00ULL, ImplicitList2, OperandInfo94 },  // Inst #1771 = LPDBR
  { 1770,	5,	1,	6,	281,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, OperandInfo326 },  // Inst #1770 = LPD
  { 1769,	2,	0,	4,	852,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x100ULL, ImplicitList2, OperandInfo180 },  // Inst #1769 = LPCTL
  { 1768,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1768 = LOCRAsmZ
  { 1767,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1767 = LOCRAsmP
  { 1766,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1766 = LOCRAsmO
  { 1765,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1765 = LOCRAsmNZ
  { 1764,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1764 = LOCRAsmNP
  { 1763,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1763 = LOCRAsmNO
  { 1762,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1762 = LOCRAsmNM
  { 1761,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1761 = LOCRAsmNLH
  { 1760,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1760 = LOCRAsmNLE
  { 1759,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1759 = LOCRAsmNL
  { 1758,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1758 = LOCRAsmNHE
  { 1757,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1757 = LOCRAsmNH
  { 1756,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1756 = LOCRAsmNE
  { 1755,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1755 = LOCRAsmM
  { 1754,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1754 = LOCRAsmLH
  { 1753,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1753 = LOCRAsmLE
  { 1752,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1752 = LOCRAsmL
  { 1751,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1751 = LOCRAsmHE
  { 1750,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1750 = LOCRAsmH
  { 1749,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo142 },  // Inst #1749 = LOCRAsmE
  { 1748,	4,	1,	4,	882,	1,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, OperandInfo325 },  // Inst #1748 = LOCRAsm
  { 1747,	5,	1,	4,	882,	1,	0,	0|(1ULL<<MCID::Commutable), 0x80000ULL, ImplicitList2, OperandInfo324 },  // Inst #1747 = LOCR
  { 1746,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1746 = LOCHIAsmZ
  { 1745,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1745 = LOCHIAsmP
  { 1744,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1744 = LOCHIAsmO
  { 1743,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1743 = LOCHIAsmNZ
  { 1742,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1742 = LOCHIAsmNP
  { 1741,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1741 = LOCHIAsmNO
  { 1740,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1740 = LOCHIAsmNM
  { 1739,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1739 = LOCHIAsmNLH
  { 1738,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1738 = LOCHIAsmNLE
  { 1737,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1737 = LOCHIAsmNL
  { 1736,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1736 = LOCHIAsmNHE
  { 1735,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1735 = LOCHIAsmNH
  { 1734,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1734 = LOCHIAsmNE
  { 1733,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1733 = LOCHIAsmM
  { 1732,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1732 = LOCHIAsmLH
  { 1731,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1731 = LOCHIAsmLE
  { 1730,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1730 = LOCHIAsmL
  { 1729,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1729 = LOCHIAsmHE
  { 1728,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1728 = LOCHIAsmH
  { 1727,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo135 },  // Inst #1727 = LOCHIAsmE
  { 1726,	4,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo323 },  // Inst #1726 = LOCHIAsm
  { 1725,	5,	1,	6,	52,	1,	0,	0, 0x80000ULL, ImplicitList2, OperandInfo322 },  // Inst #1725 = LOCHI
  { 1724,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1724 = LOCHHIAsmZ
  { 1723,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1723 = LOCHHIAsmP
  { 1722,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1722 = LOCHHIAsmO
  { 1721,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1721 = LOCHHIAsmNZ
  { 1720,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1720 = LOCHHIAsmNP
  { 1719,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1719 = LOCHHIAsmNO
  { 1718,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1718 = LOCHHIAsmNM
  { 1717,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1717 = LOCHHIAsmNLH
  { 1716,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1716 = LOCHHIAsmNLE
  { 1715,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1715 = LOCHHIAsmNL
  { 1714,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1714 = LOCHHIAsmNHE
  { 1713,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1713 = LOCHHIAsmNH
  { 1712,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1712 = LOCHHIAsmNE
  { 1711,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1711 = LOCHHIAsmM
  { 1710,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1710 = LOCHHIAsmLH
  { 1709,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1709 = LOCHHIAsmLE
  { 1708,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1708 = LOCHHIAsmL
  { 1707,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1707 = LOCHHIAsmHE
  { 1706,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1706 = LOCHHIAsmH
  { 1705,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo141 },  // Inst #1705 = LOCHHIAsmE
  { 1704,	4,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo321 },  // Inst #1704 = LOCHHIAsm
  { 1703,	5,	1,	6,	52,	1,	0,	0, 0x80000ULL, ImplicitList2, OperandInfo320 },  // Inst #1703 = LOCHHI
  { 1702,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1702 = LOCGRAsmZ
  { 1701,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1701 = LOCGRAsmP
  { 1700,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1700 = LOCGRAsmO
  { 1699,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1699 = LOCGRAsmNZ
  { 1698,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1698 = LOCGRAsmNP
  { 1697,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1697 = LOCGRAsmNO
  { 1696,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1696 = LOCGRAsmNM
  { 1695,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1695 = LOCGRAsmNLH
  { 1694,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1694 = LOCGRAsmNLE
  { 1693,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1693 = LOCGRAsmNL
  { 1692,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1692 = LOCGRAsmNHE
  { 1691,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1691 = LOCGRAsmNH
  { 1690,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1690 = LOCGRAsmNE
  { 1689,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1689 = LOCGRAsmM
  { 1688,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1688 = LOCGRAsmLH
  { 1687,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1687 = LOCGRAsmLE
  { 1686,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1686 = LOCGRAsmL
  { 1685,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1685 = LOCGRAsmHE
  { 1684,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1684 = LOCGRAsmH
  { 1683,	3,	1,	4,	882,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo138 },  // Inst #1683 = LOCGRAsmE
  { 1682,	4,	1,	4,	882,	1,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, OperandInfo319 },  // Inst #1682 = LOCGRAsm
  { 1681,	5,	1,	4,	882,	1,	0,	0|(1ULL<<MCID::Commutable), 0x80000ULL, ImplicitList2, OperandInfo318 },  // Inst #1681 = LOCGR
  { 1680,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1680 = LOCGHIAsmZ
  { 1679,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1679 = LOCGHIAsmP
  { 1678,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1678 = LOCGHIAsmO
  { 1677,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1677 = LOCGHIAsmNZ
  { 1676,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1676 = LOCGHIAsmNP
  { 1675,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1675 = LOCGHIAsmNO
  { 1674,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1674 = LOCGHIAsmNM
  { 1673,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1673 = LOCGHIAsmNLH
  { 1672,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1672 = LOCGHIAsmNLE
  { 1671,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1671 = LOCGHIAsmNL
  { 1670,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1670 = LOCGHIAsmNHE
  { 1669,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1669 = LOCGHIAsmNH
  { 1668,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1668 = LOCGHIAsmNE
  { 1667,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1667 = LOCGHIAsmM
  { 1666,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1666 = LOCGHIAsmLH
  { 1665,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1665 = LOCGHIAsmLE
  { 1664,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1664 = LOCGHIAsmL
  { 1663,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1663 = LOCGHIAsmHE
  { 1662,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1662 = LOCGHIAsmH
  { 1661,	3,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #1661 = LOCGHIAsmE
  { 1660,	4,	1,	6,	52,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo317 },  // Inst #1660 = LOCGHIAsm
  { 1659,	5,	1,	6,	52,	1,	0,	0, 0x80000ULL, ImplicitList2, OperandInfo316 },  // Inst #1659 = LOCGHI
  { 1658,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1658 = LOCGAsmZ
  { 1657,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1657 = LOCGAsmP
  { 1656,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1656 = LOCGAsmO
  { 1655,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1655 = LOCGAsmNZ
  { 1654,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1654 = LOCGAsmNP
  { 1653,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1653 = LOCGAsmNO
  { 1652,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1652 = LOCGAsmNM
  { 1651,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1651 = LOCGAsmNLH
  { 1650,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1650 = LOCGAsmNLE
  { 1649,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1649 = LOCGAsmNL
  { 1648,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1648 = LOCGAsmNHE
  { 1647,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1647 = LOCGAsmNH
  { 1646,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1646 = LOCGAsmNE
  { 1645,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1645 = LOCGAsmM
  { 1644,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1644 = LOCGAsmLH
  { 1643,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1643 = LOCGAsmLE
  { 1642,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1642 = LOCGAsmL
  { 1641,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1641 = LOCGAsmHE
  { 1640,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1640 = LOCGAsmH
  { 1639,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo315 },  // Inst #1639 = LOCGAsmE
  { 1638,	5,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x104ULL, ImplicitList2, OperandInfo314 },  // Inst #1638 = LOCGAsm
  { 1637,	6,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x80104ULL, ImplicitList2, OperandInfo313 },  // Inst #1637 = LOCG
  { 1636,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1636 = LOCFHRAsmZ
  { 1635,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1635 = LOCFHRAsmP
  { 1634,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1634 = LOCFHRAsmO
  { 1633,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1633 = LOCFHRAsmNZ
  { 1632,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1632 = LOCFHRAsmNP
  { 1631,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1631 = LOCFHRAsmNO
  { 1630,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1630 = LOCFHRAsmNM
  { 1629,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1629 = LOCFHRAsmNLH
  { 1628,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1628 = LOCFHRAsmNLE
  { 1627,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1627 = LOCFHRAsmNL
  { 1626,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1626 = LOCFHRAsmNHE
  { 1625,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1625 = LOCFHRAsmNH
  { 1624,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1624 = LOCFHRAsmNE
  { 1623,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1623 = LOCFHRAsmM
  { 1622,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1622 = LOCFHRAsmLH
  { 1621,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1621 = LOCFHRAsmLE
  { 1620,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1620 = LOCFHRAsmL
  { 1619,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1619 = LOCFHRAsmHE
  { 1618,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1618 = LOCFHRAsmH
  { 1617,	3,	1,	4,	51,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo312 },  // Inst #1617 = LOCFHRAsmE
  { 1616,	4,	1,	4,	51,	1,	0,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, OperandInfo311 },  // Inst #1616 = LOCFHRAsm
  { 1615,	5,	1,	4,	51,	1,	0,	0|(1ULL<<MCID::Commutable), 0x80000ULL, ImplicitList2, OperandInfo310 },  // Inst #1615 = LOCFHR
  { 1614,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1614 = LOCFHAsmZ
  { 1613,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1613 = LOCFHAsmP
  { 1612,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1612 = LOCFHAsmO
  { 1611,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1611 = LOCFHAsmNZ
  { 1610,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1610 = LOCFHAsmNP
  { 1609,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1609 = LOCFHAsmNO
  { 1608,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1608 = LOCFHAsmNM
  { 1607,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1607 = LOCFHAsmNLH
  { 1606,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1606 = LOCFHAsmNLE
  { 1605,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1605 = LOCFHAsmNL
  { 1604,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1604 = LOCFHAsmNHE
  { 1603,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1603 = LOCFHAsmNH
  { 1602,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1602 = LOCFHAsmNE
  { 1601,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1601 = LOCFHAsmM
  { 1600,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1600 = LOCFHAsmLH
  { 1599,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1599 = LOCFHAsmLE
  { 1598,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1598 = LOCFHAsmL
  { 1597,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1597 = LOCFHAsmHE
  { 1596,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1596 = LOCFHAsmH
  { 1595,	4,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo309 },  // Inst #1595 = LOCFHAsmE
  { 1594,	5,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo308 },  // Inst #1594 = LOCFHAsm
  { 1593,	6,	1,	6,	53,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x80084ULL, ImplicitList2, OperandInfo307 },  // Inst #1593 = LOCFH
  { 1592,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1592 = LOCAsmZ
  { 1591,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1591 = LOCAsmP
  { 1590,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1590 = LOCAsmO
  { 1589,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1589 = LOCAsmNZ
  { 1588,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1588 = LOCAsmNP
  { 1587,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1587 = LOCAsmNO
  { 1586,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1586 = LOCAsmNM
  { 1585,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1585 = LOCAsmNLH
  { 1584,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1584 = LOCAsmNLE
  { 1583,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1583 = LOCAsmNL
  { 1582,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1582 = LOCAsmNHE
  { 1581,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1581 = LOCAsmNH
  { 1580,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1580 = LOCAsmNE
  { 1579,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1579 = LOCAsmM
  { 1578,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1578 = LOCAsmLH
  { 1577,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1577 = LOCAsmLE
  { 1576,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1576 = LOCAsmL
  { 1575,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1575 = LOCAsmHE
  { 1574,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1574 = LOCAsmH
  { 1573,	4,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo306 },  // Inst #1573 = LOCAsmE
  { 1572,	5,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x84ULL, ImplicitList2, OperandInfo305 },  // Inst #1572 = LOCAsm
  { 1571,	6,	1,	6,	883,	1,	0,	0|(1ULL<<MCID::MayLoad), 0x80084ULL, ImplicitList2, OperandInfo304 },  // Inst #1571 = LOC
  { 1570,	2,	1,	4,	430,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo96 },  // Inst #1570 = LNXR
  { 1569,	2,	1,	4,	374,	0,	1,	0, 0x3fc00ULL, ImplicitList2, OperandInfo96 },  // Inst #1569 = LNXBR
  { 1568,	2,	1,	2,	90,	0,	1,	0, 0x23c00ULL, ImplicitList2, OperandInfo219 },  // Inst #1568 = LNR
  { 1567,	2,	1,	4,	90,	0,	1,	0, 0x23c00ULL, ImplicitList2, OperandInfo149 },  // Inst #1567 = LNGR
  { 1566,	2,	1,	4,	89,	0,	1,	0, 0x3b800ULL, ImplicitList2, OperandInfo192 },  // Inst #1566 = LNGFR
  { 1565,	2,	1,	2,	429,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo95 },  // Inst #1565 = LNER
  { 1564,	2,	1,	4,	372,	0,	1,	0, 0x3fc00ULL, ImplicitList2, OperandInfo95 },  // Inst #1564 = LNEBR
  { 1563,	2,	1,	2,	429,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo94 },  // Inst #1563 = LNDR
  { 1562,	2,	1,	4,	373,	0,	0,	0, 0x0ULL, nullptr, OperandInfo95 },  // Inst #1562 = LNDFR_32
  { 1561,	2,	1,	4,	373,	0,	0,	0, 0x0ULL, nullptr, OperandInfo94 },  // Inst #1561 = LNDFR
  { 1560,	2,	1,	4,	372,	0,	1,	0, 0x3fc00ULL, ImplicitList2, OperandInfo94 },  // Inst #1560 = LNDBR
  { 1559,	4,	2,	6,	79,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x4ULL, nullptr, OperandInfo221 },  // Inst #1559 = LMY
  { 1558,	4,	2,	6,	79,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x4ULL, nullptr, OperandInfo303 },  // Inst #1558 = LMH
  { 1557,	4,	2,	6,	79,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x4ULL, nullptr, OperandInfo199 },  // Inst #1557 = LMG
  { 1556,	6,	2,	6,	80,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo302 },  // Inst #1556 = LMD
  { 1555,	4,	2,	4,	79,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1555 = LM
  { 1554,	4,	1,	6,	74,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x8cULL, nullptr, OperandInfo46 },  // Inst #1554 = LLZRGF
  { 1553,	2,	1,	4,	38,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo122 },  // Inst #1553 = LLILL
  { 1552,	2,	1,	4,	38,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo122 },  // Inst #1552 = LLILH
  { 1551,	2,	1,	6,	38,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo122 },  // Inst #1551 = LLILF
  { 1550,	2,	1,	4,	37,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo122 },  // Inst #1550 = LLIHL
  { 1549,	2,	1,	4,	37,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo122 },  // Inst #1549 = LLIHH
  { 1548,	2,	1,	6,	37,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo122 },  // Inst #1548 = LLIHF
  { 1547,	2,	1,	6,	72,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo207 },  // Inst #1547 = LLHRL
  { 1546,	2,	1,	4,	67,	0,	0,	0, 0x0ULL, nullptr, OperandInfo219 },  // Inst #1546 = LLHR
  { 1545,	4,	1,	6,	71,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x4cULL, nullptr, OperandInfo204 },  // Inst #1545 = LLHH
  { 1544,	4,	1,	6,	70,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x4cULL, nullptr, OperandInfo167 },  // Inst #1544 = LLH
  { 1543,	2,	1,	4,	68,	0,	0,	0, 0x0ULL, nullptr, OperandInfo149 },  // Inst #1543 = LLGTR
  { 1542,	4,	1,	6,	75,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x8cULL, nullptr, OperandInfo46 },  // Inst #1542 = LLGTAT
  { 1541,	4,	1,	6,	73,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x8cULL, nullptr, OperandInfo46 },  // Inst #1541 = LLGT
  { 1540,	2,	1,	6,	73,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo193 },  // Inst #1540 = LLGHRL
  { 1539,	2,	1,	4,	68,	0,	0,	0, 0x0ULL, nullptr, OperandInfo149 },  // Inst #1539 = LLGHR
  { 1538,	4,	1,	6,	73,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x4cULL, nullptr, OperandInfo46 },  // Inst #1538 = LLGH
  { 1537,	4,	1,	6,	294,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x8cULL, nullptr, OperandInfo46 },  // Inst #1537 = LLGFSG
  { 1536,	2,	1,	6,	73,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo193 },  // Inst #1536 = LLGFRL
  { 1535,	2,	1,	4,	68,	0,	0,	0, 0x0ULL, nullptr, OperandInfo192 },  // Inst #1535 = LLGFR
  { 1534,	4,	1,	6,	75,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x8cULL, nullptr, OperandInfo46 },  // Inst #1534 = LLGFAT
  { 1533,	4,	1,	6,	73,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x8cULL, nullptr, OperandInfo46 },  // Inst #1533 = LLGF
  { 1532,	2,	1,	4,	68,	0,	0,	0, 0x0ULL, nullptr, OperandInfo149 },  // Inst #1532 = LLGCR
  { 1531,	4,	1,	6,	73,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x2cULL, nullptr, OperandInfo46 },  // Inst #1531 = LLGC
  { 1530,	2,	1,	4,	66,	0,	0,	0, 0x0ULL, nullptr, OperandInfo219 },  // Inst #1530 = LLCR
  { 1529,	4,	1,	6,	71,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x2cULL, nullptr, OperandInfo204 },  // Inst #1529 = LLCH
  { 1528,	4,	1,	6,	69,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x2cULL, nullptr, OperandInfo167 },  // Inst #1528 = LLC
  { 1527,	4,	1,	6,	62,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x4cULL, nullptr, OperandInfo167 },  // Inst #1527 = LHY
  { 1526,	2,	1,	6,	63,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo207 },  // Inst #1526 = LHRL
  { 1525,	2,	1,	4,	57,	0,	0,	0, 0x0ULL, nullptr, OperandInfo219 },  // Inst #1525 = LHR
  { 1524,	2,	1,	4,	40,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo185 },  // Inst #1524 = LHI
  { 1523,	4,	1,	6,	63,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x4cULL, nullptr, OperandInfo204 },  // Inst #1523 = LHH
  { 1522,	4,	1,	4,	62,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x48ULL, nullptr, OperandInfo167 },  // Inst #1522 = LH
  { 1521,	4,	0,	6,	295,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0xcULL, nullptr, OperandInfo46 },  // Inst #1521 = LGSC
  { 1520,	2,	1,	6,	35,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo193 },  // Inst #1520 = LGRL
  { 1519,	2,	1,	4,	57,	0,	0,	0, 0x0ULL, nullptr, OperandInfo149 },  // Inst #1519 = LGR
  { 1518,	2,	1,	6,	65,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo193 },  // Inst #1518 = LGHRL
  { 1517,	2,	1,	4,	58,	0,	0,	0, 0x0ULL, nullptr, OperandInfo149 },  // Inst #1517 = LGHR
  { 1516,	2,	1,	4,	39,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo122 },  // Inst #1516 = LGHI
  { 1515,	4,	1,	6,	64,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x4cULL, nullptr, OperandInfo46 },  // Inst #1515 = LGH
  { 1514,	4,	1,	6,	293,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x10cULL, nullptr, OperandInfo46 },  // Inst #1514 = LGG
  { 1513,	2,	1,	6,	65,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo193 },  // Inst #1513 = LGFRL
  { 1512,	2,	1,	4,	58,	0,	0,	0, 0x0ULL, nullptr, OperandInfo192 },  // Inst #1512 = LGFR
  { 1511,	2,	1,	6,	39,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo122 },  // Inst #1511 = LGFI
  { 1510,	4,	1,	6,	64,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x8cULL, nullptr, OperandInfo46 },  // Inst #1510 = LGF
  { 1509,	2,	1,	4,	345,	0,	0,	0|(1ULL<<MCID::Bitcast), 0x0ULL, nullptr, OperandInfo238 },  // Inst #1509 = LGDR
  { 1508,	2,	1,	4,	58,	0,	0,	0, 0x0ULL, nullptr, OperandInfo149 },  // Inst #1508 = LGBR
  { 1507,	4,	1,	6,	64,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x2cULL, nullptr, OperandInfo46 },  // Inst #1507 = LGB
  { 1506,	4,	1,	6,	43,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x10cULL, nullptr, OperandInfo46 },  // Inst #1506 = LGAT
  { 1505,	4,	1,	6,	35,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad), 0x10dULL, nullptr, OperandInfo46 },  // Inst #1505 = LG
  { 1504,	2,	0,	4,	410,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, ImplicitList6, OperandInfo180 },  // Inst #1504 = LFPC
  { 1503,	4,	1,	6,	43,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x8cULL, nullptr, OperandInfo204 },  // Inst #1503 = LFHAT
  { 1502,	4,	1,	6,	33,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad), 0x8dULL, nullptr, OperandInfo204 },  // Inst #1502 = LFH
  { 1501,	2,	0,	4,	412,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, ImplicitList6, OperandInfo180 },  // Inst #1501 = LFAS
  { 1500,	4,	1,	6,	351,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad), 0x8dULL, nullptr, OperandInfo175 },  // Inst #1500 = LEY
  { 1499,	2,	1,	4,	417,	0,	0,	0, 0x0ULL, nullptr, OperandInfo301 },  // Inst #1499 = LEXR
  { 1498,	4,	1,	4,	357,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo263 },  // Inst #1498 = LEXBRA
  { 1497,	2,	1,	4,	357,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo96 },  // Inst #1497 = LEXBR
  { 1496,	2,	1,	2,	343,	0,	0,	0, 0x0ULL, nullptr, OperandInfo95 },  // Inst #1496 = LER
  { 1495,	4,	1,	4,	469,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo300 },  // Inst #1495 = LEDTR
  { 1494,	2,	1,	2,	416,	0,	0,	0, 0x0ULL, nullptr, OperandInfo299 },  // Inst #1494 = LEDR
  { 1493,	4,	1,	4,	356,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo300 },  // Inst #1493 = LEDBRA
  { 1492,	2,	1,	4,	356,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo299 },  // Inst #1492 = LEDBR
  { 1491,	4,	1,	4,	351,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad), 0x89ULL, nullptr, OperandInfo175 },  // Inst #1491 = LE
  { 1490,	4,	1,	6,	352,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad), 0x10dULL, nullptr, OperandInfo168 },  // Inst #1490 = LDY
  { 1489,	4,	1,	4,	470,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo263 },  // Inst #1489 = LDXTR
  { 1488,	2,	1,	2,	418,	0,	0,	0, 0x0ULL, nullptr, OperandInfo298 },  // Inst #1488 = LDXR
  { 1487,	4,	1,	4,	357,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo263 },  // Inst #1487 = LDXBRA
  { 1486,	2,	1,	4,	357,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo96 },  // Inst #1486 = LDXBR
  { 1485,	2,	1,	2,	344,	0,	0,	0, 0x0ULL, nullptr, OperandInfo95 },  // Inst #1485 = LDR32
  { 1484,	2,	1,	2,	344,	0,	0,	0, 0x0ULL, nullptr, OperandInfo94 },  // Inst #1484 = LDR
  { 1483,	2,	1,	4,	344,	0,	0,	0|(1ULL<<MCID::Bitcast), 0x0ULL, nullptr, OperandInfo171 },  // Inst #1483 = LDGR
  { 1482,	3,	1,	4,	471,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo297 },  // Inst #1482 = LDETR
  { 1481,	2,	1,	4,	420,	0,	0,	0, 0x0ULL, nullptr, OperandInfo296 },  // Inst #1481 = LDER
  { 1480,	2,	1,	4,	359,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo296 },  // Inst #1480 = LDEBR
  { 1479,	4,	1,	6,	358,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x88ULL, ImplicitList6, OperandInfo168 },  // Inst #1479 = LDEB
  { 1478,	4,	1,	6,	352,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad), 0x89ULL, nullptr, OperandInfo175 },  // Inst #1478 = LDE32
  { 1477,	4,	1,	6,	419,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x88ULL, nullptr, OperandInfo168 },  // Inst #1477 = LDE
  { 1476,	4,	1,	4,	352,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad), 0x109ULL, nullptr, OperandInfo168 },  // Inst #1476 = LD
  { 1475,	2,	1,	4,	430,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo96 },  // Inst #1475 = LCXR
  { 1474,	2,	1,	4,	374,	0,	1,	0, 0x3fc00ULL, ImplicitList2, OperandInfo96 },  // Inst #1474 = LCXBR
  { 1473,	4,	2,	6,	781,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo295 },  // Inst #1473 = LCTLG
  { 1472,	4,	2,	4,	781,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo295 },  // Inst #1472 = LCTL
  { 1471,	2,	1,	2,	91,	0,	1,	0, 0x23c00ULL, ImplicitList2, OperandInfo219 },  // Inst #1471 = LCR
  { 1470,	2,	1,	4,	91,	0,	1,	0, 0x23c00ULL, ImplicitList2, OperandInfo149 },  // Inst #1470 = LCGR
  { 1469,	2,	1,	4,	92,	0,	1,	0, 0x3b800ULL, ImplicitList2, OperandInfo192 },  // Inst #1469 = LCGFR
  { 1468,	2,	1,	2,	429,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo95 },  // Inst #1468 = LCER
  { 1467,	2,	1,	4,	372,	0,	1,	0, 0x3fc00ULL, ImplicitList2, OperandInfo95 },  // Inst #1467 = LCEBR
  { 1466,	2,	1,	2,	429,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo94 },  // Inst #1466 = LCDR
  { 1465,	2,	1,	4,	373,	0,	0,	0, 0x0ULL, nullptr, OperandInfo95 },  // Inst #1465 = LCDFR_32
  { 1464,	2,	1,	4,	373,	0,	0,	0, 0x0ULL, nullptr, OperandInfo94 },  // Inst #1464 = LCDFR
  { 1463,	2,	1,	4,	372,	0,	1,	0, 0x3fc00ULL, ImplicitList2, OperandInfo94 },  // Inst #1463 = LCDBR
  { 1462,	2,	0,	4,	851,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x100ULL, ImplicitList2, OperandInfo180 },  // Inst #1462 = LCCTL
  { 1461,	5,	1,	6,	34,	0,	1,	0, 0x8ULL, ImplicitList2, OperandInfo294 },  // Inst #1461 = LCBB
  { 1460,	2,	1,	4,	57,	0,	0,	0, 0x0ULL, nullptr, OperandInfo219 },  // Inst #1460 = LBR
  { 1459,	4,	1,	6,	61,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x2cULL, nullptr, OperandInfo204 },  // Inst #1459 = LBH
  { 1458,	2,	0,	4,	787,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x100ULL, nullptr, OperandInfo180 },  // Inst #1458 = LBEAR
  { 1457,	4,	1,	6,	61,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x2cULL, nullptr, OperandInfo167 },  // Inst #1457 = LB
  { 1456,	4,	1,	6,	86,	0,	0,	0|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0xcULL, nullptr, OperandInfo46 },  // Inst #1456 = LAY
  { 1455,	4,	1,	6,	272,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo199 },  // Inst #1455 = LAXG
  { 1454,	4,	1,	6,	272,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo221 },  // Inst #1454 = LAX
  { 1453,	4,	1,	6,	43,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x8cULL, nullptr, OperandInfo167 },  // Inst #1453 = LAT
  { 1452,	4,	0,	6,	814,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo293 },  // Inst #1452 = LASP
  { 1451,	2,	1,	6,	86,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo193 },  // Inst #1451 = LARL
  { 1450,	4,	1,	6,	271,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo199 },  // Inst #1450 = LAOG
  { 1449,	4,	1,	6,	271,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo221 },  // Inst #1449 = LAO
  { 1448,	4,	1,	6,	270,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo199 },  // Inst #1448 = LANG
  { 1447,	4,	1,	6,	270,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo221 },  // Inst #1447 = LAN
  { 1446,	4,	2,	6,	313,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x4ULL, nullptr, OperandInfo292 },  // Inst #1446 = LAMY
  { 1445,	4,	2,	4,	313,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo292 },  // Inst #1445 = LAM
  { 1444,	4,	1,	6,	312,	0,	0,	0, 0xcULL, nullptr, OperandInfo46 },  // Inst #1444 = LAEY
  { 1443,	4,	1,	4,	312,	0,	0,	0, 0x8ULL, nullptr, OperandInfo46 },  // Inst #1443 = LAE
  { 1442,	4,	1,	6,	269,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo199 },  // Inst #1442 = LAALG
  { 1441,	4,	1,	6,	269,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo221 },  // Inst #1441 = LAAL
  { 1440,	4,	1,	6,	268,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo199 },  // Inst #1440 = LAAG
  { 1439,	4,	1,	6,	268,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo221 },  // Inst #1439 = LAA
  { 1438,	4,	1,	4,	86,	0,	0,	0|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x8ULL, nullptr, OperandInfo46 },  // Inst #1438 = LA
  { 1437,	4,	1,	4,	33,	0,	0,	0|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad), 0x89ULL, nullptr, OperandInfo167 },  // Inst #1437 = L
  { 1436,	2,	0,	4,	521,	1,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList1, OperandInfo96 },  // Inst #1436 = KXTR
  { 1435,	2,	0,	4,	404,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x3c00ULL, ImplicitList1, OperandInfo96 },  // Inst #1435 = KXBR
  { 1434,	4,	2,	4,	870,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo215 },  // Inst #1434 = KMO
  { 1433,	4,	2,	4,	870,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo215 },  // Inst #1433 = KMF
  { 1432,	6,	3,	4,	870,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo291 },  // Inst #1432 = KMCTR
  { 1431,	4,	2,	4,	870,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo215 },  // Inst #1431 = KMC
  { 1430,	3,	1,	4,	863,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo290 },  // Inst #1430 = KMAC
  { 1429,	6,	3,	4,	290,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo291 },  // Inst #1429 = KMA
  { 1428,	4,	2,	4,	870,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo215 },  // Inst #1428 = KM
  { 1427,	3,	1,	4,	863,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo290 },  // Inst #1427 = KLMD
  { 1426,	3,	1,	4,	863,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo290 },  // Inst #1426 = KIMD
  { 1425,	2,	0,	4,	403,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x3c00ULL, ImplicitList1, OperandInfo95 },  // Inst #1425 = KEBR
  { 1424,	4,	0,	6,	402,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x3c88ULL, ImplicitList1, OperandInfo175 },  // Inst #1424 = KEB
  { 1423,	2,	0,	4,	520,	1,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList1, OperandInfo94 },  // Inst #1423 = KDTR
  { 1422,	3,	1,	4,	291,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo290 },  // Inst #1422 = KDSA
  { 1421,	2,	0,	4,	403,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x3c00ULL, ImplicitList1, OperandInfo94 },  // Inst #1421 = KDBR
  { 1420,	4,	0,	6,	402,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x3d08ULL, ImplicitList1, OperandInfo168 },  // Inst #1420 = KDB
  { 1419,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1419 = JGAsmZ
  { 1418,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1418 = JGAsmP
  { 1417,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1417 = JGAsmO
  { 1416,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1416 = JGAsmNZ
  { 1415,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1415 = JGAsmNP
  { 1414,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1414 = JGAsmNO
  { 1413,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1413 = JGAsmNM
  { 1412,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1412 = JGAsmNLH
  { 1411,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1411 = JGAsmNLE
  { 1410,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1410 = JGAsmNL
  { 1409,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1409 = JGAsmNHE
  { 1408,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1408 = JGAsmNH
  { 1407,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1407 = JGAsmNE
  { 1406,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1406 = JGAsmM
  { 1405,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1405 = JGAsmLH
  { 1404,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1404 = JGAsmLE
  { 1403,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1403 = JGAsmL
  { 1402,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1402 = JGAsmHE
  { 1401,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1401 = JGAsmH
  { 1400,	1,	0,	6,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1400 = JGAsmE
  { 1399,	1,	0,	6,	3,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo75 },  // Inst #1399 = JG
  { 1398,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1398 = JAsmZ
  { 1397,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1397 = JAsmP
  { 1396,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1396 = JAsmO
  { 1395,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1395 = JAsmNZ
  { 1394,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1394 = JAsmNP
  { 1393,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1393 = JAsmNO
  { 1392,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1392 = JAsmNM
  { 1391,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1391 = JAsmNLH
  { 1390,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1390 = JAsmNLE
  { 1389,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1389 = JAsmNL
  { 1388,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1388 = JAsmNHE
  { 1387,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1387 = JAsmNH
  { 1386,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1386 = JAsmNE
  { 1385,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1385 = JAsmM
  { 1384,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1384 = JAsmLH
  { 1383,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1383 = JAsmLE
  { 1382,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1382 = JAsmL
  { 1381,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1381 = JAsmHE
  { 1380,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1380 = JAsmH
  { 1379,	1,	0,	4,	3,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo75 },  // Inst #1379 = JAsmE
  { 1378,	1,	0,	4,	3,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo75 },  // Inst #1378 = J
  { 1377,	5,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo289 },  // Inst #1377 = InsnVSI
  { 1376,	6,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo288 },  // Inst #1376 = InsnVRX
  { 1375,	6,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo287 },  // Inst #1375 = InsnVRV
  { 1374,	6,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo286 },  // Inst #1374 = InsnVRS
  { 1373,	7,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo285 },  // Inst #1373 = InsnVRR
  { 1372,	6,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo284 },  // Inst #1372 = InsnVRI
  { 1371,	6,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo283 },  // Inst #1371 = InsnSSF
  { 1370,	5,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo282 },  // Inst #1370 = InsnSSE
  { 1369,	7,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo281 },  // Inst #1369 = InsnSS
  { 1368,	4,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo280 },  // Inst #1368 = InsnSIY
  { 1367,	4,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo280 },  // Inst #1367 = InsnSIL
  { 1366,	4,	0,	4,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo280 },  // Inst #1366 = InsnSI
  { 1365,	3,	0,	4,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo279 },  // Inst #1365 = InsnS
  { 1364,	5,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0xcULL, nullptr, OperandInfo277 },  // Inst #1364 = InsnRXY
  { 1363,	6,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, OperandInfo278 },  // Inst #1363 = InsnRXF
  { 1362,	5,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, OperandInfo277 },  // Inst #1362 = InsnRXE
  { 1361,	5,	0,	4,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, OperandInfo277 },  // Inst #1361 = InsnRX
  { 1360,	5,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo276 },  // Inst #1360 = InsnRSY
  { 1359,	4,	0,	4,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo270 },  // Inst #1359 = InsnRSI
  { 1358,	5,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo276 },  // Inst #1358 = InsnRSE
  { 1357,	5,	0,	4,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo276 },  // Inst #1357 = InsnRS
  { 1356,	6,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo275 },  // Inst #1356 = InsnRRS
  { 1355,	5,	0,	4,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo274 },  // Inst #1355 = InsnRRF
  { 1354,	3,	0,	4,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo273 },  // Inst #1354 = InsnRRE
  { 1353,	3,	0,	2,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo273 },  // Inst #1353 = InsnRR
  { 1352,	6,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo272 },  // Inst #1352 = InsnRIS
  { 1351,	3,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo269 },  // Inst #1351 = InsnRILU
  { 1350,	3,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo271 },  // Inst #1350 = InsnRIL
  { 1349,	4,	0,	6,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo270 },  // Inst #1349 = InsnRIE
  { 1348,	3,	0,	4,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo269 },  // Inst #1348 = InsnRI
  { 1347,	1,	0,	2,	340,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo3 },  // Inst #1347 = InsnE
  { 1346,	3,	1,	4,	790,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo155 },  // Inst #1346 = IVSK
  { 1345,	3,	1,	4,	789,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo155 },  // Inst #1345 = ISKE
  { 1344,	2,	1,	4,	793,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #1344 = IRBM
  { 1343,	2,	0,	4,	798,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo192 },  // Inst #1343 = IPTEOptOpt
  { 1342,	3,	0,	4,	798,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo268 },  // Inst #1342 = IPTEOpt
  { 1341,	4,	0,	4,	798,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo267 },  // Inst #1341 = IPTE
  { 1340,	1,	1,	4,	315,	1,	0,	0, 0x0ULL, ImplicitList2, OperandInfo253 },  // Inst #1340 = IPM
  { 1339,	0,	0,	4,	775,	1,	1,	0, 0x0ULL, ImplicitList19, nullptr },  // Inst #1339 = IPK
  { 1338,	3,	1,	4,	102,	0,	0,	0, 0x0ULL, nullptr, OperandInfo135 },  // Inst #1338 = IILL
  { 1337,	3,	1,	4,	101,	0,	0,	0, 0x0ULL, nullptr, OperandInfo135 },  // Inst #1337 = IILH
  { 1336,	2,	1,	6,	100,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo185 },  // Inst #1336 = IILF
  { 1335,	3,	1,	4,	99,	0,	0,	0, 0x0ULL, nullptr, OperandInfo141 },  // Inst #1335 = IIHL
  { 1334,	3,	1,	4,	98,	0,	0,	0, 0x0ULL, nullptr, OperandInfo141 },  // Inst #1334 = IIHH
  { 1333,	2,	1,	6,	97,	0,	0,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo210 },  // Inst #1333 = IIHF
  { 1332,	3,	1,	4,	519,	0,	0,	0, 0x0ULL, nullptr, OperandInfo146 },  // Inst #1332 = IEXTR
  { 1331,	3,	1,	4,	518,	0,	0,	0, 0x0ULL, nullptr, OperandInfo131 },  // Inst #1331 = IEDTR
  { 1330,	3,	0,	4,	799,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo105 },  // Inst #1330 = IDTEOpt
  { 1329,	4,	0,	4,	799,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo266 },  // Inst #1329 = IDTE
  { 1328,	5,	1,	6,	93,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x2cULL, nullptr, OperandInfo136 },  // Inst #1328 = ICY
  { 1327,	5,	1,	6,	95,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x4ULL, ImplicitList2, OperandInfo264 },  // Inst #1327 = ICMY
  { 1326,	5,	1,	6,	95,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x4ULL, ImplicitList2, OperandInfo265 },  // Inst #1326 = ICMH
  { 1325,	5,	1,	4,	95,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, OperandInfo264 },  // Inst #1325 = ICM
  { 1324,	5,	1,	6,	94,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x2cULL, nullptr, OperandInfo128 },  // Inst #1324 = IC32Y
  { 1323,	5,	1,	4,	94,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x28ULL, nullptr, OperandInfo128 },  // Inst #1323 = IC32
  { 1322,	5,	1,	4,	93,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x28ULL, nullptr, OperandInfo136 },  // Inst #1322 = IC
  { 1321,	1,	1,	4,	779,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo253 },  // Inst #1321 = IAC
  { 1320,	0,	0,	4,	855,	1,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList15, nullptr },  // Inst #1320 = HSCH
  { 1319,	2,	1,	2,	431,	0,	0,	0, 0x0ULL, nullptr, OperandInfo95 },  // Inst #1319 = HER
  { 1318,	2,	1,	2,	431,	0,	0,	0, 0x0ULL, nullptr, OperandInfo94 },  // Inst #1318 = HDR
  { 1317,	2,	1,	4,	328,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo48 },  // Inst #1317 = FLOGR
  { 1316,	4,	1,	4,	499,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo263 },  // Inst #1316 = FIXTR
  { 1315,	2,	1,	4,	437,	0,	0,	0, 0x0ULL, nullptr, OperandInfo96 },  // Inst #1315 = FIXR
  { 1314,	4,	1,	4,	380,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo263 },  // Inst #1314 = FIXBRA
  { 1313,	3,	1,	4,	380,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo262 },  // Inst #1313 = FIXBR
  { 1312,	2,	1,	4,	436,	0,	0,	0, 0x0ULL, nullptr, OperandInfo95 },  // Inst #1312 = FIER
  { 1311,	4,	1,	4,	379,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo261 },  // Inst #1311 = FIEBRA
  { 1310,	3,	1,	4,	379,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo260 },  // Inst #1310 = FIEBR
  { 1309,	4,	1,	4,	498,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo259 },  // Inst #1309 = FIDTR
  { 1308,	2,	1,	4,	436,	0,	0,	0, 0x0ULL, nullptr, OperandInfo94 },  // Inst #1308 = FIDR
  { 1307,	4,	1,	4,	379,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo259 },  // Inst #1307 = FIDBRA
  { 1306,	3,	1,	4,	379,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo258 },  // Inst #1306 = FIDBR
  { 1305,	2,	0,	6,	339,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo257 },  // Inst #1305 = EXRL
  { 1304,	4,	0,	4,	339,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, OperandInfo256 },  // Inst #1304 = EX
  { 1303,	1,	1,	4,	325,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo253 },  // Inst #1303 = ETND
  { 1302,	2,	1,	4,	503,	0,	0,	0, 0x0ULL, nullptr, OperandInfo96 },  // Inst #1302 = ESXTR
  { 1301,	2,	1,	4,	824,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo255 },  // Inst #1301 = ESTA
  { 1300,	2,	1,	4,	785,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo254 },  // Inst #1300 = ESEA
  { 1299,	2,	1,	4,	502,	0,	0,	0, 0x0ULL, nullptr, OperandInfo94 },  // Inst #1299 = ESDTR
  { 1298,	1,	1,	4,	783,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo253 },  // Inst #1298 = ESAR
  { 1297,	1,	1,	4,	783,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo83 },  // Inst #1297 = ESAIR
  { 1296,	2,	0,	4,	823,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #1296 = EREGG
  { 1295,	2,	0,	4,	823,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1295 = EREG
  { 1294,	2,	2,	4,	773,	1,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo219 },  // Inst #1294 = EPSW
  { 1293,	2,	1,	4,	850,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo149 },  // Inst #1293 = EPCTR
  { 1292,	1,	1,	4,	783,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo253 },  // Inst #1292 = EPAR
  { 1291,	1,	1,	4,	783,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo83 },  // Inst #1291 = EPAIR
  { 1290,	1,	1,	4,	407,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList6, OperandInfo253 },  // Inst #1290 = EFPC
  { 1289,	2,	1,	4,	501,	0,	0,	0, 0x0ULL, nullptr, OperandInfo96 },  // Inst #1289 = EEXTR
  { 1288,	2,	1,	4,	500,	0,	0,	0, 0x0ULL, nullptr, OperandInfo94 },  // Inst #1288 = EEDTR
  { 1287,	5,	0,	6,	310,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo214 },  // Inst #1287 = EDMK
  { 1286,	5,	0,	6,	310,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo214 },  // Inst #1286 = ED
  { 1285,	5,	0,	6,	837,	0,	2,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList18, OperandInfo235 },  // Inst #1285 = ECTG
  { 1284,	2,	1,	4,	849,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo252 },  // Inst #1284 = ECPGA
  { 1283,	2,	1,	4,	850,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo149 },  // Inst #1283 = ECCTR
  { 1282,	4,	1,	6,	836,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo251 },  // Inst #1282 = ECAG
  { 1281,	2,	1,	4,	311,	0,	0,	0, 0x0ULL, nullptr, OperandInfo250 },  // Inst #1281 = EAR
  { 1280,	4,	1,	4,	511,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo147 },  // Inst #1280 = DXTRA
  { 1279,	3,	1,	4,	511,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo146 },  // Inst #1279 = DXTR
  { 1278,	3,	1,	4,	463,	0,	0,	0, 0x0ULL, nullptr, OperandInfo145 },  // Inst #1278 = DXR
  { 1277,	3,	1,	4,	400,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo145 },  // Inst #1277 = DXBR
  { 1276,	3,	1,	4,	202,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo234 },  // Inst #1276 = DSGR
  { 1275,	3,	1,	4,	202,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo249 },  // Inst #1275 = DSGFR
  { 1274,	5,	1,	6,	203,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x8cULL, nullptr, OperandInfo245 },  // Inst #1274 = DSGF
  { 1273,	5,	1,	6,	203,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x10cULL, nullptr, OperandInfo245 },  // Inst #1273 = DSG
  { 1272,	3,	1,	2,	200,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo249 },  // Inst #1272 = DR
  { 1271,	6,	0,	6,	306,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo144 },  // Inst #1271 = DP
  { 1270,	3,	1,	4,	204,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo249 },  // Inst #1270 = DLR
  { 1269,	3,	1,	4,	205,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo234 },  // Inst #1269 = DLGR
  { 1268,	5,	1,	6,	206,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x10cULL, nullptr, OperandInfo245 },  // Inst #1268 = DLG
  { 1267,	5,	1,	6,	206,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x8cULL, nullptr, OperandInfo245 },  // Inst #1267 = DL
  { 1266,	5,	2,	4,	401,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo248 },  // Inst #1266 = DIEBR
  { 1265,	5,	2,	4,	401,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo247 },  // Inst #1265 = DIDBR
  { 1264,	4,	0,	4,	843,	0,	0,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1264 = DIAG
  { 1263,	5,	2,	4,	337,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo246 },  // Inst #1263 = DFLTCC
  { 1262,	3,	1,	2,	461,	0,	0,	0, 0x0ULL, nullptr, OperandInfo134 },  // Inst #1262 = DER
  { 1261,	3,	1,	4,	398,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo134 },  // Inst #1261 = DEBR
  { 1260,	5,	1,	6,	396,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x88ULL, ImplicitList6, OperandInfo133 },  // Inst #1260 = DEB
  { 1259,	5,	1,	4,	459,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x88ULL, nullptr, OperandInfo133 },  // Inst #1259 = DE
  { 1258,	4,	1,	4,	510,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo132 },  // Inst #1258 = DDTRA
  { 1257,	3,	1,	4,	510,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo131 },  // Inst #1257 = DDTR
  { 1256,	3,	1,	2,	462,	0,	0,	0, 0x0ULL, nullptr, OperandInfo130 },  // Inst #1256 = DDR
  { 1255,	3,	1,	4,	399,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo130 },  // Inst #1255 = DDBR
  { 1254,	5,	1,	6,	397,	1,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x108ULL, ImplicitList6, OperandInfo129 },  // Inst #1254 = DDB
  { 1253,	5,	1,	4,	460,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x108ULL, nullptr, OperandInfo129 },  // Inst #1253 = DD
  { 1252,	5,	1,	4,	201,	0,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x88ULL, nullptr, OperandInfo245 },  // Inst #1252 = D
  { 1251,	5,	0,	6,	492,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo229 },  // Inst #1251 = CZXT
  { 1250,	5,	0,	6,	491,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo173 },  // Inst #1250 = CZDT
  { 1249,	4,	0,	6,	218,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x388cULL, ImplicitList2, OperandInfo167 },  // Inst #1249 = CY
  { 1248,	5,	1,	6,	490,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo229 },  // Inst #1248 = CXZT
  { 1247,	2,	1,	4,	486,	0,	0,	0, 0x0ULL, nullptr, OperandInfo244 },  // Inst #1247 = CXUTR
  { 1246,	2,	0,	4,	521,	1,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList1, OperandInfo96 },  // Inst #1246 = CXTR
  { 1245,	2,	1,	4,	486,	0,	0,	0, 0x0ULL, nullptr, OperandInfo244 },  // Inst #1245 = CXSTR
  { 1244,	2,	0,	4,	466,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo96 },  // Inst #1244 = CXR
  { 1243,	5,	1,	6,	494,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo229 },  // Inst #1243 = CXPT
  { 1242,	4,	1,	4,	480,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo243 },  // Inst #1242 = CXLGTR
  { 1241,	4,	1,	4,	365,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo243 },  // Inst #1241 = CXLGBR
  { 1240,	4,	1,	4,	479,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo241 },  // Inst #1240 = CXLFTR
  { 1239,	4,	1,	4,	365,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo241 },  // Inst #1239 = CXLFBR
  { 1238,	4,	1,	4,	476,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo243 },  // Inst #1238 = CXGTRA
  { 1237,	2,	1,	4,	476,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo242 },  // Inst #1237 = CXGTR
  { 1236,	2,	1,	4,	424,	0,	0,	0, 0x0ULL, nullptr, OperandInfo242 },  // Inst #1236 = CXGR
  { 1235,	4,	1,	4,	363,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo243 },  // Inst #1235 = CXGBRA
  { 1234,	2,	1,	4,	363,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo242 },  // Inst #1234 = CXGBR
  { 1233,	4,	1,	4,	475,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo241 },  // Inst #1233 = CXFTR
  { 1232,	2,	1,	4,	424,	0,	0,	0, 0x0ULL, nullptr, OperandInfo240 },  // Inst #1232 = CXFR
  { 1231,	4,	1,	4,	363,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo241 },  // Inst #1231 = CXFBRA
  { 1230,	2,	1,	4,	363,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo240 },  // Inst #1230 = CXFBR
  { 1229,	2,	0,	4,	404,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x3c00ULL, ImplicitList1, OperandInfo96 },  // Inst #1229 = CXBR
  { 1228,	4,	0,	6,	299,	0,	0,	0|(1ULL<<MCID::MayStore), 0x8cULL, nullptr, OperandInfo167 },  // Inst #1228 = CVDY
  { 1227,	4,	0,	6,	298,	0,	0,	0|(1ULL<<MCID::MayStore), 0x10cULL, nullptr, OperandInfo46 },  // Inst #1227 = CVDG
  { 1226,	4,	0,	4,	299,	0,	0,	0|(1ULL<<MCID::MayStore), 0x88ULL, nullptr, OperandInfo167 },  // Inst #1226 = CVD
  { 1225,	5,	1,	6,	297,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x8cULL, nullptr, OperandInfo128 },  // Inst #1225 = CVBY
  { 1224,	5,	1,	6,	296,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x10cULL, nullptr, OperandInfo136 },  // Inst #1224 = CVBG
  { 1223,	5,	1,	4,	297,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x88ULL, nullptr, OperandInfo128 },  // Inst #1223 = CVB
  { 1222,	2,	1,	4,	488,	0,	0,	0, 0x0ULL, nullptr, OperandInfo239 },  // Inst #1222 = CUXTR
  { 1221,	4,	2,	4,	289,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo215 },  // Inst #1221 = CUUTFOpt
  { 1220,	5,	2,	4,	289,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo237 },  // Inst #1220 = CUUTF
  { 1219,	4,	2,	4,	289,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo215 },  // Inst #1219 = CUTFUOpt
  { 1218,	5,	2,	4,	289,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo237 },  // Inst #1218 = CUTFU
  { 1217,	4,	2,	4,	331,	2,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList17, OperandInfo215 },  // Inst #1217 = CUSE
  { 1216,	2,	1,	4,	487,	0,	0,	0, 0x0ULL, nullptr, OperandInfo238 },  // Inst #1216 = CUDTR
  { 1215,	4,	2,	4,	288,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo215 },  // Inst #1215 = CU42
  { 1214,	4,	2,	4,	288,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo215 },  // Inst #1214 = CU41
  { 1213,	4,	2,	4,	288,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo215 },  // Inst #1213 = CU24Opt
  { 1212,	5,	2,	4,	288,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo237 },  // Inst #1212 = CU24
  { 1211,	4,	2,	4,	288,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo215 },  // Inst #1211 = CU21Opt
  { 1210,	5,	2,	4,	288,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo237 },  // Inst #1210 = CU21
  { 1209,	4,	2,	4,	288,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo215 },  // Inst #1209 = CU14Opt
  { 1208,	5,	2,	4,	288,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo237 },  // Inst #1208 = CU14
  { 1207,	4,	2,	4,	288,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo215 },  // Inst #1207 = CU12Opt
  { 1206,	5,	2,	4,	288,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo237 },  // Inst #1206 = CU12
  { 1205,	5,	1,	6,	274,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo165 },  // Inst #1205 = CSY
  { 1204,	3,	1,	4,	488,	0,	0,	0, 0x0ULL, nullptr, OperandInfo236 },  // Inst #1204 = CSXTR
  { 1203,	5,	0,	6,	277,	2,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList16, OperandInfo235 },  // Inst #1203 = CSST
  { 1202,	3,	1,	4,	803,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo234 },  // Inst #1202 = CSPG
  { 1201,	3,	1,	4,	803,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo234 },  // Inst #1201 = CSP
  { 1200,	5,	1,	6,	274,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo166 },  // Inst #1200 = CSG
  { 1199,	3,	1,	4,	487,	0,	0,	0, 0x0ULL, nullptr, OperandInfo233 },  // Inst #1199 = CSDTR
  { 1198,	0,	0,	4,	855,	1,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList15, nullptr },  // Inst #1198 = CSCH
  { 1197,	5,	1,	4,	274,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo165 },  // Inst #1197 = CS
  { 1196,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1196 = CRTAsmNLH
  { 1195,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1195 = CRTAsmNLE
  { 1194,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1194 = CRTAsmNL
  { 1193,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1193 = CRTAsmNHE
  { 1192,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1192 = CRTAsmNH
  { 1191,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1191 = CRTAsmNE
  { 1190,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1190 = CRTAsmLH
  { 1189,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1189 = CRTAsmLE
  { 1188,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1188 = CRTAsmL
  { 1187,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1187 = CRTAsmHE
  { 1186,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1186 = CRTAsmH
  { 1185,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1185 = CRTAsmE
  { 1184,	3,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo71 },  // Inst #1184 = CRTAsm
  { 1183,	3,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo71 },  // Inst #1183 = CRT
  { 1182,	2,	0,	6,	219,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x3800ULL, ImplicitList2, OperandInfo207 },  // Inst #1182 = CRL
  { 1181,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1181 = CRJAsmNLH
  { 1180,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1180 = CRJAsmNLE
  { 1179,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1179 = CRJAsmNL
  { 1178,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1178 = CRJAsmNHE
  { 1177,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1177 = CRJAsmNH
  { 1176,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1176 = CRJAsmNE
  { 1175,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1175 = CRJAsmLH
  { 1174,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1174 = CRJAsmLE
  { 1173,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1173 = CRJAsmL
  { 1172,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1172 = CRJAsmHE
  { 1171,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1171 = CRJAsmH
  { 1170,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1170 = CRJAsmE
  { 1169,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo222 },  // Inst #1169 = CRJAsm
  { 1168,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo222 },  // Inst #1168 = CRJ
  { 1167,	3,	0,	4,	801,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo232 },  // Inst #1167 = CRDTEOpt
  { 1166,	4,	0,	4,	801,	0,	1,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo231 },  // Inst #1166 = CRDTE
  { 1165,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1165 = CRBAsmNLH
  { 1164,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1164 = CRBAsmNLE
  { 1163,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1163 = CRBAsmNL
  { 1162,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1162 = CRBAsmNHE
  { 1161,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1161 = CRBAsmNH
  { 1160,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1160 = CRBAsmNE
  { 1159,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1159 = CRBAsmLH
  { 1158,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1158 = CRBAsmLE
  { 1157,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1157 = CRBAsmL
  { 1156,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1156 = CRBAsmHE
  { 1155,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1155 = CRBAsmH
  { 1154,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1154 = CRBAsmE
  { 1153,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo220 },  // Inst #1153 = CRBAsm
  { 1152,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo220 },  // Inst #1152 = CRB
  { 1151,	2,	0,	2,	223,	0,	1,	0|(1ULL<<MCID::Compare), 0x3800ULL, ImplicitList2, OperandInfo219 },  // Inst #1151 = CR
  { 1150,	2,	1,	4,	311,	0,	0,	0, 0x0ULL, nullptr, OperandInfo230 },  // Inst #1150 = CPYA
  { 1149,	5,	0,	6,	496,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo229 },  // Inst #1149 = CPXT
  { 1148,	3,	1,	4,	350,	0,	0,	0, 0x0ULL, nullptr, OperandInfo228 },  // Inst #1148 = CPSDRss
  { 1147,	3,	1,	4,	350,	0,	0,	0, 0x0ULL, nullptr, OperandInfo227 },  // Inst #1147 = CPSDRsd
  { 1146,	3,	1,	4,	350,	0,	0,	0, 0x0ULL, nullptr, OperandInfo226 },  // Inst #1146 = CPSDRds
  { 1145,	3,	1,	4,	350,	0,	0,	0, 0x0ULL, nullptr, OperandInfo131 },  // Inst #1145 = CPSDRdd
  { 1144,	5,	0,	6,	495,	0,	0,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo173 },  // Inst #1144 = CPDT
  { 1143,	6,	0,	6,	308,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, OperandInfo144 },  // Inst #1143 = CP
  { 1142,	4,	2,	4,	335,	2,	2,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList14, OperandInfo215 },  // Inst #1142 = CMPSC
  { 1141,	4,	0,	6,	227,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x10388cULL, ImplicitList2, OperandInfo167 },  // Inst #1141 = CLY
  { 1140,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo225 },  // Inst #1140 = CLTAsmNLH
  { 1139,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo225 },  // Inst #1139 = CLTAsmNLE
  { 1138,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo225 },  // Inst #1138 = CLTAsmNL
  { 1137,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo225 },  // Inst #1137 = CLTAsmNHE
  { 1136,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo225 },  // Inst #1136 = CLTAsmNH
  { 1135,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo225 },  // Inst #1135 = CLTAsmNE
  { 1134,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo225 },  // Inst #1134 = CLTAsmLH
  { 1133,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo225 },  // Inst #1133 = CLTAsmLE
  { 1132,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo225 },  // Inst #1132 = CLTAsmL
  { 1131,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo225 },  // Inst #1131 = CLTAsmHE
  { 1130,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo225 },  // Inst #1130 = CLTAsmH
  { 1129,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo225 },  // Inst #1129 = CLTAsmE
  { 1128,	4,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo56 },  // Inst #1128 = CLTAsm
  { 1127,	4,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo56 },  // Inst #1127 = CLT
  { 1126,	4,	2,	4,	255,	1,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList13, OperandInfo224 },  // Inst #1126 = CLST
  { 1125,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1125 = CLRTAsmNLH
  { 1124,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1124 = CLRTAsmNLE
  { 1123,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1123 = CLRTAsmNL
  { 1122,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1122 = CLRTAsmNHE
  { 1121,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1121 = CLRTAsmNH
  { 1120,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1120 = CLRTAsmNE
  { 1119,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1119 = CLRTAsmLH
  { 1118,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1118 = CLRTAsmLE
  { 1117,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1117 = CLRTAsmL
  { 1116,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1116 = CLRTAsmHE
  { 1115,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1115 = CLRTAsmH
  { 1114,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo219 },  // Inst #1114 = CLRTAsmE
  { 1113,	3,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo71 },  // Inst #1113 = CLRTAsm
  { 1112,	3,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo71 },  // Inst #1112 = CLRT
  { 1111,	2,	0,	6,	242,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x103800ULL, ImplicitList2, OperandInfo207 },  // Inst #1111 = CLRL
  { 1110,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1110 = CLRJAsmNLH
  { 1109,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1109 = CLRJAsmNLE
  { 1108,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1108 = CLRJAsmNL
  { 1107,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1107 = CLRJAsmNHE
  { 1106,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1106 = CLRJAsmNH
  { 1105,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1105 = CLRJAsmNE
  { 1104,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1104 = CLRJAsmLH
  { 1103,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1103 = CLRJAsmLE
  { 1102,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1102 = CLRJAsmL
  { 1101,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1101 = CLRJAsmHE
  { 1100,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1100 = CLRJAsmH
  { 1099,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo223 },  // Inst #1099 = CLRJAsmE
  { 1098,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo222 },  // Inst #1098 = CLRJAsm
  { 1097,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo222 },  // Inst #1097 = CLRJ
  { 1096,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1096 = CLRBAsmNLH
  { 1095,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1095 = CLRBAsmNLE
  { 1094,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1094 = CLRBAsmNL
  { 1093,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1093 = CLRBAsmNHE
  { 1092,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1092 = CLRBAsmNH
  { 1091,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1091 = CLRBAsmNE
  { 1090,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1090 = CLRBAsmLH
  { 1089,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1089 = CLRBAsmLE
  { 1088,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1088 = CLRBAsmL
  { 1087,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1087 = CLRBAsmHE
  { 1086,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1086 = CLRBAsmH
  { 1085,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo221 },  // Inst #1085 = CLRBAsmE
  { 1084,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo220 },  // Inst #1084 = CLRBAsm
  { 1083,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo220 },  // Inst #1083 = CLRB
  { 1082,	2,	0,	2,	241,	0,	1,	0|(1ULL<<MCID::Compare), 0x103800ULL, ImplicitList2, OperandInfo219 },  // Inst #1082 = CLR
  { 1081,	4,	0,	6,	262,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x4ULL, ImplicitList2, OperandInfo209 },  // Inst #1081 = CLMY
  { 1080,	4,	0,	6,	262,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x4ULL, ImplicitList2, OperandInfo218 },  // Inst #1080 = CLMH
  { 1079,	4,	0,	4,	262,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, OperandInfo209 },  // Inst #1079 = CLM
  { 1078,	3,	0,	6,	240,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x103804ULL, ImplicitList2, OperandInfo121 },  // Inst #1078 = CLIY
  { 1077,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #1077 = CLIJAsmNLH
  { 1076,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #1076 = CLIJAsmNLE
  { 1075,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #1075 = CLIJAsmNL
  { 1074,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #1074 = CLIJAsmNHE
  { 1073,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #1073 = CLIJAsmNH
  { 1072,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #1072 = CLIJAsmNE
  { 1071,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #1071 = CLIJAsmLH
  { 1070,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #1070 = CLIJAsmLE
  { 1069,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #1069 = CLIJAsmL
  { 1068,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #1068 = CLIJAsmHE
  { 1067,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #1067 = CLIJAsmH
  { 1066,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #1066 = CLIJAsmE
  { 1065,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo211 },  // Inst #1065 = CLIJAsm
  { 1064,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo211 },  // Inst #1064 = CLIJ
  { 1063,	2,	0,	6,	239,	0,	1,	0|(1ULL<<MCID::Compare), 0x103800ULL, ImplicitList2, OperandInfo210 },  // Inst #1063 = CLIH
  { 1062,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #1062 = CLIBAsmNLH
  { 1061,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #1061 = CLIBAsmNLE
  { 1060,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #1060 = CLIBAsmNL
  { 1059,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #1059 = CLIBAsmNHE
  { 1058,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #1058 = CLIBAsmNH
  { 1057,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #1057 = CLIBAsmNE
  { 1056,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #1056 = CLIBAsmLH
  { 1055,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #1055 = CLIBAsmLE
  { 1054,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #1054 = CLIBAsmL
  { 1053,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #1053 = CLIBAsmHE
  { 1052,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #1052 = CLIBAsmH
  { 1051,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #1051 = CLIBAsmE
  { 1050,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo208 },  // Inst #1050 = CLIBAsm
  { 1049,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo208 },  // Inst #1049 = CLIB
  { 1048,	3,	0,	4,	240,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x103800ULL, ImplicitList2, OperandInfo121 },  // Inst #1048 = CLI
  { 1047,	2,	0,	6,	238,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x103800ULL, ImplicitList2, OperandInfo207 },  // Inst #1047 = CLHRL
  { 1046,	2,	0,	4,	244,	0,	1,	0|(1ULL<<MCID::Compare), 0x103800ULL, ImplicitList2, OperandInfo206 },  // Inst #1046 = CLHLR
  { 1045,	3,	0,	6,	238,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x103800ULL, ImplicitList2, OperandInfo121 },  // Inst #1045 = CLHHSI
  { 1044,	2,	0,	4,	243,	0,	1,	0|(1ULL<<MCID::Compare), 0x103800ULL, ImplicitList2, OperandInfo205 },  // Inst #1044 = CLHHR
  { 1043,	4,	0,	6,	237,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x10388cULL, ImplicitList2, OperandInfo204 },  // Inst #1043 = CLHF
  { 1042,	4,	1,	4,	484,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo203 },  // Inst #1042 = CLGXTR
  { 1041,	4,	1,	4,	371,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo203 },  // Inst #1041 = CLGXBR
  { 1040,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo217 },  // Inst #1040 = CLGTAsmNLH
  { 1039,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo217 },  // Inst #1039 = CLGTAsmNLE
  { 1038,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo217 },  // Inst #1038 = CLGTAsmNL
  { 1037,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo217 },  // Inst #1037 = CLGTAsmNHE
  { 1036,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo217 },  // Inst #1036 = CLGTAsmNH
  { 1035,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo217 },  // Inst #1035 = CLGTAsmNE
  { 1034,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo217 },  // Inst #1034 = CLGTAsmLH
  { 1033,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo217 },  // Inst #1033 = CLGTAsmLE
  { 1032,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo217 },  // Inst #1032 = CLGTAsmL
  { 1031,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo217 },  // Inst #1031 = CLGTAsmHE
  { 1030,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo217 },  // Inst #1030 = CLGTAsmH
  { 1029,	3,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo217 },  // Inst #1029 = CLGTAsmE
  { 1028,	4,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo57 },  // Inst #1028 = CLGTAsm
  { 1027,	4,	0,	6,	17,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x4ULL, nullptr, OperandInfo57 },  // Inst #1027 = CLGT
  { 1026,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #1026 = CLGRTAsmNLH
  { 1025,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #1025 = CLGRTAsmNLE
  { 1024,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #1024 = CLGRTAsmNL
  { 1023,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #1023 = CLGRTAsmNHE
  { 1022,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #1022 = CLGRTAsmNH
  { 1021,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #1021 = CLGRTAsmNE
  { 1020,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #1020 = CLGRTAsmLH
  { 1019,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #1019 = CLGRTAsmLE
  { 1018,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #1018 = CLGRTAsmL
  { 1017,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #1017 = CLGRTAsmHE
  { 1016,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #1016 = CLGRTAsmH
  { 1015,	2,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #1015 = CLGRTAsmE
  { 1014,	3,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo64 },  // Inst #1014 = CLGRTAsm
  { 1013,	3,	0,	4,	15,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo64 },  // Inst #1013 = CLGRT
  { 1012,	2,	0,	6,	236,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x103800ULL, ImplicitList2, OperandInfo193 },  // Inst #1012 = CLGRL
  { 1011,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #1011 = CLGRJAsmNLH
  { 1010,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #1010 = CLGRJAsmNLE
  { 1009,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #1009 = CLGRJAsmNL
  { 1008,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #1008 = CLGRJAsmNHE
  { 1007,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #1007 = CLGRJAsmNH
  { 1006,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #1006 = CLGRJAsmNE
  { 1005,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #1005 = CLGRJAsmLH
  { 1004,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #1004 = CLGRJAsmLE
  { 1003,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #1003 = CLGRJAsmL
  { 1002,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #1002 = CLGRJAsmHE
  { 1001,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #1001 = CLGRJAsmH
  { 1000,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #1000 = CLGRJAsmE
  { 999,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo200 },  // Inst #999 = CLGRJAsm
  { 998,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo200 },  // Inst #998 = CLGRJ
  { 997,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #997 = CLGRBAsmNLH
  { 996,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #996 = CLGRBAsmNLE
  { 995,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #995 = CLGRBAsmNL
  { 994,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #994 = CLGRBAsmNHE
  { 993,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #993 = CLGRBAsmNH
  { 992,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #992 = CLGRBAsmNE
  { 991,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #991 = CLGRBAsmLH
  { 990,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #990 = CLGRBAsmLE
  { 989,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #989 = CLGRBAsmL
  { 988,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #988 = CLGRBAsmHE
  { 987,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #987 = CLGRBAsmH
  { 986,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #986 = CLGRBAsmE
  { 985,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo198 },  // Inst #985 = CLGRBAsm
  { 984,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo198 },  // Inst #984 = CLGRB
  { 983,	2,	0,	4,	235,	0,	1,	0|(1ULL<<MCID::Compare), 0x103800ULL, ImplicitList2, OperandInfo149 },  // Inst #983 = CLGR
  { 982,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #982 = CLGITAsmNLH
  { 981,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #981 = CLGITAsmNLE
  { 980,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #980 = CLGITAsmNL
  { 979,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #979 = CLGITAsmNHE
  { 978,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #978 = CLGITAsmNH
  { 977,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #977 = CLGITAsmNE
  { 976,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #976 = CLGITAsmLH
  { 975,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #975 = CLGITAsmLE
  { 974,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #974 = CLGITAsmL
  { 973,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #973 = CLGITAsmHE
  { 972,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #972 = CLGITAsmH
  { 971,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #971 = CLGITAsmE
  { 970,	3,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo62 },  // Inst #970 = CLGITAsm
  { 969,	3,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo62 },  // Inst #969 = CLGIT
  { 968,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #968 = CLGIJAsmNLH
  { 967,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #967 = CLGIJAsmNLE
  { 966,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #966 = CLGIJAsmNL
  { 965,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #965 = CLGIJAsmNHE
  { 964,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #964 = CLGIJAsmNH
  { 963,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #963 = CLGIJAsmNE
  { 962,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #962 = CLGIJAsmLH
  { 961,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #961 = CLGIJAsmLE
  { 960,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #960 = CLGIJAsmL
  { 959,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #959 = CLGIJAsmHE
  { 958,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #958 = CLGIJAsmH
  { 957,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #957 = CLGIJAsmE
  { 956,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo196 },  // Inst #956 = CLGIJAsm
  { 955,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo196 },  // Inst #955 = CLGIJ
  { 954,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #954 = CLGIBAsmNLH
  { 953,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #953 = CLGIBAsmNLE
  { 952,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #952 = CLGIBAsmNL
  { 951,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #951 = CLGIBAsmNHE
  { 950,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #950 = CLGIBAsmNH
  { 949,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #949 = CLGIBAsmNE
  { 948,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #948 = CLGIBAsmLH
  { 947,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #947 = CLGIBAsmLE
  { 946,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #946 = CLGIBAsmL
  { 945,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #945 = CLGIBAsmHE
  { 944,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #944 = CLGIBAsmH
  { 943,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #943 = CLGIBAsmE
  { 942,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo194 },  // Inst #942 = CLGIBAsm
  { 941,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo194 },  // Inst #941 = CLGIB
  { 940,	3,	0,	6,	231,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x103800ULL, ImplicitList2, OperandInfo121 },  // Inst #940 = CLGHSI
  { 939,	2,	0,	6,	231,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x103800ULL, ImplicitList2, OperandInfo193 },  // Inst #939 = CLGHRL
  { 938,	2,	0,	6,	233,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x103800ULL, ImplicitList2, OperandInfo193 },  // Inst #938 = CLGFRL
  { 937,	2,	0,	4,	234,	0,	1,	0|(1ULL<<MCID::Compare), 0x103800ULL, ImplicitList2, OperandInfo192 },  // Inst #937 = CLGFR
  { 936,	2,	0,	6,	234,	0,	1,	0|(1ULL<<MCID::Compare), 0x103800ULL, ImplicitList2, OperandInfo122 },  // Inst #936 = CLGFI
  { 935,	4,	0,	6,	232,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x10388cULL, ImplicitList2, OperandInfo46 },  // Inst #935 = CLGF
  { 934,	4,	1,	4,	370,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo191 },  // Inst #934 = CLGEBR
  { 933,	4,	1,	4,	483,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo189 },  // Inst #933 = CLGDTR
  { 932,	4,	1,	4,	370,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo189 },  // Inst #932 = CLGDBR
  { 931,	4,	0,	6,	230,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x10390cULL, ImplicitList2, OperandInfo46 },  // Inst #931 = CLG
  { 930,	4,	1,	4,	484,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo187 },  // Inst #930 = CLFXTR
  { 929,	4,	1,	4,	371,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo187 },  // Inst #929 = CLFXBR
  { 928,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #928 = CLFITAsmNLH
  { 927,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #927 = CLFITAsmNLE
  { 926,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #926 = CLFITAsmNL
  { 925,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #925 = CLFITAsmNHE
  { 924,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #924 = CLFITAsmNH
  { 923,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #923 = CLFITAsmNE
  { 922,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #922 = CLFITAsmLH
  { 921,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #921 = CLFITAsmLE
  { 920,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #920 = CLFITAsmL
  { 919,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #919 = CLFITAsmHE
  { 918,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #918 = CLFITAsmH
  { 917,	2,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #917 = CLFITAsmE
  { 916,	3,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo66 },  // Inst #916 = CLFITAsm
  { 915,	3,	0,	6,	16,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo66 },  // Inst #915 = CLFIT
  { 914,	2,	0,	6,	229,	0,	1,	0|(1ULL<<MCID::Compare), 0x103800ULL, ImplicitList2, OperandInfo185 },  // Inst #914 = CLFI
  { 913,	3,	0,	6,	228,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x103800ULL, ImplicitList2, OperandInfo121 },  // Inst #913 = CLFHSI
  { 912,	4,	1,	4,	368,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo184 },  // Inst #912 = CLFEBR
  { 911,	4,	1,	4,	483,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo182 },  // Inst #911 = CLFDTR
  { 910,	4,	1,	4,	369,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo182 },  // Inst #910 = CLFDBR
  { 909,	6,	2,	6,	254,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x4ULL, ImplicitList2, OperandInfo216 },  // Inst #909 = CLCLU
  { 908,	6,	2,	4,	254,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, OperandInfo216 },  // Inst #908 = CLCLE
  { 907,	4,	2,	2,	254,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, OperandInfo215 },  // Inst #907 = CLCL
  { 906,	5,	0,	6,	253,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, OperandInfo214 },  // Inst #906 = CLC
  { 905,	4,	0,	4,	227,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x103888ULL, ImplicitList2, OperandInfo167 },  // Inst #905 = CL
  { 904,	4,	2,	4,	334,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, OperandInfo213 },  // Inst #904 = CKSM
  { 903,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #903 = CITAsmNLH
  { 902,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #902 = CITAsmNLE
  { 901,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #901 = CITAsmNL
  { 900,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #900 = CITAsmNHE
  { 899,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #899 = CITAsmNH
  { 898,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #898 = CITAsmNE
  { 897,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #897 = CITAsmLH
  { 896,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #896 = CITAsmLE
  { 895,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #895 = CITAsmL
  { 894,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #894 = CITAsmHE
  { 893,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #893 = CITAsmH
  { 892,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo185 },  // Inst #892 = CITAsmE
  { 891,	3,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo66 },  // Inst #891 = CITAsm
  { 890,	3,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo66 },  // Inst #890 = CIT
  { 889,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #889 = CIJAsmNLH
  { 888,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #888 = CIJAsmNLE
  { 887,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #887 = CIJAsmNL
  { 886,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #886 = CIJAsmNHE
  { 885,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #885 = CIJAsmNH
  { 884,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #884 = CIJAsmNE
  { 883,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #883 = CIJAsmLH
  { 882,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #882 = CIJAsmLE
  { 881,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #881 = CIJAsmL
  { 880,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #880 = CIJAsmHE
  { 879,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #879 = CIJAsmH
  { 878,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo212 },  // Inst #878 = CIJAsmE
  { 877,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo211 },  // Inst #877 = CIJAsm
  { 876,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo211 },  // Inst #876 = CIJ
  { 875,	2,	0,	6,	224,	0,	1,	0|(1ULL<<MCID::Compare), 0x3800ULL, ImplicitList2, OperandInfo210 },  // Inst #875 = CIH
  { 874,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #874 = CIBAsmNLH
  { 873,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #873 = CIBAsmNLE
  { 872,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #872 = CIBAsmNL
  { 871,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #871 = CIBAsmNHE
  { 870,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #870 = CIBAsmNH
  { 869,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #869 = CIBAsmNE
  { 868,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #868 = CIBAsmLH
  { 867,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #867 = CIBAsmLE
  { 866,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #866 = CIBAsmL
  { 865,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #865 = CIBAsmHE
  { 864,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #864 = CIBAsmH
  { 863,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo209 },  // Inst #863 = CIBAsmE
  { 862,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo208 },  // Inst #862 = CIBAsm
  { 861,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo208 },  // Inst #861 = CIB
  { 860,	4,	0,	6,	245,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x384cULL, ImplicitList2, OperandInfo167 },  // Inst #860 = CHY
  { 859,	3,	0,	6,	226,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x3800ULL, ImplicitList2, OperandInfo121 },  // Inst #859 = CHSI
  { 858,	2,	0,	6,	246,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x3800ULL, ImplicitList2, OperandInfo207 },  // Inst #858 = CHRL
  { 857,	2,	0,	4,	244,	0,	1,	0|(1ULL<<MCID::Compare), 0x3800ULL, ImplicitList2, OperandInfo206 },  // Inst #857 = CHLR
  { 856,	2,	0,	4,	220,	0,	1,	0|(1ULL<<MCID::Compare), 0x3800ULL, ImplicitList2, OperandInfo185 },  // Inst #856 = CHI
  { 855,	3,	0,	6,	249,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x3800ULL, ImplicitList2, OperandInfo121 },  // Inst #855 = CHHSI
  { 854,	2,	0,	4,	243,	0,	1,	0|(1ULL<<MCID::Compare), 0x3800ULL, ImplicitList2, OperandInfo205 },  // Inst #854 = CHHR
  { 853,	4,	0,	6,	225,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x388cULL, ImplicitList2, OperandInfo204 },  // Inst #853 = CHF
  { 852,	4,	0,	4,	245,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x3848ULL, ImplicitList2, OperandInfo167 },  // Inst #852 = CH
  { 851,	4,	1,	4,	482,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo203 },  // Inst #851 = CGXTRA
  { 850,	3,	1,	4,	482,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo202 },  // Inst #850 = CGXTR
  { 849,	3,	1,	4,	426,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo202 },  // Inst #849 = CGXR
  { 848,	4,	1,	4,	367,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo203 },  // Inst #848 = CGXBRA
  { 847,	3,	1,	4,	367,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo202 },  // Inst #847 = CGXBR
  { 846,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #846 = CGRTAsmNLH
  { 845,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #845 = CGRTAsmNLE
  { 844,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #844 = CGRTAsmNL
  { 843,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #843 = CGRTAsmNHE
  { 842,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #842 = CGRTAsmNH
  { 841,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #841 = CGRTAsmNE
  { 840,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #840 = CGRTAsmLH
  { 839,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #839 = CGRTAsmLE
  { 838,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #838 = CGRTAsmL
  { 837,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #837 = CGRTAsmHE
  { 836,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #836 = CGRTAsmH
  { 835,	2,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #835 = CGRTAsmE
  { 834,	3,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo64 },  // Inst #834 = CGRTAsm
  { 833,	3,	0,	4,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo64 },  // Inst #833 = CGRT
  { 832,	2,	0,	6,	222,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x3800ULL, ImplicitList2, OperandInfo193 },  // Inst #832 = CGRL
  { 831,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #831 = CGRJAsmNLH
  { 830,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #830 = CGRJAsmNLE
  { 829,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #829 = CGRJAsmNL
  { 828,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #828 = CGRJAsmNHE
  { 827,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #827 = CGRJAsmNH
  { 826,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #826 = CGRJAsmNE
  { 825,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #825 = CGRJAsmLH
  { 824,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #824 = CGRJAsmLE
  { 823,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #823 = CGRJAsmL
  { 822,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #822 = CGRJAsmHE
  { 821,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #821 = CGRJAsmH
  { 820,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo201 },  // Inst #820 = CGRJAsmE
  { 819,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo200 },  // Inst #819 = CGRJAsm
  { 818,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo200 },  // Inst #818 = CGRJ
  { 817,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #817 = CGRBAsmNLH
  { 816,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #816 = CGRBAsmNLE
  { 815,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #815 = CGRBAsmNL
  { 814,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #814 = CGRBAsmNHE
  { 813,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #813 = CGRBAsmNH
  { 812,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #812 = CGRBAsmNE
  { 811,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #811 = CGRBAsmLH
  { 810,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #810 = CGRBAsmLE
  { 809,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #809 = CGRBAsmL
  { 808,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #808 = CGRBAsmHE
  { 807,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #807 = CGRBAsmH
  { 806,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo199 },  // Inst #806 = CGRBAsmE
  { 805,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo198 },  // Inst #805 = CGRBAsm
  { 804,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo198 },  // Inst #804 = CGRB
  { 803,	2,	0,	4,	223,	0,	1,	0|(1ULL<<MCID::Compare), 0x3800ULL, ImplicitList2, OperandInfo149 },  // Inst #803 = CGR
  { 802,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #802 = CGITAsmNLH
  { 801,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #801 = CGITAsmNLE
  { 800,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #800 = CGITAsmNL
  { 799,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #799 = CGITAsmNHE
  { 798,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #798 = CGITAsmNH
  { 797,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #797 = CGITAsmNE
  { 796,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #796 = CGITAsmLH
  { 795,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #795 = CGITAsmLE
  { 794,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #794 = CGITAsmL
  { 793,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #793 = CGITAsmHE
  { 792,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #792 = CGITAsmH
  { 791,	2,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo122 },  // Inst #791 = CGITAsmE
  { 790,	3,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo62 },  // Inst #790 = CGITAsm
  { 789,	3,	0,	6,	14,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo62 },  // Inst #789 = CGIT
  { 788,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #788 = CGIJAsmNLH
  { 787,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #787 = CGIJAsmNLE
  { 786,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #786 = CGIJAsmNL
  { 785,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #785 = CGIJAsmNHE
  { 784,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #784 = CGIJAsmNH
  { 783,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #783 = CGIJAsmNE
  { 782,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #782 = CGIJAsmLH
  { 781,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #781 = CGIJAsmLE
  { 780,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #780 = CGIJAsmL
  { 779,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #779 = CGIJAsmHE
  { 778,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #778 = CGIJAsmH
  { 777,	3,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo197 },  // Inst #777 = CGIJAsmE
  { 776,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo196 },  // Inst #776 = CGIJAsm
  { 775,	4,	0,	6,	11,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo196 },  // Inst #775 = CGIJ
  { 774,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #774 = CGIBAsmNLH
  { 773,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #773 = CGIBAsmNLE
  { 772,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #772 = CGIBAsmNL
  { 771,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #771 = CGIBAsmNHE
  { 770,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #770 = CGIBAsmNH
  { 769,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #769 = CGIBAsmNE
  { 768,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #768 = CGIBAsmLH
  { 767,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #767 = CGIBAsmLE
  { 766,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #766 = CGIBAsmL
  { 765,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #765 = CGIBAsmHE
  { 764,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #764 = CGIBAsmH
  { 763,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo195 },  // Inst #763 = CGIBAsmE
  { 762,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo194 },  // Inst #762 = CGIBAsm
  { 761,	5,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo194 },  // Inst #761 = CGIB
  { 760,	3,	0,	6,	222,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x3800ULL, ImplicitList2, OperandInfo121 },  // Inst #760 = CGHSI
  { 759,	2,	0,	6,	248,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x3800ULL, ImplicitList2, OperandInfo193 },  // Inst #759 = CGHRL
  { 758,	2,	0,	4,	221,	0,	1,	0|(1ULL<<MCID::Compare), 0x3800ULL, ImplicitList2, OperandInfo122 },  // Inst #758 = CGHI
  { 757,	4,	0,	6,	247,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x384cULL, ImplicitList2, OperandInfo46 },  // Inst #757 = CGH
  { 756,	2,	0,	6,	251,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x3800ULL, ImplicitList2, OperandInfo193 },  // Inst #756 = CGFRL
  { 755,	2,	0,	4,	252,	0,	1,	0|(1ULL<<MCID::Compare), 0x3800ULL, ImplicitList2, OperandInfo192 },  // Inst #755 = CGFR
  { 754,	2,	0,	6,	221,	0,	1,	0|(1ULL<<MCID::Compare), 0x3800ULL, ImplicitList2, OperandInfo122 },  // Inst #754 = CGFI
  { 753,	4,	0,	6,	250,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x388cULL, ImplicitList2, OperandInfo46 },  // Inst #753 = CGF
  { 752,	3,	1,	4,	425,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo190 },  // Inst #752 = CGER
  { 751,	4,	1,	4,	366,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo191 },  // Inst #751 = CGEBRA
  { 750,	3,	1,	4,	366,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo190 },  // Inst #750 = CGEBR
  { 749,	4,	1,	4,	481,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo189 },  // Inst #749 = CGDTRA
  { 748,	3,	1,	4,	481,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo188 },  // Inst #748 = CGDTR
  { 747,	3,	1,	4,	425,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo188 },  // Inst #747 = CGDR
  { 746,	4,	1,	4,	366,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo189 },  // Inst #746 = CGDBRA
  { 745,	3,	1,	4,	366,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo188 },  // Inst #745 = CGDBR
  { 744,	4,	0,	6,	218,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x390cULL, ImplicitList2, OperandInfo46 },  // Inst #744 = CG
  { 743,	4,	1,	4,	892,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo187 },  // Inst #743 = CFXTR
  { 742,	3,	1,	4,	426,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo186 },  // Inst #742 = CFXR
  { 741,	4,	1,	4,	367,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo187 },  // Inst #741 = CFXBRA
  { 740,	3,	1,	4,	367,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo186 },  // Inst #740 = CFXBR
  { 739,	2,	0,	6,	220,	0,	1,	0|(1ULL<<MCID::Compare), 0x3800ULL, ImplicitList2, OperandInfo185 },  // Inst #739 = CFI
  { 738,	3,	1,	4,	425,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo183 },  // Inst #738 = CFER
  { 737,	4,	1,	4,	366,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo184 },  // Inst #737 = CFEBRA
  { 736,	3,	1,	4,	366,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo183 },  // Inst #736 = CFEBR
  { 735,	4,	1,	4,	891,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo182 },  // Inst #735 = CFDTR
  { 734,	3,	1,	4,	425,	0,	1,	0, 0x0ULL, ImplicitList2, OperandInfo181 },  // Inst #734 = CFDR
  { 733,	4,	1,	4,	366,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo182 },  // Inst #733 = CFDBRA
  { 732,	3,	1,	4,	366,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList1, OperandInfo181 },  // Inst #732 = CFDBR
  { 731,	2,	0,	4,	332,	3,	4,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList12, OperandInfo180 },  // Inst #731 = CFC
  { 730,	2,	0,	4,	523,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo96 },  // Inst #730 = CEXTR
  { 729,	2,	0,	2,	465,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo95 },  // Inst #729 = CER
  { 728,	4,	1,	4,	888,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo179 },  // Inst #728 = CELGBR
  { 727,	4,	1,	4,	888,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo177 },  // Inst #727 = CELFBR
  { 726,	2,	1,	4,	423,	0,	0,	0, 0x0ULL, nullptr, OperandInfo178 },  // Inst #726 = CEGR
  { 725,	4,	1,	4,	362,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo179 },  // Inst #725 = CEGBRA
  { 724,	2,	1,	4,	362,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo178 },  // Inst #724 = CEGBR
  { 723,	2,	1,	4,	423,	0,	0,	0, 0x0ULL, nullptr, OperandInfo176 },  // Inst #723 = CEFR
  { 722,	4,	1,	4,	362,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo177 },  // Inst #722 = CEFBRA
  { 721,	2,	1,	4,	362,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo176 },  // Inst #721 = CEFBR
  { 720,	2,	0,	4,	522,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo94 },  // Inst #720 = CEDTR
  { 719,	2,	0,	4,	403,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x3c00ULL, ImplicitList1, OperandInfo95 },  // Inst #719 = CEBR
  { 718,	4,	0,	6,	402,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x3c88ULL, ImplicitList1, OperandInfo175 },  // Inst #718 = CEB
  { 717,	4,	0,	4,	464,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x88ULL, ImplicitList2, OperandInfo175 },  // Inst #717 = CE
  { 716,	5,	1,	6,	489,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo173 },  // Inst #716 = CDZT
  { 715,	2,	1,	4,	485,	0,	0,	0, 0x0ULL, nullptr, OperandInfo171 },  // Inst #715 = CDUTR
  { 714,	2,	0,	4,	520,	1,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList1, OperandInfo94 },  // Inst #714 = CDTR
  { 713,	5,	1,	6,	275,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo174 },  // Inst #713 = CDSY
  { 712,	2,	1,	4,	485,	0,	0,	0, 0x0ULL, nullptr, OperandInfo171 },  // Inst #712 = CDSTR
  { 711,	5,	1,	6,	276,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x4ULL, ImplicitList2, OperandInfo174 },  // Inst #711 = CDSG
  { 710,	5,	1,	4,	275,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo174 },  // Inst #710 = CDS
  { 709,	2,	0,	2,	465,	0,	1,	0|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo94 },  // Inst #709 = CDR
  { 708,	5,	1,	6,	493,	0,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo173 },  // Inst #708 = CDPT
  { 707,	4,	1,	4,	478,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo172 },  // Inst #707 = CDLGTR
  { 706,	4,	1,	4,	364,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo172 },  // Inst #706 = CDLGBR
  { 705,	4,	1,	4,	477,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo170 },  // Inst #705 = CDLFTR
  { 704,	4,	1,	4,	364,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo170 },  // Inst #704 = CDLFBR
  { 703,	4,	1,	4,	474,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo172 },  // Inst #703 = CDGTRA
  { 702,	2,	1,	4,	474,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo171 },  // Inst #702 = CDGTR
  { 701,	2,	1,	4,	423,	0,	0,	0, 0x0ULL, nullptr, OperandInfo171 },  // Inst #701 = CDGR
  { 700,	4,	1,	4,	362,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo172 },  // Inst #700 = CDGBRA
  { 699,	2,	1,	4,	362,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo171 },  // Inst #699 = CDGBR
  { 698,	4,	1,	4,	473,	1,	0,	0, 0x0ULL, ImplicitList6, OperandInfo170 },  // Inst #698 = CDFTR
  { 697,	2,	1,	4,	423,	0,	0,	0, 0x0ULL, nullptr, OperandInfo169 },  // Inst #697 = CDFR
  { 696,	4,	1,	4,	362,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo170 },  // Inst #696 = CDFBRA
  { 695,	2,	1,	4,	362,	1,	0,	0|(1ULL<<MCID::MayRaiseFPException), 0x0ULL, ImplicitList6, OperandInfo169 },  // Inst #695 = CDFBR
  { 694,	2,	0,	4,	403,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayRaiseFPException), 0x3c00ULL, ImplicitList1, OperandInfo94 },  // Inst #694 = CDBR
  { 693,	4,	0,	6,	402,	1,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x3d08ULL, ImplicitList1, OperandInfo168 },  // Inst #693 = CDB
  { 692,	4,	0,	4,	464,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x108ULL, ImplicitList2, OperandInfo168 },  // Inst #692 = CD
  { 691,	4,	0,	4,	218,	0,	1,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::MayLoad), 0x3888ULL, ImplicitList2, OperandInfo167 },  // Inst #691 = C
  { 690,	5,	1,	6,	10,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x4ULL, nullptr, OperandInfo166 },  // Inst #690 = BXLEG
  { 689,	5,	1,	4,	10,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo165 },  // Inst #689 = BXLE
  { 688,	5,	1,	6,	10,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x4ULL, nullptr, OperandInfo166 },  // Inst #688 = BXHG
  { 687,	5,	1,	4,	10,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo165 },  // Inst #687 = BXH
  { 686,	2,	0,	2,	320,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo150 },  // Inst #686 = BSM
  { 685,	2,	1,	4,	820,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #685 = BSG
  { 684,	2,	1,	4,	820,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #684 = BSA
  { 683,	4,	1,	6,	10,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo164 },  // Inst #683 = BRXLG
  { 682,	4,	1,	4,	10,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo163 },  // Inst #682 = BRXLE
  { 681,	4,	1,	6,	10,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo164 },  // Inst #681 = BRXHG
  { 680,	4,	1,	4,	10,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo163 },  // Inst #680 = BRXH
  { 679,	3,	1,	6,	8,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo162 },  // Inst #679 = BRCTH
  { 678,	3,	1,	4,	7,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo161 },  // Inst #678 = BRCTG
  { 677,	3,	1,	4,	7,	0,	1,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo160 },  // Inst #677 = BRCT
  { 676,	2,	0,	6,	2,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo159 },  // Inst #676 = BRCLAsm
  { 675,	3,	0,	6,	2,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x40000ULL, ImplicitList2, OperandInfo76 },  // Inst #675 = BRCL
  { 674,	2,	0,	4,	2,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo159 },  // Inst #674 = BRCAsm
  { 673,	3,	0,	4,	2,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x40000ULL, ImplicitList2, OperandInfo76 },  // Inst #673 = BRC
  { 672,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #672 = BRAsmZ
  { 671,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #671 = BRAsmP
  { 670,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #670 = BRAsmO
  { 669,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #669 = BRAsmNZ
  { 668,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #668 = BRAsmNP
  { 667,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #667 = BRAsmNO
  { 666,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #666 = BRAsmNM
  { 665,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #665 = BRAsmNLH
  { 664,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #664 = BRAsmNLE
  { 663,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #663 = BRAsmNL
  { 662,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #662 = BRAsmNHE
  { 661,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #661 = BRAsmNH
  { 660,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #660 = BRAsmNE
  { 659,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #659 = BRAsmM
  { 658,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #658 = BRAsmLH
  { 657,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #657 = BRAsmLE
  { 656,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #656 = BRAsmL
  { 655,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #655 = BRAsmHE
  { 654,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #654 = BRAsmH
  { 653,	1,	0,	2,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo73 },  // Inst #653 = BRAsmE
  { 652,	3,	0,	6,	19,	0,	1,	0|(1ULL<<MCID::Call), 0x0ULL, ImplicitList2, OperandInfo158 },  // Inst #652 = BRASL
  { 651,	3,	0,	4,	18,	0,	1,	0|(1ULL<<MCID::Call), 0x0ULL, ImplicitList2, OperandInfo158 },  // Inst #651 = BRAS
  { 650,	1,	0,	2,	5,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo73 },  // Inst #650 = BR
  { 649,	3,	0,	6,	265,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo157 },  // Inst #649 = BPRP
  { 648,	5,	0,	6,	264,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo156 },  // Inst #648 = BPP
  { 647,	4,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo152 },  // Inst #647 = BICAsm
  { 646,	5,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0x4000cULL, ImplicitList2, OperandInfo151 },  // Inst #646 = BIC
  { 645,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #645 = BIAsmZ
  { 644,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #644 = BIAsmP
  { 643,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #643 = BIAsmO
  { 642,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #642 = BIAsmNZ
  { 641,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #641 = BIAsmNP
  { 640,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #640 = BIAsmNO
  { 639,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #639 = BIAsmNM
  { 638,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #638 = BIAsmNLH
  { 637,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #637 = BIAsmNLE
  { 636,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #636 = BIAsmNL
  { 635,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #635 = BIAsmNHE
  { 634,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #634 = BIAsmNH
  { 633,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #633 = BIAsmNE
  { 632,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #632 = BIAsmM
  { 631,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #631 = BIAsmLH
  { 630,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #630 = BIAsmLE
  { 629,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #629 = BIAsmL
  { 628,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #628 = BIAsmHE
  { 627,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #627 = BIAsmH
  { 626,	3,	0,	6,	6,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, ImplicitList2, OperandInfo148 },  // Inst #626 = BIAsmE
  { 625,	3,	0,	6,	6,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Terminator), 0xcULL, nullptr, OperandInfo148 },  // Inst #625 = BI
  { 624,	3,	1,	2,	9,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo155 },  // Inst #624 = BCTR
  { 623,	3,	1,	4,	9,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo138 },  // Inst #623 = BCTGR
  { 622,	5,	1,	6,	9,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0xcULL, nullptr, OperandInfo136 },  // Inst #622 = BCTG
  { 621,	5,	1,	4,	9,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x8ULL, nullptr, OperandInfo128 },  // Inst #621 = BCT
  { 620,	2,	0,	2,	4,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, OperandInfo154 },  // Inst #620 = BCRAsm
  { 619,	3,	0,	2,	4,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x40000ULL, ImplicitList2, OperandInfo153 },  // Inst #619 = BCR
  { 618,	4,	0,	4,	4,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo152 },  // Inst #618 = BCAsm
  { 617,	5,	0,	4,	4,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x40008ULL, ImplicitList2, OperandInfo151 },  // Inst #617 = BC
  { 616,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #616 = BAsmZ
  { 615,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #615 = BAsmP
  { 614,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #614 = BAsmO
  { 613,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #613 = BAsmNZ
  { 612,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #612 = BAsmNP
  { 611,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #611 = BAsmNO
  { 610,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #610 = BAsmNM
  { 609,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #609 = BAsmNLH
  { 608,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #608 = BAsmNLE
  { 607,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #607 = BAsmNL
  { 606,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #606 = BAsmNHE
  { 605,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #605 = BAsmNH
  { 604,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #604 = BAsmNE
  { 603,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #603 = BAsmM
  { 602,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #602 = BAsmLH
  { 601,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #601 = BAsmLE
  { 600,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #600 = BAsmL
  { 599,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #599 = BAsmHE
  { 598,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #598 = BAsmH
  { 597,	3,	0,	4,	5,	1,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator), 0x8ULL, ImplicitList2, OperandInfo148 },  // Inst #597 = BAsmE
  { 596,	2,	0,	2,	321,	0,	1,	0|(1ULL<<MCID::Call), 0x0ULL, ImplicitList2, OperandInfo150 },  // Inst #596 = BASSM
  { 595,	2,	0,	2,	20,	0,	1,	0|(1ULL<<MCID::Call), 0x0ULL, ImplicitList2, OperandInfo150 },  // Inst #595 = BASR
  { 594,	4,	0,	4,	20,	0,	1,	0|(1ULL<<MCID::Call), 0x8ULL, ImplicitList2, OperandInfo46 },  // Inst #594 = BAS
  { 593,	2,	0,	2,	317,	1,	1,	0|(1ULL<<MCID::Call), 0x0ULL, ImplicitList11, OperandInfo150 },  // Inst #593 = BALR
  { 592,	4,	0,	4,	317,	1,	1,	0|(1ULL<<MCID::Call), 0x8ULL, ImplicitList11, OperandInfo46 },  // Inst #592 = BAL
  { 591,	2,	0,	4,	822,	0,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo149 },  // Inst #591 = BAKR
  { 590,	3,	0,	4,	5,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x8ULL, nullptr, OperandInfo148 },  // Inst #590 = B
  { 589,	5,	1,	6,	103,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x203c8cULL, ImplicitList2, OperandInfo128 },  // Inst #589 = AY
  { 588,	4,	1,	4,	505,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo147 },  // Inst #588 = AXTRA
  { 587,	3,	1,	4,	505,	1,	1,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList1, OperandInfo146 },  // Inst #587 = AXTR
  { 586,	3,	1,	2,	440,	0,	1,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, OperandInfo145 },  // Inst #586 = AXR
  { 585,	3,	1,	4,	383,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x3fc00ULL, ImplicitList1, OperandInfo145 },  // Inst #585 = AXBR
  { 584,	3,	1,	2,	439,	0,	1,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, OperandInfo130 },  // Inst #584 = AWR
  { 583,	5,	1,	4,	438,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x108ULL, ImplicitList2, OperandInfo129 },  // Inst #583 = AW
  { 582,	3,	1,	2,	439,	0,	1,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, OperandInfo134 },  // Inst #582 = AUR
  { 581,	5,	1,	4,	438,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x88ULL, ImplicitList2, OperandInfo133 },  // Inst #581 = AU
  { 580,	3,	0,	6,	885,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x203c04ULL, ImplicitList2, OperandInfo121 },  // Inst #580 = ASI
  { 579,	3,	1,	4,	120,	0,	1,	0|(1ULL<<MCID::Commutable), 0x203c00ULL, ImplicitList2, OperandInfo143 },  // Inst #579 = ARK
  { 578,	3,	1,	2,	120,	0,	1,	0|(1ULL<<MCID::Commutable), 0x203c00ULL, ImplicitList2, OperandInfo142 },  // Inst #578 = AR
  { 577,	6,	0,	6,	304,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, OperandInfo144 },  // Inst #577 = AP
  { 576,	5,	1,	6,	113,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x103c8cULL, ImplicitList2, OperandInfo128 },  // Inst #576 = ALY
  { 575,	3,	1,	6,	123,	0,	0,	0, 0x0ULL, nullptr, OperandInfo141 },  // Inst #575 = ALSIHN
  { 574,	3,	1,	6,	123,	0,	1,	0, 0x103c00ULL, ImplicitList2, OperandInfo141 },  // Inst #574 = ALSIH
  { 573,	3,	0,	6,	885,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x103c04ULL, ImplicitList2, OperandInfo121 },  // Inst #573 = ALSI
  { 572,	3,	1,	4,	119,	0,	1,	0|(1ULL<<MCID::Commutable), 0x103c00ULL, ImplicitList2, OperandInfo143 },  // Inst #572 = ALRK
  { 571,	3,	1,	2,	119,	0,	1,	0|(1ULL<<MCID::Commutable), 0x103c00ULL, ImplicitList2, OperandInfo142 },  // Inst #571 = ALR
  { 570,	3,	1,	6,	114,	0,	1,	0, 0x103c00ULL, ImplicitList2, OperandInfo71 },  // Inst #570 = ALHSIK
  { 569,	3,	1,	4,	122,	0,	1,	0, 0x103c00ULL, ImplicitList2, OperandInfo140 },  // Inst #569 = ALHHLR
  { 568,	3,	1,	4,	121,	0,	1,	0, 0x103c00ULL, ImplicitList2, OperandInfo139 },  // Inst #568 = ALHHHR
  { 567,	3,	0,	6,	124,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x103c04ULL, ImplicitList2, OperandInfo121 },  // Inst #567 = ALGSI
  { 566,	3,	1,	4,	118,	0,	1,	0|(1ULL<<MCID::Commutable), 0x103c00ULL, ImplicitList2, OperandInfo105 },  // Inst #566 = ALGRK
  { 565,	3,	1,	4,	118,	0,	1,	0|(1ULL<<MCID::Commutable), 0x103c00ULL, ImplicitList2, OperandInfo138 },  // Inst #565 = ALGR
  { 564,	3,	1,	6,	116,	0,	1,	0, 0x103c00ULL, ImplicitList2, OperandInfo64 },  // Inst #564 = ALGHSIK
  { 563,	3,	1,	4,	117,	0,	1,	0, 0x103c00ULL, ImplicitList2, OperandInfo137 },  // Inst #563 = ALGFR
  { 562,	3,	1,	6,	117,	0,	1,	0, 0x103c00ULL, ImplicitList2, OperandInfo84 },  // Inst #562 = ALGFI
  { 561,	5,	1,	6,	886,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x103c8cULL, ImplicitList2, OperandInfo136 },  // Inst #561 = ALGF
  { 560,	5,	1,	6,	115,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x103d0cULL, ImplicitList2, OperandInfo136 },  // Inst #560 = ALG
  { 559,	3,	1,	6,	114,	0,	1,	0, 0x103c00ULL, ImplicitList2, OperandInfo135 },  // Inst #559 = ALFI
  { 558,	3,	1,	4,	126,	1,	1,	0, 0x103c00ULL, ImplicitList11, OperandInfo142 },  // Inst #558 = ALCR
  { 557,	3,	1,	4,	126,	1,	1,	0, 0x103c00ULL, ImplicitList11, OperandInfo138 },  // Inst #557 = ALCGR
  { 556,	5,	1,	6,	125,	1,	1,	0|(1ULL<<MCID::MayLoad), 0x103d0cULL, ImplicitList11, OperandInfo136 },  // Inst #556 = ALCG
  { 555,	5,	1,	6,	125,	1,	1,	0|(1ULL<<MCID::MayLoad), 0x103c8cULL, ImplicitList11, OperandInfo128 },  // Inst #555 = ALC
  { 554,	5,	1,	4,	113,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x103c88ULL, ImplicitList2, OperandInfo128 },  // Inst #554 = AL
  { 553,	3,	1,	6,	105,	0,	1,	0, 0x203c00ULL, ImplicitList2, OperandInfo141 },  // Inst #553 = AIH
  { 552,	5,	1,	6,	104,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x203c4cULL, ImplicitList2, OperandInfo128 },  // Inst #552 = AHY
  { 551,	3,	1,	6,	111,	0,	1,	0, 0x203c00ULL, ImplicitList2, OperandInfo71 },  // Inst #551 = AHIK
  { 550,	3,	1,	4,	111,	0,	1,	0, 0x203c00ULL, ImplicitList2, OperandInfo135 },  // Inst #550 = AHI
  { 549,	3,	1,	4,	122,	0,	1,	0, 0x203c00ULL, ImplicitList2, OperandInfo140 },  // Inst #549 = AHHLR
  { 548,	3,	1,	4,	121,	0,	1,	0, 0x203c00ULL, ImplicitList2, OperandInfo139 },  // Inst #548 = AHHHR
  { 547,	5,	1,	4,	104,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x203c48ULL, ImplicitList2, OperandInfo128 },  // Inst #547 = AH
  { 546,	3,	0,	6,	124,	0,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x203c04ULL, ImplicitList2, OperandInfo121 },  // Inst #546 = AGSI
  { 545,	3,	1,	4,	110,	0,	1,	0|(1ULL<<MCID::Commutable), 0x203c00ULL, ImplicitList2, OperandInfo105 },  // Inst #545 = AGRK
  { 544,	3,	1,	4,	110,	0,	1,	0|(1ULL<<MCID::Commutable), 0x203c00ULL, ImplicitList2, OperandInfo138 },  // Inst #544 = AGR
  { 543,	3,	1,	6,	109,	0,	1,	0, 0x203c00ULL, ImplicitList2, OperandInfo64 },  // Inst #543 = AGHIK
  { 542,	3,	1,	4,	109,	0,	1,	0, 0x203c00ULL, ImplicitList2, OperandInfo84 },  // Inst #542 = AGHI
  { 541,	5,	1,	6,	127,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x203c4cULL, ImplicitList2, OperandInfo136 },  // Inst #541 = AGH
  { 540,	3,	1,	4,	128,	0,	1,	0, 0x203c00ULL, ImplicitList2, OperandInfo137 },  // Inst #540 = AGFR
  { 539,	3,	1,	6,	108,	0,	1,	0, 0x203c00ULL, ImplicitList2, OperandInfo84 },  // Inst #539 = AGFI
  { 538,	5,	1,	6,	868,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x203c8cULL, ImplicitList2, OperandInfo136 },  // Inst #538 = AGF
  { 537,	5,	1,	6,	107,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x203d0cULL, ImplicitList2, OperandInfo136 },  // Inst #537 = AG
  { 536,	3,	1,	6,	106,	0,	1,	0, 0x203c00ULL, ImplicitList2, OperandInfo135 },  // Inst #536 = AFI
  { 535,	3,	1,	2,	439,	0,	1,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, OperandInfo134 },  // Inst #535 = AER
  { 534,	3,	1,	4,	382,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x3fc00ULL, ImplicitList1, OperandInfo134 },  // Inst #534 = AEBR
  { 533,	5,	1,	6,	381,	1,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x3fc88ULL, ImplicitList1, OperandInfo133 },  // Inst #533 = AEB
  { 532,	5,	1,	4,	438,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x88ULL, ImplicitList2, OperandInfo133 },  // Inst #532 = AE
  { 531,	4,	1,	4,	504,	1,	1,	0, 0x0ULL, ImplicitList1, OperandInfo132 },  // Inst #531 = ADTRA
  { 530,	3,	1,	4,	504,	1,	1,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList1, OperandInfo131 },  // Inst #530 = ADTR
  { 529,	3,	1,	2,	439,	0,	1,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, OperandInfo130 },  // Inst #529 = ADR
  { 528,	3,	1,	4,	382,	1,	1,	0|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable), 0x3fc00ULL, ImplicitList1, OperandInfo130 },  // Inst #528 = ADBR
  { 527,	5,	1,	6,	381,	1,	1,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x3fd08ULL, ImplicitList1, OperandInfo129 },  // Inst #527 = ADB
  { 526,	5,	1,	4,	438,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x108ULL, ImplicitList2, OperandInfo129 },  // Inst #526 = AD
  { 525,	5,	1,	4,	103,	0,	1,	0|(1ULL<<MCID::MayLoad), 0x203c88ULL, ImplicitList2, OperandInfo128 },  // Inst #525 = A
  { 524,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, OperandInfo48 },  // Inst #524 = ZEXT128
  { 523,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x23088ULL, ImplicitList2, OperandInfo52 },  // Inst #523 = X_MemFoldPseudo
  { 522,	0,	0,	0,	0,	2,	2,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList10, nullptr },  // Inst #522 = XPLINK_STACKALLOC
  { 521,	3,	1,	6,	173,	0,	1,	0|(1ULL<<MCID::Pseudo), 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #521 = XILF64
  { 520,	3,	1,	6,	172,	0,	1,	0|(1ULL<<MCID::Pseudo), 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #520 = XIHF64
  { 519,	3,	1,	0,	170,	0,	1,	0|(1ULL<<MCID::Pseudo), 0x23000ULL, ImplicitList2, OperandInfo49 },  // Inst #519 = XIFMux
  { 518,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x2310cULL, ImplicitList2, OperandInfo50 },  // Inst #518 = XG_MemFoldPseudo
  { 517,	5,	0,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo68 },  // Inst #517 = XCReg
  { 516,	5,	0,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo67 },  // Inst #516 = XCImm
  { 515,	4,	0,	6,	545,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo124 },  // Inst #515 = VST64
  { 514,	4,	0,	6,	545,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo123 },  // Inst #514 = VST32
  { 513,	3,	1,	6,	529,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo127 },  // Inst #513 = VLVGP32
  { 512,	2,	1,	6,	526,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo126 },  // Inst #512 = VLR64
  { 511,	2,	1,	6,	526,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo125 },  // Inst #511 = VLR32
  { 510,	4,	1,	6,	538,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo124 },  // Inst #510 = VL64
  { 509,	4,	1,	6,	538,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo123 },  // Inst #509 = VL32
  { 508,	0,	0,	4,	13,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #508 = Trap
  { 507,	2,	0,	0,	257,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo60 },  // Inst #507 = TMLMux
  { 506,	2,	0,	4,	261,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo122 },  // Inst #506 = TMLL64
  { 505,	2,	0,	4,	260,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo122 },  // Inst #505 = TMLH64
  { 504,	2,	0,	0,	257,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo60 },  // Inst #504 = TMHMux
  { 503,	2,	0,	4,	259,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo122 },  // Inst #503 = TMHL64
  { 502,	2,	0,	4,	258,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Compare), 0x0ULL, ImplicitList2, OperandInfo122 },  // Inst #502 = TMHH64
  { 501,	1,	0,	6,	21,	0,	2,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::Variadic), 0x0ULL, ImplicitList9, OperandInfo2 },  // Inst #501 = TLS_LDCALL
  { 500,	1,	0,	6,	21,	0,	2,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::Variadic), 0x0ULL, ImplicitList9, OperandInfo2 },  // Inst #500 = TLS_GDCALL
  { 499,	3,	0,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo121 },  // Inst #499 = TBEGIN_nofloat
  { 498,	0,	0,	2,	267,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #498 = Serialize
  { 497,	5,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo120 },  // Inst #497 = SelectVR64
  { 496,	5,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo119 },  // Inst #496 = SelectVR32
  { 495,	5,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo118 },  // Inst #495 = SelectVR128
  { 494,	5,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo117 },  // Inst #494 = SelectF64
  { 493,	5,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo116 },  // Inst #493 = SelectF32
  { 492,	5,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo115 },  // Inst #492 = SelectF128
  { 491,	5,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo114 },  // Inst #491 = Select64
  { 490,	5,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo113 },  // Inst #490 = Select32
  { 489,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x223c88ULL, ImplicitList2, OperandInfo52 },  // Inst #489 = S_MemFoldPseudo
  { 488,	4,	0,	0,	355,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x1eULL, nullptr, OperandInfo97 },  // Inst #488 = STX
  { 487,	5,	0,	0,	54,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x80080ULL, ImplicitList2, OperandInfo112 },  // Inst #487 = STOCMux
  { 486,	4,	0,	0,	48,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x8eULL, nullptr, OperandInfo69 },  // Inst #486 = STMux
  { 485,	4,	0,	0,	77,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x2cULL, nullptr, OperandInfo69 },  // Inst #485 = STHMux
  { 484,	4,	0,	0,	76,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x2cULL, nullptr, OperandInfo69 },  // Inst #484 = STCMux
  { 483,	4,	0,	0,	47,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x1eULL, nullptr, OperandInfo85 },  // Inst #483 = ST128
  { 482,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo72 },  // Inst #482 = SRSTLoop
  { 481,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x101c88ULL, ImplicitList2, OperandInfo52 },  // Inst #481 = SL_MemFoldPseudo
  { 480,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x101d0cULL, ImplicitList2, OperandInfo50 },  // Inst #480 = SLG_MemFoldPseudo
  { 479,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x223d0cULL, ImplicitList2, OperandInfo50 },  // Inst #479 = SG_MemFoldPseudo
  { 478,	5,	1,	0,	55,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x80000ULL, ImplicitList2, OperandInfo111 },  // Inst #478 = SELRMux
  { 477,	5,	1,	0,	0,	1,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x3fc88ULL, ImplicitList1, OperandInfo47 },  // Inst #477 = SEB_MemFoldPseudo
  { 476,	5,	1,	0,	0,	1,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x3fd08ULL, ImplicitList1, OperandInfo45 },  // Inst #476 = SDB_MemFoldPseudo
  { 475,	0,	0,	4,	22,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, nullptr },  // Inst #475 = Return_XPLINK
  { 474,	0,	0,	2,	22,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, nullptr },  // Inst #474 = Return
  { 473,	6,	1,	0,	216,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo110 },  // Inst #473 = RISBMux
  { 472,	6,	1,	6,	215,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo109 },  // Inst #472 = RISBLL
  { 471,	6,	1,	6,	215,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo108 },  // Inst #471 = RISBLH
  { 470,	6,	1,	6,	214,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo107 },  // Inst #470 = RISBHL
  { 469,	6,	1,	6,	214,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo106 },  // Inst #469 = RISBHH
  { 468,	1,	0,	0,	0,	1,	3,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList8, OperandInfo3 },  // Inst #468 = PROBED_STACKALLOC
  { 467,	3,	1,	0,	0,	1,	2,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList7, OperandInfo105 },  // Inst #467 = PROBED_ALLOCA
  { 466,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, OperandInfo104 },  // Inst #466 = PAIR128
  { 465,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x23088ULL, ImplicitList2, OperandInfo52 },  // Inst #465 = O_MemFoldPseudo
  { 464,	3,	1,	0,	159,	0,	1,	0|(1ULL<<MCID::Pseudo), 0x0ULL, ImplicitList2, OperandInfo49 },  // Inst #464 = OILMux
  { 463,	3,	1,	4,	165,	0,	1,	0|(1ULL<<MCID::Pseudo), 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #463 = OILL64
  { 462,	3,	1,	4,	164,	0,	1,	0|(1ULL<<MCID::Pseudo), 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #462 = OILH64
  { 461,	3,	1,	6,	163,	0,	1,	0|(1ULL<<MCID::Pseudo), 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #461 = OILF64
  { 460,	3,	1,	0,	159,	0,	1,	0|(1ULL<<MCID::Pseudo), 0x0ULL, ImplicitList2, OperandInfo49 },  // Inst #460 = OIHMux
  { 459,	3,	1,	4,	162,	0,	1,	0|(1ULL<<MCID::Pseudo), 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #459 = OIHL64
  { 458,	3,	1,	4,	161,	0,	1,	0|(1ULL<<MCID::Pseudo), 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #458 = OIHH64
  { 457,	3,	1,	6,	160,	0,	1,	0|(1ULL<<MCID::Pseudo), 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #457 = OIHF64
  { 456,	3,	1,	0,	159,	0,	1,	0|(1ULL<<MCID::Pseudo), 0x23000ULL, ImplicitList2, OperandInfo49 },  // Inst #456 = OIFMux
  { 455,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x2310cULL, ImplicitList2, OperandInfo50 },  // Inst #455 = OG_MemFoldPseudo
  { 454,	5,	0,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo68 },  // Inst #454 = OCReg
  { 453,	5,	0,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo67 },  // Inst #453 = OCImm
  { 452,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x23088ULL, ImplicitList2, OperandInfo52 },  // Inst #452 = N_MemFoldPseudo
  { 451,	3,	1,	0,	146,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::ConvertibleTo3Addr), 0x0ULL, ImplicitList2, OperandInfo49 },  // Inst #451 = NILMux
  { 450,	3,	1,	4,	153,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::ConvertibleTo3Addr), 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #450 = NILL64
  { 449,	3,	1,	4,	152,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::ConvertibleTo3Addr), 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #449 = NILH64
  { 448,	3,	1,	6,	151,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::ConvertibleTo3Addr), 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #448 = NILF64
  { 447,	3,	1,	0,	146,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::ConvertibleTo3Addr), 0x0ULL, ImplicitList2, OperandInfo49 },  // Inst #447 = NIHMux
  { 446,	3,	1,	4,	150,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::ConvertibleTo3Addr), 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #446 = NIHL64
  { 445,	3,	1,	4,	149,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::ConvertibleTo3Addr), 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #445 = NIHH64
  { 444,	3,	1,	6,	148,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::ConvertibleTo3Addr), 0x0ULL, ImplicitList2, OperandInfo84 },  // Inst #444 = NIHF64
  { 443,	3,	1,	0,	146,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::ConvertibleTo3Addr), 0x23000ULL, ImplicitList2, OperandInfo49 },  // Inst #443 = NIFMux
  { 442,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x2310cULL, ImplicitList2, OperandInfo50 },  // Inst #442 = NG_MemFoldPseudo
  { 441,	5,	0,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo68 },  // Inst #441 = NCReg
  { 440,	5,	0,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo67 },  // Inst #440 = NCImm
  { 439,	4,	0,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo103 },  // Inst #439 = MemsetRegReg
  { 438,	4,	0,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo102 },  // Inst #438 = MemsetRegImm
  { 437,	4,	0,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo101 },  // Inst #437 = MemsetImmReg
  { 436,	4,	0,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo100 },  // Inst #436 = MemsetImmImm
  { 435,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo72 },  // Inst #435 = MVSTLoop
  { 434,	5,	0,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo68 },  // Inst #434 = MVCReg
  { 433,	5,	0,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo67 },  // Inst #433 = MVCImm
  { 432,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x10cULL, ImplicitList2, OperandInfo50 },  // Inst #432 = MSGC_MemFoldPseudo
  { 431,	6,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x88ULL, ImplicitList6, OperandInfo99 },  // Inst #431 = MSEB_MemFoldPseudo
  { 430,	6,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x108ULL, ImplicitList6, OperandInfo98 },  // Inst #430 = MSDB_MemFoldPseudo
  { 429,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x8cULL, ImplicitList2, OperandInfo52 },  // Inst #429 = MSC_MemFoldPseudo
  { 428,	5,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x88ULL, ImplicitList6, OperandInfo47 },  // Inst #428 = MEEB_MemFoldPseudo
  { 427,	5,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x108ULL, ImplicitList6, OperandInfo45 },  // Inst #427 = MDB_MemFoldPseudo
  { 426,	6,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x88ULL, ImplicitList6, OperandInfo99 },  // Inst #426 = MAEB_MemFoldPseudo
  { 425,	6,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x108ULL, ImplicitList6, OperandInfo98 },  // Inst #425 = MADB_MemFoldPseudo
  { 424,	4,	1,	0,	353,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad), 0x1dULL, nullptr, OperandInfo97 },  // Inst #424 = LX
  { 423,	2,	0,	0,	0,	1,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList1, OperandInfo96 },  // Inst #423 = LTXBRCompare_VecPseudo
  { 422,	2,	0,	0,	0,	1,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList1, OperandInfo95 },  // Inst #422 = LTEBRCompare_VecPseudo
  { 421,	2,	0,	0,	0,	1,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList1, OperandInfo94 },  // Inst #421 = LTDBRCompare_VecPseudo
  { 420,	5,	1,	0,	50,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x80000ULL, ImplicitList2, OperandInfo93 },  // Inst #420 = LOCRMux
  { 419,	6,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x80ULL, ImplicitList2, OperandInfo92 },  // Inst #419 = LOCMux_MemFoldPseudo
  { 418,	6,	1,	0,	53,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x80080ULL, ImplicitList2, OperandInfo91 },  // Inst #418 = LOCMux
  { 417,	5,	1,	0,	52,	1,	0,	0|(1ULL<<MCID::Pseudo), 0x80000ULL, ImplicitList2, OperandInfo90 },  // Inst #417 = LOCHIMux
  { 416,	6,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x100ULL, ImplicitList2, OperandInfo89 },  // Inst #416 = LOCG_MemFoldPseudo
  { 415,	4,	1,	0,	33,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad), 0x8dULL, nullptr, OperandInfo69 },  // Inst #415 = LMux
  { 414,	2,	1,	0,	67,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo88 },  // Inst #414 = LLHRMux
  { 413,	4,	1,	0,	70,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x4cULL, nullptr, OperandInfo69 },  // Inst #413 = LLHMux
  { 412,	2,	1,	0,	66,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo88 },  // Inst #412 = LLCRMux
  { 411,	4,	1,	0,	69,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x2cULL, nullptr, OperandInfo69 },  // Inst #411 = LLCMux
  { 410,	4,	1,	0,	63,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x4cULL, nullptr, OperandInfo69 },  // Inst #410 = LHMux
  { 409,	2,	1,	0,	40,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo60 },  // Inst #409 = LHIMux
  { 408,	2,	1,	6,	732,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo87 },  // Inst #408 = LFER
  { 407,	2,	1,	6,	731,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo86 },  // Inst #407 = LEFR
  { 406,	4,	1,	0,	61,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x2cULL, nullptr, OperandInfo69 },  // Inst #406 = LBMux
  { 405,	4,	1,	0,	36,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::FoldableAsLoad)|(1ULL<<MCID::MayLoad), 0x1dULL, nullptr, OperandInfo85 },  // Inst #405 = L128
  { 404,	3,	1,	0,	96,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo49 },  // Inst #404 = IILMux
  { 403,	3,	1,	4,	102,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo84 },  // Inst #403 = IILL64
  { 402,	3,	1,	4,	101,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo84 },  // Inst #402 = IILH64
  { 401,	3,	1,	6,	100,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo84 },  // Inst #401 = IILF64
  { 400,	3,	1,	0,	96,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo49 },  // Inst #400 = IIHMux
  { 399,	3,	1,	4,	99,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo84 },  // Inst #399 = IIHL64
  { 398,	3,	1,	4,	98,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo84 },  // Inst #398 = IIHH64
  { 397,	3,	1,	6,	97,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo84 },  // Inst #397 = IIHF64
  { 396,	2,	1,	0,	96,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo60 },  // Inst #396 = IIFMux
  { 395,	1,	1,	6,	87,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo83 },  // Inst #395 = GOT
  { 394,	6,	0,	6,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo82 },  // Inst #394 = EXRL_Pseudo
  { 393,	5,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x88ULL, ImplicitList6, OperandInfo47 },  // Inst #393 = DEB_MemFoldPseudo
  { 392,	5,	1,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x108ULL, ImplicitList6, OperandInfo45 },  // Inst #392 = DDB_MemFoldPseudo
  { 391,	2,	0,	4,	13,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, OperandInfo10 },  // Inst #391 = CondTrap
  { 390,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo81 },  // Inst #390 = CondStoreF64Inv
  { 389,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo81 },  // Inst #389 = CondStoreF64
  { 388,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo80 },  // Inst #388 = CondStoreF32Inv
  { 387,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo80 },  // Inst #387 = CondStoreF32
  { 386,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo78 },  // Inst #386 = CondStore8MuxInv
  { 385,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo78 },  // Inst #385 = CondStore8Mux
  { 384,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo77 },  // Inst #384 = CondStore8Inv
  { 383,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo77 },  // Inst #383 = CondStore8
  { 382,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo79 },  // Inst #382 = CondStore64Inv
  { 381,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo79 },  // Inst #381 = CondStore64
  { 380,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo78 },  // Inst #380 = CondStore32MuxInv
  { 379,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo78 },  // Inst #379 = CondStore32Mux
  { 378,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo77 },  // Inst #378 = CondStore32Inv
  { 377,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo77 },  // Inst #377 = CondStore32
  { 376,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo78 },  // Inst #376 = CondStore16MuxInv
  { 375,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo78 },  // Inst #375 = CondStore16Mux
  { 374,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo77 },  // Inst #374 = CondStore16Inv
  { 373,	6,	0,	0,	0,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo77 },  // Inst #373 = CondStore16
  { 372,	2,	0,	4,	23,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Terminator), 0x40000ULL, ImplicitList2, OperandInfo10 },  // Inst #372 = CondReturn_XPLINK
  { 371,	2,	0,	2,	23,	1,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Terminator), 0x40000ULL, ImplicitList2, OperandInfo10 },  // Inst #371 = CondReturn
  { 370,	1,	0,	6,	3,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo75 },  // Inst #370 = CallJG
  { 369,	3,	0,	6,	2,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x40000ULL, nullptr, OperandInfo76 },  // Inst #369 = CallBRCL
  { 368,	1,	0,	8,	19,	1,	2,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::Variadic), 0x0ULL, ImplicitList5, OperandInfo75 },  // Inst #368 = CallBRASL_XPLINK64
  { 367,	1,	0,	6,	19,	1,	2,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::Variadic), 0x0ULL, ImplicitList3, OperandInfo75 },  // Inst #367 = CallBRASL
  { 366,	1,	0,	2,	5,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo73 },  // Inst #366 = CallBR
  { 365,	3,	0,	2,	4,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x40000ULL, nullptr, OperandInfo74 },  // Inst #365 = CallBCR
  { 364,	1,	0,	4,	20,	1,	2,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::Variadic), 0x0ULL, ImplicitList5, OperandInfo73 },  // Inst #364 = CallBASR_XPLINK64
  { 363,	1,	0,	4,	20,	1,	2,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call), 0x0ULL, ImplicitList4, OperandInfo73 },  // Inst #363 = CallBASR_STACKEXT
  { 362,	1,	0,	2,	20,	1,	2,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::Variadic), 0x0ULL, ImplicitList3, OperandInfo73 },  // Inst #362 = CallBASR
  { 361,	3,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo71 },  // Inst #361 = CRBReturn
  { 360,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo70 },  // Inst #360 = CRBCall
  { 359,	4,	0,	0,	218,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x388cULL, ImplicitList2, OperandInfo69 },  // Inst #359 = CMux
  { 358,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo72 },  // Inst #358 = CLSTLoop
  { 357,	3,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo71 },  // Inst #357 = CLRBReturn
  { 356,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo70 },  // Inst #356 = CLRBCall
  { 355,	4,	0,	0,	227,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x10388cULL, ImplicitList2, OperandInfo69 },  // Inst #355 = CLMux
  { 354,	3,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo66 },  // Inst #354 = CLIBReturn
  { 353,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo65 },  // Inst #353 = CLIBCall
  { 352,	3,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo64 },  // Inst #352 = CLGRBReturn
  { 351,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo63 },  // Inst #351 = CLGRBCall
  { 350,	3,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo62 },  // Inst #350 = CLGIBReturn
  { 349,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo61 },  // Inst #349 = CLGIBCall
  { 348,	2,	0,	0,	229,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Compare), 0x103800ULL, ImplicitList2, OperandInfo60 },  // Inst #348 = CLFIMux
  { 347,	5,	0,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo68 },  // Inst #347 = CLCReg
  { 346,	5,	0,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo67 },  // Inst #346 = CLCImm
  { 345,	3,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo66 },  // Inst #345 = CIBReturn
  { 344,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo65 },  // Inst #344 = CIBCall
  { 343,	2,	0,	0,	220,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Compare), 0x3800ULL, ImplicitList2, OperandInfo60 },  // Inst #343 = CHIMux
  { 342,	3,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo64 },  // Inst #342 = CGRBReturn
  { 341,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo63 },  // Inst #341 = CGRBCall
  { 340,	3,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo62 },  // Inst #340 = CGIBReturn
  { 339,	4,	0,	6,	12,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo61 },  // Inst #339 = CGIBCall
  { 338,	2,	0,	0,	220,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Compare), 0x3800ULL, ImplicitList2, OperandInfo60 },  // Inst #338 = CFIMux
  { 337,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x203c88ULL, ImplicitList2, OperandInfo52 },  // Inst #337 = A_MemFoldPseudo
  { 336,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo58 },  // Inst #336 = ATOMIC_SWAP_64
  { 335,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo59 },  // Inst #335 = ATOMIC_SWAP_32
  { 334,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo55 },  // Inst #334 = ATOMIC_SWAPW
  { 333,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo59 },  // Inst #333 = ATOMIC_LOAD_XR
  { 332,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #332 = ATOMIC_LOAD_XILF64
  { 331,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo56 },  // Inst #331 = ATOMIC_LOAD_XILF
  { 330,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #330 = ATOMIC_LOAD_XIHF64
  { 329,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo58 },  // Inst #329 = ATOMIC_LOAD_XGR
  { 328,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo58 },  // Inst #328 = ATOMIC_LOAD_UMIN_64
  { 327,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo59 },  // Inst #327 = ATOMIC_LOAD_UMIN_32
  { 326,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo58 },  // Inst #326 = ATOMIC_LOAD_UMAX_64
  { 325,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo59 },  // Inst #325 = ATOMIC_LOAD_UMAX_32
  { 324,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo59 },  // Inst #324 = ATOMIC_LOAD_SR
  { 323,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo58 },  // Inst #323 = ATOMIC_LOAD_SGR
  { 322,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo59 },  // Inst #322 = ATOMIC_LOAD_OR
  { 321,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #321 = ATOMIC_LOAD_OILL64
  { 320,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo56 },  // Inst #320 = ATOMIC_LOAD_OILL
  { 319,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #319 = ATOMIC_LOAD_OILH64
  { 318,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo56 },  // Inst #318 = ATOMIC_LOAD_OILH
  { 317,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #317 = ATOMIC_LOAD_OILF64
  { 316,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo56 },  // Inst #316 = ATOMIC_LOAD_OILF
  { 315,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #315 = ATOMIC_LOAD_OIHL64
  { 314,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #314 = ATOMIC_LOAD_OIHH64
  { 313,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #313 = ATOMIC_LOAD_OIHF64
  { 312,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo58 },  // Inst #312 = ATOMIC_LOAD_OGR
  { 311,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo59 },  // Inst #311 = ATOMIC_LOAD_NRi
  { 310,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo59 },  // Inst #310 = ATOMIC_LOAD_NR
  { 309,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo56 },  // Inst #309 = ATOMIC_LOAD_NILLi
  { 308,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #308 = ATOMIC_LOAD_NILL64i
  { 307,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #307 = ATOMIC_LOAD_NILL64
  { 306,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo56 },  // Inst #306 = ATOMIC_LOAD_NILL
  { 305,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo56 },  // Inst #305 = ATOMIC_LOAD_NILHi
  { 304,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #304 = ATOMIC_LOAD_NILH64i
  { 303,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #303 = ATOMIC_LOAD_NILH64
  { 302,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo56 },  // Inst #302 = ATOMIC_LOAD_NILH
  { 301,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo56 },  // Inst #301 = ATOMIC_LOAD_NILFi
  { 300,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #300 = ATOMIC_LOAD_NILF64i
  { 299,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #299 = ATOMIC_LOAD_NILF64
  { 298,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo56 },  // Inst #298 = ATOMIC_LOAD_NILF
  { 297,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #297 = ATOMIC_LOAD_NIHL64i
  { 296,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #296 = ATOMIC_LOAD_NIHL64
  { 295,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #295 = ATOMIC_LOAD_NIHH64i
  { 294,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #294 = ATOMIC_LOAD_NIHH64
  { 293,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #293 = ATOMIC_LOAD_NIHF64i
  { 292,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #292 = ATOMIC_LOAD_NIHF64
  { 291,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo58 },  // Inst #291 = ATOMIC_LOAD_NGRi
  { 290,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo58 },  // Inst #290 = ATOMIC_LOAD_NGR
  { 289,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo58 },  // Inst #289 = ATOMIC_LOAD_MIN_64
  { 288,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo59 },  // Inst #288 = ATOMIC_LOAD_MIN_32
  { 287,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo58 },  // Inst #287 = ATOMIC_LOAD_MAX_64
  { 286,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo59 },  // Inst #286 = ATOMIC_LOAD_MAX_32
  { 285,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo59 },  // Inst #285 = ATOMIC_LOAD_AR
  { 284,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo56 },  // Inst #284 = ATOMIC_LOAD_AHI
  { 283,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo58 },  // Inst #283 = ATOMIC_LOAD_AGR
  { 282,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #282 = ATOMIC_LOAD_AGHI
  { 281,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo57 },  // Inst #281 = ATOMIC_LOAD_AGFI
  { 280,	4,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo56 },  // Inst #280 = ATOMIC_LOAD_AFI
  { 279,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo55 },  // Inst #279 = ATOMIC_LOADW_XR
  { 278,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo54 },  // Inst #278 = ATOMIC_LOADW_XILF
  { 277,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo55 },  // Inst #277 = ATOMIC_LOADW_UMIN
  { 276,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo55 },  // Inst #276 = ATOMIC_LOADW_UMAX
  { 275,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo55 },  // Inst #275 = ATOMIC_LOADW_SR
  { 274,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo55 },  // Inst #274 = ATOMIC_LOADW_OR
  { 273,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo54 },  // Inst #273 = ATOMIC_LOADW_OILH
  { 272,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo55 },  // Inst #272 = ATOMIC_LOADW_NRi
  { 271,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo55 },  // Inst #271 = ATOMIC_LOADW_NR
  { 270,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo54 },  // Inst #270 = ATOMIC_LOADW_NILHi
  { 269,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo54 },  // Inst #269 = ATOMIC_LOADW_NILH
  { 268,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo55 },  // Inst #268 = ATOMIC_LOADW_MIN
  { 267,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo55 },  // Inst #267 = ATOMIC_LOADW_MAX
  { 266,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo55 },  // Inst #266 = ATOMIC_LOADW_AR
  { 265,	7,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x4ULL, ImplicitList2, OperandInfo54 },  // Inst #265 = ATOMIC_LOADW_AFI
  { 264,	8,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, OperandInfo53 },  // Inst #264 = ATOMIC_CMP_SWAPW
  { 263,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x103c88ULL, ImplicitList2, OperandInfo52 },  // Inst #263 = AL_MemFoldPseudo
  { 262,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x103d0cULL, ImplicitList2, OperandInfo50 },  // Inst #262 = ALG_MemFoldPseudo
  { 261,	3,	1,	0,	112,	0,	1,	0|(1ULL<<MCID::Pseudo), 0x203c00ULL, ImplicitList2, OperandInfo51 },  // Inst #261 = AHIMuxK
  { 260,	3,	1,	0,	112,	0,	1,	0|(1ULL<<MCID::Pseudo), 0x203c00ULL, ImplicitList2, OperandInfo49 },  // Inst #260 = AHIMux
  { 259,	5,	1,	0,	0,	0,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x203d0cULL, ImplicitList2, OperandInfo50 },  // Inst #259 = AG_MemFoldPseudo
  { 258,	3,	1,	0,	106,	0,	1,	0|(1ULL<<MCID::Pseudo), 0x203c00ULL, ImplicitList2, OperandInfo49 },  // Inst #258 = AFIMux
  { 257,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, OperandInfo48 },  // Inst #257 = AEXT128
  { 256,	5,	1,	0,	0,	1,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x3fc88ULL, ImplicitList1, OperandInfo47 },  // Inst #256 = AEB_MemFoldPseudo
  { 255,	4,	1,	0,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo46 },  // Inst #255 = ADJDYNALLOC
  { 254,	2,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo10 },  // Inst #254 = ADJCALLSTACKUP
  { 253,	2,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo10 },  // Inst #253 = ADJCALLSTACKDOWN
  { 252,	5,	1,	0,	0,	1,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayRaiseFPException), 0x3fd08ULL, ImplicitList1, OperandInfo45 },  // Inst #252 = ADB_MemFoldPseudo
  { 251,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo44 },  // Inst #251 = G_UBFX
  { 250,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo44 },  // Inst #250 = G_SBFX
  { 249,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #249 = G_VECREDUCE_UMIN
  { 248,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #248 = G_VECREDUCE_UMAX
  { 247,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #247 = G_VECREDUCE_SMIN
  { 246,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #246 = G_VECREDUCE_SMAX
  { 245,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #245 = G_VECREDUCE_XOR
  { 244,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #244 = G_VECREDUCE_OR
  { 243,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #243 = G_VECREDUCE_AND
  { 242,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #242 = G_VECREDUCE_MUL
  { 241,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #241 = G_VECREDUCE_ADD
  { 240,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #240 = G_VECREDUCE_FMIN
  { 239,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #239 = G_VECREDUCE_FMAX
  { 238,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #238 = G_VECREDUCE_FMUL
  { 237,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #237 = G_VECREDUCE_FADD
  { 236,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo40 },  // Inst #236 = G_VECREDUCE_SEQ_FMUL
  { 235,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo40 },  // Inst #235 = G_VECREDUCE_SEQ_FADD
  { 234,	3,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo22 },  // Inst #234 = G_BZERO
  { 233,	4,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo43 },  // Inst #233 = G_MEMSET
  { 232,	4,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo43 },  // Inst #232 = G_MEMMOVE
  { 231,	3,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo40 },  // Inst #231 = G_MEMCPY_INLINE
  { 230,	4,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo43 },  // Inst #230 = G_MEMCPY
  { 229,	2,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects)|(1ULL<<MCID::Convergent), 0x0ULL, nullptr, OperandInfo42 },  // Inst #229 = G_WRITE_REGISTER
  { 228,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects)|(1ULL<<MCID::Convergent), 0x0ULL, nullptr, OperandInfo21 },  // Inst #228 = G_READ_REGISTER
  { 227,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo25 },  // Inst #227 = G_STRICT_FSQRT
  { 226,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo19 },  // Inst #226 = G_STRICT_FMA
  { 225,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo18 },  // Inst #225 = G_STRICT_FREM
  { 224,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo18 },  // Inst #224 = G_STRICT_FDIV
  { 223,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo18 },  // Inst #223 = G_STRICT_FMUL
  { 222,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo18 },  // Inst #222 = G_STRICT_FSUB
  { 221,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayRaiseFPException)|(1ULL<<MCID::Commutable)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo18 },  // Inst #221 = G_STRICT_FADD
  { 220,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo26 },  // Inst #220 = G_DYN_STACKALLOC
  { 219,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo21 },  // Inst #219 = G_JUMP_TABLE
  { 218,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo21 },  // Inst #218 = G_BLOCK_ADDR
  { 217,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #217 = G_ADDRSPACE_CAST
  { 216,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #216 = G_FNEARBYINT
  { 215,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #215 = G_FRINT
  { 214,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #214 = G_FFLOOR
  { 213,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #213 = G_FSQRT
  { 212,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #212 = G_FSIN
  { 211,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #211 = G_FCOS
  { 210,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #210 = G_FCEIL
  { 209,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #209 = G_BITREVERSE
  { 208,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #208 = G_BSWAP
  { 207,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #207 = G_CTPOP
  { 206,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #206 = G_CTLZ_ZERO_UNDEF
  { 205,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #205 = G_CTLZ
  { 204,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #204 = G_CTTZ_ZERO_UNDEF
  { 203,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #203 = G_CTTZ
  { 202,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo41 },  // Inst #202 = G_SHUFFLE_VECTOR
  { 201,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo40 },  // Inst #201 = G_EXTRACT_VECTOR_ELT
  { 200,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo39 },  // Inst #200 = G_INSERT_VECTOR_ELT
  { 199,	3,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo38 },  // Inst #199 = G_BRJT
  { 198,	1,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo2 },  // Inst #198 = G_BR
  { 197,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #197 = G_LLROUND
  { 196,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #196 = G_LROUND
  { 195,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #195 = G_ABS
  { 194,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #194 = G_UMAX
  { 193,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #193 = G_UMIN
  { 192,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #192 = G_SMAX
  { 191,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #191 = G_SMIN
  { 190,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo33 },  // Inst #190 = G_PTRMASK
  { 189,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo33 },  // Inst #189 = G_PTR_ADD
  { 188,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #188 = G_FMAXIMUM
  { 187,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #187 = G_FMINIMUM
  { 186,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #186 = G_FMAXNUM_IEEE
  { 185,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #185 = G_FMINNUM_IEEE
  { 184,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #184 = G_FMAXNUM
  { 183,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #183 = G_FMINNUM
  { 182,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #182 = G_FCANONICALIZE
  { 181,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo32 },  // Inst #181 = G_IS_FPCLASS
  { 180,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo33 },  // Inst #180 = G_FCOPYSIGN
  { 179,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #179 = G_FABS
  { 178,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #178 = G_UITOFP
  { 177,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #177 = G_SITOFP
  { 176,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #176 = G_FPTOUI
  { 175,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #175 = G_FPTOSI
  { 174,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #174 = G_FPTRUNC
  { 173,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #173 = G_FPEXT
  { 172,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #172 = G_FNEG
  { 171,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #171 = G_FLOG10
  { 170,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #170 = G_FLOG2
  { 169,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #169 = G_FLOG
  { 168,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #168 = G_FEXP2
  { 167,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #167 = G_FEXP
  { 166,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo33 },  // Inst #166 = G_FPOWI
  { 165,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo18 },  // Inst #165 = G_FPOW
  { 164,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo18 },  // Inst #164 = G_FREM
  { 163,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo18 },  // Inst #163 = G_FDIV
  { 162,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo19 },  // Inst #162 = G_FMAD
  { 161,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo19 },  // Inst #161 = G_FMA
  { 160,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #160 = G_FMUL
  { 159,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo18 },  // Inst #159 = G_FSUB
  { 158,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #158 = G_FADD
  { 157,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo37 },  // Inst #157 = G_UDIVFIXSAT
  { 156,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo37 },  // Inst #156 = G_SDIVFIXSAT
  { 155,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo37 },  // Inst #155 = G_UDIVFIX
  { 154,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo37 },  // Inst #154 = G_SDIVFIX
  { 153,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo37 },  // Inst #153 = G_UMULFIXSAT
  { 152,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo37 },  // Inst #152 = G_SMULFIXSAT
  { 151,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo37 },  // Inst #151 = G_UMULFIX
  { 150,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo37 },  // Inst #150 = G_SMULFIX
  { 149,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo33 },  // Inst #149 = G_SSHLSAT
  { 148,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo33 },  // Inst #148 = G_USHLSAT
  { 147,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo18 },  // Inst #147 = G_SSUBSAT
  { 146,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo18 },  // Inst #146 = G_USUBSAT
  { 145,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #145 = G_SADDSAT
  { 144,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #144 = G_UADDSAT
  { 143,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #143 = G_SMULH
  { 142,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #142 = G_UMULH
  { 141,	4,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo30 },  // Inst #141 = G_SMULO
  { 140,	4,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo30 },  // Inst #140 = G_UMULO
  { 139,	5,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo36 },  // Inst #139 = G_SSUBE
  { 138,	4,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo30 },  // Inst #138 = G_SSUBO
  { 137,	5,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo36 },  // Inst #137 = G_SADDE
  { 136,	4,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo30 },  // Inst #136 = G_SADDO
  { 135,	5,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo36 },  // Inst #135 = G_USUBE
  { 134,	4,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo30 },  // Inst #134 = G_USUBO
  { 133,	5,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo36 },  // Inst #133 = G_UADDE
  { 132,	4,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo30 },  // Inst #132 = G_UADDO
  { 131,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo30 },  // Inst #131 = G_SELECT
  { 130,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo35 },  // Inst #130 = G_FCMP
  { 129,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo35 },  // Inst #129 = G_ICMP
  { 128,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo33 },  // Inst #128 = G_ROTL
  { 127,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo33 },  // Inst #127 = G_ROTR
  { 126,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo34 },  // Inst #126 = G_FSHR
  { 125,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo34 },  // Inst #125 = G_FSHL
  { 124,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo33 },  // Inst #124 = G_ASHR
  { 123,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo33 },  // Inst #123 = G_LSHR
  { 122,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo33 },  // Inst #122 = G_SHL
  { 121,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #121 = G_ZEXT
  { 120,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo17 },  // Inst #120 = G_SEXT_INREG
  { 119,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #119 = G_SEXT
  { 118,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo32 },  // Inst #118 = G_VAARG
  { 117,	1,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo20 },  // Inst #117 = G_VASTART
  { 116,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo21 },  // Inst #116 = G_FCONSTANT
  { 115,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo21 },  // Inst #115 = G_CONSTANT
  { 114,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #114 = G_TRUNC
  { 113,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #113 = G_ANYEXT
  { 112,	1,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects)|(1ULL<<MCID::Convergent), 0x0ULL, nullptr, OperandInfo2 },  // Inst #112 = G_INTRINSIC_W_SIDE_EFFECTS
  { 111,	1,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::Convergent), 0x0ULL, nullptr, OperandInfo2 },  // Inst #111 = G_INTRINSIC
  { 110,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, nullptr },  // Inst #110 = G_INVOKE_REGION_START
  { 109,	1,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo20 },  // Inst #109 = G_BRINDIRECT
  { 108,	2,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, OperandInfo21 },  // Inst #108 = G_BRCOND
  { 107,	2,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo10 },  // Inst #107 = G_FENCE
  { 106,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #106 = G_ATOMICRMW_UDEC_WRAP
  { 105,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #105 = G_ATOMICRMW_UINC_WRAP
  { 104,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #104 = G_ATOMICRMW_FMIN
  { 103,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #103 = G_ATOMICRMW_FMAX
  { 102,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #102 = G_ATOMICRMW_FSUB
  { 101,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #101 = G_ATOMICRMW_FADD
  { 100,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #100 = G_ATOMICRMW_UMIN
  { 99,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #99 = G_ATOMICRMW_UMAX
  { 98,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #98 = G_ATOMICRMW_MIN
  { 97,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #97 = G_ATOMICRMW_MAX
  { 96,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #96 = G_ATOMICRMW_XOR
  { 95,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #95 = G_ATOMICRMW_OR
  { 94,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #94 = G_ATOMICRMW_NAND
  { 93,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #93 = G_ATOMICRMW_AND
  { 92,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #92 = G_ATOMICRMW_SUB
  { 91,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #91 = G_ATOMICRMW_ADD
  { 90,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo31 },  // Inst #90 = G_ATOMICRMW_XCHG
  { 89,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo30 },  // Inst #89 = G_ATOMIC_CMPXCHG
  { 88,	5,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo29 },  // Inst #88 = G_ATOMIC_CMPXCHG_WITH_SUCCESS
  { 87,	5,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo28 },  // Inst #87 = G_INDEXED_STORE
  { 86,	2,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, OperandInfo23 },  // Inst #86 = G_STORE
  { 85,	5,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo27 },  // Inst #85 = G_INDEXED_ZEXTLOAD
  { 84,	5,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo27 },  // Inst #84 = G_INDEXED_SEXTLOAD
  { 83,	5,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo27 },  // Inst #83 = G_INDEXED_LOAD
  { 82,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo23 },  // Inst #82 = G_ZEXTLOAD
  { 81,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo23 },  // Inst #81 = G_SEXTLOAD
  { 80,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, OperandInfo23 },  // Inst #80 = G_LOAD
  { 79,	1,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo20 },  // Inst #79 = G_READCYCLECOUNTER
  { 78,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #78 = G_INTRINSIC_ROUNDEVEN
  { 77,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #77 = G_INTRINSIC_LRINT
  { 76,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #76 = G_INTRINSIC_ROUND
  { 75,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #75 = G_INTRINSIC_TRUNC
  { 74,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo26 },  // Inst #74 = G_INTRINSIC_FPTRUNC_ROUND
  { 73,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo25 },  // Inst #73 = G_FREEZE
  { 72,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #72 = G_BITCAST
  { 71,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #71 = G_INTTOPTR
  { 70,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo23 },  // Inst #70 = G_PTRTOINT
  { 69,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, OperandInfo23 },  // Inst #69 = G_CONCAT_VECTORS
  { 68,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, OperandInfo23 },  // Inst #68 = G_BUILD_VECTOR_TRUNC
  { 67,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, OperandInfo23 },  // Inst #67 = G_BUILD_VECTOR
  { 66,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, OperandInfo23 },  // Inst #66 = G_MERGE_VALUES
  { 65,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo24 },  // Inst #65 = G_INSERT
  { 64,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, OperandInfo23 },  // Inst #64 = G_UNMERGE_VALUES
  { 63,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo22 },  // Inst #63 = G_EXTRACT
  { 62,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo21 },  // Inst #62 = G_CONSTANT_POOL
  { 61,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo21 },  // Inst #61 = G_GLOBAL_VALUE
  { 60,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo21 },  // Inst #60 = G_FRAME_INDEX
  { 59,	1,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, OperandInfo20 },  // Inst #59 = G_PHI
  { 58,	1,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo20 },  // Inst #58 = G_IMPLICIT_DEF
  { 57,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #57 = G_XOR
  { 56,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #56 = G_OR
  { 55,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #55 = G_AND
  { 54,	4,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo19 },  // Inst #54 = G_UDIVREM
  { 53,	4,	2,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo19 },  // Inst #53 = G_SDIVREM
  { 52,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo18 },  // Inst #52 = G_UREM
  { 51,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo18 },  // Inst #51 = G_SREM
  { 50,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo18 },  // Inst #50 = G_UDIV
  { 49,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo18 },  // Inst #49 = G_SDIV
  { 48,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #48 = G_MUL
  { 47,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo18 },  // Inst #47 = G_SUB
  { 46,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, OperandInfo18 },  // Inst #46 = G_ADD
  { 45,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo17 },  // Inst #45 = G_ASSERT_ALIGN
  { 44,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo17 },  // Inst #44 = G_ASSERT_ZEXT
  { 43,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::PreISelOpcode)|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo17 },  // Inst #43 = G_ASSERT_SEXT
  { 42,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Meta)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #42 = MEMBARRIER
  { 41,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #41 = ICALL_BRANCH_FUNNEL
  { 40,	3,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo16 },  // Inst #40 = PATCHABLE_TYPED_EVENT_CALL
  { 39,	2,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo15 },  // Inst #39 = PATCHABLE_EVENT_CALL
  { 38,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #38 = PATCHABLE_TAIL_CALL
  { 37,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #37 = PATCHABLE_FUNCTION_EXIT
  { 36,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #36 = PATCHABLE_RET
  { 35,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #35 = PATCHABLE_FUNCTION_ENTER
  { 34,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #34 = PATCHABLE_OP
  { 33,	1,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Branch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo2 },  // Inst #33 = FAULTING_OP
  { 32,	2,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo14 },  // Inst #32 = LOCAL_ESCAPE
  { 31,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #31 = STATEPOINT
  { 30,	3,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo13 },  // Inst #30 = PREALLOCATED_ARG
  { 29,	1,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo3 },  // Inst #29 = PREALLOCATED_SETUP
  { 28,	1,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Rematerializable), 0x0ULL, nullptr, OperandInfo12 },  // Inst #28 = LOAD_STACK_GUARD
  { 27,	6,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo11 },  // Inst #27 = PATCHPOINT
  { 26,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #26 = FENTRY_CALL
  { 25,	2,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo10 },  // Inst #25 = STACKMAP
  { 24,	2,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Meta), 0x0ULL, nullptr, OperandInfo9 },  // Inst #24 = ARITH_FENCE
  { 23,	4,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Meta)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, OperandInfo8 },  // Inst #23 = PSEUDO_PROBE
  { 22,	1,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Meta), 0x0ULL, nullptr, OperandInfo3 },  // Inst #22 = LIFETIME_END
  { 21,	1,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Meta), 0x0ULL, nullptr, OperandInfo3 },  // Inst #21 = LIFETIME_START
  { 20,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr },  // Inst #20 = BUNDLE
  { 19,	2,	1,	0,	29,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo7 },  // Inst #19 = COPY
  { 18,	2,	1,	0,	32,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo7 },  // Inst #18 = REG_SEQUENCE
  { 17,	1,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Meta), 0x0ULL, nullptr, OperandInfo2 },  // Inst #17 = DBG_LABEL
  { 16,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Meta)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr },  // Inst #16 = DBG_PHI
  { 15,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Meta)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr },  // Inst #15 = DBG_INSTR_REF
  { 14,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Meta)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr },  // Inst #14 = DBG_VALUE_LIST
  { 13,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Meta)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr },  // Inst #13 = DBG_VALUE
  { 12,	3,	1,	0,	29,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo4 },  // Inst #12 = COPY_TO_REGCLASS
  { 11,	4,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo6 },  // Inst #11 = SUBREG_TO_REG
  { 10,	1,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Meta)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, OperandInfo2 },  // Inst #10 = IMPLICIT_DEF
  { 9,	4,	1,	0,	31,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo5 },  // Inst #9 = INSERT_SUBREG
  { 8,	3,	1,	0,	30,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, OperandInfo4 },  // Inst #8 = EXTRACT_SUBREG
  { 7,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Meta)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr },  // Inst #7 = KILL
  { 6,	1,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::NotDuplicable), 0x0ULL, nullptr, OperandInfo3 },  // Inst #6 = ANNOTATION_LABEL
  { 5,	1,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Meta)|(1ULL<<MCID::NotDuplicable), 0x0ULL, nullptr, OperandInfo3 },  // Inst #5 = GC_LABEL
  { 4,	1,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Meta)|(1ULL<<MCID::NotDuplicable), 0x0ULL, nullptr, OperandInfo3 },  // Inst #4 = EH_LABEL
  { 3,	1,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Meta)|(1ULL<<MCID::NotDuplicable), 0x0ULL, nullptr, OperandInfo3 },  // Inst #3 = CFI_INSTRUCTION
  { 2,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr },  // Inst #2 = INLINEASM_BR
  { 1,	0,	0,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr },  // Inst #1 = INLINEASM
  { 0,	1,	1,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, OperandInfo2 },  // Inst #0 = PHI
};


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
extern const char SystemZInstrNameData[] = {
  /* 0 */ "G_FLOG10\0"
  /* 9 */ "CU21\0"
  /* 14 */ "SAM31\0"
  /* 20 */ "CU41\0"
  /* 25 */ "CU12\0"
  /* 30 */ "IC32\0"
  /* 35 */ "LDE32\0"
  /* 41 */ "CondStoreF32\0"
  /* 54 */ "SelectF32\0"
  /* 64 */ "RISBG32\0"
  /* 72 */ "VL32\0"
  /* 77 */ "VLVGP32\0"
  /* 85 */ "LDR32\0"
  /* 91 */ "VLR32\0"
  /* 97 */ "SelectVR32\0"
  /* 108 */ "VST32\0"
  /* 114 */ "ATOMIC_LOAD_UMIN_32\0"
  /* 134 */ "ATOMIC_LOAD_MIN_32\0"
  /* 153 */ "ATOMIC_SWAP_32\0"
  /* 168 */ "LCDFR_32\0"
  /* 177 */ "LNDFR_32\0"
  /* 186 */ "LPDFR_32\0"
  /* 195 */ "ATOMIC_LOAD_UMAX_32\0"
  /* 215 */ "ATOMIC_LOAD_MAX_32\0"
  /* 234 */ "CondStore32\0"
  /* 246 */ "Select32\0"
  /* 255 */ "CU42\0"
  /* 260 */ "G_FLOG2\0"
  /* 268 */ "TRAP2\0"
  /* 274 */ "G_FEXP2\0"
  /* 282 */ "CU14\0"
  /* 287 */ "SAM24\0"
  /* 293 */ "CU24\0"
  /* 298 */ "IIHF64\0"
  /* 305 */ "ATOMIC_LOAD_NIHF64\0"
  /* 324 */ "ATOMIC_LOAD_OIHF64\0"
  /* 343 */ "ATOMIC_LOAD_XIHF64\0"
  /* 362 */ "IILF64\0"
  /* 369 */ "ATOMIC_LOAD_NILF64\0"
  /* 388 */ "ATOMIC_LOAD_OILF64\0"
  /* 407 */ "ATOMIC_LOAD_XILF64\0"
  /* 426 */ "CondStoreF64\0"
  /* 439 */ "SelectF64\0"
  /* 449 */ "IIHH64\0"
  /* 456 */ "ATOMIC_LOAD_NIHH64\0"
  /* 475 */ "ATOMIC_LOAD_OIHH64\0"
  /* 494 */ "TMHH64\0"
  /* 501 */ "IILH64\0"
  /* 508 */ "ATOMIC_LOAD_NILH64\0"
  /* 527 */ "ATOMIC_LOAD_OILH64\0"
  /* 546 */ "TMLH64\0"
  /* 553 */ "CallBRASL_XPLINK64\0"
  /* 572 */ "CallBASR_XPLINK64\0"
  /* 590 */ "IIHL64\0"
  /* 597 */ "ATOMIC_LOAD_NIHL64\0"
  /* 616 */ "ATOMIC_LOAD_OIHL64\0"
  /* 635 */ "TMHL64\0"
  /* 642 */ "IILL64\0"
  /* 649 */ "ATOMIC_LOAD_NILL64\0"
  /* 668 */ "ATOMIC_LOAD_OILL64\0"
  /* 687 */ "TMLL64\0"
  /* 694 */ "VL64\0"
  /* 699 */ "SAM64\0"
  /* 705 */ "VLR64\0"
  /* 711 */ "SelectVR64\0"
  /* 722 */ "VST64\0"
  /* 728 */ "ATOMIC_LOAD_UMIN_64\0"
  /* 748 */ "ATOMIC_LOAD_MIN_64\0"
  /* 767 */ "ATOMIC_SWAP_64\0"
  /* 782 */ "ATOMIC_LOAD_UMAX_64\0"
  /* 802 */ "ATOMIC_LOAD_MAX_64\0"
  /* 821 */ "CondStore64\0"
  /* 833 */ "Select64\0"
  /* 842 */ "TRAP4\0"
  /* 848 */ "CondStore16\0"
  /* 860 */ "SelectF128\0"
  /* 871 */ "L128\0"
  /* 876 */ "PAIR128\0"
  /* 884 */ "SelectVR128\0"
  /* 896 */ "ST128\0"
  /* 902 */ "AEXT128\0"
  /* 910 */ "ZEXT128\0"
  /* 918 */ "CondStore8\0"
  /* 929 */ "LAA\0"
  /* 933 */ "PROBED_ALLOCA\0"
  /* 947 */ "SLDA\0"
  /* 952 */ "SRDA\0"
  /* 957 */ "ESEA\0"
  /* 962 */ "LPTEA\0"
  /* 968 */ "VFA\0"
  /* 972 */ "SIGA\0"
  /* 977 */ "ECPGA\0"
  /* 983 */ "UNPKA\0"
  /* 989 */ "SPKA\0"
  /* 994 */ "SLA\0"
  /* 998 */ "VGFMA\0"
  /* 1004 */ "VFMA\0"
  /* 1009 */ "G_FMA\0"
  /* 1015 */ "G_STRICT_FMA\0"
  /* 1028 */ "KMA\0"
  /* 1032 */ "VFNMA\0"
  /* 1038 */ "NNPA\0"
  /* 1043 */ "PPA\0"
  /* 1047 */ "LEDBRA\0"
  /* 1054 */ "CFDBRA\0"
  /* 1061 */ "CGDBRA\0"
  /* 1068 */ "FIDBRA\0"
  /* 1075 */ "CFEBRA\0"
  /* 1082 */ "CGEBRA\0"
  /* 1089 */ "FIEBRA\0"
  /* 1096 */ "CDFBRA\0"
  /* 1103 */ "CEFBRA\0"
  /* 1110 */ "CXFBRA\0"
  /* 1117 */ "CDGBRA\0"
  /* 1124 */ "CEGBRA\0"
  /* 1131 */ "CXGBRA\0"
  /* 1138 */ "LDXBRA\0"
  /* 1145 */ "LEXBRA\0"
  /* 1152 */ "CFXBRA\0"
  /* 1159 */ "CGXBRA\0"
  /* 1166 */ "FIXBRA\0"
  /* 1173 */ "LRA\0"
  /* 1177 */ "VESRA\0"
  /* 1183 */ "VSRA\0"
  /* 1188 */ "ADTRA\0"
  /* 1194 */ "DDTRA\0"
  /* 1200 */ "CGDTRA\0"
  /* 1207 */ "MDTRA\0"
  /* 1213 */ "SDTRA\0"
  /* 1219 */ "CDGTRA\0"
  /* 1226 */ "CXGTRA\0"
  /* 1233 */ "AXTRA\0"
  /* 1239 */ "DXTRA\0"
  /* 1245 */ "CGXTRA\0"
  /* 1252 */ "MXTRA\0"
  /* 1258 */ "SXTRA\0"
  /* 1264 */ "LURA\0"
  /* 1269 */ "STURA\0"
  /* 1275 */ "BSA\0"
  /* 1279 */ "KDSA\0"
  /* 1284 */ "ESTA\0"
  /* 1289 */ "MSTA\0"
  /* 1294 */ "VA\0"
  /* 1297 */ "CPYA\0"
  /* 1302 */ "VGFMAB\0"
  /* 1309 */ "VESRAB\0"
  /* 1316 */ "VSRAB\0"
  /* 1322 */ "VAB\0"
  /* 1326 */ "LCBB\0"
  /* 1331 */ "VLBB\0"
  /* 1336 */ "VACCB\0"
  /* 1342 */ "VECB\0"
  /* 1347 */ "VLCB\0"
  /* 1352 */ "VSTRCB\0"
  /* 1359 */ "VFADB\0"
  /* 1365 */ "WFADB\0"
  /* 1371 */ "VFMADB\0"
  /* 1378 */ "WFMADB\0"
  /* 1385 */ "VFNMADB\0"
  /* 1393 */ "WFNMADB\0"
  /* 1401 */ "WFCDB\0"
  /* 1407 */ "VFLCDB\0"
  /* 1414 */ "WFLCDB\0"
  /* 1421 */ "TCDB\0"
  /* 1426 */ "VFDDB\0"
  /* 1432 */ "WFDDB\0"
  /* 1438 */ "VFCEDB\0"
  /* 1445 */ "WFCEDB\0"
  /* 1452 */ "VFCHEDB\0"
  /* 1460 */ "WFCHEDB\0"
  /* 1468 */ "VFKHEDB\0"
  /* 1476 */ "WFKHEDB\0"
  /* 1484 */ "VFKEDB\0"
  /* 1491 */ "WFKEDB\0"
  /* 1498 */ "VLEDB\0"
  /* 1504 */ "WLEDB\0"
  /* 1510 */ "VCGDB\0"
  /* 1516 */ "WCGDB\0"
  /* 1522 */ "VCLGDB\0"
  /* 1529 */ "WCLGDB\0"
  /* 1536 */ "VFCHDB\0"
  /* 1543 */ "WFCHDB\0"
  /* 1550 */ "VFKHDB\0"
  /* 1557 */ "WFKHDB\0"
  /* 1564 */ "VFTCIDB\0"
  /* 1572 */ "WFTCIDB\0"
  /* 1580 */ "VFIDB\0"
  /* 1586 */ "WFIDB\0"
  /* 1592 */ "WFKDB\0"
  /* 1598 */ "VSLDB\0"
  /* 1604 */ "VFMDB\0"
  /* 1610 */ "WFMDB\0"
  /* 1616 */ "VFMINDB\0"
  /* 1624 */ "WFMINDB\0"
  /* 1632 */ "VFLNDB\0"
  /* 1639 */ "WFLNDB\0"
  /* 1646 */ "VFPSODB\0"
  /* 1654 */ "WFPSODB\0"
  /* 1662 */ "VFLPDB\0"
  /* 1669 */ "WFLPDB\0"
  /* 1676 */ "VFSQDB\0"
  /* 1683 */ "WFSQDB\0"
  /* 1690 */ "VFSDB\0"
  /* 1696 */ "WFSDB\0"
  /* 1702 */ "VFMSDB\0"
  /* 1709 */ "WFMSDB\0"
  /* 1716 */ "VFNMSDB\0"
  /* 1724 */ "WFNMSDB\0"
  /* 1732 */ "VFMAXDB\0"
  /* 1740 */ "WFMAXDB\0"
  /* 1748 */ "LXDB\0"
  /* 1753 */ "MXDB\0"
  /* 1758 */ "VFAEB\0"
  /* 1764 */ "VMAEB\0"
  /* 1770 */ "TCEB\0"
  /* 1775 */ "VLDEB\0"
  /* 1781 */ "WLDEB\0"
  /* 1787 */ "MDEB\0"
  /* 1792 */ "VFEEB\0"
  /* 1798 */ "MEEB\0"
  /* 1803 */ "VCFEB\0"
  /* 1809 */ "WCFEB\0"
  /* 1815 */ "VCLFEB\0"
  /* 1822 */ "WCLFEB\0"
  /* 1829 */ "KEB\0"
  /* 1833 */ "VMALEB\0"
  /* 1840 */ "VMLEB\0"
  /* 1846 */ "VLEB\0"
  /* 1851 */ "VMEB\0"
  /* 1856 */ "VFENEB\0"
  /* 1863 */ "SQEB\0"
  /* 1868 */ "MSEB\0"
  /* 1873 */ "VSTEB\0"
  /* 1879 */ "LXEB\0"
  /* 1884 */ "VCEFB\0"
  /* 1890 */ "WCEFB\0"
  /* 1896 */ "VCELFB\0"
  /* 1903 */ "WCELFB\0"
  /* 1910 */ "VCDGB\0"
  /* 1916 */ "WCDGB\0"
  /* 1922 */ "VSEGB\0"
  /* 1928 */ "VCDLGB\0"
  /* 1935 */ "WCDLGB\0"
  /* 1942 */ "VAVGB\0"
  /* 1948 */ "VLVGB\0"
  /* 1954 */ "VMAHB\0"
  /* 1960 */ "VCHB\0"
  /* 1965 */ "VMALHB\0"
  /* 1972 */ "VMLHB\0"
  /* 1978 */ "VUPLHB\0"
  /* 1985 */ "VMHB\0"
  /* 1990 */ "VUPHB\0"
  /* 1996 */ "VMRHB\0"
  /* 2002 */ "VSCBIB\0"
  /* 2009 */ "CIB\0"
  /* 2013 */ "VLEIB\0"
  /* 2019 */ "CGIB\0"
  /* 2024 */ "CLGIB\0"
  /* 2030 */ "CLIB\0"
  /* 2035 */ "VREPIB\0"
  /* 2042 */ "VMALB\0"
  /* 2048 */ "PALB\0"
  /* 2053 */ "VECLB\0"
  /* 2059 */ "VAVGLB\0"
  /* 2066 */ "VCHLB\0"
  /* 2072 */ "VUPLLB\0"
  /* 2079 */ "VERLLB\0"
  /* 2086 */ "VMLB\0"
  /* 2091 */ "VMNLB\0"
  /* 2097 */ "VUPLB\0"
  /* 2103 */ "VMRLB\0"
  /* 2109 */ "VESRLB\0"
  /* 2116 */ "VSRLB\0"
  /* 2122 */ "VESLB\0"
  /* 2128 */ "VSLB\0"
  /* 2133 */ "PTLB\0"
  /* 2138 */ "VMXLB\0"
  /* 2144 */ "VGFMB\0"
  /* 2150 */ "VGMB\0"
  /* 2155 */ "VERIMB\0"
  /* 2162 */ "SRNMB\0"
  /* 2168 */ "VSUMB\0"
  /* 2174 */ "VMNB\0"
  /* 2179 */ "VMAOB\0"
  /* 2185 */ "VMALOB\0"
  /* 2192 */ "VMLOB\0"
  /* 2198 */ "VMOB\0"
  /* 2203 */ "VLREPB\0"
  /* 2210 */ "VREPB\0"
  /* 2216 */ "VLPB\0"
  /* 2221 */ "VCEQB\0"
  /* 2227 */ "CRB\0"
  /* 2231 */ "CGRB\0"
  /* 2236 */ "CLGRB\0"
  /* 2242 */ "CLRB\0"
  /* 2247 */ "VISTRB\0"
  /* 2254 */ "VFASB\0"
  /* 2260 */ "WFASB\0"
  /* 2266 */ "VFMASB\0"
  /* 2273 */ "WFMASB\0"
  /* 2280 */ "VFNMASB\0"
  /* 2288 */ "WFNMASB\0"
  /* 2296 */ "WFCSB\0"
  /* 2302 */ "VFLCSB\0"
  /* 2309 */ "WFLCSB\0"
  /* 2316 */ "VFDSB\0"
  /* 2322 */ "WFDSB\0"
  /* 2328 */ "VFCESB\0"
  /* 2335 */ "WFCESB\0"
  /* 2342 */ "VFCHESB\0"
  /* 2350 */ "WFCHESB\0"
  /* 2358 */ "VFKHESB\0"
  /* 2366 */ "WFKHESB\0"
  /* 2374 */ "VFKESB\0"
  /* 2381 */ "WFKESB\0"
  /* 2388 */ "VFCHSB\0"
  /* 2395 */ "WFCHSB\0"
  /* 2402 */ "VFKHSB\0"
  /* 2409 */ "WFKHSB\0"
  /* 2416 */ "VFTCISB\0"
  /* 2424 */ "WFTCISB\0"
  /* 2432 */ "VFISB\0"
  /* 2438 */ "WFISB\0"
  /* 2444 */ "WFKSB\0"
  /* 2450 */ "VFMSB\0"
  /* 2456 */ "WFMSB\0"
  /* 2462 */ "VFMINSB\0"
  /* 2470 */ "WFMINSB\0"
  /* 2478 */ "VFLNSB\0"
  /* 2485 */ "WFLNSB\0"
  /* 2492 */ "VFPSOSB\0"
  /* 2500 */ "WFPSOSB\0"
  /* 2508 */ "VFLPSB\0"
  /* 2515 */ "WFLPSB\0"
  /* 2522 */ "VFSQSB\0"
  /* 2529 */ "WFSQSB\0"
  /* 2536 */ "VSTRSB\0"
  /* 2543 */ "VFSSB\0"
  /* 2549 */ "WFSSB\0"
  /* 2555 */ "VFMSSB\0"
  /* 2562 */ "WFMSSB\0"
  /* 2569 */ "VFNMSSB\0"
  /* 2577 */ "WFNMSSB\0"
  /* 2585 */ "VSB\0"
  /* 2589 */ "VFMAXSB\0"
  /* 2597 */ "WFMAXSB\0"
  /* 2605 */ "VPOPCTB\0"
  /* 2613 */ "G_FSUB\0"
  /* 2620 */ "G_STRICT_FSUB\0"
  /* 2634 */ "G_ATOMICRMW_FSUB\0"
  /* 2651 */ "G_SUB\0"
  /* 2657 */ "G_ATOMICRMW_SUB\0"
  /* 2673 */ "VESRAVB\0"
  /* 2681 */ "VCVB\0"
  /* 2686 */ "VLGVB\0"
  /* 2692 */ "VERLLVB\0"
  /* 2700 */ "VESRLVB\0"
  /* 2708 */ "VESLVB\0"
  /* 2715 */ "WFAXB\0"
  /* 2721 */ "WFMAXB\0"
  /* 2728 */ "WFNMAXB\0"
  /* 2736 */ "WFCXB\0"
  /* 2742 */ "WFLCXB\0"
  /* 2749 */ "TCXB\0"
  /* 2754 */ "WFDXB\0"
  /* 2760 */ "WFCEXB\0"
  /* 2767 */ "WFCHEXB\0"
  /* 2775 */ "WFKHEXB\0"
  /* 2783 */ "WFKEXB\0"
  /* 2790 */ "WFCHXB\0"
  /* 2797 */ "WFKHXB\0"
  /* 2804 */ "WFTCIXB\0"
  /* 2812 */ "WFIXB\0"
  /* 2818 */ "WFKXB\0"
  /* 2824 */ "WFMXB\0"
  /* 2830 */ "VMXB\0"
  /* 2835 */ "WFMINXB\0"
  /* 2843 */ "WFLNXB\0"
  /* 2850 */ "WFPSOXB\0"
  /* 2858 */ "WFLPXB\0"
  /* 2865 */ "WFSQXB\0"
  /* 2872 */ "WFSXB\0"
  /* 2878 */ "WFMSXB\0"
  /* 2885 */ "WFNMSXB\0"
  /* 2893 */ "WFMAXXB\0"
  /* 2901 */ "VSTRCZB\0"
  /* 2909 */ "VFAEZB\0"
  /* 2916 */ "VFEEZB\0"
  /* 2923 */ "VLLEZB\0"
  /* 2930 */ "VFENEZB\0"
  /* 2938 */ "VCLZB\0"
  /* 2944 */ "VSTRSZB\0"
  /* 2952 */ "VCTZB\0"
  /* 2958 */ "IAC\0"
  /* 2962 */ "KMAC\0"
  /* 2967 */ "SAC\0"
  /* 2971 */ "VAC\0"
  /* 2975 */ "BC\0"
  /* 2978 */ "VACC\0"
  /* 2983 */ "VACCC\0"
  /* 2989 */ "PCC\0"
  /* 2993 */ "DFLTCC\0"
  /* 3000 */ "VEC\0"
  /* 3004 */ "CFC\0"
  /* 3008 */ "WFC\0"
  /* 3012 */ "LLGC\0"
  /* 3017 */ "MSGC\0"
  /* 3022 */ "BIC\0"
  /* 3026 */ "G_INTRINSIC\0"
  /* 3038 */ "SCKC\0"
  /* 3043 */ "STCKC\0"
  /* 3049 */ "MSGRKC\0"
  /* 3056 */ "MSRKC\0"
  /* 3062 */ "ALC\0"
  /* 3066 */ "CLC\0"
  /* 3070 */ "LLC\0"
  /* 3074 */ "VLC\0"
  /* 3078 */ "KMC\0"
  /* 3082 */ "TBEGINC\0"
  /* 3090 */ "G_FPTRUNC\0"
  /* 3100 */ "G_INTRINSIC_TRUNC\0"
  /* 3118 */ "G_TRUNC\0"
  /* 3126 */ "G_BUILD_VECTOR_TRUNC\0"
  /* 3147 */ "VNC\0"
  /* 3151 */ "PROBED_STACKALLOC\0"
  /* 3169 */ "XPLINK_STACKALLOC\0"
  /* 3187 */ "G_DYN_STACKALLOC\0"
  /* 3204 */ "ADJDYNALLOC\0"
  /* 3216 */ "STOC\0"
  /* 3221 */ "VOC\0"
  /* 3225 */ "EFPC\0"
  /* 3230 */ "LFPC\0"
  /* 3235 */ "SFPC\0"
  /* 3240 */ "STFPC\0"
  /* 3246 */ "BRC\0"
  /* 3250 */ "VSTRC\0"
  /* 3256 */ "LGSC\0"
  /* 3261 */ "STGSC\0"
  /* 3267 */ "MSC\0"
  /* 3271 */ "CMPSC\0"
  /* 3277 */ "STC\0"
  /* 3281 */ "MVC\0"
  /* 3285 */ "SVC\0"
  /* 3289 */ "XC\0"
  /* 3292 */ "G_FMAD\0"
  /* 3299 */ "G_INDEXED_SEXTLOAD\0"
  /* 3318 */ "G_SEXTLOAD\0"
  /* 3329 */ "G_INDEXED_ZEXTLOAD\0"
  /* 3348 */ "G_ZEXTLOAD\0"
  /* 3359 */ "G_INDEXED_LOAD\0"
  /* 3374 */ "G_LOAD\0"
  /* 3381 */ "CD\0"
  /* 3384 */ "G_VECREDUCE_FADD\0"
  /* 3401 */ "G_FADD\0"
  /* 3408 */ "G_VECREDUCE_SEQ_FADD\0"
  /* 3429 */ "G_STRICT_FADD\0"
  /* 3443 */ "G_ATOMICRMW_FADD\0"
  /* 3460 */ "G_VECREDUCE_ADD\0"
  /* 3476 */ "G_ADD\0"
  /* 3482 */ "G_PTR_ADD\0"
  /* 3492 */ "G_ATOMICRMW_ADD\0"
  /* 3508 */ "VLED\0"
  /* 3513 */ "PFD\0"
  /* 3517 */ "VFD\0"
  /* 3521 */ "VCGD\0"
  /* 3526 */ "VCLGD\0"
  /* 3532 */ "WFLLD\0"
  /* 3538 */ "VSLD\0"
  /* 3543 */ "KIMD\0"
  /* 3548 */ "KLMD\0"
  /* 3553 */ "G_ATOMICRMW_NAND\0"
  /* 3570 */ "G_VECREDUCE_AND\0"
  /* 3586 */ "G_AND\0"
  /* 3592 */ "G_ATOMICRMW_AND\0"
  /* 3608 */ "TEND\0"
  /* 3613 */ "LIFETIME_END\0"
  /* 3626 */ "G_BRCOND\0"
  /* 3635 */ "ETND\0"
  /* 3640 */ "G_LLROUND\0"
  /* 3650 */ "G_LROUND\0"
  /* 3659 */ "G_INTRINSIC_ROUND\0"
  /* 3677 */ "G_INTRINSIC_FPTRUNC_ROUND\0"
  /* 3703 */ "LPD\0"
  /* 3707 */ "SQD\0"
  /* 3711 */ "LOAD_STACK_GUARD\0"
  /* 3728 */ "VFLRD\0"
  /* 3734 */ "WFLRD\0"
  /* 3740 */ "VSRD\0"
  /* 3745 */ "MSD\0"
  /* 3749 */ "STD\0"
  /* 3753 */ "VCVD\0"
  /* 3758 */ "LXD\0"
  /* 3762 */ "MXD\0"
  /* 3766 */ "VFAE\0"
  /* 3771 */ "LAE\0"
  /* 3775 */ "VMAE\0"
  /* 3780 */ "PSEUDO_PROBE\0"
  /* 3793 */ "RRBE\0"
  /* 3798 */ "G_SSUBE\0"
  /* 3806 */ "G_USUBE\0"
  /* 3814 */ "TRACE\0"
  /* 3820 */ "VFCE\0"
  /* 3825 */ "G_FENCE\0"
  /* 3833 */ "ARITH_FENCE\0"
  /* 3845 */ "REG_SEQUENCE\0"
  /* 3858 */ "G_SADDE\0"
  /* 3866 */ "G_UADDE\0"
  /* 3874 */ "VLDE\0"
  /* 3879 */ "MDE\0"
  /* 3883 */ "G_FMINNUM_IEEE\0"
  /* 3898 */ "G_FMAXNUM_IEEE\0"
  /* 3913 */ "VFEE\0"
  /* 3918 */ "MEE\0"
  /* 3922 */ "VFCHE\0"
  /* 3928 */ "CIBAsmNHE\0"
  /* 3938 */ "CGIBAsmNHE\0"
  /* 3949 */ "CLGIBAsmNHE\0"
  /* 3961 */ "CLIBAsmNHE\0"
  /* 3972 */ "CRBAsmNHE\0"
  /* 3982 */ "CGRBAsmNHE\0"
  /* 3993 */ "CLGRBAsmNHE\0"
  /* 4005 */ "CLRBAsmNHE\0"
  /* 4016 */ "LOCAsmNHE\0"
  /* 4026 */ "STOCAsmNHE\0"
  /* 4037 */ "LOCGAsmNHE\0"
  /* 4048 */ "STOCGAsmNHE\0"
  /* 4060 */ "JGAsmNHE\0"
  /* 4069 */ "LOCFHAsmNHE\0"
  /* 4081 */ "STOCFHAsmNHE\0"
  /* 4094 */ "BIAsmNHE\0"
  /* 4103 */ "LOCHIAsmNHE\0"
  /* 4115 */ "LOCGHIAsmNHE\0"
  /* 4128 */ "LOCHHIAsmNHE\0"
  /* 4141 */ "CIJAsmNHE\0"
  /* 4151 */ "CGIJAsmNHE\0"
  /* 4162 */ "CLGIJAsmNHE\0"
  /* 4174 */ "CLIJAsmNHE\0"
  /* 4185 */ "CRJAsmNHE\0"
  /* 4195 */ "CGRJAsmNHE\0"
  /* 4206 */ "CLGRJAsmNHE\0"
  /* 4218 */ "CLRJAsmNHE\0"
  /* 4229 */ "BRAsmNHE\0"
  /* 4238 */ "LOCRAsmNHE\0"
  /* 4249 */ "LOCGRAsmNHE\0"
  /* 4261 */ "SELGRAsmNHE\0"
  /* 4273 */ "LOCFHRAsmNHE\0"
  /* 4286 */ "SELFHRAsmNHE\0"
  /* 4299 */ "SELRAsmNHE\0"
  /* 4310 */ "CLGTAsmNHE\0"
  /* 4321 */ "CITAsmNHE\0"
  /* 4331 */ "CLFITAsmNHE\0"
  /* 4343 */ "CGITAsmNHE\0"
  /* 4354 */ "CLGITAsmNHE\0"
  /* 4366 */ "CLTAsmNHE\0"
  /* 4376 */ "CRTAsmNHE\0"
  /* 4386 */ "CGRTAsmNHE\0"
  /* 4397 */ "CLGRTAsmNHE\0"
  /* 4409 */ "CLRTAsmNHE\0"
  /* 4420 */ "CIBAsmHE\0"
  /* 4429 */ "CGIBAsmHE\0"
  /* 4439 */ "CLGIBAsmHE\0"
  /* 4450 */ "CLIBAsmHE\0"
  /* 4460 */ "CRBAsmHE\0"
  /* 4469 */ "CGRBAsmHE\0"
  /* 4479 */ "CLGRBAsmHE\0"
  /* 4490 */ "CLRBAsmHE\0"
  /* 4500 */ "LOCAsmHE\0"
  /* 4509 */ "STOCAsmHE\0"
  /* 4519 */ "LOCGAsmHE\0"
  /* 4529 */ "STOCGAsmHE\0"
  /* 4540 */ "JGAsmHE\0"
  /* 4548 */ "LOCFHAsmHE\0"
  /* 4559 */ "STOCFHAsmHE\0"
  /* 4571 */ "BIAsmHE\0"
  /* 4579 */ "LOCHIAsmHE\0"
  /* 4590 */ "LOCGHIAsmHE\0"
  /* 4602 */ "LOCHHIAsmHE\0"
  /* 4614 */ "CIJAsmHE\0"
  /* 4623 */ "CGIJAsmHE\0"
  /* 4633 */ "CLGIJAsmHE\0"
  /* 4644 */ "CLIJAsmHE\0"
  /* 4654 */ "CRJAsmHE\0"
  /* 4663 */ "CGRJAsmHE\0"
  /* 4673 */ "CLGRJAsmHE\0"
  /* 4684 */ "CLRJAsmHE\0"
  /* 4694 */ "BRAsmHE\0"
  /* 4702 */ "LOCRAsmHE\0"
  /* 4712 */ "LOCGRAsmHE\0"
  /* 4723 */ "SELGRAsmHE\0"
  /* 4734 */ "LOCFHRAsmHE\0"
  /* 4746 */ "SELFHRAsmHE\0"
  /* 4758 */ "SELRAsmHE\0"
  /* 4768 */ "CLGTAsmHE\0"
  /* 4778 */ "CITAsmHE\0"
  /* 4787 */ "CLFITAsmHE\0"
  /* 4798 */ "CGITAsmHE\0"
  /* 4808 */ "CLGITAsmHE\0"
  /* 4819 */ "CLTAsmHE\0"
  /* 4828 */ "CRTAsmHE\0"
  /* 4837 */ "CGRTAsmHE\0"
  /* 4847 */ "CLGRTAsmHE\0"
  /* 4858 */ "CLRTAsmHE\0"
  /* 4868 */ "InsnRIE\0"
  /* 4876 */ "SIE\0"
  /* 4880 */ "STCKE\0"
  /* 4886 */ "ISKE\0"
  /* 4891 */ "SSKE\0"
  /* 4896 */ "VMALE\0"
  /* 4902 */ "G_JUMP_TABLE\0"
  /* 4915 */ "CLCLE\0"
  /* 4921 */ "MVCLE\0"
  /* 4927 */ "BUNDLE\0"
  /* 4934 */ "STFLE\0"
  /* 4940 */ "VMLE\0"
  /* 4945 */ "CIBAsmNLE\0"
  /* 4955 */ "CGIBAsmNLE\0"
  /* 4966 */ "CLGIBAsmNLE\0"
  /* 4978 */ "CLIBAsmNLE\0"
  /* 4989 */ "CRBAsmNLE\0"
  /* 4999 */ "CGRBAsmNLE\0"
  /* 5010 */ "CLGRBAsmNLE\0"
  /* 5022 */ "CLRBAsmNLE\0"
  /* 5033 */ "LOCAsmNLE\0"
  /* 5043 */ "STOCAsmNLE\0"
  /* 5054 */ "LOCGAsmNLE\0"
  /* 5065 */ "STOCGAsmNLE\0"
  /* 5077 */ "JGAsmNLE\0"
  /* 5086 */ "LOCFHAsmNLE\0"
  /* 5098 */ "STOCFHAsmNLE\0"
  /* 5111 */ "BIAsmNLE\0"
  /* 5120 */ "LOCHIAsmNLE\0"
  /* 5132 */ "LOCGHIAsmNLE\0"
  /* 5145 */ "LOCHHIAsmNLE\0"
  /* 5158 */ "CIJAsmNLE\0"
  /* 5168 */ "CGIJAsmNLE\0"
  /* 5179 */ "CLGIJAsmNLE\0"
  /* 5191 */ "CLIJAsmNLE\0"
  /* 5202 */ "CRJAsmNLE\0"
  /* 5212 */ "CGRJAsmNLE\0"
  /* 5223 */ "CLGRJAsmNLE\0"
  /* 5235 */ "CLRJAsmNLE\0"
  /* 5246 */ "BRAsmNLE\0"
  /* 5255 */ "LOCRAsmNLE\0"
  /* 5266 */ "LOCGRAsmNLE\0"
  /* 5278 */ "SELGRAsmNLE\0"
  /* 5290 */ "LOCFHRAsmNLE\0"
  /* 5303 */ "SELFHRAsmNLE\0"
  /* 5316 */ "SELRAsmNLE\0"
  /* 5327 */ "CLGTAsmNLE\0"
  /* 5338 */ "CITAsmNLE\0"
  /* 5348 */ "CLFITAsmNLE\0"
  /* 5360 */ "CGITAsmNLE\0"
  /* 5371 */ "CLGITAsmNLE\0"
  /* 5383 */ "CLTAsmNLE\0"
  /* 5393 */ "CRTAsmNLE\0"
  /* 5403 */ "CGRTAsmNLE\0"
  /* 5414 */ "CLGRTAsmNLE\0"
  /* 5426 */ "CLRTAsmNLE\0"
  /* 5437 */ "BXLE\0"
  /* 5442 */ "BRXLE\0"
  /* 5448 */ "CIBAsmLE\0"
  /* 5457 */ "CGIBAsmLE\0"
  /* 5467 */ "CLGIBAsmLE\0"
  /* 5478 */ "CLIBAsmLE\0"
  /* 5488 */ "CRBAsmLE\0"
  /* 5497 */ "CGRBAsmLE\0"
  /* 5507 */ "CLGRBAsmLE\0"
  /* 5518 */ "CLRBAsmLE\0"
  /* 5528 */ "LOCAsmLE\0"
  /* 5537 */ "STOCAsmLE\0"
  /* 5547 */ "LOCGAsmLE\0"
  /* 5557 */ "STOCGAsmLE\0"
  /* 5568 */ "JGAsmLE\0"
  /* 5576 */ "LOCFHAsmLE\0"
  /* 5587 */ "STOCFHAsmLE\0"
  /* 5599 */ "BIAsmLE\0"
  /* 5607 */ "LOCHIAsmLE\0"
  /* 5618 */ "LOCGHIAsmLE\0"
  /* 5630 */ "LOCHHIAsmLE\0"
  /* 5642 */ "CIJAsmLE\0"
  /* 5651 */ "CGIJAsmLE\0"
  /* 5661 */ "CLGIJAsmLE\0"
  /* 5672 */ "CLIJAsmLE\0"
  /* 5682 */ "CRJAsmLE\0"
  /* 5691 */ "CGRJAsmLE\0"
  /* 5701 */ "CLGRJAsmLE\0"
  /* 5712 */ "CLRJAsmLE\0"
  /* 5722 */ "BRAsmLE\0"
  /* 5730 */ "LOCRAsmLE\0"
  /* 5740 */ "LOCGRAsmLE\0"
  /* 5751 */ "SELGRAsmLE\0"
  /* 5762 */ "LOCFHRAsmLE\0"
  /* 5774 */ "SELFHRAsmLE\0"
  /* 5786 */ "SELRAsmLE\0"
  /* 5796 */ "CLGTAsmLE\0"
  /* 5806 */ "CITAsmLE\0"
  /* 5815 */ "CLFITAsmLE\0"
  /* 5826 */ "CGITAsmLE\0"
  /* 5836 */ "CLGITAsmLE\0"
  /* 5847 */ "CLTAsmLE\0"
  /* 5856 */ "CRTAsmLE\0"
  /* 5865 */ "CGRTAsmLE\0"
  /* 5875 */ "CLGRTAsmLE\0"
  /* 5886 */ "CLRTAsmLE\0"
  /* 5896 */ "VME\0"
  /* 5900 */ "VFENE\0"
  /* 5906 */ "G_MEMCPY_INLINE\0"
  /* 5922 */ "VONE\0"
  /* 5927 */ "CIBAsmNE\0"
  /* 5936 */ "CGIBAsmNE\0"
  /* 5946 */ "CLGIBAsmNE\0"
  /* 5957 */ "CLIBAsmNE\0"
  /* 5967 */ "CRBAsmNE\0"
  /* 5976 */ "CGRBAsmNE\0"
  /* 5986 */ "CLGRBAsmNE\0"
  /* 5997 */ "CLRBAsmNE\0"
  /* 6007 */ "LOCAsmNE\0"
  /* 6016 */ "STOCAsmNE\0"
  /* 6026 */ "LOCGAsmNE\0"
  /* 6036 */ "STOCGAsmNE\0"
  /* 6047 */ "JGAsmNE\0"
  /* 6055 */ "LOCFHAsmNE\0"
  /* 6066 */ "STOCFHAsmNE\0"
  /* 6078 */ "BIAsmNE\0"
  /* 6086 */ "LOCHIAsmNE\0"
  /* 6097 */ "LOCGHIAsmNE\0"
  /* 6109 */ "LOCHHIAsmNE\0"
  /* 6121 */ "CIJAsmNE\0"
  /* 6130 */ "CGIJAsmNE\0"
  /* 6140 */ "CLGIJAsmNE\0"
  /* 6151 */ "CLIJAsmNE\0"
  /* 6161 */ "CRJAsmNE\0"
  /* 6170 */ "CGRJAsmNE\0"
  /* 6180 */ "CLGRJAsmNE\0"
  /* 6191 */ "CLRJAsmNE\0"
  /* 6201 */ "BRAsmNE\0"
  /* 6209 */ "LOCRAsmNE\0"
  /* 6219 */ "LOCGRAsmNE\0"
  /* 6230 */ "SELGRAsmNE\0"
  /* 6241 */ "LOCFHRAsmNE\0"
  /* 6253 */ "SELFHRAsmNE\0"
  /* 6265 */ "SELRAsmNE\0"
  /* 6275 */ "CLGTAsmNE\0"
  /* 6285 */ "CITAsmNE\0"
  /* 6294 */ "CLFITAsmNE\0"
  /* 6305 */ "CGITAsmNE\0"
  /* 6315 */ "CLGITAsmNE\0"
  /* 6326 */ "CLTAsmNE\0"
  /* 6335 */ "CRTAsmNE\0"
  /* 6344 */ "CGRTAsmNE\0"
  /* 6354 */ "CLGRTAsmNE\0"
  /* 6365 */ "CLRTAsmNE\0"
  /* 6375 */ "LOCAL_ESCAPE\0"
  /* 6388 */ "SQE\0"
  /* 6392 */ "G_INDEXED_STORE\0"
  /* 6408 */ "G_STORE\0"
  /* 6416 */ "InsnRRE\0"
  /* 6424 */ "TRTRE\0"
  /* 6430 */ "MSE\0"
  /* 6434 */ "G_BITREVERSE\0"
  /* 6447 */ "InsnRSE\0"
  /* 6455 */ "InsnSSE\0"
  /* 6463 */ "CUSE\0"
  /* 6468 */ "IDTE\0"
  /* 6473 */ "CRDTE\0"
  /* 6479 */ "IPTE\0"
  /* 6484 */ "TRTE\0"
  /* 6489 */ "STE\0"
  /* 6493 */ "DBG_VALUE\0"
  /* 6503 */ "G_GLOBAL_VALUE\0"
  /* 6518 */ "G_MEMMOVE\0"
  /* 6528 */ "LPSWE\0"
  /* 6534 */ "LXE\0"
  /* 6538 */ "InsnRXE\0"
  /* 6546 */ "G_FREEZE\0"
  /* 6555 */ "G_FCANONICALIZE\0"
  /* 6571 */ "VLLEBRZE\0"
  /* 6580 */ "CIBAsmE\0"
  /* 6588 */ "CGIBAsmE\0"
  /* 6597 */ "CLGIBAsmE\0"
  /* 6607 */ "CLIBAsmE\0"
  /* 6616 */ "CRBAsmE\0"
  /* 6624 */ "CGRBAsmE\0"
  /* 6633 */ "CLGRBAsmE\0"
  /* 6643 */ "CLRBAsmE\0"
  /* 6652 */ "LOCAsmE\0"
  /* 6660 */ "STOCAsmE\0"
  /* 6669 */ "LOCGAsmE\0"
  /* 6678 */ "STOCGAsmE\0"
  /* 6688 */ "JGAsmE\0"
  /* 6695 */ "LOCFHAsmE\0"
  /* 6705 */ "STOCFHAsmE\0"
  /* 6716 */ "BIAsmE\0"
  /* 6723 */ "LOCHIAsmE\0"
  /* 6733 */ "LOCGHIAsmE\0"
  /* 6744 */ "LOCHHIAsmE\0"
  /* 6755 */ "CIJAsmE\0"
  /* 6763 */ "CGIJAsmE\0"
  /* 6772 */ "CLGIJAsmE\0"
  /* 6782 */ "CLIJAsmE\0"
  /* 6791 */ "CRJAsmE\0"
  /* 6799 */ "CGRJAsmE\0"
  /* 6808 */ "CLGRJAsmE\0"
  /* 6818 */ "CLRJAsmE\0"
  /* 6827 */ "BRAsmE\0"
  /* 6834 */ "LOCRAsmE\0"
  /* 6843 */ "LOCGRAsmE\0"
  /* 6853 */ "SELGRAsmE\0"
  /* 6863 */ "LOCFHRAsmE\0"
  /* 6874 */ "SELFHRAsmE\0"
  /* 6885 */ "SELRAsmE\0"
  /* 6894 */ "CLGTAsmE\0"
  /* 6903 */ "CITAsmE\0"
  /* 6911 */ "CLFITAsmE\0"
  /* 6921 */ "CGITAsmE\0"
  /* 6930 */ "CLGITAsmE\0"
  /* 6940 */ "CLTAsmE\0"
  /* 6948 */ "CRTAsmE\0"
  /* 6956 */ "CGRTAsmE\0"
  /* 6965 */ "CLGRTAsmE\0"
  /* 6975 */ "CLRTAsmE\0"
  /* 6984 */ "InsnE\0"
  /* 6990 */ "VGFMAF\0"
  /* 6997 */ "VESRAF\0"
  /* 7004 */ "VAF\0"
  /* 7008 */ "SACF\0"
  /* 7013 */ "VACCF\0"
  /* 7019 */ "VECF\0"
  /* 7024 */ "VLCF\0"
  /* 7029 */ "VSTRCF\0"
  /* 7036 */ "VFAEF\0"
  /* 7042 */ "VMAEF\0"
  /* 7048 */ "VSCEF\0"
  /* 7054 */ "G_CTLZ_ZERO_UNDEF\0"
  /* 7072 */ "G_CTTZ_ZERO_UNDEF\0"
  /* 7090 */ "G_IMPLICIT_DEF\0"
  /* 7105 */ "VFEEF\0"
  /* 7111 */ "VGEF\0"
  /* 7116 */ "VMALEF\0"
  /* 7123 */ "VMLEF\0"
  /* 7129 */ "VLEF\0"
  /* 7134 */ "VMEF\0"
  /* 7139 */ "VFENEF\0"
  /* 7146 */ "DBG_INSTR_REF\0"
  /* 7160 */ "VSTEF\0"
  /* 7166 */ "PTFF\0"
  /* 7171 */ "AGF\0"
  /* 7175 */ "CGF\0"
  /* 7179 */ "VSEGF\0"
  /* 7185 */ "ALGF\0"
  /* 7190 */ "CLGF\0"
  /* 7195 */ "LLGF\0"
  /* 7200 */ "SLGF\0"
  /* 7205 */ "VSUMGF\0"
  /* 7212 */ "LLZRGF\0"
  /* 7219 */ "DSGF\0"
  /* 7224 */ "MSGF\0"
  /* 7229 */ "LTGF\0"
  /* 7234 */ "VAVGF\0"
  /* 7240 */ "VLVGF\0"
  /* 7246 */ "VMAHF\0"
  /* 7252 */ "VCHF\0"
  /* 7257 */ "IIHF\0"
  /* 7262 */ "LLIHF\0"
  /* 7268 */ "NIHF\0"
  /* 7273 */ "OIHF\0"
  /* 7278 */ "XIHF\0"
  /* 7283 */ "VMALHF\0"
  /* 7290 */ "CLHF\0"
  /* 7295 */ "VMLHF\0"
  /* 7301 */ "VUPLHF\0"
  /* 7308 */ "VMHF\0"
  /* 7313 */ "VUPHF\0"
  /* 7319 */ "VMRHF\0"
  /* 7325 */ "VSCBIF\0"
  /* 7332 */ "VLEIF\0"
  /* 7338 */ "VREPIF\0"
  /* 7345 */ "STCKF\0"
  /* 7351 */ "VPKF\0"
  /* 7356 */ "VMALF\0"
  /* 7362 */ "VECLF\0"
  /* 7368 */ "VAVGLF\0"
  /* 7375 */ "VCHLF\0"
  /* 7381 */ "IILF\0"
  /* 7386 */ "LLILF\0"
  /* 7392 */ "ATOMIC_LOAD_NILF\0"
  /* 7409 */ "ATOMIC_LOAD_OILF\0"
  /* 7426 */ "ATOMIC_LOAD_XILF\0"
  /* 7443 */ "ATOMIC_LOADW_XILF\0"
  /* 7461 */ "VUPLLF\0"
  /* 7468 */ "VERLLF\0"
  /* 7475 */ "VMLF\0"
  /* 7480 */ "VMNLF\0"
  /* 7486 */ "VUPLF\0"
  /* 7492 */ "VMRLF\0"
  /* 7498 */ "VESRLF\0"
  /* 7505 */ "VESLF\0"
  /* 7511 */ "VMXLF\0"
  /* 7517 */ "VLLEZLF\0"
  /* 7525 */ "VGFMF\0"
  /* 7531 */ "PFMF\0"
  /* 7536 */ "VGMF\0"
  /* 7541 */ "VERIMF\0"
  /* 7548 */ "KMF\0"
  /* 7552 */ "VCNF\0"
  /* 7557 */ "VMNF\0"
  /* 7562 */ "VCRNF\0"
  /* 7568 */ "VMAOF\0"
  /* 7574 */ "VMALOF\0"
  /* 7581 */ "VMLOF\0"
  /* 7587 */ "VMOF\0"
  /* 7592 */ "VLREPF\0"
  /* 7599 */ "VLBRREPF\0"
  /* 7608 */ "VREPF\0"
  /* 7614 */ "SCKPF\0"
  /* 7620 */ "VLPF\0"
  /* 7625 */ "VCEQF\0"
  /* 7631 */ "VSUMQF\0"
  /* 7638 */ "VLEBRF\0"
  /* 7645 */ "VSTEBRF\0"
  /* 7653 */ "VLBRF\0"
  /* 7659 */ "VSTBRF\0"
  /* 7666 */ "VLERF\0"
  /* 7672 */ "VSTERF\0"
  /* 7679 */ "InsnRRF\0"
  /* 7687 */ "VISTRF\0"
  /* 7694 */ "LZRF\0"
  /* 7699 */ "VPKSF\0"
  /* 7705 */ "VPKLSF\0"
  /* 7712 */ "VSTRSF\0"
  /* 7719 */ "InsnSSF\0"
  /* 7727 */ "VSF\0"
  /* 7731 */ "VPOPCTF\0"
  /* 7739 */ "PTF\0"
  /* 7743 */ "CUUTF\0"
  /* 7749 */ "VESRAVF\0"
  /* 7757 */ "VLGVF\0"
  /* 7763 */ "VERLLVF\0"
  /* 7771 */ "VESRLVF\0"
  /* 7779 */ "VESLVF\0"
  /* 7786 */ "VMXF\0"
  /* 7791 */ "InsnRXF\0"
  /* 7799 */ "VSTRCZF\0"
  /* 7807 */ "VFAEZF\0"
  /* 7814 */ "VFEEZF\0"
  /* 7821 */ "VLLEZF\0"
  /* 7828 */ "VFENEZF\0"
  /* 7836 */ "VCLZF\0"
  /* 7842 */ "VLLEBRZF\0"
  /* 7851 */ "VSTRSZF\0"
  /* 7859 */ "VCTZF\0"
  /* 7865 */ "LAAG\0"
  /* 7870 */ "ECAG\0"
  /* 7875 */ "DIAG\0"
  /* 7880 */ "SLAG\0"
  /* 7885 */ "VGFMAG\0"
  /* 7892 */ "LRAG\0"
  /* 7897 */ "VESRAG\0"
  /* 7904 */ "STRAG\0"
  /* 7910 */ "LURAG\0"
  /* 7916 */ "VAG\0"
  /* 7920 */ "SLBG\0"
  /* 7925 */ "RISBG\0"
  /* 7931 */ "RNSBG\0"
  /* 7937 */ "ROSBG\0"
  /* 7943 */ "RXSBG\0"
  /* 7949 */ "VCVBG\0"
  /* 7955 */ "TRACG\0"
  /* 7961 */ "VACCG\0"
  /* 7967 */ "VECG\0"
  /* 7972 */ "ALCG\0"
  /* 7977 */ "VLCG\0"
  /* 7982 */ "LOCG\0"
  /* 7987 */ "STOCG\0"
  /* 7993 */ "VCDG\0"
  /* 7998 */ "LPDG\0"
  /* 8003 */ "VCVDG\0"
  /* 8009 */ "VSCEG\0"
  /* 8015 */ "VGEG\0"
  /* 8020 */ "VLEG\0"
  /* 8025 */ "BXLEG\0"
  /* 8031 */ "G_FNEG\0"
  /* 8038 */ "EXTRACT_SUBREG\0"
  /* 8053 */ "INSERT_SUBREG\0"
  /* 8067 */ "EREG\0"
  /* 8072 */ "G_SEXT_INREG\0"
  /* 8085 */ "SUBREG_TO_REG\0"
  /* 8099 */ "VSEG\0"
  /* 8104 */ "VSTEG\0"
  /* 8110 */ "EREGG\0"
  /* 8116 */ "LGG\0"
  /* 8120 */ "VAVGG\0"
  /* 8126 */ "VLVGG\0"
  /* 8132 */ "RISBHG\0"
  /* 8139 */ "VCHG\0"
  /* 8144 */ "G_ATOMIC_CMPXCHG\0"
  /* 8161 */ "G_ATOMICRMW_XCHG\0"
  /* 8178 */ "VMRHG\0"
  /* 8184 */ "BXHG\0"
  /* 8189 */ "BRXHG\0"
  /* 8195 */ "VSCBIG\0"
  /* 8202 */ "VLEIG\0"
  /* 8208 */ "VREPIG\0"
  /* 8215 */ "CallJG\0"
  /* 8222 */ "VPKG\0"
  /* 8227 */ "LAALG\0"
  /* 8233 */ "RISBLG\0"
  /* 8240 */ "VECLG\0"
  /* 8246 */ "VCDLG\0"
  /* 8252 */ "VAVGLG\0"
  /* 8259 */ "VCHLG\0"
  /* 8265 */ "VERLLG\0"
  /* 8272 */ "SLLG\0"
  /* 8277 */ "MLG\0"
  /* 8281 */ "VMNLG\0"
  /* 8287 */ "VMRLG\0"
  /* 8293 */ "VESRLG\0"
  /* 8300 */ "VESLG\0"
  /* 8306 */ "VMSLG\0"
  /* 8312 */ "LCTLG\0"
  /* 8318 */ "VMXLG\0"
  /* 8324 */ "BRXLG\0"
  /* 8330 */ "VGFMG\0"
  /* 8336 */ "VGMG\0"
  /* 8341 */ "VERIMG\0"
  /* 8348 */ "LMG\0"
  /* 8352 */ "STMG\0"
  /* 8357 */ "VSUMG\0"
  /* 8363 */ "LANG\0"
  /* 8368 */ "VMNG\0"
  /* 8373 */ "LAOG\0"
  /* 8378 */ "G_FLOG\0"
  /* 8385 */ "VLREPG\0"
  /* 8392 */ "VLBRREPG\0"
  /* 8401 */ "VREPG\0"
  /* 8407 */ "VLPG\0"
  /* 8412 */ "CSPG\0"
  /* 8417 */ "MVPG\0"
  /* 8422 */ "VCEQG\0"
  /* 8428 */ "VSUMQG\0"
  /* 8435 */ "G_VAARG\0"
  /* 8443 */ "PREALLOCATED_ARG\0"
  /* 8460 */ "VLEBRG\0"
  /* 8467 */ "VSTEBRG\0"
  /* 8475 */ "VLBRG\0"
  /* 8481 */ "VSTBRG\0"
  /* 8488 */ "VLERG\0"
  /* 8494 */ "VSTERG\0"
  /* 8501 */ "STURG\0"
  /* 8507 */ "LZRG\0"
  /* 8512 */ "BSG\0"
  /* 8516 */ "CSG\0"
  /* 8520 */ "CDSG\0"
  /* 8525 */ "LLGFSG\0"
  /* 8532 */ "VPKSG\0"
  /* 8538 */ "VPKLSG\0"
  /* 8545 */ "MSG\0"
  /* 8549 */ "VSG\0"
  /* 8553 */ "BCTG\0"
  /* 8558 */ "ECTG\0"
  /* 8563 */ "VPOPCTG\0"
  /* 8571 */ "BRCTG\0"
  /* 8577 */ "STCTG\0"
  /* 8583 */ "LTG\0"
  /* 8587 */ "NTSTG\0"
  /* 8593 */ "VESRAVG\0"
  /* 8601 */ "VAVG\0"
  /* 8606 */ "VLGVG\0"
  /* 8612 */ "VERLLVG\0"
  /* 8620 */ "VESRLVG\0"
  /* 8628 */ "VESLVG\0"
  /* 8635 */ "VLVG\0"
  /* 8640 */ "LRVG\0"
  /* 8645 */ "STRVG\0"
  /* 8651 */ "LAXG\0"
  /* 8656 */ "VMXG\0"
  /* 8661 */ "VLLEZG\0"
  /* 8668 */ "VCLZG\0"
  /* 8674 */ "VLLEBRZG\0"
  /* 8683 */ "VCTZG\0"
  /* 8689 */ "VGFMAH\0"
  /* 8696 */ "VMAH\0"
  /* 8701 */ "VESRAH\0"
  /* 8708 */ "VAH\0"
  /* 8712 */ "LBH\0"
  /* 8716 */ "VACCH\0"
  /* 8722 */ "VECH\0"
  /* 8727 */ "VFCH\0"
  /* 8732 */ "LLCH\0"
  /* 8737 */ "VLCH\0"
  /* 8742 */ "VSTRCH\0"
  /* 8749 */ "CSCH\0"
  /* 8754 */ "HSCH\0"
  /* 8759 */ "MSCH\0"
  /* 8764 */ "RSCH\0"
  /* 8769 */ "SSCH\0"
  /* 8774 */ "STSCH\0"
  /* 8780 */ "XSCH\0"
  /* 8785 */ "STCH\0"
  /* 8790 */ "VCH\0"
  /* 8794 */ "VFAEH\0"
  /* 8800 */ "VMAEH\0"
  /* 8806 */ "VFEEH\0"
  /* 8812 */ "VMALEH\0"
  /* 8819 */ "VMLEH\0"
  /* 8825 */ "VLEH\0"
  /* 8830 */ "VMEH\0"
  /* 8835 */ "VFENEH\0"
  /* 8842 */ "VSTEH\0"
  /* 8848 */ "LOCFH\0"
  /* 8854 */ "STOCFH\0"
  /* 8861 */ "LFH\0"
  /* 8865 */ "STFH\0"
  /* 8870 */ "AGH\0"
  /* 8874 */ "CGH\0"
  /* 8878 */ "VSEGH\0"
  /* 8884 */ "LLGH\0"
  /* 8889 */ "VSUMGH\0"
  /* 8896 */ "SGH\0"
  /* 8900 */ "VAVGH\0"
  /* 8906 */ "VLVGH\0"
  /* 8912 */ "VMAHH\0"
  /* 8918 */ "RISBHH\0"
  /* 8925 */ "VCHH\0"
  /* 8930 */ "IIHH\0"
  /* 8935 */ "LLIHH\0"
  /* 8941 */ "NIHH\0"
  /* 8946 */ "OIHH\0"
  /* 8951 */ "VMALHH\0"
  /* 8958 */ "LLHH\0"
  /* 8963 */ "VMLHH\0"
  /* 8969 */ "VUPLHH\0"
  /* 8976 */ "TMHH\0"
  /* 8981 */ "VMHH\0"
  /* 8986 */ "VUPHH\0"
  /* 8992 */ "VMRHH\0"
  /* 8998 */ "STHH\0"
  /* 9003 */ "AIH\0"
  /* 9007 */ "VSCBIH\0"
  /* 9014 */ "CIH\0"
  /* 9018 */ "VLEIH\0"
  /* 9024 */ "CLIH\0"
  /* 9029 */ "VREPIH\0"
  /* 9036 */ "ALSIH\0"
  /* 9042 */ "VPKH\0"
  /* 9047 */ "VMALH\0"
  /* 9053 */ "RISBLH\0"
  /* 9060 */ "VECLH\0"
  /* 9066 */ "VAVGLH\0"
  /* 9073 */ "VCHLH\0"
  /* 9079 */ "IILH\0"
  /* 9084 */ "LLILH\0"
  /* 9090 */ "ATOMIC_LOAD_NILH\0"
  /* 9107 */ "ATOMIC_LOADW_NILH\0"
  /* 9125 */ "ATOMIC_LOAD_OILH\0"
  /* 9142 */ "ATOMIC_LOADW_OILH\0"
  /* 9160 */ "VUPLLH\0"
  /* 9167 */ "VERLLH\0"
  /* 9174 */ "TMLH\0"
  /* 9179 */ "VMLH\0"
  /* 9184 */ "VMNLH\0"
  /* 9190 */ "CIBAsmNLH\0"
  /* 9200 */ "CGIBAsmNLH\0"
  /* 9211 */ "CLGIBAsmNLH\0"
  /* 9223 */ "CLIBAsmNLH\0"
  /* 9234 */ "CRBAsmNLH\0"
  /* 9244 */ "CGRBAsmNLH\0"
  /* 9255 */ "CLGRBAsmNLH\0"
  /* 9267 */ "CLRBAsmNLH\0"
  /* 9278 */ "LOCAsmNLH\0"
  /* 9288 */ "STOCAsmNLH\0"
  /* 9299 */ "LOCGAsmNLH\0"
  /* 9310 */ "STOCGAsmNLH\0"
  /* 9322 */ "JGAsmNLH\0"
  /* 9331 */ "LOCFHAsmNLH\0"
  /* 9343 */ "STOCFHAsmNLH\0"
  /* 9356 */ "BIAsmNLH\0"
  /* 9365 */ "LOCHIAsmNLH\0"
  /* 9377 */ "LOCGHIAsmNLH\0"
  /* 9390 */ "LOCHHIAsmNLH\0"
  /* 9403 */ "CIJAsmNLH\0"
  /* 9413 */ "CGIJAsmNLH\0"
  /* 9424 */ "CLGIJAsmNLH\0"
  /* 9436 */ "CLIJAsmNLH\0"
  /* 9447 */ "CRJAsmNLH\0"
  /* 9457 */ "CGRJAsmNLH\0"
  /* 9468 */ "CLGRJAsmNLH\0"
  /* 9480 */ "CLRJAsmNLH\0"
  /* 9491 */ "BRAsmNLH\0"
  /* 9500 */ "LOCRAsmNLH\0"
  /* 9511 */ "LOCGRAsmNLH\0"
  /* 9523 */ "SELGRAsmNLH\0"
  /* 9535 */ "LOCFHRAsmNLH\0"
  /* 9548 */ "SELFHRAsmNLH\0"
  /* 9561 */ "SELRAsmNLH\0"
  /* 9572 */ "CLGTAsmNLH\0"
  /* 9583 */ "CITAsmNLH\0"
  /* 9593 */ "CLFITAsmNLH\0"
  /* 9605 */ "CGITAsmNLH\0"
  /* 9616 */ "CLGITAsmNLH\0"
  /* 9628 */ "CLTAsmNLH\0"
  /* 9638 */ "CRTAsmNLH\0"
  /* 9648 */ "CGRTAsmNLH\0"
  /* 9659 */ "CLGRTAsmNLH\0"
  /* 9671 */ "CLRTAsmNLH\0"
  /* 9682 */ "VUPLH\0"
  /* 9688 */ "VMRLH\0"
  /* 9694 */ "VESRLH\0"
  /* 9701 */ "VESLH\0"
  /* 9707 */ "G_SMULH\0"
  /* 9715 */ "G_UMULH\0"
  /* 9723 */ "VMXLH\0"
  /* 9729 */ "CIBAsmLH\0"
  /* 9738 */ "CGIBAsmLH\0"
  /* 9748 */ "CLGIBAsmLH\0"
  /* 9759 */ "CLIBAsmLH\0"
  /* 9769 */ "CRBAsmLH\0"
  /* 9778 */ "CGRBAsmLH\0"
  /* 9788 */ "CLGRBAsmLH\0"
  /* 9799 */ "CLRBAsmLH\0"
  /* 9809 */ "LOCAsmLH\0"
  /* 9818 */ "STOCAsmLH\0"
  /* 9828 */ "LOCGAsmLH\0"
  /* 9838 */ "STOCGAsmLH\0"
  /* 9849 */ "JGAsmLH\0"
  /* 9857 */ "LOCFHAsmLH\0"
  /* 9868 */ "STOCFHAsmLH\0"
  /* 9880 */ "BIAsmLH\0"
  /* 9888 */ "LOCHIAsmLH\0"
  /* 9899 */ "LOCGHIAsmLH\0"
  /* 9911 */ "LOCHHIAsmLH\0"
  /* 9923 */ "CIJAsmLH\0"
  /* 9932 */ "CGIJAsmLH\0"
  /* 9942 */ "CLGIJAsmLH\0"
  /* 9953 */ "CLIJAsmLH\0"
  /* 9963 */ "CRJAsmLH\0"
  /* 9972 */ "CGRJAsmLH\0"
  /* 9982 */ "CLGRJAsmLH\0"
  /* 9993 */ "CLRJAsmLH\0"
  /* 10003 */ "BRAsmLH\0"
  /* 10011 */ "LOCRAsmLH\0"
  /* 10021 */ "LOCGRAsmLH\0"
  /* 10032 */ "SELGRAsmLH\0"
  /* 10043 */ "LOCFHRAsmLH\0"
  /* 10055 */ "SELFHRAsmLH\0"
  /* 10067 */ "SELRAsmLH\0"
  /* 10077 */ "CLGTAsmLH\0"
  /* 10087 */ "CITAsmLH\0"
  /* 10096 */ "CLFITAsmLH\0"
  /* 10107 */ "CGITAsmLH\0"
  /* 10117 */ "CLGITAsmLH\0"
  /* 10128 */ "CLTAsmLH\0"
  /* 10137 */ "CRTAsmLH\0"
  /* 10146 */ "CGRTAsmLH\0"
  /* 10156 */ "CLGRTAsmLH\0"
  /* 10167 */ "CLRTAsmLH\0"
  /* 10177 */ "ICMH\0"
  /* 10182 */ "STCMH\0"
  /* 10188 */ "VGFMH\0"
  /* 10194 */ "VGMH\0"
  /* 10199 */ "VERIMH\0"
  /* 10206 */ "CLMH\0"
  /* 10211 */ "STMH\0"
  /* 10216 */ "VSUMH\0"
  /* 10222 */ "VMH\0"
  /* 10226 */ "VCLFNH\0"
  /* 10233 */ "VMNH\0"
  /* 10238 */ "CIBAsmNH\0"
  /* 10247 */ "CGIBAsmNH\0"
  /* 10257 */ "CLGIBAsmNH\0"
  /* 10268 */ "CLIBAsmNH\0"
  /* 10278 */ "CRBAsmNH\0"
  /* 10287 */ "CGRBAsmNH\0"
  /* 10297 */ "CLGRBAsmNH\0"
  /* 10308 */ "CLRBAsmNH\0"
  /* 10318 */ "LOCAsmNH\0"
  /* 10327 */ "STOCAsmNH\0"
  /* 10337 */ "LOCGAsmNH\0"
  /* 10347 */ "STOCGAsmNH\0"
  /* 10358 */ "JGAsmNH\0"
  /* 10366 */ "LOCFHAsmNH\0"
  /* 10377 */ "STOCFHAsmNH\0"
  /* 10389 */ "BIAsmNH\0"
  /* 10397 */ "LOCHIAsmNH\0"
  /* 10408 */ "LOCGHIAsmNH\0"
  /* 10420 */ "LOCHHIAsmNH\0"
  /* 10432 */ "CIJAsmNH\0"
  /* 10441 */ "CGIJAsmNH\0"
  /* 10451 */ "CLGIJAsmNH\0"
  /* 10462 */ "CLIJAsmNH\0"
  /* 10472 */ "CRJAsmNH\0"
  /* 10481 */ "CGRJAsmNH\0"
  /* 10491 */ "CLGRJAsmNH\0"
  /* 10502 */ "CLRJAsmNH\0"
  /* 10512 */ "BRAsmNH\0"
  /* 10520 */ "LOCRAsmNH\0"
  /* 10530 */ "LOCGRAsmNH\0"
  /* 10541 */ "SELGRAsmNH\0"
  /* 10552 */ "LOCFHRAsmNH\0"
  /* 10564 */ "SELFHRAsmNH\0"
  /* 10576 */ "SELRAsmNH\0"
  /* 10586 */ "CLGTAsmNH\0"
  /* 10596 */ "CITAsmNH\0"
  /* 10605 */ "CLFITAsmNH\0"
  /* 10616 */ "CGITAsmNH\0"
  /* 10626 */ "CLGITAsmNH\0"
  /* 10637 */ "CLTAsmNH\0"
  /* 10646 */ "CRTAsmNH\0"
  /* 10655 */ "CGRTAsmNH\0"
  /* 10665 */ "CLGRTAsmNH\0"
  /* 10676 */ "CLRTAsmNH\0"
  /* 10686 */ "VMAOH\0"
  /* 10692 */ "VMALOH\0"
  /* 10699 */ "VMLOH\0"
  /* 10705 */ "VMOH\0"
  /* 10710 */ "VLREPH\0"
  /* 10717 */ "VLBRREPH\0"
  /* 10726 */ "VREPH\0"
  /* 10732 */ "VLPH\0"
  /* 10737 */ "VCSPH\0"
  /* 10743 */ "VUPH\0"
  /* 10748 */ "VCEQH\0"
  /* 10754 */ "VLEBRH\0"
  /* 10761 */ "VSTEBRH\0"
  /* 10769 */ "VLBRH\0"
  /* 10775 */ "VSTBRH\0"
  /* 10782 */ "VLERH\0"
  /* 10788 */ "VSTERH\0"
  /* 10795 */ "VMRH\0"
  /* 10800 */ "VISTRH\0"
  /* 10807 */ "VPKSH\0"
  /* 10813 */ "VPKLSH\0"
  /* 10820 */ "VSTRSH\0"
  /* 10827 */ "VSH\0"
  /* 10831 */ "VPOPCTH\0"
  /* 10839 */ "BRCTH\0"
  /* 10845 */ "STH\0"
  /* 10849 */ "VESRAVH\0"
  /* 10857 */ "VLGVH\0"
  /* 10863 */ "VERLLVH\0"
  /* 10871 */ "VESRLVH\0"
  /* 10879 */ "VESLVH\0"
  /* 10886 */ "LRVH\0"
  /* 10891 */ "STRVH\0"
  /* 10897 */ "BXH\0"
  /* 10901 */ "VMXH\0"
  /* 10906 */ "BRXH\0"
  /* 10911 */ "MAYH\0"
  /* 10916 */ "MYH\0"
  /* 10920 */ "VSTRCZH\0"
  /* 10928 */ "VFAEZH\0"
  /* 10935 */ "VFEEZH\0"
  /* 10942 */ "VLLEZH\0"
  /* 10949 */ "VFENEZH\0"
  /* 10957 */ "VUPKZH\0"
  /* 10964 */ "VCLZH\0"
  /* 10970 */ "VLLEBRZH\0"
  /* 10979 */ "VSTRSZH\0"
  /* 10987 */ "VCTZH\0"
  /* 10993 */ "CIBAsmH\0"
  /* 11001 */ "CGIBAsmH\0"
  /* 11010 */ "CLGIBAsmH\0"
  /* 11020 */ "CLIBAsmH\0"
  /* 11029 */ "CRBAsmH\0"
  /* 11037 */ "CGRBAsmH\0"
  /* 11046 */ "CLGRBAsmH\0"
  /* 11056 */ "CLRBAsmH\0"
  /* 11065 */ "LOCAsmH\0"
  /* 11073 */ "STOCAsmH\0"
  /* 11082 */ "LOCGAsmH\0"
  /* 11091 */ "STOCGAsmH\0"
  /* 11101 */ "JGAsmH\0"
  /* 11108 */ "LOCFHAsmH\0"
  /* 11118 */ "STOCFHAsmH\0"
  /* 11129 */ "BIAsmH\0"
  /* 11136 */ "LOCHIAsmH\0"
  /* 11146 */ "LOCGHIAsmH\0"
  /* 11157 */ "LOCHHIAsmH\0"
  /* 11168 */ "CIJAsmH\0"
  /* 11176 */ "CGIJAsmH\0"
  /* 11185 */ "CLGIJAsmH\0"
  /* 11195 */ "CLIJAsmH\0"
  /* 11204 */ "CRJAsmH\0"
  /* 11212 */ "CGRJAsmH\0"
  /* 11221 */ "CLGRJAsmH\0"
  /* 11231 */ "CLRJAsmH\0"
  /* 11240 */ "BRAsmH\0"
  /* 11247 */ "LOCRAsmH\0"
  /* 11256 */ "LOCGRAsmH\0"
  /* 11266 */ "SELGRAsmH\0"
  /* 11276 */ "LOCFHRAsmH\0"
  /* 11287 */ "SELFHRAsmH\0"
  /* 11298 */ "SELRAsmH\0"
  /* 11307 */ "CLGTAsmH\0"
  /* 11316 */ "CITAsmH\0"
  /* 11324 */ "CLFITAsmH\0"
  /* 11334 */ "CGITAsmH\0"
  /* 11343 */ "CLGITAsmH\0"
  /* 11353 */ "CLTAsmH\0"
  /* 11361 */ "CRTAsmH\0"
  /* 11369 */ "CGRTAsmH\0"
  /* 11378 */ "CLGRTAsmH\0"
  /* 11388 */ "CLRTAsmH\0"
  /* 11397 */ "NIAI\0"
  /* 11402 */ "VSBCBI\0"
  /* 11409 */ "VSCBI\0"
  /* 11415 */ "VSBI\0"
  /* 11420 */ "QPACI\0"
  /* 11426 */ "VFTCI\0"
  /* 11432 */ "VPDI\0"
  /* 11437 */ "ATOMIC_LOAD_AFI\0"
  /* 11453 */ "ATOMIC_LOADW_AFI\0"
  /* 11470 */ "CFI\0"
  /* 11474 */ "ATOMIC_LOAD_AGFI\0"
  /* 11491 */ "CGFI\0"
  /* 11496 */ "ALGFI\0"
  /* 11502 */ "CLGFI\0"
  /* 11508 */ "SLGFI\0"
  /* 11514 */ "MSGFI\0"
  /* 11520 */ "ALFI\0"
  /* 11525 */ "CLFI\0"
  /* 11530 */ "SLFI\0"
  /* 11535 */ "MSFI\0"
  /* 11540 */ "VFI\0"
  /* 11544 */ "ATOMIC_LOAD_AHI\0"
  /* 11560 */ "LOCHI\0"
  /* 11566 */ "ATOMIC_LOAD_AGHI\0"
  /* 11583 */ "LOCGHI\0"
  /* 11590 */ "LGHI\0"
  /* 11595 */ "MGHI\0"
  /* 11600 */ "MVGHI\0"
  /* 11606 */ "LOCHHI\0"
  /* 11613 */ "MVHHI\0"
  /* 11619 */ "LHI\0"
  /* 11623 */ "MHI\0"
  /* 11627 */ "DBG_PHI\0"
  /* 11635 */ "MVHI\0"
  /* 11640 */ "CLI\0"
  /* 11644 */ "NI\0"
  /* 11647 */ "OI\0"
  /* 11650 */ "VREPI\0"
  /* 11656 */ "TPI\0"
  /* 11660 */ "QCTRI\0"
  /* 11666 */ "InsnVRI\0"
  /* 11674 */ "InsnRI\0"
  /* 11681 */ "ASI\0"
  /* 11685 */ "AGSI\0"
  /* 11690 */ "ALGSI\0"
  /* 11696 */ "CHSI\0"
  /* 11701 */ "CLFHSI\0"
  /* 11708 */ "CGHSI\0"
  /* 11714 */ "CLGHSI\0"
  /* 11721 */ "CHHSI\0"
  /* 11727 */ "CLHHSI\0"
  /* 11734 */ "ALSI\0"
  /* 11739 */ "G_FPTOSI\0"
  /* 11748 */ "QSI\0"
  /* 11752 */ "InsnRSI\0"
  /* 11760 */ "STSI\0"
  /* 11765 */ "InsnVSI\0"
  /* 11773 */ "InsnSI\0"
  /* 11780 */ "PTI\0"
  /* 11784 */ "G_FPTOUI\0"
  /* 11793 */ "MVI\0"
  /* 11797 */ "G_FPOWI\0"
  /* 11805 */ "XI\0"
  /* 11808 */ "CIJ\0"
  /* 11812 */ "CGIJ\0"
  /* 11817 */ "CLGIJ\0"
  /* 11823 */ "CLIJ\0"
  /* 11828 */ "CRJ\0"
  /* 11832 */ "CGRJ\0"
  /* 11837 */ "CLGRJ\0"
  /* 11843 */ "CLRJ\0"
  /* 11848 */ "SLAK\0"
  /* 11853 */ "SRAK\0"
  /* 11858 */ "PACK\0"
  /* 11863 */ "SCK\0"
  /* 11867 */ "STCK\0"
  /* 11872 */ "MVCK\0"
  /* 11877 */ "MVCDK\0"
  /* 11883 */ "WFK\0"
  /* 11887 */ "AHIK\0"
  /* 11892 */ "AGHIK\0"
  /* 11898 */ "ALGHSIK\0"
  /* 11906 */ "ALHSIK\0"
  /* 11913 */ "SLLK\0"
  /* 11918 */ "SRLK\0"
  /* 11923 */ "EDMK\0"
  /* 11928 */ "CondReturn_XPLINK\0"
  /* 11946 */ "IPK\0"
  /* 11950 */ "UNPK\0"
  /* 11955 */ "VPK\0"
  /* 11959 */ "ARK\0"
  /* 11963 */ "NCRK\0"
  /* 11968 */ "OCRK\0"
  /* 11973 */ "AGRK\0"
  /* 11978 */ "NCGRK\0"
  /* 11984 */ "OCGRK\0"
  /* 11990 */ "ALGRK\0"
  /* 11996 */ "SLGRK\0"
  /* 12002 */ "MGRK\0"
  /* 12007 */ "NNGRK\0"
  /* 12013 */ "NOGRK\0"
  /* 12019 */ "SGRK\0"
  /* 12024 */ "NXGRK\0"
  /* 12030 */ "ALRK\0"
  /* 12035 */ "SLRK\0"
  /* 12040 */ "NNRK\0"
  /* 12045 */ "NORK\0"
  /* 12050 */ "SRK\0"
  /* 12054 */ "NXRK\0"
  /* 12059 */ "G_PTRMASK\0"
  /* 12069 */ "MVCSK\0"
  /* 12075 */ "IVSK\0"
  /* 12080 */ "AHIMuxK\0"
  /* 12088 */ "LAAL\0"
  /* 12093 */ "BAL\0"
  /* 12097 */ "VMAL\0"
  /* 12102 */ "SAL\0"
  /* 12106 */ "VECL\0"
  /* 12111 */ "CLCL\0"
  /* 12116 */ "CallBRCL\0"
  /* 12125 */ "MVCL\0"
  /* 12130 */ "SLDL\0"
  /* 12135 */ "SRDL\0"
  /* 12140 */ "GC_LABEL\0"
  /* 12149 */ "DBG_LABEL\0"
  /* 12159 */ "EH_LABEL\0"
  /* 12168 */ "ANNOTATION_LABEL\0"
  /* 12185 */ "ICALL_BRANCH_FUNNEL\0"
  /* 12205 */ "VSEL\0"
  /* 12210 */ "STFL\0"
  /* 12215 */ "VAVGL\0"
  /* 12221 */ "RISBHL\0"
  /* 12228 */ "VCHL\0"
  /* 12233 */ "IIHL\0"
  /* 12238 */ "LLIHL\0"
  /* 12244 */ "NIHL\0"
  /* 12249 */ "OIHL\0"
  /* 12254 */ "TMHL\0"
  /* 12259 */ "G_FSHL\0"
  /* 12266 */ "G_SHL\0"
  /* 12272 */ "G_FCEIL\0"
  /* 12280 */ "InsnRIL\0"
  /* 12288 */ "InsnSIL\0"
  /* 12296 */ "TLS_GDCALL\0"
  /* 12307 */ "TLS_LDCALL\0"
  /* 12318 */ "PATCHABLE_TAIL_CALL\0"
  /* 12338 */ "PATCHABLE_TYPED_EVENT_CALL\0"
  /* 12365 */ "PATCHABLE_EVENT_CALL\0"
  /* 12386 */ "FENTRY_CALL\0"
  /* 12398 */ "RISBLL\0"
  /* 12405 */ "VFLL\0"
  /* 12410 */ "IILL\0"
  /* 12415 */ "KILL\0"
  /* 12420 */ "LLILL\0"
  /* 12426 */ "ATOMIC_LOAD_NILL\0"
  /* 12443 */ "ATOMIC_LOAD_OILL\0"
  /* 12460 */ "TMLL\0"
  /* 12465 */ "VUPLL\0"
  /* 12471 */ "VERLL\0"
  /* 12477 */ "SLL\0"
  /* 12481 */ "VLL\0"
  /* 12485 */ "VML\0"
  /* 12489 */ "VCLFNL\0"
  /* 12496 */ "VMNL\0"
  /* 12501 */ "CIBAsmNL\0"
  /* 12510 */ "CGIBAsmNL\0"
  /* 12520 */ "CLGIBAsmNL\0"
  /* 12531 */ "CLIBAsmNL\0"
  /* 12541 */ "CRBAsmNL\0"
  /* 12550 */ "CGRBAsmNL\0"
  /* 12560 */ "CLGRBAsmNL\0"
  /* 12571 */ "CLRBAsmNL\0"
  /* 12581 */ "LOCAsmNL\0"
  /* 12590 */ "STOCAsmNL\0"
  /* 12600 */ "LOCGAsmNL\0"
  /* 12610 */ "STOCGAsmNL\0"
  /* 12621 */ "JGAsmNL\0"
  /* 12629 */ "LOCFHAsmNL\0"
  /* 12640 */ "STOCFHAsmNL\0"
  /* 12652 */ "BIAsmNL\0"
  /* 12660 */ "LOCHIAsmNL\0"
  /* 12671 */ "LOCGHIAsmNL\0"
  /* 12683 */ "LOCHHIAsmNL\0"
  /* 12695 */ "CIJAsmNL\0"
  /* 12704 */ "CGIJAsmNL\0"
  /* 12714 */ "CLGIJAsmNL\0"
  /* 12725 */ "CLIJAsmNL\0"
  /* 12735 */ "CRJAsmNL\0"
  /* 12744 */ "CGRJAsmNL\0"
  /* 12754 */ "CLGRJAsmNL\0"
  /* 12765 */ "CLRJAsmNL\0"
  /* 12775 */ "BRAsmNL\0"
  /* 12783 */ "LOCRAsmNL\0"
  /* 12793 */ "LOCGRAsmNL\0"
  /* 12804 */ "SELGRAsmNL\0"
  /* 12815 */ "LOCFHRAsmNL\0"
  /* 12827 */ "SELFHRAsmNL\0"
  /* 12839 */ "SELRAsmNL\0"
  /* 12849 */ "CLGTAsmNL\0"
  /* 12859 */ "CITAsmNL\0"
  /* 12868 */ "CLFITAsmNL\0"
  /* 12879 */ "CGITAsmNL\0"
  /* 12889 */ "CLGITAsmNL\0"
  /* 12900 */ "CLTAsmNL\0"
  /* 12909 */ "CRTAsmNL\0"
  /* 12918 */ "CGRTAsmNL\0"
  /* 12928 */ "CLGRTAsmNL\0"
  /* 12939 */ "CLRTAsmNL\0"
  /* 12949 */ "G_CONSTANT_POOL\0"
  /* 12965 */ "VCFPL\0"
  /* 12971 */ "VUPL\0"
  /* 12976 */ "LARL\0"
  /* 12981 */ "MVCRL\0"
  /* 12987 */ "PFDRL\0"
  /* 12993 */ "CGFRL\0"
  /* 12999 */ "CLGFRL\0"
  /* 13006 */ "LLGFRL\0"
  /* 13013 */ "CGRL\0"
  /* 13018 */ "CLGRL\0"
  /* 13024 */ "STGRL\0"
  /* 13030 */ "CHRL\0"
  /* 13035 */ "CGHRL\0"
  /* 13041 */ "CLGHRL\0"
  /* 13048 */ "LLGHRL\0"
  /* 13055 */ "CLHRL\0"
  /* 13061 */ "LLHRL\0"
  /* 13067 */ "STHRL\0"
  /* 13073 */ "CLRL\0"
  /* 13078 */ "VLRL\0"
  /* 13083 */ "VMRL\0"
  /* 13088 */ "VESRL\0"
  /* 13094 */ "VSRL\0"
  /* 13099 */ "VSTRL\0"
  /* 13105 */ "EXRL\0"
  /* 13110 */ "CallBRASL\0"
  /* 13120 */ "VESL\0"
  /* 13125 */ "VMSL\0"
  /* 13130 */ "VSL\0"
  /* 13134 */ "LCCTL\0"
  /* 13140 */ "LCTL\0"
  /* 13145 */ "LPCTL\0"
  /* 13151 */ "LSCTL\0"
  /* 13157 */ "STCTL\0"
  /* 13163 */ "G_ROTL\0"
  /* 13170 */ "SORTL\0"
  /* 13176 */ "VSTL\0"
  /* 13181 */ "G_VECREDUCE_FMUL\0"
  /* 13198 */ "G_FMUL\0"
  /* 13205 */ "G_VECREDUCE_SEQ_FMUL\0"
  /* 13226 */ "G_STRICT_FMUL\0"
  /* 13240 */ "G_VECREDUCE_MUL\0"
  /* 13256 */ "G_MUL\0"
  /* 13262 */ "VL\0"
  /* 13265 */ "VMXL\0"
  /* 13270 */ "MAYL\0"
  /* 13275 */ "MYL\0"
  /* 13279 */ "VUPKZL\0"
  /* 13286 */ "CIBAsmL\0"
  /* 13294 */ "CGIBAsmL\0"
  /* 13303 */ "CLGIBAsmL\0"
  /* 13313 */ "CLIBAsmL\0"
  /* 13322 */ "CRBAsmL\0"
  /* 13330 */ "CGRBAsmL\0"
  /* 13339 */ "CLGRBAsmL\0"
  /* 13349 */ "CLRBAsmL\0"
  /* 13358 */ "LOCAsmL\0"
  /* 13366 */ "STOCAsmL\0"
  /* 13375 */ "LOCGAsmL\0"
  /* 13384 */ "STOCGAsmL\0"
  /* 13394 */ "JGAsmL\0"
  /* 13401 */ "LOCFHAsmL\0"
  /* 13411 */ "STOCFHAsmL\0"
  /* 13422 */ "BIAsmL\0"
  /* 13429 */ "LOCHIAsmL\0"
  /* 13439 */ "LOCGHIAsmL\0"
  /* 13450 */ "LOCHHIAsmL\0"
  /* 13461 */ "CIJAsmL\0"
  /* 13469 */ "CGIJAsmL\0"
  /* 13478 */ "CLGIJAsmL\0"
  /* 13488 */ "CLIJAsmL\0"
  /* 13497 */ "CRJAsmL\0"
  /* 13505 */ "CGRJAsmL\0"
  /* 13514 */ "CLGRJAsmL\0"
  /* 13524 */ "CLRJAsmL\0"
  /* 13533 */ "BRAsmL\0"
  /* 13540 */ "LOCRAsmL\0"
  /* 13549 */ "LOCGRAsmL\0"
  /* 13559 */ "SELGRAsmL\0"
  /* 13569 */ "LOCFHRAsmL\0"
  /* 13580 */ "SELFHRAsmL\0"
  /* 13591 */ "SELRAsmL\0"
  /* 13600 */ "CLGTAsmL\0"
  /* 13609 */ "CITAsmL\0"
  /* 13617 */ "CLFITAsmL\0"
  /* 13627 */ "CGITAsmL\0"
  /* 13636 */ "CLGITAsmL\0"
  /* 13646 */ "CLTAsmL\0"
  /* 13654 */ "CRTAsmL\0"
  /* 13662 */ "CGRTAsmL\0"
  /* 13671 */ "CLGRTAsmL\0"
  /* 13681 */ "CLRTAsmL\0"
  /* 13690 */ "LAM\0"
  /* 13694 */ "STAM\0"
  /* 13699 */ "VGBM\0"
  /* 13704 */ "IRBM\0"
  /* 13709 */ "RRBM\0"
  /* 13714 */ "ICM\0"
  /* 13718 */ "STCM\0"
  /* 13723 */ "G_FREM\0"
  /* 13730 */ "G_STRICT_FREM\0"
  /* 13744 */ "G_SREM\0"
  /* 13751 */ "G_UREM\0"
  /* 13758 */ "G_SDIVREM\0"
  /* 13768 */ "G_UDIVREM\0"
  /* 13778 */ "VGFM\0"
  /* 13783 */ "VFM\0"
  /* 13787 */ "VGM\0"
  /* 13791 */ "SCHM\0"
  /* 13796 */ "VERIM\0"
  /* 13802 */ "KM\0"
  /* 13805 */ "CLM\0"
  /* 13809 */ "VLM\0"
  /* 13813 */ "SRNM\0"
  /* 13818 */ "BAsmNM\0"
  /* 13825 */ "LOCAsmNM\0"
  /* 13834 */ "STOCAsmNM\0"
  /* 13844 */ "LOCGAsmNM\0"
  /* 13854 */ "STOCGAsmNM\0"
  /* 13865 */ "JGAsmNM\0"
  /* 13873 */ "LOCFHAsmNM\0"
  /* 13884 */ "STOCFHAsmNM\0"
  /* 13896 */ "BIAsmNM\0"
  /* 13904 */ "LOCHIAsmNM\0"
  /* 13915 */ "LOCGHIAsmNM\0"
  /* 13927 */ "LOCHHIAsmNM\0"
  /* 13939 */ "JAsmNM\0"
  /* 13946 */ "BRAsmNM\0"
  /* 13954 */ "LOCRAsmNM\0"
  /* 13964 */ "LOCGRAsmNM\0"
  /* 13975 */ "SELGRAsmNM\0"
  /* 13986 */ "LOCFHRAsmNM\0"
  /* 13998 */ "SELFHRAsmNM\0"
  /* 14010 */ "SELRAsmNM\0"
  /* 14020 */ "IPM\0"
  /* 14024 */ "SPM\0"
  /* 14028 */ "VBPERM\0"
  /* 14035 */ "VPERM\0"
  /* 14041 */ "INLINEASM\0"
  /* 14051 */ "BSM\0"
  /* 14055 */ "VCKSM\0"
  /* 14061 */ "STNSM\0"
  /* 14067 */ "STOSM\0"
  /* 14073 */ "BASSM\0"
  /* 14079 */ "VSTM\0"
  /* 14084 */ "VTM\0"
  /* 14088 */ "G_FMINIMUM\0"
  /* 14099 */ "G_FMAXIMUM\0"
  /* 14110 */ "G_FMINNUM\0"
  /* 14120 */ "G_FMAXNUM\0"
  /* 14130 */ "VSUM\0"
  /* 14135 */ "BAsmM\0"
  /* 14141 */ "LOCAsmM\0"
  /* 14149 */ "STOCAsmM\0"
  /* 14158 */ "LOCGAsmM\0"
  /* 14167 */ "STOCGAsmM\0"
  /* 14177 */ "JGAsmM\0"
  /* 14184 */ "LOCFHAsmM\0"
  /* 14194 */ "STOCFHAsmM\0"
  /* 14205 */ "BIAsmM\0"
  /* 14212 */ "LOCHIAsmM\0"
  /* 14222 */ "LOCGHIAsmM\0"
  /* 14233 */ "LOCHHIAsmM\0"
  /* 14244 */ "JAsmM\0"
  /* 14250 */ "BRAsmM\0"
  /* 14257 */ "LOCRAsmM\0"
  /* 14266 */ "LOCGRAsmM\0"
  /* 14276 */ "SELGRAsmM\0"
  /* 14286 */ "LOCFHRAsmM\0"
  /* 14297 */ "SELFHRAsmM\0"
  /* 14308 */ "SELRAsmM\0"
  /* 14317 */ "LAN\0"
  /* 14321 */ "G_INTRINSIC_ROUNDEVEN\0"
  /* 14343 */ "VCFN\0"
  /* 14348 */ "RISBGN\0"
  /* 14355 */ "G_ASSERT_ALIGN\0"
  /* 14370 */ "G_FCOPYSIGN\0"
  /* 14382 */ "ALSIHN\0"
  /* 14389 */ "MVCIN\0"
  /* 14395 */ "TBEGIN\0"
  /* 14402 */ "PGIN\0"
  /* 14407 */ "VFMIN\0"
  /* 14413 */ "G_VECREDUCE_FMIN\0"
  /* 14430 */ "G_ATOMICRMW_FMIN\0"
  /* 14447 */ "G_VECREDUCE_SMIN\0"
  /* 14464 */ "G_SMIN\0"
  /* 14471 */ "G_VECREDUCE_UMIN\0"
  /* 14488 */ "G_UMIN\0"
  /* 14495 */ "ATOMIC_LOADW_UMIN\0"
  /* 14513 */ "G_ATOMICRMW_UMIN\0"
  /* 14530 */ "ATOMIC_LOADW_MIN\0"
  /* 14547 */ "G_ATOMICRMW_MIN\0"
  /* 14563 */ "G_FSIN\0"
  /* 14570 */ "VMN\0"
  /* 14574 */ "VNN\0"
  /* 14578 */ "CFI_INSTRUCTION\0"
  /* 14594 */ "MVN\0"
  /* 14598 */ "ADJCALLSTACKDOWN\0"
  /* 14615 */ "LAO\0"
  /* 14619 */ "VMAO\0"
  /* 14624 */ "G_SSUBO\0"
  /* 14632 */ "G_USUBO\0"
  /* 14640 */ "G_SADDO\0"
  /* 14648 */ "G_UADDO\0"
  /* 14656 */ "VMALO\0"
  /* 14662 */ "VMLO\0"
  /* 14667 */ "PLO\0"
  /* 14671 */ "G_SMULO\0"
  /* 14679 */ "G_UMULO\0"
  /* 14687 */ "PCKMO\0"
  /* 14693 */ "VMO\0"
  /* 14697 */ "PPNO\0"
  /* 14702 */ "PRNO\0"
  /* 14707 */ "VNO\0"
  /* 14711 */ "BAsmNO\0"
  /* 14718 */ "LOCAsmNO\0"
  /* 14727 */ "STOCAsmNO\0"
  /* 14737 */ "LOCGAsmNO\0"
  /* 14747 */ "STOCGAsmNO\0"
  /* 14758 */ "JGAsmNO\0"
  /* 14766 */ "LOCFHAsmNO\0"
  /* 14777 */ "STOCFHAsmNO\0"
  /* 14789 */ "BIAsmNO\0"
  /* 14797 */ "LOCHIAsmNO\0"
  /* 14808 */ "LOCGHIAsmNO\0"
  /* 14820 */ "LOCHHIAsmNO\0"
  /* 14832 */ "JAsmNO\0"
  /* 14839 */ "BRAsmNO\0"
  /* 14847 */ "LOCRAsmNO\0"
  /* 14857 */ "LOCGRAsmNO\0"
  /* 14868 */ "SELGRAsmNO\0"
  /* 14879 */ "LOCFHRAsmNO\0"
  /* 14891 */ "SELFHRAsmNO\0"
  /* 14903 */ "SELRAsmNO\0"
  /* 14913 */ "TROO\0"
  /* 14918 */ "PFPO\0"
  /* 14923 */ "G_BZERO\0"
  /* 14931 */ "VZERO\0"
  /* 14937 */ "VFPSO\0"
  /* 14943 */ "TRTO\0"
  /* 14948 */ "MVO\0"
  /* 14952 */ "BAsmO\0"
  /* 14958 */ "LOCAsmO\0"
  /* 14966 */ "STOCAsmO\0"
  /* 14975 */ "LOCGAsmO\0"
  /* 14984 */ "STOCGAsmO\0"
  /* 14994 */ "JGAsmO\0"
  /* 15001 */ "LOCFHAsmO\0"
  /* 15011 */ "STOCFHAsmO\0"
  /* 15022 */ "BIAsmO\0"
  /* 15029 */ "LOCHIAsmO\0"
  /* 15039 */ "LOCGHIAsmO\0"
  /* 15050 */ "LOCHHIAsmO\0"
  /* 15061 */ "JAsmO\0"
  /* 15067 */ "BRAsmO\0"
  /* 15074 */ "LOCRAsmO\0"
  /* 15083 */ "LOCGRAsmO\0"
  /* 15093 */ "SELGRAsmO\0"
  /* 15103 */ "LOCFHRAsmO\0"
  /* 15114 */ "SELFHRAsmO\0"
  /* 15125 */ "SELRAsmO\0"
  /* 15134 */ "STACKMAP\0"
  /* 15143 */ "G_ATOMICRMW_UDEC_WRAP\0"
  /* 15165 */ "G_ATOMICRMW_UINC_WRAP\0"
  /* 15187 */ "STAP\0"
  /* 15192 */ "VAP\0"
  /* 15196 */ "G_BSWAP\0"
  /* 15204 */ "ZAP\0"
  /* 15208 */ "MVCP\0"
  /* 15213 */ "VSCHDP\0"
  /* 15220 */ "STIDP\0"
  /* 15226 */ "RDP\0"
  /* 15230 */ "VSDP\0"
  /* 15235 */ "VDP\0"
  /* 15239 */ "VCLZDP\0"
  /* 15246 */ "VLREP\0"
  /* 15252 */ "VLBRREP\0"
  /* 15260 */ "VREP\0"
  /* 15265 */ "VCLFP\0"
  /* 15271 */ "G_SITOFP\0"
  /* 15280 */ "G_UITOFP\0"
  /* 15289 */ "VCSFP\0"
  /* 15295 */ "SIGP\0"
  /* 15300 */ "VLVGP\0"
  /* 15306 */ "RCHP\0"
  /* 15311 */ "VSCHP\0"
  /* 15317 */ "VSCSHP\0"
  /* 15324 */ "VLIP\0"
  /* 15329 */ "VLP\0"
  /* 15333 */ "G_FCMP\0"
  /* 15340 */ "G_ICMP\0"
  /* 15347 */ "VMP\0"
  /* 15351 */ "BAsmNP\0"
  /* 15358 */ "LOCAsmNP\0"
  /* 15367 */ "STOCAsmNP\0"
  /* 15377 */ "LOCGAsmNP\0"
  /* 15387 */ "STOCGAsmNP\0"
  /* 15398 */ "JGAsmNP\0"
  /* 15406 */ "LOCFHAsmNP\0"
  /* 15417 */ "STOCFHAsmNP\0"
  /* 15429 */ "BIAsmNP\0"
  /* 15437 */ "LOCHIAsmNP\0"
  /* 15448 */ "LOCGHIAsmNP\0"
  /* 15460 */ "LOCHHIAsmNP\0"
  /* 15472 */ "JAsmNP\0"
  /* 15479 */ "BRAsmNP\0"
  /* 15487 */ "LOCRAsmNP\0"
  /* 15497 */ "LOCGRAsmNP\0"
  /* 15508 */ "SELGRAsmNP\0"
  /* 15519 */ "LOCFHRAsmNP\0"
  /* 15531 */ "SELFHRAsmNP\0"
  /* 15543 */ "SELRAsmNP\0"
  /* 15553 */ "G_CTPOP\0"
  /* 15561 */ "VPSOP\0"
  /* 15567 */ "PATCHABLE_OP\0"
  /* 15580 */ "FAULTING_OP\0"
  /* 15592 */ "BPP\0"
  /* 15596 */ "LPP\0"
  /* 15600 */ "BPRP\0"
  /* 15605 */ "VSRP\0"
  /* 15610 */ "VRP\0"
  /* 15614 */ "LASP\0"
  /* 15619 */ "CSP\0"
  /* 15623 */ "VSCHSP\0"
  /* 15630 */ "VMSP\0"
  /* 15635 */ "VSP\0"
  /* 15639 */ "VTP\0"
  /* 15643 */ "ADJCALLSTACKUP\0"
  /* 15658 */ "PREALLOCATED_SETUP\0"
  /* 15677 */ "G_FEXP\0"
  /* 15684 */ "VSCHXP\0"
  /* 15691 */ "BAsmP\0"
  /* 15697 */ "LOCAsmP\0"
  /* 15705 */ "STOCAsmP\0"
  /* 15714 */ "LOCGAsmP\0"
  /* 15723 */ "STOCGAsmP\0"
  /* 15733 */ "JGAsmP\0"
  /* 15740 */ "LOCFHAsmP\0"
  /* 15750 */ "STOCFHAsmP\0"
  /* 15761 */ "BIAsmP\0"
  /* 15768 */ "LOCHIAsmP\0"
  /* 15778 */ "LOCGHIAsmP\0"
  /* 15789 */ "LOCHHIAsmP\0"
  /* 15800 */ "JAsmP\0"
  /* 15806 */ "BRAsmP\0"
  /* 15813 */ "LOCRAsmP\0"
  /* 15822 */ "LOCGRAsmP\0"
  /* 15832 */ "SELGRAsmP\0"
  /* 15842 */ "LOCFHRAsmP\0"
  /* 15853 */ "SELFHRAsmP\0"
  /* 15864 */ "SELRAsmP\0"
  /* 15873 */ "VAQ\0"
  /* 15877 */ "VACQ\0"
  /* 15882 */ "VACCQ\0"
  /* 15888 */ "VACCCQ\0"
  /* 15895 */ "VCEQ\0"
  /* 15900 */ "VSBCBIQ\0"
  /* 15908 */ "VSCBIQ\0"
  /* 15915 */ "VSBIQ\0"
  /* 15921 */ "VSUMQ\0"
  /* 15927 */ "LPQ\0"
  /* 15931 */ "STPQ\0"
  /* 15936 */ "VLBRQ\0"
  /* 15942 */ "VSTBRQ\0"
  /* 15949 */ "VFSQ\0"
  /* 15954 */ "VSQ\0"
  /* 15958 */ "LBEAR\0"
  /* 15964 */ "STBEAR\0"
  /* 15971 */ "EPAR\0"
  /* 15976 */ "ESAR\0"
  /* 15981 */ "SSAR\0"
  /* 15986 */ "TAR\0"
  /* 15990 */ "ATOMIC_LOAD_AR\0"
  /* 16005 */ "ATOMIC_LOADW_AR\0"
  /* 16021 */ "MADBR\0"
  /* 16027 */ "LCDBR\0"
  /* 16033 */ "DDBR\0"
  /* 16038 */ "LEDBR\0"
  /* 16044 */ "CFDBR\0"
  /* 16050 */ "CLFDBR\0"
  /* 16057 */ "CGDBR\0"
  /* 16063 */ "CLGDBR\0"
  /* 16070 */ "DIDBR\0"
  /* 16076 */ "FIDBR\0"
  /* 16082 */ "KDBR\0"
  /* 16087 */ "MDBR\0"
  /* 16092 */ "LNDBR\0"
  /* 16098 */ "LPDBR\0"
  /* 16104 */ "SQDBR\0"
  /* 16110 */ "MSDBR\0"
  /* 16116 */ "LTDBR\0"
  /* 16122 */ "LXDBR\0"
  /* 16128 */ "MXDBR\0"
  /* 16134 */ "MAEBR\0"
  /* 16140 */ "LCEBR\0"
  /* 16146 */ "LDEBR\0"
  /* 16152 */ "MDEBR\0"
  /* 16158 */ "MEEBR\0"
  /* 16164 */ "CFEBR\0"
  /* 16170 */ "CLFEBR\0"
  /* 16177 */ "CGEBR\0"
  /* 16183 */ "CLGEBR\0"
  /* 16190 */ "DIEBR\0"
  /* 16196 */ "FIEBR\0"
  /* 16202 */ "KEBR\0"
  /* 16207 */ "LNEBR\0"
  /* 16213 */ "LPEBR\0"
  /* 16219 */ "SQEBR\0"
  /* 16225 */ "MSEBR\0"
  /* 16231 */ "LTEBR\0"
  /* 16237 */ "LXEBR\0"
  /* 16243 */ "CDFBR\0"
  /* 16249 */ "CEFBR\0"
  /* 16255 */ "CDLFBR\0"
  /* 16262 */ "CELFBR\0"
  /* 16269 */ "CXLFBR\0"
  /* 16276 */ "CXFBR\0"
  /* 16282 */ "CDGBR\0"
  /* 16288 */ "CEGBR\0"
  /* 16294 */ "CDLGBR\0"
  /* 16301 */ "CELGBR\0"
  /* 16308 */ "CXLGBR\0"
  /* 16315 */ "CXGBR\0"
  /* 16321 */ "SLBR\0"
  /* 16326 */ "VLBR\0"
  /* 16331 */ "VSTBR\0"
  /* 16337 */ "AXBR\0"
  /* 16342 */ "LCXBR\0"
  /* 16348 */ "LDXBR\0"
  /* 16354 */ "LEXBR\0"
  /* 16360 */ "CFXBR\0"
  /* 16366 */ "CLFXBR\0"
  /* 16373 */ "CGXBR\0"
  /* 16379 */ "CLGXBR\0"
  /* 16386 */ "FIXBR\0"
  /* 16392 */ "KXBR\0"
  /* 16397 */ "MXBR\0"
  /* 16402 */ "LNXBR\0"
  /* 16408 */ "LPXBR\0"
  /* 16414 */ "SQXBR\0"
  /* 16420 */ "SXBR\0"
  /* 16425 */ "LTXBR\0"
  /* 16431 */ "G_BR\0"
  /* 16436 */ "INLINEASM_BR\0"
  /* 16449 */ "CallBR\0"
  /* 16456 */ "CallBCR\0"
  /* 16464 */ "LLGCR\0"
  /* 16470 */ "ALCR\0"
  /* 16475 */ "LLCR\0"
  /* 16480 */ "LOCR\0"
  /* 16485 */ "MADR\0"
  /* 16490 */ "TBDR\0"
  /* 16495 */ "LCDR\0"
  /* 16500 */ "G_BLOCK_ADDR\0"
  /* 16513 */ "TBEDR\0"
  /* 16519 */ "LEDR\0"
  /* 16524 */ "CFDR\0"
  /* 16529 */ "CGDR\0"
  /* 16534 */ "LGDR\0"
  /* 16539 */ "THDR\0"
  /* 16544 */ "FIDR\0"
  /* 16549 */ "LDR\0"
  /* 16553 */ "MDR\0"
  /* 16557 */ "LNDR\0"
  /* 16562 */ "LPDR\0"
  /* 16567 */ "SQDR\0"
  /* 16572 */ "LRDR\0"
  /* 16577 */ "MSDR\0"
  /* 16582 */ "LTDR\0"
  /* 16587 */ "LXDR\0"
  /* 16592 */ "MXDR\0"
  /* 16597 */ "LZDR\0"
  /* 16602 */ "MAER\0"
  /* 16607 */ "LCER\0"
  /* 16612 */ "THDER\0"
  /* 16618 */ "LDER\0"
  /* 16623 */ "MDER\0"
  /* 16628 */ "MEER\0"
  /* 16633 */ "CFER\0"
  /* 16638 */ "LFER\0"
  /* 16643 */ "CGER\0"
  /* 16648 */ "HER\0"
  /* 16652 */ "FIER\0"
  /* 16657 */ "MEMBARRIER\0"
  /* 16668 */ "VLER\0"
  /* 16673 */ "MER\0"
  /* 16677 */ "LNER\0"
  /* 16682 */ "LPER\0"
  /* 16687 */ "SQER\0"
  /* 16692 */ "LRER\0"
  /* 16697 */ "MSER\0"
  /* 16702 */ "LTER\0"
  /* 16707 */ "PATCHABLE_FUNCTION_ENTER\0"
  /* 16732 */ "G_READCYCLECOUNTER\0"
  /* 16751 */ "G_READ_REGISTER\0"
  /* 16767 */ "G_WRITE_REGISTER\0"
  /* 16784 */ "VSTER\0"
  /* 16790 */ "LXER\0"
  /* 16795 */ "LZER\0"
  /* 16800 */ "LCDFR\0"
  /* 16806 */ "LNDFR\0"
  /* 16812 */ "LPDFR\0"
  /* 16818 */ "CEFR\0"
  /* 16823 */ "LEFR\0"
  /* 16828 */ "AGFR\0"
  /* 16833 */ "LCGFR\0"
  /* 16839 */ "ALGFR\0"
  /* 16845 */ "CLGFR\0"
  /* 16851 */ "LLGFR\0"
  /* 16857 */ "SLGFR\0"
  /* 16863 */ "LNGFR\0"
  /* 16869 */ "LPGFR\0"
  /* 16875 */ "DSGFR\0"
  /* 16881 */ "MSGFR\0"
  /* 16887 */ "LTGFR\0"
  /* 16893 */ "CXFR\0"
  /* 16898 */ "ATOMIC_LOAD_AGR\0"
  /* 16914 */ "SLBGR\0"
  /* 16920 */ "ALCGR\0"
  /* 16926 */ "LOCGR\0"
  /* 16932 */ "CDGR\0"
  /* 16937 */ "LDGR\0"
  /* 16942 */ "CEGR\0"
  /* 16947 */ "ALGR\0"
  /* 16952 */ "CLGR\0"
  /* 16957 */ "DLGR\0"
  /* 16962 */ "SELGR\0"
  /* 16968 */ "MLGR\0"
  /* 16973 */ "SLGR\0"
  /* 16978 */ "LNGR\0"
  /* 16983 */ "ATOMIC_LOAD_NGR\0"
  /* 16999 */ "FLOGR\0"
  /* 17005 */ "ATOMIC_LOAD_OGR\0"
  /* 17021 */ "LPGR\0"
  /* 17026 */ "DSGR\0"
  /* 17031 */ "MSGR\0"
  /* 17036 */ "ATOMIC_LOAD_SGR\0"
  /* 17052 */ "BCTGR\0"
  /* 17058 */ "LTGR\0"
  /* 17063 */ "LRVGR\0"
  /* 17069 */ "CXGR\0"
  /* 17074 */ "ATOMIC_LOAD_XGR\0"
  /* 17090 */ "LOCFHR\0"
  /* 17097 */ "SELFHR\0"
  /* 17104 */ "LLGHR\0"
  /* 17110 */ "CHHR\0"
  /* 17115 */ "AHHHR\0"
  /* 17121 */ "ALHHHR\0"
  /* 17128 */ "SLHHHR\0"
  /* 17135 */ "SHHHR\0"
  /* 17141 */ "CLHHR\0"
  /* 17147 */ "LLHR\0"
  /* 17152 */ "G_ASHR\0"
  /* 17159 */ "G_FSHR\0"
  /* 17166 */ "G_LSHR\0"
  /* 17173 */ "MAYHR\0"
  /* 17179 */ "MYHR\0"
  /* 17184 */ "EPAIR\0"
  /* 17190 */ "ESAIR\0"
  /* 17196 */ "SSAIR\0"
  /* 17202 */ "BAKR\0"
  /* 17207 */ "BALR\0"
  /* 17212 */ "CLR\0"
  /* 17216 */ "DLR\0"
  /* 17220 */ "SELR\0"
  /* 17225 */ "VFLR\0"
  /* 17230 */ "CHLR\0"
  /* 17235 */ "AHHLR\0"
  /* 17241 */ "ALHHLR\0"
  /* 17248 */ "SLHHLR\0"
  /* 17255 */ "SHHLR\0"
  /* 17261 */ "CLHLR\0"
  /* 17267 */ "MLR\0"
  /* 17271 */ "VLRLR\0"
  /* 17277 */ "VSTRLR\0"
  /* 17284 */ "SLR\0"
  /* 17288 */ "VLR\0"
  /* 17292 */ "MAYLR\0"
  /* 17298 */ "MYLR\0"
  /* 17303 */ "MR\0"
  /* 17306 */ "LNR\0"
  /* 17310 */ "ATOMIC_LOAD_NR\0"
  /* 17325 */ "ATOMIC_LOADW_NR\0"
  /* 17341 */ "G_FFLOOR\0"
  /* 17350 */ "G_BUILD_VECTOR\0"
  /* 17365 */ "G_SHUFFLE_VECTOR\0"
  /* 17382 */ "G_VECREDUCE_XOR\0"
  /* 17398 */ "G_XOR\0"
  /* 17404 */ "G_ATOMICRMW_XOR\0"
  /* 17420 */ "ATOMIC_LOAD_OR\0"
  /* 17435 */ "G_VECREDUCE_OR\0"
  /* 17450 */ "G_OR\0"
  /* 17455 */ "ATOMIC_LOADW_OR\0"
  /* 17471 */ "G_ATOMICRMW_OR\0"
  /* 17486 */ "LPR\0"
  /* 17490 */ "VSRPR\0"
  /* 17496 */ "InsnVRR\0"
  /* 17504 */ "InsnRR\0"
  /* 17511 */ "CallBASR\0"
  /* 17520 */ "SFASR\0"
  /* 17526 */ "MSR\0"
  /* 17530 */ "ATOMIC_LOAD_SR\0"
  /* 17545 */ "ATOMIC_LOADW_SR\0"
  /* 17561 */ "BCTR\0"
  /* 17566 */ "ECCTR\0"
  /* 17572 */ "SCCTR\0"
  /* 17578 */ "KMCTR\0"
  /* 17584 */ "EPCTR\0"
  /* 17590 */ "SPCTR\0"
  /* 17596 */ "QADTR\0"
  /* 17602 */ "CDTR\0"
  /* 17607 */ "DDTR\0"
  /* 17612 */ "CEDTR\0"
  /* 17618 */ "EEDTR\0"
  /* 17624 */ "IEDTR\0"
  /* 17630 */ "LEDTR\0"
  /* 17636 */ "CFDTR\0"
  /* 17642 */ "CLFDTR\0"
  /* 17649 */ "CGDTR\0"
  /* 17655 */ "CLGDTR\0"
  /* 17662 */ "FIDTR\0"
  /* 17668 */ "KDTR\0"
  /* 17673 */ "MDTR\0"
  /* 17678 */ "RRDTR\0"
  /* 17684 */ "CSDTR\0"
  /* 17690 */ "ESDTR\0"
  /* 17696 */ "LTDTR\0"
  /* 17702 */ "CUDTR\0"
  /* 17708 */ "LXDTR\0"
  /* 17714 */ "LDETR\0"
  /* 17720 */ "CDFTR\0"
  /* 17726 */ "CDLFTR\0"
  /* 17733 */ "CXLFTR\0"
  /* 17740 */ "CXFTR\0"
  /* 17746 */ "CDGTR\0"
  /* 17752 */ "CDLGTR\0"
  /* 17759 */ "LLGTR\0"
  /* 17765 */ "CXLGTR\0"
  /* 17772 */ "CXGTR\0"
  /* 17778 */ "LTR\0"
  /* 17782 */ "G_ROTR\0"
  /* 17789 */ "G_INTTOPTR\0"
  /* 17800 */ "TRTR\0"
  /* 17805 */ "CDSTR\0"
  /* 17811 */ "VISTR\0"
  /* 17817 */ "CXSTR\0"
  /* 17823 */ "CDUTR\0"
  /* 17829 */ "CXUTR\0"
  /* 17835 */ "QAXTR\0"
  /* 17841 */ "CXTR\0"
  /* 17846 */ "LDXTR\0"
  /* 17852 */ "CEXTR\0"
  /* 17858 */ "EEXTR\0"
  /* 17864 */ "IEXTR\0"
  /* 17870 */ "CFXTR\0"
  /* 17876 */ "CLFXTR\0"
  /* 17883 */ "CGXTR\0"
  /* 17889 */ "CLGXTR\0"
  /* 17896 */ "FIXTR\0"
  /* 17902 */ "KXTR\0"
  /* 17907 */ "MXTR\0"
  /* 17912 */ "RRXTR\0"
  /* 17918 */ "CSXTR\0"
  /* 17924 */ "ESXTR\0"
  /* 17930 */ "LTXTR\0"
  /* 17936 */ "CUXTR\0"
  /* 17942 */ "AUR\0"
  /* 17946 */ "SUR\0"
  /* 17950 */ "LRVR\0"
  /* 17955 */ "AWR\0"
  /* 17959 */ "SWR\0"
  /* 17963 */ "AXR\0"
  /* 17967 */ "LCXR\0"
  /* 17972 */ "LDXR\0"
  /* 17977 */ "LEXR\0"
  /* 17982 */ "CFXR\0"
  /* 17987 */ "CGXR\0"
  /* 17992 */ "FIXR\0"
  /* 17997 */ "LXR\0"
  /* 18001 */ "MXR\0"
  /* 18005 */ "LNXR\0"
  /* 18010 */ "LPXR\0"
  /* 18015 */ "SQXR\0"
  /* 18020 */ "SXR\0"
  /* 18024 */ "LTXR\0"
  /* 18029 */ "LZXR\0"
  /* 18034 */ "ATOMIC_LOAD_XR\0"
  /* 18049 */ "ATOMIC_LOADW_XR\0"
  /* 18065 */ "MAYR\0"
  /* 18070 */ "MYR\0"
  /* 18074 */ "VPKZR\0"
  /* 18080 */ "BAS\0"
  /* 18084 */ "LFAS\0"
  /* 18089 */ "BRAS\0"
  /* 18094 */ "G_FABS\0"
  /* 18101 */ "G_ABS\0"
  /* 18107 */ "VSTRCBS\0"
  /* 18115 */ "VFCEDBS\0"
  /* 18123 */ "WFCEDBS\0"
  /* 18131 */ "VFCHEDBS\0"
  /* 18140 */ "WFCHEDBS\0"
  /* 18149 */ "VFKHEDBS\0"
  /* 18158 */ "WFKHEDBS\0"
  /* 18167 */ "VFKEDBS\0"
  /* 18175 */ "WFKEDBS\0"
  /* 18183 */ "VFCHDBS\0"
  /* 18191 */ "WFCHDBS\0"
  /* 18199 */ "VFKHDBS\0"
  /* 18207 */ "WFKHDBS\0"
  /* 18215 */ "VFAEBS\0"
  /* 18222 */ "VFEEBS\0"
  /* 18229 */ "VFENEBS\0"
  /* 18237 */ "VCHBS\0"
  /* 18243 */ "VCHLBS\0"
  /* 18250 */ "VCEQBS\0"
  /* 18257 */ "VISTRBS\0"
  /* 18265 */ "VFCESBS\0"
  /* 18273 */ "WFCESBS\0"
  /* 18281 */ "VFCHESBS\0"
  /* 18290 */ "WFCHESBS\0"
  /* 18299 */ "VFKHESBS\0"
  /* 18308 */ "WFKHESBS\0"
  /* 18317 */ "VFKESBS\0"
  /* 18325 */ "WFKESBS\0"
  /* 18333 */ "VFCHSBS\0"
  /* 18341 */ "WFCHSBS\0"
  /* 18349 */ "VFKHSBS\0"
  /* 18357 */ "WFKHSBS\0"
  /* 18365 */ "WFCEXBS\0"
  /* 18373 */ "WFCHEXBS\0"
  /* 18382 */ "WFKHEXBS\0"
  /* 18391 */ "WFKEXBS\0"
  /* 18399 */ "WFCHXBS\0"
  /* 18407 */ "WFKHXBS\0"
  /* 18415 */ "VSTRCZBS\0"
  /* 18424 */ "VFAEZBS\0"
  /* 18432 */ "VFEEZBS\0"
  /* 18440 */ "VFENEZBS\0"
  /* 18449 */ "MVCS\0"
  /* 18454 */ "CDS\0"
  /* 18458 */ "G_UNMERGE_VALUES\0"
  /* 18475 */ "G_MERGE_VALUES\0"
  /* 18490 */ "VSTRCFS\0"
  /* 18498 */ "VFAEFS\0"
  /* 18505 */ "VFEEFS\0"
  /* 18512 */ "VFENEFS\0"
  /* 18520 */ "VCHFS\0"
  /* 18526 */ "VCHLFS\0"
  /* 18533 */ "VCEQFS\0"
  /* 18540 */ "VISTRFS\0"
  /* 18548 */ "VPKSFS\0"
  /* 18555 */ "VPKLSFS\0"
  /* 18563 */ "VFS\0"
  /* 18567 */ "VSTRCZFS\0"
  /* 18576 */ "VFAEZFS\0"
  /* 18584 */ "VFEEZFS\0"
  /* 18592 */ "VFENEZFS\0"
  /* 18601 */ "VCHGS\0"
  /* 18607 */ "VCHLGS\0"
  /* 18614 */ "VCEQGS\0"
  /* 18621 */ "VPKSGS\0"
  /* 18628 */ "VPKLSGS\0"
  /* 18636 */ "VSTRCHS\0"
  /* 18644 */ "VFAEHS\0"
  /* 18651 */ "VFEEHS\0"
  /* 18658 */ "VFENEHS\0"
  /* 18666 */ "VCHHS\0"
  /* 18672 */ "VCHLHS\0"
  /* 18679 */ "VCEQHS\0"
  /* 18686 */ "VISTRHS\0"
  /* 18694 */ "VPKSHS\0"
  /* 18701 */ "VPKLSHS\0"
  /* 18709 */ "VSTRCZHS\0"
  /* 18718 */ "VFAEZHS\0"
  /* 18726 */ "VFEEZHS\0"
  /* 18734 */ "VFENEZHS\0"
  /* 18743 */ "InsnRIS\0"
  /* 18751 */ "VPKS\0"
  /* 18756 */ "VPKLS\0"
  /* 18762 */ "VFLLS\0"
  /* 18768 */ "WFLLS\0"
  /* 18774 */ "VFMS\0"
  /* 18779 */ "VFNMS\0"
  /* 18785 */ "G_FCOS\0"
  /* 18792 */ "MVCOS\0"
  /* 18798 */ "STCPS\0"
  /* 18804 */ "VCFPS\0"
  /* 18810 */ "G_CONCAT_VECTORS\0"
  /* 18827 */ "InsnRRS\0"
  /* 18835 */ "VSTRS\0"
  /* 18841 */ "InsnVRS\0"
  /* 18849 */ "InsnRS\0"
  /* 18856 */ "COPY_TO_REGCLASS\0"
  /* 18873 */ "G_IS_FPCLASS\0"
  /* 18886 */ "G_ATOMIC_CMPXCHG_WITH_SUCCESS\0"
  /* 18916 */ "InsnSS\0"
  /* 18923 */ "G_INTRINSIC_W_SIDE_EFFECTS\0"
  /* 18950 */ "VS\0"
  /* 18953 */ "InsnS\0"
  /* 18959 */ "LLGFAT\0"
  /* 18966 */ "LGAT\0"
  /* 18971 */ "LFHAT\0"
  /* 18977 */ "LAT\0"
  /* 18981 */ "G_SSUBSAT\0"
  /* 18991 */ "G_USUBSAT\0"
  /* 19001 */ "G_SADDSAT\0"
  /* 19011 */ "G_UADDSAT\0"
  /* 19021 */ "G_SSHLSAT\0"
  /* 19031 */ "G_USHLSAT\0"
  /* 19041 */ "G_SMULFIXSAT\0"
  /* 19054 */ "G_UMULFIXSAT\0"
  /* 19067 */ "G_SDIVFIXSAT\0"
  /* 19080 */ "G_UDIVFIXSAT\0"
  /* 19093 */ "LLGTAT\0"
  /* 19100 */ "G_EXTRACT\0"
  /* 19110 */ "BCT\0"
  /* 19114 */ "G_SELECT\0"
  /* 19123 */ "G_BRINDIRECT\0"
  /* 19136 */ "VPOPCT\0"
  /* 19143 */ "BRCT\0"
  /* 19148 */ "TDCDT\0"
  /* 19154 */ "TDGDT\0"
  /* 19160 */ "SLDT\0"
  /* 19165 */ "CPDT\0"
  /* 19170 */ "SRDT\0"
  /* 19175 */ "CZDT\0"
  /* 19180 */ "TDCET\0"
  /* 19186 */ "TDGET\0"
  /* 19192 */ "PATCHABLE_RET\0"
  /* 19206 */ "G_MEMSET\0"
  /* 19215 */ "CLGT\0"
  /* 19220 */ "LLGT\0"
  /* 19225 */ "CIT\0"
  /* 19229 */ "CLFIT\0"
  /* 19235 */ "CGIT\0"
  /* 19240 */ "CLGIT\0"
  /* 19246 */ "PATCHABLE_FUNCTION_EXIT\0"
  /* 19270 */ "G_BRJT\0"
  /* 19277 */ "CLT\0"
  /* 19281 */ "G_EXTRACT_VECTOR_ELT\0"
  /* 19302 */ "G_INSERT_VECTOR_ELT\0"
  /* 19322 */ "SRNMT\0"
  /* 19328 */ "G_FCONSTANT\0"
  /* 19340 */ "G_CONSTANT\0"
  /* 19351 */ "POPCNT\0"
  /* 19358 */ "STATEPOINT\0"
  /* 19369 */ "PATCHPOINT\0"
  /* 19380 */ "G_PTRTOINT\0"
  /* 19391 */ "G_FRINT\0"
  /* 19399 */ "G_INTRINSIC_LRINT\0"
  /* 19417 */ "G_FNEARBYINT\0"
  /* 19430 */ "GOT\0"
  /* 19434 */ "TPROT\0"
  /* 19440 */ "TROT\0"
  /* 19445 */ "CDPT\0"
  /* 19450 */ "SPT\0"
  /* 19454 */ "STPT\0"
  /* 19459 */ "UPT\0"
  /* 19463 */ "CXPT\0"
  /* 19468 */ "G_VASTART\0"
  /* 19478 */ "LIFETIME_START\0"
  /* 19493 */ "G_INVOKE_REGION_START\0"
  /* 19515 */ "CRT\0"
  /* 19519 */ "G_INSERT\0"
  /* 19528 */ "CGRT\0"
  /* 19533 */ "CLGRT\0"
  /* 19539 */ "CLRT\0"
  /* 19544 */ "TABORT\0"
  /* 19551 */ "G_FSQRT\0"
  /* 19559 */ "G_STRICT_FSQRT\0"
  /* 19574 */ "TRT\0"
  /* 19578 */ "G_BITCAST\0"
  /* 19588 */ "G_ADDRSPACE_CAST\0"
  /* 19605 */ "DBG_VALUE_LIST\0"
  /* 19620 */ "CLST\0"
  /* 19625 */ "SRST\0"
  /* 19630 */ "CSST\0"
  /* 19635 */ "MVST\0"
  /* 19640 */ "TRTT\0"
  /* 19645 */ "PGOUT\0"
  /* 19651 */ "TDCXT\0"
  /* 19657 */ "CallBASR_STACKEXT\0"
  /* 19675 */ "G_FPEXT\0"
  /* 19683 */ "G_SEXT\0"
  /* 19690 */ "G_ASSERT_SEXT\0"
  /* 19704 */ "G_ANYEXT\0"
  /* 19713 */ "G_ZEXT\0"
  /* 19720 */ "G_ASSERT_ZEXT\0"
  /* 19734 */ "TDGXT\0"
  /* 19740 */ "SLXT\0"
  /* 19745 */ "CPXT\0"
  /* 19750 */ "SRXT\0"
  /* 19755 */ "CZXT\0"
  /* 19760 */ "CDZT\0"
  /* 19765 */ "CXZT\0"
  /* 19770 */ "AU\0"
  /* 19773 */ "CUTFU\0"
  /* 19779 */ "UNPKU\0"
  /* 19785 */ "CLCLU\0"
  /* 19791 */ "MVCLU\0"
  /* 19797 */ "InsnRILU\0"
  /* 19806 */ "SU\0"
  /* 19809 */ "SRSTU\0"
  /* 19815 */ "VESRAV\0"
  /* 19822 */ "VLGV\0"
  /* 19827 */ "G_FDIV\0"
  /* 19834 */ "G_STRICT_FDIV\0"
  /* 19848 */ "G_SDIV\0"
  /* 19855 */ "G_UDIV\0"
  /* 19862 */ "VERLLV\0"
  /* 19869 */ "VESRLV\0"
  /* 19876 */ "VESLV\0"
  /* 19882 */ "LRV\0"
  /* 19886 */ "STRV\0"
  /* 19891 */ "InsnVRV\0"
  /* 19899 */ "AW\0"
  /* 19902 */ "VMALHW\0"
  /* 19909 */ "VMLHW\0"
  /* 19915 */ "VUPLHW\0"
  /* 19922 */ "G_FPOW\0"
  /* 19929 */ "ATOMIC_SWAPW\0"
  /* 19942 */ "ATOMIC_CMP_SWAPW\0"
  /* 19959 */ "STCRW\0"
  /* 19965 */ "EPSW\0"
  /* 19970 */ "LPSW\0"
  /* 19975 */ "LAX\0"
  /* 19979 */ "VFMAX\0"
  /* 19985 */ "G_VECREDUCE_FMAX\0"
  /* 20002 */ "G_ATOMICRMW_FMAX\0"
  /* 20019 */ "G_VECREDUCE_SMAX\0"
  /* 20036 */ "G_SMAX\0"
  /* 20043 */ "G_VECREDUCE_UMAX\0"
  /* 20060 */ "G_UMAX\0"
  /* 20067 */ "ATOMIC_LOADW_UMAX\0"
  /* 20085 */ "G_ATOMICRMW_UMAX\0"
  /* 20102 */ "ATOMIC_LOADW_MAX\0"
  /* 20119 */ "G_ATOMICRMW_MAX\0"
  /* 20135 */ "G_FRAME_INDEX\0"
  /* 20149 */ "G_SBFX\0"
  /* 20156 */ "G_UBFX\0"
  /* 20163 */ "G_SMULFIX\0"
  /* 20173 */ "G_UMULFIX\0"
  /* 20183 */ "G_SDIVFIX\0"
  /* 20193 */ "G_UDIVFIX\0"
  /* 20203 */ "LX\0"
  /* 20206 */ "VMX\0"
  /* 20210 */ "VNX\0"
  /* 20214 */ "SPX\0"
  /* 20218 */ "STPX\0"
  /* 20223 */ "WFLRX\0"
  /* 20229 */ "InsnVRX\0"
  /* 20237 */ "InsnRX\0"
  /* 20244 */ "STX\0"
  /* 20248 */ "VX\0"
  /* 20251 */ "IC32Y\0"
  /* 20257 */ "LAY\0"
  /* 20261 */ "MAY\0"
  /* 20265 */ "LRAY\0"
  /* 20270 */ "CVBY\0"
  /* 20275 */ "ICY\0"
  /* 20279 */ "STCY\0"
  /* 20284 */ "LDY\0"
  /* 20288 */ "STDY\0"
  /* 20293 */ "CVDY\0"
  /* 20298 */ "LAEY\0"
  /* 20303 */ "LEY\0"
  /* 20307 */ "STEY\0"
  /* 20312 */ "LPSWEY\0"
  /* 20319 */ "MFY\0"
  /* 20323 */ "AHY\0"
  /* 20327 */ "CHY\0"
  /* 20331 */ "LHY\0"
  /* 20335 */ "MHY\0"
  /* 20339 */ "SHY\0"
  /* 20343 */ "STHY\0"
  /* 20348 */ "CLIY\0"
  /* 20353 */ "NIY\0"
  /* 20357 */ "OIY\0"
  /* 20361 */ "InsnSIY\0"
  /* 20369 */ "MVIY\0"
  /* 20374 */ "XIY\0"
  /* 20378 */ "ALY\0"
  /* 20382 */ "CLY\0"
  /* 20386 */ "SLY\0"
  /* 20390 */ "LAMY\0"
  /* 20395 */ "STAMY\0"
  /* 20401 */ "ICMY\0"
  /* 20406 */ "STCMY\0"
  /* 20412 */ "CLMY\0"
  /* 20417 */ "STMY\0"
  /* 20422 */ "NY\0"
  /* 20425 */ "OY\0"
  /* 20428 */ "G_MEMCPY\0"
  /* 20437 */ "COPY\0"
  /* 20442 */ "CSY\0"
  /* 20446 */ "CDSY\0"
  /* 20451 */ "MSY\0"
  /* 20455 */ "InsnRSY\0"
  /* 20463 */ "STY\0"
  /* 20467 */ "InsnRXY\0"
  /* 20475 */ "VLLEZ\0"
  /* 20481 */ "VUPKZ\0"
  /* 20487 */ "VPKZ\0"
  /* 20492 */ "VCLZ\0"
  /* 20497 */ "G_CTLZ\0"
  /* 20504 */ "BAsmNZ\0"
  /* 20511 */ "LOCAsmNZ\0"
  /* 20520 */ "STOCAsmNZ\0"
  /* 20530 */ "LOCGAsmNZ\0"
  /* 20540 */ "STOCGAsmNZ\0"
  /* 20551 */ "JGAsmNZ\0"
  /* 20559 */ "LOCFHAsmNZ\0"
  /* 20570 */ "STOCFHAsmNZ\0"
  /* 20582 */ "BIAsmNZ\0"
  /* 20590 */ "LOCHIAsmNZ\0"
  /* 20601 */ "LOCGHIAsmNZ\0"
  /* 20613 */ "LOCHHIAsmNZ\0"
  /* 20625 */ "JAsmNZ\0"
  /* 20632 */ "BRAsmNZ\0"
  /* 20640 */ "LOCRAsmNZ\0"
  /* 20650 */ "LOCGRAsmNZ\0"
  /* 20661 */ "SELGRAsmNZ\0"
  /* 20672 */ "LOCFHRAsmNZ\0"
  /* 20684 */ "SELFHRAsmNZ\0"
  /* 20696 */ "SELRAsmNZ\0"
  /* 20706 */ "VLLEBRZ\0"
  /* 20714 */ "VCTZ\0"
  /* 20719 */ "G_CTTZ\0"
  /* 20726 */ "MVZ\0"
  /* 20730 */ "BAsmZ\0"
  /* 20736 */ "LOCAsmZ\0"
  /* 20744 */ "STOCAsmZ\0"
  /* 20753 */ "LOCGAsmZ\0"
  /* 20762 */ "STOCGAsmZ\0"
  /* 20772 */ "JGAsmZ\0"
  /* 20779 */ "LOCFHAsmZ\0"
  /* 20789 */ "STOCFHAsmZ\0"
  /* 20800 */ "BIAsmZ\0"
  /* 20807 */ "LOCHIAsmZ\0"
  /* 20817 */ "LOCGHIAsmZ\0"
  /* 20828 */ "LOCHHIAsmZ\0"
  /* 20839 */ "JAsmZ\0"
  /* 20845 */ "BRAsmZ\0"
  /* 20852 */ "LOCRAsmZ\0"
  /* 20861 */ "LOCGRAsmZ\0"
  /* 20871 */ "SELGRAsmZ\0"
  /* 20881 */ "LOCFHRAsmZ\0"
  /* 20892 */ "SELFHRAsmZ\0"
  /* 20903 */ "SELRAsmZ\0"
  /* 20912 */ "CPSDRdd\0"
  /* 20920 */ "CPSDRsd\0"
  /* 20928 */ "NOP_bare\0"
  /* 20937 */ "LTDBRCompare\0"
  /* 20950 */ "LTEBRCompare\0"
  /* 20963 */ "LTXBRCompare\0"
  /* 20976 */ "Serialize\0"
  /* 20986 */ "CLCReg\0"
  /* 20993 */ "NCReg\0"
  /* 20999 */ "OCReg\0"
  /* 21005 */ "MVCReg\0"
  /* 21012 */ "XCReg\0"
  /* 21018 */ "MemsetRegReg\0"
  /* 21031 */ "MemsetImmReg\0"
  /* 21044 */ "ATOMIC_LOAD_NIHF64i\0"
  /* 21064 */ "ATOMIC_LOAD_NILF64i\0"
  /* 21084 */ "ATOMIC_LOAD_NIHH64i\0"
  /* 21104 */ "ATOMIC_LOAD_NILH64i\0"
  /* 21124 */ "ATOMIC_LOAD_NIHL64i\0"
  /* 21144 */ "ATOMIC_LOAD_NILL64i\0"
  /* 21164 */ "ATOMIC_LOAD_NILFi\0"
  /* 21182 */ "ATOMIC_LOAD_NILHi\0"
  /* 21200 */ "ATOMIC_LOADW_NILHi\0"
  /* 21219 */ "ATOMIC_LOAD_NILLi\0"
  /* 21237 */ "ATOMIC_LOAD_NGRi\0"
  /* 21254 */ "ATOMIC_LOAD_NRi\0"
  /* 21270 */ "ATOMIC_LOADW_NRi\0"
  /* 21287 */ "CIBCall\0"
  /* 21295 */ "CGIBCall\0"
  /* 21304 */ "CLGIBCall\0"
  /* 21314 */ "CLIBCall\0"
  /* 21323 */ "CRBCall\0"
  /* 21331 */ "CGRBCall\0"
  /* 21340 */ "CLGRBCall\0"
  /* 21350 */ "CLRBCall\0"
  /* 21359 */ "CLCImm\0"
  /* 21366 */ "NCImm\0"
  /* 21372 */ "OCImm\0"
  /* 21378 */ "MVCImm\0"
  /* 21385 */ "XCImm\0"
  /* 21391 */ "MemsetRegImm\0"
  /* 21404 */ "MemsetImmImm\0"
  /* 21417 */ "CIBAsm\0"
  /* 21424 */ "CGIBAsm\0"
  /* 21432 */ "CLGIBAsm\0"
  /* 21441 */ "CLIBAsm\0"
  /* 21449 */ "CRBAsm\0"
  /* 21456 */ "CGRBAsm\0"
  /* 21464 */ "CLGRBAsm\0"
  /* 21473 */ "CLRBAsm\0"
  /* 21481 */ "BCAsm\0"
  /* 21487 */ "BICAsm\0"
  /* 21494 */ "LOCAsm\0"
  /* 21501 */ "STOCAsm\0"
  /* 21509 */ "BRCAsm\0"
  /* 21516 */ "LOCGAsm\0"
  /* 21524 */ "STOCGAsm\0"
  /* 21533 */ "LOCFHAsm\0"
  /* 21542 */ "STOCFHAsm\0"
  /* 21552 */ "LOCHIAsm\0"
  /* 21561 */ "LOCGHIAsm\0"
  /* 21571 */ "LOCHHIAsm\0"
  /* 21581 */ "CIJAsm\0"
  /* 21588 */ "CGIJAsm\0"
  /* 21596 */ "CLGIJAsm\0"
  /* 21605 */ "CLIJAsm\0"
  /* 21613 */ "CRJAsm\0"
  /* 21620 */ "CGRJAsm\0"
  /* 21628 */ "CLGRJAsm\0"
  /* 21637 */ "CLRJAsm\0"
  /* 21645 */ "BRCLAsm\0"
  /* 21653 */ "BCRAsm\0"
  /* 21660 */ "LOCRAsm\0"
  /* 21668 */ "LOCGRAsm\0"
  /* 21677 */ "SELGRAsm\0"
  /* 21686 */ "LOCFHRAsm\0"
  /* 21696 */ "SELFHRAsm\0"
  /* 21706 */ "SELRAsm\0"
  /* 21714 */ "CLGTAsm\0"
  /* 21722 */ "CITAsm\0"
  /* 21729 */ "CLFITAsm\0"
  /* 21738 */ "CGITAsm\0"
  /* 21746 */ "CLGITAsm\0"
  /* 21755 */ "CLTAsm\0"
  /* 21762 */ "CRTAsm\0"
  /* 21769 */ "CGRTAsm\0"
  /* 21777 */ "CLGRTAsm\0"
  /* 21786 */ "CLRTAsm\0"
  /* 21794 */ "VLAlign\0"
  /* 21802 */ "VLMAlign\0"
  /* 21811 */ "VSTMAlign\0"
  /* 21821 */ "VSTAlign\0"
  /* 21830 */ "CIBReturn\0"
  /* 21840 */ "CGIBReturn\0"
  /* 21851 */ "CLGIBReturn\0"
  /* 21863 */ "CLIBReturn\0"
  /* 21874 */ "CRBReturn\0"
  /* 21884 */ "CGRBReturn\0"
  /* 21895 */ "CLGRBReturn\0"
  /* 21907 */ "CLRBReturn\0"
  /* 21918 */ "CondReturn\0"
  /* 21929 */ "EXRL_Pseudo\0"
  /* 21941 */ "LTDBRCompare_VecPseudo\0"
  /* 21964 */ "LTEBRCompare_VecPseudo\0"
  /* 21987 */ "LTXBRCompare_VecPseudo\0"
  /* 22010 */ "A_MemFoldPseudo\0"
  /* 22026 */ "MADB_MemFoldPseudo\0"
  /* 22045 */ "DDB_MemFoldPseudo\0"
  /* 22063 */ "MDB_MemFoldPseudo\0"
  /* 22081 */ "MSDB_MemFoldPseudo\0"
  /* 22100 */ "MAEB_MemFoldPseudo\0"
  /* 22119 */ "DEB_MemFoldPseudo\0"
  /* 22137 */ "MEEB_MemFoldPseudo\0"
  /* 22156 */ "MSEB_MemFoldPseudo\0"
  /* 22175 */ "MSGC_MemFoldPseudo\0"
  /* 22194 */ "MSC_MemFoldPseudo\0"
  /* 22212 */ "AG_MemFoldPseudo\0"
  /* 22229 */ "LOCG_MemFoldPseudo\0"
  /* 22248 */ "ALG_MemFoldPseudo\0"
  /* 22266 */ "SLG_MemFoldPseudo\0"
  /* 22284 */ "NG_MemFoldPseudo\0"
  /* 22301 */ "OG_MemFoldPseudo\0"
  /* 22318 */ "SG_MemFoldPseudo\0"
  /* 22335 */ "XG_MemFoldPseudo\0"
  /* 22352 */ "AL_MemFoldPseudo\0"
  /* 22369 */ "SL_MemFoldPseudo\0"
  /* 22386 */ "N_MemFoldPseudo\0"
  /* 22402 */ "O_MemFoldPseudo\0"
  /* 22418 */ "S_MemFoldPseudo\0"
  /* 22434 */ "X_MemFoldPseudo\0"
  /* 22450 */ "LOCMux_MemFoldPseudo\0"
  /* 22471 */ "CondTrap\0"
  /* 22480 */ "CLSTLoop\0"
  /* 22489 */ "SRSTLoop\0"
  /* 22498 */ "MVSTLoop\0"
  /* 22507 */ "CPSDRds\0"
  /* 22515 */ "CPSDRss\0"
  /* 22523 */ "TBEGIN_nofloat\0"
  /* 22538 */ "CU21Opt\0"
  /* 22546 */ "CU12Opt\0"
  /* 22554 */ "CU14Opt\0"
  /* 22562 */ "CU24Opt\0"
  /* 22570 */ "VCVBOpt\0"
  /* 22578 */ "SSKEOpt\0"
  /* 22586 */ "TRTREOpt\0"
  /* 22595 */ "IDTEOpt\0"
  /* 22603 */ "CRDTEOpt\0"
  /* 22612 */ "IPTEOpt\0"
  /* 22620 */ "TRTEOpt\0"
  /* 22628 */ "CUUTFOpt\0"
  /* 22637 */ "VCVBGOpt\0"
  /* 22646 */ "TROOOpt\0"
  /* 22654 */ "TRTOOpt\0"
  /* 22662 */ "RDPOpt\0"
  /* 22669 */ "POPCNTOpt\0"
  /* 22679 */ "TROTOpt\0"
  /* 22687 */ "TRTTOpt\0"
  /* 22695 */ "CUTFUOpt\0"
  /* 22704 */ "IPTEOptOpt\0"
  /* 22715 */ "CondStoreF32Inv\0"
  /* 22731 */ "CondStore32Inv\0"
  /* 22746 */ "CondStoreF64Inv\0"
  /* 22762 */ "CondStore64Inv\0"
  /* 22777 */ "CondStore16Inv\0"
  /* 22792 */ "CondStore8Inv\0"
  /* 22806 */ "CondStore32MuxInv\0"
  /* 22824 */ "CondStore16MuxInv\0"
  /* 22842 */ "CondStore8MuxInv\0"
  /* 22859 */ "CondStore32Mux\0"
  /* 22874 */ "CondStore16Mux\0"
  /* 22889 */ "CondStore8Mux\0"
  /* 22903 */ "LBMux\0"
  /* 22909 */ "RISBMux\0"
  /* 22917 */ "LLCMux\0"
  /* 22924 */ "LOCMux\0"
  /* 22931 */ "STOCMux\0"
  /* 22939 */ "STCMux\0"
  /* 22946 */ "IIFMux\0"
  /* 22953 */ "NIFMux\0"
  /* 22960 */ "OIFMux\0"
  /* 22967 */ "XIFMux\0"
  /* 22974 */ "IIHMux\0"
  /* 22981 */ "NIHMux\0"
  /* 22988 */ "OIHMux\0"
  /* 22995 */ "LLHMux\0"
  /* 23002 */ "TMHMux\0"
  /* 23009 */ "STHMux\0"
  /* 23016 */ "AFIMux\0"
  /* 23023 */ "CFIMux\0"
  /* 23030 */ "CLFIMux\0"
  /* 23038 */ "AHIMux\0"
  /* 23045 */ "LOCHIMux\0"
  /* 23054 */ "LHIMux\0"
  /* 23061 */ "CLMux\0"
  /* 23067 */ "IILMux\0"
  /* 23074 */ "NILMux\0"
  /* 23081 */ "OILMux\0"
  /* 23088 */ "TMLMux\0"
  /* 23095 */ "LLCRMux\0"
  /* 23103 */ "LOCRMux\0"
  /* 23111 */ "LLHRMux\0"
  /* 23119 */ "SELRMux\0"
  /* 23127 */ "STMux\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

extern const unsigned SystemZInstrNameIndices[] = {
    11631U, 14041U, 16436U, 14578U, 12159U, 12140U, 12168U, 12415U, 
    8038U, 8053U, 7092U, 8085U, 18856U, 6493U, 19605U, 7146U, 
    11627U, 12149U, 3845U, 20437U, 4927U, 19478U, 3613U, 3780U, 
    3833U, 15134U, 12386U, 19369U, 3711U, 15658U, 8443U, 19358U, 
    6375U, 15580U, 15567U, 16707U, 19192U, 19246U, 12318U, 12365U, 
    12338U, 12185U, 16657U, 19690U, 19720U, 14355U, 3476U, 2651U, 
    13256U, 19848U, 19855U, 13744U, 13751U, 13758U, 13768U, 3586U, 
    17450U, 17398U, 7090U, 11629U, 20135U, 6503U, 12949U, 19100U, 
    18458U, 19519U, 18475U, 17350U, 3126U, 18810U, 19380U, 17789U, 
    19578U, 6546U, 3677U, 3100U, 3659U, 19399U, 14321U, 16732U, 
    3374U, 3318U, 3348U, 3359U, 3299U, 3329U, 6408U, 6392U, 
    18886U, 8144U, 8161U, 3492U, 2657U, 3592U, 3553U, 17471U, 
    17404U, 20119U, 14547U, 20085U, 14513U, 3443U, 2634U, 20002U, 
    14430U, 15165U, 15143U, 3825U, 3626U, 19123U, 19493U, 3026U, 
    18923U, 19704U, 3118U, 19340U, 19328U, 19468U, 8435U, 19683U, 
    8072U, 19713U, 12266U, 17166U, 17152U, 12259U, 17159U, 17782U, 
    13163U, 15340U, 15333U, 19114U, 14648U, 3866U, 14632U, 3806U, 
    14640U, 3858U, 14624U, 3798U, 14679U, 14671U, 9715U, 9707U, 
    19011U, 19001U, 18991U, 18981U, 19031U, 19021U, 20163U, 20173U, 
    19041U, 19054U, 20183U, 20193U, 19067U, 19080U, 3401U, 2613U, 
    13198U, 1009U, 3292U, 19827U, 13723U, 19922U, 11797U, 15677U, 
    274U, 8378U, 260U, 0U, 8031U, 19675U, 3090U, 11739U, 
    11784U, 15271U, 15280U, 18094U, 14370U, 18873U, 6555U, 14110U, 
    14120U, 3883U, 3898U, 14088U, 14099U, 3482U, 12059U, 14464U, 
    20036U, 14488U, 20060U, 18101U, 3650U, 3640U, 16431U, 19270U, 
    19302U, 19281U, 17365U, 20719U, 7072U, 20497U, 7054U, 15553U, 
    15196U, 6434U, 12272U, 18785U, 14563U, 19551U, 17341U, 19391U, 
    19417U, 19588U, 16500U, 4902U, 3187U, 3429U, 2620U, 13226U, 
    19834U, 13730U, 1015U, 19559U, 16751U, 16767U, 20428U, 5906U, 
    6518U, 19206U, 14923U, 3408U, 13205U, 3384U, 13181U, 19985U, 
    14413U, 3460U, 13240U, 3570U, 17435U, 17382U, 20019U, 14447U, 
    20043U, 14471U, 20149U, 20156U, 22027U, 14598U, 15643U, 3204U, 
    22101U, 902U, 23016U, 22212U, 23038U, 12080U, 22248U, 22352U, 
    19942U, 11453U, 16005U, 20102U, 14530U, 9107U, 21200U, 17325U, 
    21270U, 9142U, 17455U, 17545U, 20067U, 14495U, 7443U, 18049U, 
    11437U, 11474U, 11566U, 16898U, 11544U, 15990U, 215U, 802U, 
    134U, 748U, 16983U, 21237U, 305U, 21044U, 456U, 21084U, 
    597U, 21124U, 7392U, 369U, 21064U, 21164U, 9090U, 508U, 
    21104U, 21182U, 12426U, 649U, 21144U, 21219U, 17310U, 21254U, 
    17005U, 324U, 475U, 616U, 7409U, 388U, 9125U, 527U, 
    12443U, 668U, 17420U, 17036U, 17530U, 195U, 782U, 114U, 
    728U, 17074U, 343U, 7426U, 407U, 18034U, 19929U, 153U, 
    767U, 22010U, 23023U, 21295U, 21840U, 21331U, 21884U, 23047U, 
    21287U, 21830U, 21359U, 20986U, 23030U, 21304U, 21851U, 21340U, 
    21895U, 21314U, 21863U, 23061U, 21350U, 21907U, 22480U, 22919U, 
    21323U, 21874U, 17511U, 19657U, 572U, 16456U, 16449U, 13110U, 
    553U, 12116U, 8215U, 21918U, 11928U, 848U, 22777U, 22874U, 
    22824U, 234U, 22731U, 22859U, 22806U, 821U, 22762U, 918U, 
    22792U, 22889U, 22842U, 41U, 22715U, 426U, 22746U, 22471U, 
    22045U, 22119U, 21929U, 19430U, 22946U, 298U, 449U, 590U, 
    22974U, 362U, 501U, 642U, 23067U, 871U, 22903U, 16823U, 
    16638U, 23054U, 22996U, 22917U, 23095U, 22995U, 23111U, 23062U, 
    22229U, 23045U, 22924U, 22450U, 23103U, 21941U, 21964U, 21987U, 
    20203U, 22026U, 22100U, 22063U, 22137U, 22194U, 22081U, 22156U, 
    22175U, 21378U, 21005U, 22498U, 21404U, 21031U, 21391U, 21018U, 
    21366U, 20993U, 22284U, 22953U, 317U, 468U, 609U, 22981U, 
    381U, 520U, 661U, 23074U, 22386U, 21372U, 20999U, 22301U, 
    22960U, 336U, 487U, 628U, 22988U, 400U, 539U, 680U, 
    23081U, 22402U, 876U, 933U, 3151U, 8918U, 12221U, 9053U, 
    12398U, 22909U, 21833U, 11932U, 22082U, 22157U, 23119U, 22318U, 
    22266U, 22369U, 22489U, 896U, 22939U, 23009U, 23127U, 22931U, 
    20244U, 22418U, 246U, 833U, 860U, 54U, 439U, 884U, 
    97U, 711U, 20976U, 22523U, 12296U, 12307U, 494U, 635U, 
    23002U, 546U, 687U, 23088U, 22475U, 72U, 694U, 91U, 
    705U, 77U, 108U, 722U, 21385U, 21012U, 22335U, 22967U, 
    355U, 419U, 3169U, 22434U, 910U, 931U, 3296U, 1361U, 
    16022U, 16486U, 17597U, 1188U, 3768U, 1760U, 16135U, 16603U, 
    11449U, 7867U, 7171U, 11486U, 16828U, 8870U, 11578U, 11892U, 
    16910U, 11973U, 11685U, 8693U, 17115U, 17235U, 11556U, 11887U, 
    20323U, 9003U, 12090U, 3062U, 7972U, 16920U, 16470U, 11520U, 
    8229U, 7185U, 11496U, 16839U, 11898U, 16947U, 11990U, 11690U, 
    17121U, 17241U, 11906U, 17208U, 12030U, 11734U, 9036U, 14382U, 
    20378U, 15140U, 15961U, 11959U, 11681U, 19770U, 17942U, 19899U, 
    17955U, 16337U, 17963U, 17836U, 1233U, 20258U, 1307U, 17202U, 
    12093U, 17207U, 18080U, 17515U, 14073U, 6582U, 10995U, 4422U, 
    13288U, 5450U, 9731U, 14135U, 5929U, 10240U, 3930U, 12503U, 
    4947U, 9192U, 13818U, 14711U, 15351U, 20504U, 14952U, 15691U, 
    20730U, 2975U, 21481U, 16460U, 21653U, 19110U, 8553U, 17052U, 
    17561U, 11406U, 6716U, 11129U, 4571U, 13422U, 5599U, 9880U, 
    14205U, 6078U, 10389U, 4094U, 12652U, 5111U, 9356U, 13896U, 
    14789U, 15429U, 20582U, 15022U, 15761U, 20800U, 3022U, 21487U, 
    15592U, 15600U, 16024U, 18089U, 13114U, 6827U, 11240U, 4694U, 
    13533U, 5722U, 10003U, 14250U, 6201U, 10512U, 4229U, 12775U, 
    5246U, 9491U, 13946U, 14839U, 15479U, 20632U, 15067U, 15806U, 
    20845U, 3246U, 21509U, 12120U, 21645U, 19143U, 8571U, 10839U, 
    10906U, 8189U, 5442U, 8324U, 1275U, 8512U, 14051U, 10897U, 
    8184U, 5437U, 8025U, 2960U, 3381U, 1403U, 16028U, 16243U, 
    1096U, 16801U, 17720U, 16282U, 1117U, 16932U, 17746U, 1219U, 
    16255U, 17726U, 16294U, 17752U, 19445U, 16496U, 18454U, 8520U, 
    17805U, 20446U, 17602U, 17823U, 19760U, 3817U, 1771U, 16141U, 
    17612U, 16249U, 1103U, 16818U, 16288U, 1124U, 16942U, 16262U, 
    16301U, 16608U, 17852U, 3004U, 16044U, 1054U, 16524U, 17636U, 
    16164U, 1075U, 16633U, 11470U, 16360U, 1152U, 17982U, 17870U, 
    7958U, 16057U, 1061U, 16529U, 17649U, 1200U, 16177U, 1082U, 
    16643U, 7175U, 11491U, 16834U, 12993U, 8874U, 11585U, 13035U, 
    11708U, 2019U, 21424U, 6588U, 11001U, 4429U, 13294U, 5457U, 
    9738U, 5936U, 10247U, 3938U, 12510U, 4955U, 9200U, 11812U, 
    21588U, 6763U, 11176U, 4623U, 13469U, 5651U, 9932U, 6130U, 
    10441U, 4151U, 12704U, 5168U, 9413U, 19235U, 21738U, 6921U, 
    11334U, 4798U, 13627U, 5826U, 10107U, 6305U, 10616U, 4343U, 
    12879U, 5360U, 9605U, 16922U, 2231U, 21456U, 6624U, 11037U, 
    4469U, 13330U, 5497U, 9778U, 5976U, 10287U, 3982U, 12550U, 
    4999U, 9244U, 11832U, 21620U, 6799U, 11212U, 4663U, 13505U, 
    5691U, 9972U, 6170U, 10481U, 4195U, 12744U, 5212U, 9457U, 
    13013U, 19528U, 21769U, 6956U, 11369U, 4837U, 13662U, 5865U, 
    10146U, 6344U, 10655U, 4386U, 12918U, 5403U, 9648U, 16373U, 
    1159U, 17987U, 17883U, 1245U, 8719U, 7253U, 17110U, 11721U, 
    11562U, 17230U, 13030U, 11696U, 20327U, 2009U, 21417U, 6580U, 
    10993U, 4420U, 13286U, 5448U, 9729U, 5927U, 10238U, 3928U, 
    12501U, 4945U, 9190U, 9014U, 11808U, 21581U, 6755U, 11168U, 
    4614U, 13461U, 5642U, 9923U, 6121U, 10432U, 4141U, 12695U, 
    5158U, 9403U, 19225U, 21722U, 6903U, 11316U, 4778U, 13609U, 
    5806U, 10087U, 6285U, 10596U, 4321U, 12859U, 5338U, 9583U, 
    14056U, 12108U, 3066U, 12111U, 4915U, 19785U, 16050U, 17642U, 
    16170U, 11701U, 11525U, 19229U, 21729U, 6911U, 11324U, 4787U, 
    13617U, 5815U, 10096U, 6294U, 10605U, 4331U, 12868U, 5348U, 
    9593U, 16366U, 17876U, 8242U, 16063U, 17655U, 16183U, 7190U, 
    11502U, 16845U, 12999U, 13041U, 11714U, 2024U, 21432U, 6597U, 
    11010U, 4439U, 13303U, 5467U, 9748U, 5946U, 10257U, 3949U, 
    12520U, 4966U, 9211U, 11817U, 21596U, 6772U, 11185U, 4633U, 
    13478U, 5661U, 9942U, 6140U, 10451U, 4162U, 12714U, 5179U, 
    9424U, 19240U, 21746U, 6930U, 11343U, 4808U, 13636U, 5836U, 
    10117U, 6315U, 10626U, 4354U, 12889U, 5371U, 9616U, 16952U, 
    2236U, 21464U, 6633U, 11046U, 4479U, 13339U, 5507U, 9788U, 
    5986U, 10297U, 3993U, 12560U, 5010U, 9255U, 11837U, 21628U, 
    6808U, 11221U, 4673U, 13514U, 5701U, 9982U, 6180U, 10491U, 
    4206U, 12754U, 5223U, 9468U, 13018U, 19533U, 21777U, 6965U, 
    11378U, 4847U, 13671U, 5875U, 10156U, 6354U, 10665U, 4397U, 
    12928U, 5414U, 9659U, 19215U, 21714U, 6894U, 11307U, 4768U, 
    13600U, 5796U, 10077U, 6275U, 10586U, 4310U, 12849U, 5327U, 
    9572U, 16379U, 17889U, 7290U, 17141U, 11727U, 17261U, 13055U, 
    11640U, 2030U, 21441U, 6607U, 11020U, 4450U, 13313U, 5478U, 
    9759U, 5957U, 10268U, 3961U, 12531U, 4978U, 9223U, 9024U, 
    11823U, 21605U, 6782U, 11195U, 4644U, 13488U, 5672U, 9953U, 
    6151U, 10462U, 4174U, 12725U, 5191U, 9436U, 20348U, 13805U, 
    10206U, 20412U, 17212U, 2242U, 21473U, 6643U, 11056U, 4490U, 
    13349U, 5518U, 9799U, 5997U, 10308U, 4005U, 12571U, 5022U, 
    9267U, 11843U, 21637U, 6818U, 11231U, 4684U, 13524U, 5712U, 
    9993U, 6191U, 10502U, 4218U, 12765U, 5235U, 9480U, 13073U, 
    19539U, 21786U, 6975U, 11388U, 4858U, 13681U, 5886U, 10167U, 
    6365U, 10676U, 4409U, 12939U, 5426U, 9671U, 19620U, 19277U, 
    21755U, 6940U, 11353U, 4819U, 13646U, 5847U, 10128U, 6326U, 
    10637U, 4366U, 12900U, 5383U, 9628U, 20382U, 3271U, 15210U, 
    19165U, 20912U, 22507U, 20920U, 22515U, 19745U, 1297U, 16461U, 
    2227U, 21449U, 6616U, 11029U, 4460U, 13322U, 5488U, 9769U, 
    5967U, 10278U, 3972U, 12541U, 4989U, 9234U, 6473U, 22603U, 
    11828U, 21613U, 6791U, 11204U, 4654U, 13497U, 5682U, 9963U, 
    6161U, 10472U, 4185U, 12735U, 5202U, 9447U, 12983U, 19515U, 
    21762U, 6948U, 11361U, 4828U, 13654U, 5856U, 10137U, 6335U, 
    10646U, 4376U, 12909U, 5393U, 9638U, 18451U, 8749U, 17684U, 
    8516U, 15619U, 8412U, 19630U, 17918U, 20442U, 25U, 22546U, 
    282U, 22554U, 9U, 22538U, 293U, 22562U, 20U, 255U, 
    17702U, 6463U, 19773U, 22695U, 7743U, 22628U, 17936U, 2682U, 
    7950U, 20270U, 3754U, 8004U, 20293U, 16343U, 16276U, 1110U, 
    16893U, 17740U, 16315U, 1131U, 17069U, 17772U, 1226U, 16269U, 
    17733U, 16308U, 17765U, 19463U, 17968U, 17817U, 17841U, 17829U, 
    19765U, 20276U, 19175U, 19755U, 3297U, 3398U, 1428U, 16033U, 
    16509U, 17607U, 1194U, 3863U, 1777U, 16147U, 16614U, 2993U, 
    7875U, 16070U, 16190U, 12132U, 8248U, 16957U, 17216U, 15217U, 
    16487U, 8521U, 7219U, 16875U, 17026U, 16349U, 17973U, 17847U, 
    1239U, 15960U, 7870U, 17566U, 977U, 8558U, 3510U, 11923U, 
    17618U, 17858U, 3225U, 17184U, 15971U, 17584U, 19965U, 8067U, 
    8110U, 17190U, 15976U, 17690U, 957U, 1284U, 17924U, 3635U, 
    20146U, 13105U, 16076U, 1068U, 16544U, 17662U, 16196U, 1089U, 
    16652U, 16386U, 1166U, 17992U, 17896U, 16999U, 16540U, 16648U, 
    8754U, 2958U, 3023U, 30U, 20251U, 13714U, 10177U, 20401U, 
    20275U, 6468U, 22595U, 17624U, 17864U, 7257U, 8930U, 12233U, 
    7381U, 9079U, 12410U, 11946U, 14020U, 6479U, 22612U, 22704U, 
    13704U, 4886U, 12075U, 6984U, 11674U, 4868U, 12280U, 19797U, 
    18743U, 17504U, 6416U, 7679U, 18827U, 18849U, 6447U, 11752U, 
    20455U, 20237U, 6538U, 7791U, 20467U, 18953U, 11773U, 12288U, 
    20361U, 18916U, 6455U, 7719U, 11666U, 17496U, 18841U, 19891U, 
    20229U, 11765U, 11810U, 6757U, 11170U, 4616U, 13463U, 5644U, 
    9925U, 14244U, 6123U, 10434U, 4143U, 12697U, 5160U, 9405U, 
    13939U, 14832U, 15472U, 20625U, 15061U, 15800U, 20839U, 8219U, 
    6688U, 11101U, 4540U, 13394U, 5568U, 9849U, 14177U, 6047U, 
    10358U, 4060U, 12621U, 5077U, 9322U, 13865U, 14758U, 15398U, 
    20551U, 14994U, 15733U, 20772U, 1594U, 16082U, 1279U, 17668U, 
    1829U, 16202U, 3543U, 3548U, 13802U, 1028U, 2962U, 3078U, 
    17578U, 7548U, 14689U, 16392U, 17902U, 12091U, 995U, 929U, 
    7865U, 12088U, 8227U, 3771U, 20298U, 13690U, 20390U, 14317U, 
    8363U, 14615U, 8373U, 12976U, 15614U, 18977U, 19975U, 8651U, 
    20257U, 2045U, 15958U, 8712U, 16322U, 1326U, 13134U, 16027U, 
    16800U, 168U, 16495U, 16140U, 16607U, 16833U, 16921U, 16471U, 
    13140U, 8312U, 16342U, 17967U, 3535U, 3875U, 35U, 1776U, 
    16146U, 16618U, 17714U, 16937U, 16549U, 85U, 16348U, 1138U, 
    17972U, 17846U, 20284U, 4899U, 16038U, 1047U, 16519U, 17630U, 
    16669U, 16354U, 1145U, 17977U, 20303U, 18084U, 8861U, 18971U, 
    3230U, 8230U, 18966U, 1931U, 16296U, 16534U, 7186U, 11497U, 
    16840U, 13000U, 8116U, 8885U, 11590U, 17105U, 13042U, 16948U, 
    13019U, 3256U, 9050U, 8954U, 11619U, 17148U, 13056U, 20331U, 
    3070U, 8732U, 16475U, 3012U, 16464U, 7195U, 18959U, 16851U, 
    13006U, 8525U, 8884U, 17104U, 13048U, 19220U, 19093U, 17759U, 
    9163U, 8958U, 17147U, 13061U, 7262U, 8935U, 12238U, 7386U, 
    9084U, 12420U, 7212U, 13806U, 3549U, 8348U, 10207U, 20413U, 
    16092U, 16806U, 177U, 16557U, 16207U, 16677U, 16863U, 16978U, 
    17306U, 16402U, 18005U, 3165U, 21494U, 6652U, 11065U, 4500U, 
    13358U, 5528U, 9809U, 14141U, 6007U, 10318U, 4016U, 12581U, 
    5033U, 9278U, 13825U, 14718U, 15358U, 20511U, 14958U, 15697U, 
    20736U, 8848U, 21533U, 6695U, 11108U, 4548U, 13401U, 5576U, 
    9857U, 14184U, 6055U, 10366U, 4069U, 12629U, 5086U, 9331U, 
    13873U, 14766U, 15406U, 20559U, 15001U, 15740U, 20779U, 17090U, 
    21686U, 6863U, 11276U, 4734U, 13569U, 5762U, 10043U, 14286U, 
    6241U, 10552U, 4273U, 12815U, 5290U, 9535U, 13986U, 14879U, 
    15519U, 20672U, 15103U, 15842U, 20881U, 7982U, 21516U, 6669U, 
    11082U, 4519U, 13375U, 5547U, 9828U, 14158U, 6026U, 10337U, 
    4037U, 12600U, 5054U, 9299U, 13844U, 14737U, 15377U, 20530U, 
    14975U, 15714U, 20753U, 11583U, 21561U, 6733U, 11146U, 4590U, 
    13439U, 5618U, 9899U, 14222U, 6097U, 10408U, 4115U, 12671U, 
    5132U, 9377U, 13915U, 14808U, 15448U, 20601U, 15039U, 15778U, 
    20817U, 16926U, 21668U, 6843U, 11256U, 4712U, 13549U, 5740U, 
    10021U, 14266U, 6219U, 10530U, 4249U, 12793U, 5266U, 9511U, 
    13964U, 14857U, 15497U, 20650U, 15083U, 15822U, 20861U, 11606U, 
    21571U, 6744U, 11157U, 4602U, 13450U, 5630U, 9911U, 14233U, 
    6109U, 10420U, 4128U, 12683U, 5145U, 9390U, 13927U, 14820U, 
    15460U, 20613U, 15050U, 15789U, 20828U, 11560U, 21552U, 6723U, 
    11136U, 4579U, 13429U, 5607U, 9888U, 14212U, 6086U, 10397U, 
    4103U, 12660U, 5120U, 9365U, 13904U, 14797U, 15437U, 20590U, 
    15029U, 15768U, 20807U, 16480U, 21660U, 6834U, 11247U, 4702U, 
    13540U, 5730U, 10011U, 14257U, 6209U, 10520U, 4238U, 12783U, 
    5255U, 9500U, 13954U, 14847U, 15487U, 20640U, 15074U, 15813U, 
    20852U, 13145U, 3703U, 16098U, 16812U, 186U, 7998U, 16562U, 
    16213U, 16682U, 16869U, 17021U, 15596U, 15927U, 17486U, 19970U, 
    6528U, 20312U, 962U, 16408U, 18010U, 17209U, 1173U, 7892U, 
    20265U, 16572U, 16692U, 13074U, 19882U, 8640U, 17063U, 10886U, 
    17950U, 13151U, 19278U, 16116U, 20937U, 16582U, 17696U, 16231U, 
    20950U, 16702U, 8583U, 7229U, 16887U, 17058U, 17778U, 16425U, 
    20963U, 18024U, 17930U, 1264U, 7910U, 3758U, 1748U, 16122U, 
    16587U, 17708U, 6534U, 1879U, 16237U, 16790U, 17997U, 20379U, 
    16597U, 16795U, 7694U, 8507U, 18029U, 13692U, 3295U, 1373U, 
    16021U, 16485U, 3776U, 1765U, 16134U, 16602U, 20261U, 10911U, 
    17173U, 13270U, 17292U, 18065U, 3079U, 3545U, 1606U, 16087U, 
    3879U, 1787U, 16152U, 16623U, 16553U, 17673U, 1207U, 5897U, 
    3918U, 1798U, 16158U, 16628U, 16673U, 20319U, 8333U, 8892U, 
    11595U, 12002U, 10179U, 11623U, 20335U, 12486U, 8277U, 16968U, 
    17267U, 15337U, 17303U, 18776U, 3267U, 8759U, 3745U, 1704U, 
    16110U, 16577U, 6430U, 1868U, 16225U, 16697U, 11535U, 8545U, 
    3017U, 7224U, 11514U, 16881U, 17031U, 3049U, 17526U, 3056U, 
    1289U, 20451U, 3281U, 11877U, 14389U, 11872U, 12125U, 4921U, 
    19791U, 18792U, 15208U, 12981U, 18449U, 12069U, 11600U, 11613U, 
    11635U, 11793U, 20369U, 14594U, 14948U, 8417U, 19635U, 20726U, 
    16397U, 3762U, 1753U, 16128U, 16592U, 18001U, 17907U, 1252U, 
    20392U, 10916U, 17179U, 13275U, 17298U, 18070U, 14319U, 3087U, 
    11978U, 11963U, 8365U, 16979U, 12008U, 11644U, 11397U, 7268U, 
    8941U, 12244U, 7404U, 9102U, 12438U, 20353U, 12007U, 1038U, 
    12040U, 12013U, 20928U, 12045U, 17307U, 12041U, 8587U, 12024U, 
    12054U, 20422U, 14617U, 3166U, 11984U, 11968U, 8375U, 17001U, 
    12014U, 11647U, 7273U, 8946U, 12249U, 7421U, 9137U, 12455U, 
    20357U, 17347U, 12046U, 20425U, 11858U, 2048U, 3227U, 2989U, 
    14687U, 3513U, 12987U, 7531U, 14918U, 14402U, 19645U, 985U, 
    19781U, 14667U, 19351U, 22669U, 1043U, 14697U, 17487U, 14702U, 
    19447U, 7739U, 7166U, 11780U, 2133U, 17596U, 17835U, 11660U, 
    11420U, 11748U, 15306U, 15226U, 22662U, 7925U, 64U, 14348U, 
    8132U, 8233U, 12473U, 8267U, 7931U, 7937U, 15602U, 3793U, 
    13709U, 17678U, 17912U, 8764U, 7943U, 18082U, 2967U, 7008U, 
    12102U, 287U, 14U, 699U, 15977U, 17572U, 13791U, 11863U, 
    3038U, 7614U, 3746U, 1692U, 16111U, 16578U, 17685U, 1213U, 
    6431U, 1869U, 16226U, 17097U, 21696U, 6874U, 11287U, 4746U, 
    13580U, 5774U, 10055U, 14297U, 6253U, 10564U, 4286U, 12827U, 
    5303U, 9548U, 13998U, 14891U, 15531U, 20684U, 15114U, 15853U, 
    20892U, 16962U, 21677U, 6853U, 11266U, 4723U, 13559U, 5751U, 
    10032U, 14276U, 6230U, 10541U, 4261U, 12804U, 5278U, 9523U, 
    13975U, 14868U, 15508U, 20661U, 15093U, 15832U, 20871U, 17220U, 
    21706U, 6885U, 11298U, 4758U, 13591U, 5786U, 10067U, 14308U, 
    6265U, 10576U, 4299U, 12839U, 5316U, 9561U, 14010U, 14903U, 
    15543U, 20696U, 15125U, 15864U, 20903U, 16698U, 17520U, 3235U, 
    8513U, 7220U, 16876U, 8896U, 17027U, 12019U, 10810U, 17135U, 
    17255U, 20339U, 4876U, 972U, 15295U, 13117U, 994U, 7880U, 
    11848U, 2124U, 7920U, 16914U, 16321U, 947U, 12130U, 19160U, 
    11530U, 8302U, 7200U, 11508U, 16857U, 16973U, 11996U, 17128U, 
    17248U, 12477U, 8272U, 11913U, 17284U, 12035U, 19740U, 20386U, 
    13170U, 15616U, 17590U, 989U, 14024U, 19450U, 20214U, 3707U, 
    1678U, 16104U, 16567U, 6388U, 1863U, 16219U, 16687U, 16414U, 
    18015U, 17517U, 1179U, 7899U, 11853U, 952U, 12135U, 19170U, 
    12050U, 13090U, 8295U, 11918U, 13813U, 2162U, 19322U, 15606U, 
    19625U, 19809U, 19750U, 17196U, 15981U, 8769U, 4891U, 22578U, 
    14075U, 19585U, 13694U, 20395U, 15187U, 15964U, 3277U, 8785U, 
    11867U, 3043U, 4880U, 7345U, 13718U, 10182U, 20406U, 18798U, 
    19959U, 8577U, 13157U, 20279U, 3749U, 20288U, 6489U, 20307U, 
    8865U, 12210U, 4934U, 3240U, 8589U, 13024U, 3261U, 10845U, 
    8998U, 13067U, 20343U, 15220U, 14080U, 8352U, 10211U, 20417U, 
    14061U, 3216U, 21501U, 6660U, 11073U, 4509U, 13366U, 5537U, 
    9818U, 14149U, 6016U, 10327U, 4026U, 12590U, 5043U, 9288U, 
    13834U, 14727U, 15367U, 20520U, 14966U, 15705U, 20744U, 8854U, 
    21542U, 6705U, 11118U, 4559U, 13411U, 5587U, 9868U, 14194U, 
    6066U, 10377U, 4081U, 12640U, 5098U, 9343U, 13884U, 14777U, 
    15417U, 20570U, 15011U, 15750U, 20789U, 7987U, 21524U, 6678U, 
    11091U, 4529U, 13384U, 5557U, 9838U, 14167U, 6036U, 10347U, 
    4048U, 12610U, 5065U, 9310U, 13854U, 14747U, 15387U, 20540U, 
    14984U, 15723U, 20762U, 14067U, 15931U, 19454U, 20218U, 7904U, 
    13100U, 19886U, 8645U, 10891U, 8774U, 11760U, 1269U, 8501U, 
    20463U, 19806U, 17946U, 3285U, 19967U, 17959U, 16420U, 18020U, 
    17919U, 1258U, 20443U, 19544U, 13695U, 15986U, 2610U, 16490U, 
    16513U, 14395U, 3082U, 1421U, 1770U, 2749U, 19148U, 19180U, 
    19651U, 19154U, 19186U, 19734U, 3608U, 16612U, 16539U, 14081U, 
    8976U, 12254U, 9174U, 12460U, 20418U, 15640U, 11656U, 19434U, 
    17563U, 3814U, 7955U, 268U, 842U, 6426U, 14913U, 22646U, 
    19440U, 22679U, 19574U, 6484U, 22620U, 14943U, 22654U, 17800U, 
    6424U, 22586U, 19640U, 22687U, 18947U, 8775U, 11950U, 983U, 
    19779U, 19459U, 1294U, 1322U, 2971U, 2978U, 1336U, 2983U, 
    15888U, 7013U, 7961U, 8716U, 15882U, 15877U, 7004U, 7916U, 
    8708U, 15192U, 15873U, 8601U, 1942U, 7234U, 8120U, 8900U, 
    12215U, 2059U, 7368U, 8252U, 9066U, 14028U, 7993U, 1910U, 
    8246U, 1928U, 1884U, 1896U, 15895U, 2221U, 18250U, 7625U, 
    18533U, 8422U, 18614U, 10748U, 18679U, 1803U, 14343U, 12965U, 
    18804U, 3521U, 1510U, 8790U, 1960U, 18237U, 7252U, 18520U, 
    8139U, 18601U, 8925U, 18666U, 12228U, 2066U, 18243U, 7375U, 
    18526U, 8259U, 18607U, 9073U, 18672U, 14055U, 1815U, 10226U, 
    12489U, 15265U, 3526U, 1522U, 20492U, 2938U, 15239U, 7836U, 
    8668U, 10964U, 7552U, 15209U, 7562U, 15289U, 10737U, 20714U, 
    2952U, 7859U, 8683U, 10987U, 2681U, 7949U, 22637U, 22570U, 
    3753U, 8003U, 15235U, 3000U, 1342U, 7019U, 7967U, 8722U, 
    12106U, 2053U, 7362U, 8240U, 9060U, 13796U, 2155U, 7541U, 
    8341U, 10199U, 12471U, 2079U, 7468U, 8265U, 9167U, 19862U, 
    2692U, 7763U, 8612U, 10863U, 13120U, 2122U, 7505U, 8300U, 
    9701U, 19876U, 2708U, 7779U, 8628U, 10879U, 1177U, 1309U, 
    6997U, 7897U, 8701U, 19815U, 2673U, 7749U, 8593U, 10849U, 
    13088U, 2109U, 7498U, 8293U, 9694U, 19869U, 2700U, 7771U, 
    8620U, 10871U, 968U, 1359U, 3766U, 1758U, 18215U, 7036U, 
    18498U, 8794U, 18644U, 2909U, 18424U, 7807U, 18576U, 10928U, 
    18718U, 2254U, 3820U, 1438U, 18115U, 2328U, 18265U, 8727U, 
    1536U, 18183U, 3922U, 1452U, 18131U, 2342U, 18281U, 2388U, 
    18333U, 3517U, 1426U, 2316U, 3913U, 1792U, 18222U, 7105U, 
    18505U, 8806U, 18651U, 2916U, 18432U, 7814U, 18584U, 10935U, 
    18726U, 5900U, 1856U, 18229U, 7139U, 18512U, 8835U, 18658U, 
    2930U, 18440U, 7828U, 18592U, 10949U, 18734U, 11540U, 1580U, 
    2432U, 1484U, 18167U, 2374U, 18317U, 1550U, 18199U, 1468U, 
    18149U, 2358U, 18299U, 2402U, 18349U, 1407U, 2302U, 12405U, 
    18762U, 1632U, 2478U, 1662U, 2508U, 17225U, 3728U, 13783U, 
    1004U, 1371U, 2266U, 19979U, 1732U, 2589U, 1604U, 14407U, 
    1616U, 2462U, 18774U, 2450U, 1702U, 2555U, 1032U, 1385U, 
    2280U, 18779U, 1716U, 2569U, 14937U, 1646U, 2492U, 18563U, 
    1690U, 15949U, 1676U, 2522U, 2543U, 11426U, 1564U, 2416U, 
    13699U, 7111U, 8015U, 13778U, 998U, 1302U, 6990U, 7885U, 
    8689U, 2144U, 7525U, 8330U, 10188U, 13787U, 2150U, 7536U, 
    8336U, 10194U, 17811U, 2247U, 18257U, 7687U, 18540U, 10800U, 
    18686U, 13262U, 21794U, 1331U, 16326U, 7653U, 8475U, 10769U, 
    15936U, 15252U, 7599U, 8392U, 10717U, 3074U, 1347U, 7024U, 
    7977U, 8737U, 3874U, 1775U, 1846U, 7638U, 8460U, 10754U, 
    3508U, 1498U, 7129U, 8020U, 8825U, 2013U, 7332U, 8202U, 
    9018U, 16668U, 7666U, 8488U, 10782U, 19822U, 2686U, 7757U, 
    8606U, 10857U, 15324U, 12481U, 20706U, 6571U, 7842U, 8674U, 
    10970U, 20475U, 2923U, 7821U, 8661U, 10942U, 7517U, 13809U, 
    21802U, 15329U, 2216U, 7620U, 8407U, 10732U, 17288U, 15246U, 
    2203U, 7592U, 8385U, 10710U, 13078U, 17271U, 8635U, 1948U, 
    7240U, 8126U, 8906U, 15300U, 3775U, 1764U, 7042U, 8800U, 
    8696U, 1954U, 7246U, 8912U, 12097U, 2042U, 4896U, 1833U, 
    7116U, 8812U, 7356U, 9047U, 1965U, 7283U, 8951U, 19902U, 
    14656U, 2185U, 7574U, 10692U, 14619U, 2179U, 7568U, 10686U, 
    5896U, 1851U, 7134U, 8830U, 10222U, 1985U, 7308U, 8981U, 
    12485U, 2086U, 4940U, 1840U, 7123U, 8819U, 7475U, 9179U, 
    1972U, 7295U, 8963U, 19909U, 14662U, 2192U, 7581U, 10699U, 
    14570U, 2174U, 7557U, 8368U, 10233U, 12496U, 2091U, 7480U, 
    8281U, 9184U, 14693U, 2198U, 7587U, 10705U, 15347U, 10795U, 
    1996U, 7319U, 8178U, 8992U, 13083U, 2103U, 7492U, 8287U, 
    9688U, 13125U, 8306U, 15630U, 20206U, 2830U, 7786U, 8656U, 
    10901U, 13265U, 2138U, 7511U, 8318U, 9723U, 14595U, 3147U, 
    14574U, 14707U, 20210U, 14949U, 3221U, 5922U, 11432U, 14035U, 
    11955U, 7351U, 8222U, 9042U, 18756U, 7705U, 18555U, 8538U, 
    18628U, 10813U, 18701U, 18751U, 7699U, 18548U, 8532U, 18621U, 
    10807U, 18694U, 20487U, 18074U, 19136U, 2605U, 7731U, 8563U, 
    10831U, 15561U, 15260U, 2210U, 7608U, 8401U, 10726U, 11650U, 
    2035U, 7338U, 8208U, 9029U, 15610U, 18950U, 2585U, 11402U, 
    15900U, 11415U, 15915U, 11409U, 2002U, 7325U, 8195U, 9007U, 
    15908U, 7048U, 8009U, 15213U, 15311U, 15623U, 15684U, 15317U, 
    15230U, 8099U, 1922U, 7179U, 8878U, 12205U, 7727U, 8549U, 
    10827U, 13130U, 2128U, 3538U, 1598U, 15635U, 15954U, 1183U, 
    1316U, 3740U, 13094U, 2116U, 15605U, 17490U, 19636U, 21821U, 
    16331U, 7659U, 8481U, 10775U, 15942U, 1873U, 7645U, 8467U, 
    10761U, 7160U, 8104U, 8842U, 16784U, 7672U, 8494U, 10788U, 
    13176U, 14079U, 21811U, 3250U, 1352U, 18107U, 7029U, 18490U, 
    8742U, 18636U, 2901U, 18415U, 7799U, 18567U, 10920U, 18709U, 
    13099U, 17277U, 18835U, 2536U, 7712U, 10820U, 2944U, 7851U, 
    10979U, 14130U, 2168U, 8357U, 7205U, 8889U, 10216U, 15921U, 
    7631U, 8428U, 14084U, 15639U, 10743U, 1990U, 7313U, 8986U, 
    20481U, 10957U, 13279U, 12971U, 2097U, 7486U, 9682U, 1978U, 
    7301U, 8969U, 19915U, 12465U, 2072U, 7461U, 9160U, 20248U, 
    14931U, 1916U, 1935U, 1890U, 1903U, 1809U, 1516U, 1822U, 
    1529U, 1365U, 2260U, 2715U, 3008U, 1401U, 1445U, 18123U, 
    2335U, 18273U, 2760U, 18365U, 1543U, 18191U, 1460U, 18140U, 
    2350U, 18290U, 2767U, 18373U, 2395U, 18341U, 2790U, 18399U, 
    2296U, 2736U, 1432U, 2322U, 2754U, 1586U, 2438U, 2812U, 
    11883U, 1592U, 1491U, 18175U, 2381U, 18325U, 2783U, 18391U, 
    1557U, 18207U, 1476U, 18158U, 2366U, 18308U, 2775U, 18382U, 
    2409U, 18357U, 2797U, 18407U, 2444U, 2818U, 1414U, 2309U, 
    2742U, 3532U, 18768U, 1639U, 2485U, 2843U, 1669U, 2515U, 
    2858U, 3734U, 20223U, 1378U, 2273U, 2721U, 1740U, 2597U, 
    2893U, 1610U, 1624U, 2470U, 2835U, 2456U, 1709U, 2562U, 
    2878U, 2824U, 1393U, 2288U, 2728U, 1724U, 2577U, 2885U, 
    1654U, 2500U, 2850U, 1696U, 1683U, 2529U, 2865U, 2549U, 
    2872U, 1572U, 2424U, 2804U, 1781U, 1504U, 19977U, 3289U, 
    8653U, 17070U, 12025U, 11805U, 7278U, 7438U, 20374U, 17964U, 
    12055U, 8780U, 20472U, 15204U, 
};

static inline void InitSystemZMCInstrInfo(MCInstrInfo *II) {
  II->InitMCInstrInfo(SystemZInsts, SystemZInstrNameIndices, SystemZInstrNameData, nullptr, nullptr, 3140);
}

} // end namespace llvm
#endif // GET_INSTRINFO_MC_DESC

#ifdef GET_INSTRINFO_HEADER
#undef GET_INSTRINFO_HEADER
namespace llvm {
struct SystemZGenInstrInfo : public TargetInstrInfo {
  explicit SystemZGenInstrInfo(unsigned CFSetupOpcode = ~0u, unsigned CFDestroyOpcode = ~0u, unsigned CatchRetOpcode = ~0u, unsigned ReturnOpcode = ~0u);
  ~SystemZGenInstrInfo() override = default;

};
} // end namespace llvm
#endif // GET_INSTRINFO_HEADER

#ifdef GET_INSTRINFO_HELPER_DECLS
#undef GET_INSTRINFO_HELPER_DECLS


#endif // GET_INSTRINFO_HELPER_DECLS

#ifdef GET_INSTRINFO_HELPERS
#undef GET_INSTRINFO_HELPERS

#endif // GET_INSTRINFO_HELPERS

#ifdef GET_INSTRINFO_CTOR_DTOR
#undef GET_INSTRINFO_CTOR_DTOR
namespace llvm {
extern const MCInstrDesc SystemZInsts[];
extern const unsigned SystemZInstrNameIndices[];
extern const char SystemZInstrNameData[];
SystemZGenInstrInfo::SystemZGenInstrInfo(unsigned CFSetupOpcode, unsigned CFDestroyOpcode, unsigned CatchRetOpcode, unsigned ReturnOpcode)
  : TargetInstrInfo(CFSetupOpcode, CFDestroyOpcode, CatchRetOpcode, ReturnOpcode) {
  InitMCInstrInfo(SystemZInsts, SystemZInstrNameIndices, SystemZInstrNameData, nullptr, nullptr, 3140);
}
} // end namespace llvm
#endif // GET_INSTRINFO_CTOR_DTOR

#ifdef GET_INSTRINFO_OPERAND_ENUM
#undef GET_INSTRINFO_OPERAND_ENUM
namespace llvm {
namespace SystemZ {
namespace OpName {
enum {
  OPERAND_LAST
};
} // end namespace OpName
} // end namespace SystemZ
} // end namespace llvm
#endif //GET_INSTRINFO_OPERAND_ENUM

#ifdef GET_INSTRINFO_NAMED_OPS
#undef GET_INSTRINFO_NAMED_OPS
namespace llvm {
namespace SystemZ {
LLVM_READONLY
int16_t getNamedOperandIdx(uint16_t Opcode, uint16_t NamedIdx) {
  return -1;
}
} // end namespace SystemZ
} // end namespace llvm
#endif //GET_INSTRINFO_NAMED_OPS

#ifdef GET_INSTRINFO_OPERAND_TYPES_ENUM
#undef GET_INSTRINFO_OPERAND_TYPES_ENUM
namespace llvm {
namespace SystemZ {
namespace OpTypes {
enum OperandType {
  bdaddr12only = 0,
  bdaddr12pair = 1,
  bdaddr20only = 2,
  bdaddr20pair = 3,
  bdladdr12onlylen4 = 4,
  bdladdr12onlylen8 = 5,
  bdraddr12only = 6,
  bdvaddr12only = 7,
  bdxaddr12only = 8,
  bdxaddr12pair = 9,
  bdxaddr20only = 10,
  bdxaddr20only128 = 11,
  bdxaddr20pair = 12,
  brtarget12bpp = 13,
  brtarget16 = 14,
  brtarget16bpp = 15,
  brtarget16tls = 16,
  brtarget24bpp = 17,
  brtarget32 = 18,
  brtarget32tls = 19,
  cond4 = 20,
  disp12imm32 = 21,
  disp12imm64 = 22,
  disp20imm32 = 23,
  disp20imm64 = 24,
  dynalloc12only = 25,
  f32imm = 26,
  f64imm = 27,
  i16imm = 28,
  i1imm = 29,
  i32imm = 30,
  i64imm = 31,
  i8imm = 32,
  imm32lh16 = 33,
  imm32lh16_timm = 34,
  imm32lh16c = 35,
  imm32lh16c_timm = 36,
  imm32ll16 = 37,
  imm32ll16_timm = 38,
  imm32ll16c = 39,
  imm32ll16c_timm = 40,
  imm32sx16 = 41,
  imm32sx16_timm = 42,
  imm32sx16n = 43,
  imm32sx16n_timm = 44,
  imm32sx16trunc = 45,
  imm32sx16trunc_timm = 46,
  imm32sx8 = 47,
  imm32sx8_timm = 48,
  imm32zx1 = 49,
  imm32zx12 = 50,
  imm32zx12_timm = 51,
  imm32zx16 = 52,
  imm32zx16_timm = 53,
  imm32zx16trunc = 54,
  imm32zx16trunc_timm = 55,
  imm32zx1_timm = 56,
  imm32zx2 = 57,
  imm32zx2_timm = 58,
  imm32zx3 = 59,
  imm32zx3_timm = 60,
  imm32zx4 = 61,
  imm32zx4_timm = 62,
  imm32zx4even = 63,
  imm32zx4even_timm = 64,
  imm32zx6 = 65,
  imm32zx6_timm = 66,
  imm32zx8 = 67,
  imm32zx8_timm = 68,
  imm32zx8trunc = 69,
  imm32zx8trunc_timm = 70,
  imm64 = 71,
  imm64hf32 = 72,
  imm64hf32_timm = 73,
  imm64hf32c = 74,
  imm64hf32c_timm = 75,
  imm64hh16 = 76,
  imm64hh16_timm = 77,
  imm64hh16c = 78,
  imm64hh16c_timm = 79,
  imm64hl16 = 80,
  imm64hl16_timm = 81,
  imm64hl16c = 82,
  imm64hl16c_timm = 83,
  imm64lf32 = 84,
  imm64lf32_timm = 85,
  imm64lf32c = 86,
  imm64lf32c_timm = 87,
  imm64lf32n = 88,
  imm64lf32n_timm = 89,
  imm64lh16 = 90,
  imm64lh16_timm = 91,
  imm64lh16c = 92,
  imm64lh16c_timm = 93,
  imm64lh16n = 94,
  imm64lh16n_timm = 95,
  imm64ll16 = 96,
  imm64ll16_timm = 97,
  imm64ll16c = 98,
  imm64ll16c_timm = 99,
  imm64sx16 = 100,
  imm64sx16_timm = 101,
  imm64sx16n = 102,
  imm64sx16n_timm = 103,
  imm64sx32 = 104,
  imm64sx32_timm = 105,
  imm64sx32n = 106,
  imm64sx32n_timm = 107,
  imm64sx8 = 108,
  imm64sx8_timm = 109,
  imm64zx16 = 110,
  imm64zx16_timm = 111,
  imm64zx32 = 112,
  imm64zx32_timm = 113,
  imm64zx32n = 114,
  imm64zx32n_timm = 115,
  imm64zx48 = 116,
  imm64zx48_timm = 117,
  imm64zx8 = 118,
  imm64zx8_timm = 119,
  laaddr12pair = 120,
  laaddr20pair = 121,
  mviaddr12pair = 122,
  mviaddr20pair = 123,
  pcrel32 = 124,
  ptype0 = 125,
  ptype1 = 126,
  ptype2 = 127,
  ptype3 = 128,
  ptype4 = 129,
  ptype5 = 130,
  shift12only = 131,
  shift20only = 132,
  simm32 = 133,
  simm32_timm = 134,
  simm32n = 135,
  simm32n_timm = 136,
  tlssym = 137,
  type0 = 138,
  type1 = 139,
  type2 = 140,
  type3 = 141,
  type4 = 142,
  type5 = 143,
  uimm32 = 144,
  uimm32_timm = 145,
  untyped_imm_0 = 146,
  ADDR128 = 147,
  ADDR32 = 148,
  ADDR64 = 149,
  AR32 = 150,
  AnyReg = 151,
  CR64 = 152,
  FP128 = 153,
  FP32 = 154,
  FP64 = 155,
  GR128 = 156,
  GR32 = 157,
  GR64 = 158,
  GRH32 = 159,
  GRX32 = 160,
  VF128 = 161,
  VR128 = 162,
  VR32 = 163,
  VR64 = 164,
  ADDR128Bit = 165,
  ADDR32Bit = 166,
  ADDR64Bit = 167,
  AR32Bit = 168,
  AnyRegBit = 169,
  CCR = 170,
  CR64Bit = 171,
  FP128Bit = 172,
  FP32Bit = 173,
  FP64Bit = 174,
  FPCRegs = 175,
  GR128Bit = 176,
  GR32Bit = 177,
  GR64Bit = 178,
  GRH32Bit = 179,
  GRX32Bit = 180,
  VF128Bit = 181,
  VR128Bit = 182,
  VR32Bit = 183,
  VR64Bit = 184,
  OPERAND_TYPE_LIST_END
};
} // end namespace OpTypes
} // end namespace SystemZ
} // end namespace llvm
#endif // GET_INSTRINFO_OPERAND_TYPES_ENUM

#ifdef GET_INSTRINFO_OPERAND_TYPE
#undef GET_INSTRINFO_OPERAND_TYPE
namespace llvm {
namespace SystemZ {
LLVM_READONLY
static int getOperandType(uint16_t Opcode, uint16_t OpIdx) {
  static const uint16_t Offsets[] = {
    /* PHI */
    0,
    /* INLINEASM */
    1,
    /* INLINEASM_BR */
    1,
    /* CFI_INSTRUCTION */
    1,
    /* EH_LABEL */
    2,
    /* GC_LABEL */
    3,
    /* ANNOTATION_LABEL */
    4,
    /* KILL */
    5,
    /* EXTRACT_SUBREG */
    5,
    /* INSERT_SUBREG */
    8,
    /* IMPLICIT_DEF */
    12,
    /* SUBREG_TO_REG */
    13,
    /* COPY_TO_REGCLASS */
    17,
    /* DBG_VALUE */
    20,
    /* DBG_VALUE_LIST */
    20,
    /* DBG_INSTR_REF */
    20,
    /* DBG_PHI */
    20,
    /* DBG_LABEL */
    20,
    /* REG_SEQUENCE */
    21,
    /* COPY */
    23,
    /* BUNDLE */
    25,
    /* LIFETIME_START */
    25,
    /* LIFETIME_END */
    26,
    /* PSEUDO_PROBE */
    27,
    /* ARITH_FENCE */
    31,
    /* STACKMAP */
    33,
    /* FENTRY_CALL */
    35,
    /* PATCHPOINT */
    35,
    /* LOAD_STACK_GUARD */
    41,
    /* PREALLOCATED_SETUP */
    42,
    /* PREALLOCATED_ARG */
    43,
    /* STATEPOINT */
    46,
    /* LOCAL_ESCAPE */
    46,
    /* FAULTING_OP */
    48,
    /* PATCHABLE_OP */
    49,
    /* PATCHABLE_FUNCTION_ENTER */
    49,
    /* PATCHABLE_RET */
    49,
    /* PATCHABLE_FUNCTION_EXIT */
    49,
    /* PATCHABLE_TAIL_CALL */
    49,
    /* PATCHABLE_EVENT_CALL */
    49,
    /* PATCHABLE_TYPED_EVENT_CALL */
    51,
    /* ICALL_BRANCH_FUNNEL */
    54,
    /* MEMBARRIER */
    54,
    /* G_ASSERT_SEXT */
    54,
    /* G_ASSERT_ZEXT */
    57,
    /* G_ASSERT_ALIGN */
    60,
    /* G_ADD */
    63,
    /* G_SUB */
    66,
    /* G_MUL */
    69,
    /* G_SDIV */
    72,
    /* G_UDIV */
    75,
    /* G_SREM */
    78,
    /* G_UREM */
    81,
    /* G_SDIVREM */
    84,
    /* G_UDIVREM */
    88,
    /* G_AND */
    92,
    /* G_OR */
    95,
    /* G_XOR */
    98,
    /* G_IMPLICIT_DEF */
    101,
    /* G_PHI */
    102,
    /* G_FRAME_INDEX */
    103,
    /* G_GLOBAL_VALUE */
    105,
    /* G_CONSTANT_POOL */
    107,
    /* G_EXTRACT */
    109,
    /* G_UNMERGE_VALUES */
    112,
    /* G_INSERT */
    114,
    /* G_MERGE_VALUES */
    118,
    /* G_BUILD_VECTOR */
    120,
    /* G_BUILD_VECTOR_TRUNC */
    122,
    /* G_CONCAT_VECTORS */
    124,
    /* G_PTRTOINT */
    126,
    /* G_INTTOPTR */
    128,
    /* G_BITCAST */
    130,
    /* G_FREEZE */
    132,
    /* G_INTRINSIC_FPTRUNC_ROUND */
    134,
    /* G_INTRINSIC_TRUNC */
    137,
    /* G_INTRINSIC_ROUND */
    139,
    /* G_INTRINSIC_LRINT */
    141,
    /* G_INTRINSIC_ROUNDEVEN */
    143,
    /* G_READCYCLECOUNTER */
    145,
    /* G_LOAD */
    146,
    /* G_SEXTLOAD */
    148,
    /* G_ZEXTLOAD */
    150,
    /* G_INDEXED_LOAD */
    152,
    /* G_INDEXED_SEXTLOAD */
    157,
    /* G_INDEXED_ZEXTLOAD */
    162,
    /* G_STORE */
    167,
    /* G_INDEXED_STORE */
    169,
    /* G_ATOMIC_CMPXCHG_WITH_SUCCESS */
    174,
    /* G_ATOMIC_CMPXCHG */
    179,
    /* G_ATOMICRMW_XCHG */
    183,
    /* G_ATOMICRMW_ADD */
    186,
    /* G_ATOMICRMW_SUB */
    189,
    /* G_ATOMICRMW_AND */
    192,
    /* G_ATOMICRMW_NAND */
    195,
    /* G_ATOMICRMW_OR */
    198,
    /* G_ATOMICRMW_XOR */
    201,
    /* G_ATOMICRMW_MAX */
    204,
    /* G_ATOMICRMW_MIN */
    207,
    /* G_ATOMICRMW_UMAX */
    210,
    /* G_ATOMICRMW_UMIN */
    213,
    /* G_ATOMICRMW_FADD */
    216,
    /* G_ATOMICRMW_FSUB */
    219,
    /* G_ATOMICRMW_FMAX */
    222,
    /* G_ATOMICRMW_FMIN */
    225,
    /* G_ATOMICRMW_UINC_WRAP */
    228,
    /* G_ATOMICRMW_UDEC_WRAP */
    231,
    /* G_FENCE */
    234,
    /* G_BRCOND */
    236,
    /* G_BRINDIRECT */
    238,
    /* G_INVOKE_REGION_START */
    239,
    /* G_INTRINSIC */
    239,
    /* G_INTRINSIC_W_SIDE_EFFECTS */
    240,
    /* G_ANYEXT */
    241,
    /* G_TRUNC */
    243,
    /* G_CONSTANT */
    245,
    /* G_FCONSTANT */
    247,
    /* G_VASTART */
    249,
    /* G_VAARG */
    250,
    /* G_SEXT */
    253,
    /* G_SEXT_INREG */
    255,
    /* G_ZEXT */
    258,
    /* G_SHL */
    260,
    /* G_LSHR */
    263,
    /* G_ASHR */
    266,
    /* G_FSHL */
    269,
    /* G_FSHR */
    273,
    /* G_ROTR */
    277,
    /* G_ROTL */
    280,
    /* G_ICMP */
    283,
    /* G_FCMP */
    287,
    /* G_SELECT */
    291,
    /* G_UADDO */
    295,
    /* G_UADDE */
    299,
    /* G_USUBO */
    304,
    /* G_USUBE */
    308,
    /* G_SADDO */
    313,
    /* G_SADDE */
    317,
    /* G_SSUBO */
    322,
    /* G_SSUBE */
    326,
    /* G_UMULO */
    331,
    /* G_SMULO */
    335,
    /* G_UMULH */
    339,
    /* G_SMULH */
    342,
    /* G_UADDSAT */
    345,
    /* G_SADDSAT */
    348,
    /* G_USUBSAT */
    351,
    /* G_SSUBSAT */
    354,
    /* G_USHLSAT */
    357,
    /* G_SSHLSAT */
    360,
    /* G_SMULFIX */
    363,
    /* G_UMULFIX */
    367,
    /* G_SMULFIXSAT */
    371,
    /* G_UMULFIXSAT */
    375,
    /* G_SDIVFIX */
    379,
    /* G_UDIVFIX */
    383,
    /* G_SDIVFIXSAT */
    387,
    /* G_UDIVFIXSAT */
    391,
    /* G_FADD */
    395,
    /* G_FSUB */
    398,
    /* G_FMUL */
    401,
    /* G_FMA */
    404,
    /* G_FMAD */
    408,
    /* G_FDIV */
    412,
    /* G_FREM */
    415,
    /* G_FPOW */
    418,
    /* G_FPOWI */
    421,
    /* G_FEXP */
    424,
    /* G_FEXP2 */
    426,
    /* G_FLOG */
    428,
    /* G_FLOG2 */
    430,
    /* G_FLOG10 */
    432,
    /* G_FNEG */
    434,
    /* G_FPEXT */
    436,
    /* G_FPTRUNC */
    438,
    /* G_FPTOSI */
    440,
    /* G_FPTOUI */
    442,
    /* G_SITOFP */
    444,
    /* G_UITOFP */
    446,
    /* G_FABS */
    448,
    /* G_FCOPYSIGN */
    450,
    /* G_IS_FPCLASS */
    453,
    /* G_FCANONICALIZE */
    456,
    /* G_FMINNUM */
    458,
    /* G_FMAXNUM */
    461,
    /* G_FMINNUM_IEEE */
    464,
    /* G_FMAXNUM_IEEE */
    467,
    /* G_FMINIMUM */
    470,
    /* G_FMAXIMUM */
    473,
    /* G_PTR_ADD */
    476,
    /* G_PTRMASK */
    479,
    /* G_SMIN */
    482,
    /* G_SMAX */
    485,
    /* G_UMIN */
    488,
    /* G_UMAX */
    491,
    /* G_ABS */
    494,
    /* G_LROUND */
    496,
    /* G_LLROUND */
    498,
    /* G_BR */
    500,
    /* G_BRJT */
    501,
    /* G_INSERT_VECTOR_ELT */
    504,
    /* G_EXTRACT_VECTOR_ELT */
    508,
    /* G_SHUFFLE_VECTOR */
    511,
    /* G_CTTZ */
    515,
    /* G_CTTZ_ZERO_UNDEF */
    517,
    /* G_CTLZ */
    519,
    /* G_CTLZ_ZERO_UNDEF */
    521,
    /* G_CTPOP */
    523,
    /* G_BSWAP */
    525,
    /* G_BITREVERSE */
    527,
    /* G_FCEIL */
    529,
    /* G_FCOS */
    531,
    /* G_FSIN */
    533,
    /* G_FSQRT */
    535,
    /* G_FFLOOR */
    537,
    /* G_FRINT */
    539,
    /* G_FNEARBYINT */
    541,
    /* G_ADDRSPACE_CAST */
    543,
    /* G_BLOCK_ADDR */
    545,
    /* G_JUMP_TABLE */
    547,
    /* G_DYN_STACKALLOC */
    549,
    /* G_STRICT_FADD */
    552,
    /* G_STRICT_FSUB */
    555,
    /* G_STRICT_FMUL */
    558,
    /* G_STRICT_FDIV */
    561,
    /* G_STRICT_FREM */
    564,
    /* G_STRICT_FMA */
    567,
    /* G_STRICT_FSQRT */
    571,
    /* G_READ_REGISTER */
    573,
    /* G_WRITE_REGISTER */
    575,
    /* G_MEMCPY */
    577,
    /* G_MEMCPY_INLINE */
    581,
    /* G_MEMMOVE */
    584,
    /* G_MEMSET */
    588,
    /* G_BZERO */
    592,
    /* G_VECREDUCE_SEQ_FADD */
    595,
    /* G_VECREDUCE_SEQ_FMUL */
    598,
    /* G_VECREDUCE_FADD */
    601,
    /* G_VECREDUCE_FMUL */
    603,
    /* G_VECREDUCE_FMAX */
    605,
    /* G_VECREDUCE_FMIN */
    607,
    /* G_VECREDUCE_ADD */
    609,
    /* G_VECREDUCE_MUL */
    611,
    /* G_VECREDUCE_AND */
    613,
    /* G_VECREDUCE_OR */
    615,
    /* G_VECREDUCE_XOR */
    617,
    /* G_VECREDUCE_SMAX */
    619,
    /* G_VECREDUCE_SMIN */
    621,
    /* G_VECREDUCE_UMAX */
    623,
    /* G_VECREDUCE_UMIN */
    625,
    /* G_SBFX */
    627,
    /* G_UBFX */
    631,
    /* ADB_MemFoldPseudo */
    635,
    /* ADJCALLSTACKDOWN */
    640,
    /* ADJCALLSTACKUP */
    642,
    /* ADJDYNALLOC */
    644,
    /* AEB_MemFoldPseudo */
    648,
    /* AEXT128 */
    653,
    /* AFIMux */
    655,
    /* AG_MemFoldPseudo */
    658,
    /* AHIMux */
    663,
    /* AHIMuxK */
    666,
    /* ALG_MemFoldPseudo */
    669,
    /* AL_MemFoldPseudo */
    674,
    /* ATOMIC_CMP_SWAPW */
    679,
    /* ATOMIC_LOADW_AFI */
    687,
    /* ATOMIC_LOADW_AR */
    694,
    /* ATOMIC_LOADW_MAX */
    701,
    /* ATOMIC_LOADW_MIN */
    708,
    /* ATOMIC_LOADW_NILH */
    715,
    /* ATOMIC_LOADW_NILHi */
    722,
    /* ATOMIC_LOADW_NR */
    729,
    /* ATOMIC_LOADW_NRi */
    736,
    /* ATOMIC_LOADW_OILH */
    743,
    /* ATOMIC_LOADW_OR */
    750,
    /* ATOMIC_LOADW_SR */
    757,
    /* ATOMIC_LOADW_UMAX */
    764,
    /* ATOMIC_LOADW_UMIN */
    771,
    /* ATOMIC_LOADW_XILF */
    778,
    /* ATOMIC_LOADW_XR */
    785,
    /* ATOMIC_LOAD_AFI */
    792,
    /* ATOMIC_LOAD_AGFI */
    796,
    /* ATOMIC_LOAD_AGHI */
    800,
    /* ATOMIC_LOAD_AGR */
    804,
    /* ATOMIC_LOAD_AHI */
    808,
    /* ATOMIC_LOAD_AR */
    812,
    /* ATOMIC_LOAD_MAX_32 */
    816,
    /* ATOMIC_LOAD_MAX_64 */
    820,
    /* ATOMIC_LOAD_MIN_32 */
    824,
    /* ATOMIC_LOAD_MIN_64 */
    828,
    /* ATOMIC_LOAD_NGR */
    832,
    /* ATOMIC_LOAD_NGRi */
    836,
    /* ATOMIC_LOAD_NIHF64 */
    840,
    /* ATOMIC_LOAD_NIHF64i */
    844,
    /* ATOMIC_LOAD_NIHH64 */
    848,
    /* ATOMIC_LOAD_NIHH64i */
    852,
    /* ATOMIC_LOAD_NIHL64 */
    856,
    /* ATOMIC_LOAD_NIHL64i */
    860,
    /* ATOMIC_LOAD_NILF */
    864,
    /* ATOMIC_LOAD_NILF64 */
    868,
    /* ATOMIC_LOAD_NILF64i */
    872,
    /* ATOMIC_LOAD_NILFi */
    876,
    /* ATOMIC_LOAD_NILH */
    880,
    /* ATOMIC_LOAD_NILH64 */
    884,
    /* ATOMIC_LOAD_NILH64i */
    888,
    /* ATOMIC_LOAD_NILHi */
    892,
    /* ATOMIC_LOAD_NILL */
    896,
    /* ATOMIC_LOAD_NILL64 */
    900,
    /* ATOMIC_LOAD_NILL64i */
    904,
    /* ATOMIC_LOAD_NILLi */
    908,
    /* ATOMIC_LOAD_NR */
    912,
    /* ATOMIC_LOAD_NRi */
    916,
    /* ATOMIC_LOAD_OGR */
    920,
    /* ATOMIC_LOAD_OIHF64 */
    924,
    /* ATOMIC_LOAD_OIHH64 */
    928,
    /* ATOMIC_LOAD_OIHL64 */
    932,
    /* ATOMIC_LOAD_OILF */
    936,
    /* ATOMIC_LOAD_OILF64 */
    940,
    /* ATOMIC_LOAD_OILH */
    944,
    /* ATOMIC_LOAD_OILH64 */
    948,
    /* ATOMIC_LOAD_OILL */
    952,
    /* ATOMIC_LOAD_OILL64 */
    956,
    /* ATOMIC_LOAD_OR */
    960,
    /* ATOMIC_LOAD_SGR */
    964,
    /* ATOMIC_LOAD_SR */
    968,
    /* ATOMIC_LOAD_UMAX_32 */
    972,
    /* ATOMIC_LOAD_UMAX_64 */
    976,
    /* ATOMIC_LOAD_UMIN_32 */
    980,
    /* ATOMIC_LOAD_UMIN_64 */
    984,
    /* ATOMIC_LOAD_XGR */
    988,
    /* ATOMIC_LOAD_XIHF64 */
    992,
    /* ATOMIC_LOAD_XILF */
    996,
    /* ATOMIC_LOAD_XILF64 */
    1000,
    /* ATOMIC_LOAD_XR */
    1004,
    /* ATOMIC_SWAPW */
    1008,
    /* ATOMIC_SWAP_32 */
    1015,
    /* ATOMIC_SWAP_64 */
    1019,
    /* A_MemFoldPseudo */
    1023,
    /* CFIMux */
    1028,
    /* CGIBCall */
    1030,
    /* CGIBReturn */
    1034,
    /* CGRBCall */
    1037,
    /* CGRBReturn */
    1041,
    /* CHIMux */
    1044,
    /* CIBCall */
    1046,
    /* CIBReturn */
    1050,
    /* CLCImm */
    1053,
    /* CLCReg */
    1058,
    /* CLFIMux */
    1063,
    /* CLGIBCall */
    1065,
    /* CLGIBReturn */
    1069,
    /* CLGRBCall */
    1072,
    /* CLGRBReturn */
    1076,
    /* CLIBCall */
    1079,
    /* CLIBReturn */
    1083,
    /* CLMux */
    1086,
    /* CLRBCall */
    1090,
    /* CLRBReturn */
    1094,
    /* CLSTLoop */
    1097,
    /* CMux */
    1101,
    /* CRBCall */
    1105,
    /* CRBReturn */
    1109,
    /* CallBASR */
    1112,
    /* CallBASR_STACKEXT */
    1113,
    /* CallBASR_XPLINK64 */
    1114,
    /* CallBCR */
    1115,
    /* CallBR */
    1118,
    /* CallBRASL */
    1119,
    /* CallBRASL_XPLINK64 */
    1120,
    /* CallBRCL */
    1121,
    /* CallJG */
    1124,
    /* CondReturn */
    1125,
    /* CondReturn_XPLINK */
    1127,
    /* CondStore16 */
    1129,
    /* CondStore16Inv */
    1135,
    /* CondStore16Mux */
    1141,
    /* CondStore16MuxInv */
    1147,
    /* CondStore32 */
    1153,
    /* CondStore32Inv */
    1159,
    /* CondStore32Mux */
    1165,
    /* CondStore32MuxInv */
    1171,
    /* CondStore64 */
    1177,
    /* CondStore64Inv */
    1183,
    /* CondStore8 */
    1189,
    /* CondStore8Inv */
    1195,
    /* CondStore8Mux */
    1201,
    /* CondStore8MuxInv */
    1207,
    /* CondStoreF32 */
    1213,
    /* CondStoreF32Inv */
    1219,
    /* CondStoreF64 */
    1225,
    /* CondStoreF64Inv */
    1231,
    /* CondTrap */
    1237,
    /* DDB_MemFoldPseudo */
    1239,
    /* DEB_MemFoldPseudo */
    1244,
    /* EXRL_Pseudo */
    1249,
    /* GOT */
    1255,
    /* IIFMux */
    1256,
    /* IIHF64 */
    1258,
    /* IIHH64 */
    1261,
    /* IIHL64 */
    1264,
    /* IIHMux */
    1267,
    /* IILF64 */
    1270,
    /* IILH64 */
    1273,
    /* IILL64 */
    1276,
    /* IILMux */
    1279,
    /* L128 */
    1282,
    /* LBMux */
    1286,
    /* LEFR */
    1290,
    /* LFER */
    1292,
    /* LHIMux */
    1294,
    /* LHMux */
    1296,
    /* LLCMux */
    1300,
    /* LLCRMux */
    1304,
    /* LLHMux */
    1306,
    /* LLHRMux */
    1310,
    /* LMux */
    1312,
    /* LOCG_MemFoldPseudo */
    1316,
    /* LOCHIMux */
    1322,
    /* LOCMux */
    1327,
    /* LOCMux_MemFoldPseudo */
    1333,
    /* LOCRMux */
    1339,
    /* LTDBRCompare_VecPseudo */
    1344,
    /* LTEBRCompare_VecPseudo */
    1346,
    /* LTXBRCompare_VecPseudo */
    1348,
    /* LX */
    1350,
    /* MADB_MemFoldPseudo */
    1354,
    /* MAEB_MemFoldPseudo */
    1360,
    /* MDB_MemFoldPseudo */
    1366,
    /* MEEB_MemFoldPseudo */
    1371,
    /* MSC_MemFoldPseudo */
    1376,
    /* MSDB_MemFoldPseudo */
    1381,
    /* MSEB_MemFoldPseudo */
    1387,
    /* MSGC_MemFoldPseudo */
    1393,
    /* MVCImm */
    1398,
    /* MVCReg */
    1403,
    /* MVSTLoop */
    1408,
    /* MemsetImmImm */
    1412,
    /* MemsetImmReg */
    1416,
    /* MemsetRegImm */
    1420,
    /* MemsetRegReg */
    1424,
    /* NCImm */
    1428,
    /* NCReg */
    1433,
    /* NG_MemFoldPseudo */
    1438,
    /* NIFMux */
    1443,
    /* NIHF64 */
    1446,
    /* NIHH64 */
    1449,
    /* NIHL64 */
    1452,
    /* NIHMux */
    1455,
    /* NILF64 */
    1458,
    /* NILH64 */
    1461,
    /* NILL64 */
    1464,
    /* NILMux */
    1467,
    /* N_MemFoldPseudo */
    1470,
    /* OCImm */
    1475,
    /* OCReg */
    1480,
    /* OG_MemFoldPseudo */
    1485,
    /* OIFMux */
    1490,
    /* OIHF64 */
    1493,
    /* OIHH64 */
    1496,
    /* OIHL64 */
    1499,
    /* OIHMux */
    1502,
    /* OILF64 */
    1505,
    /* OILH64 */
    1508,
    /* OILL64 */
    1511,
    /* OILMux */
    1514,
    /* O_MemFoldPseudo */
    1517,
    /* PAIR128 */
    1522,
    /* PROBED_ALLOCA */
    1525,
    /* PROBED_STACKALLOC */
    1528,
    /* RISBHH */
    1529,
    /* RISBHL */
    1535,
    /* RISBLH */
    1541,
    /* RISBLL */
    1547,
    /* RISBMux */
    1553,
    /* Return */
    1559,
    /* Return_XPLINK */
    1559,
    /* SDB_MemFoldPseudo */
    1559,
    /* SEB_MemFoldPseudo */
    1564,
    /* SELRMux */
    1569,
    /* SG_MemFoldPseudo */
    1574,
    /* SLG_MemFoldPseudo */
    1579,
    /* SL_MemFoldPseudo */
    1584,
    /* SRSTLoop */
    1589,
    /* ST128 */
    1593,
    /* STCMux */
    1597,
    /* STHMux */
    1601,
    /* STMux */
    1605,
    /* STOCMux */
    1609,
    /* STX */
    1614,
    /* S_MemFoldPseudo */
    1618,
    /* Select32 */
    1623,
    /* Select64 */
    1628,
    /* SelectF128 */
    1633,
    /* SelectF32 */
    1638,
    /* SelectF64 */
    1643,
    /* SelectVR128 */
    1648,
    /* SelectVR32 */
    1653,
    /* SelectVR64 */
    1658,
    /* Serialize */
    1663,
    /* TBEGIN_nofloat */
    1663,
    /* TLS_GDCALL */
    1666,
    /* TLS_LDCALL */
    1667,
    /* TMHH64 */
    1668,
    /* TMHL64 */
    1670,
    /* TMHMux */
    1672,
    /* TMLH64 */
    1674,
    /* TMLL64 */
    1676,
    /* TMLMux */
    1678,
    /* Trap */
    1680,
    /* VL32 */
    1680,
    /* VL64 */
    1684,
    /* VLR32 */
    1688,
    /* VLR64 */
    1690,
    /* VLVGP32 */
    1692,
    /* VST32 */
    1695,
    /* VST64 */
    1699,
    /* XCImm */
    1703,
    /* XCReg */
    1708,
    /* XG_MemFoldPseudo */
    1713,
    /* XIFMux */
    1718,
    /* XIHF64 */
    1721,
    /* XILF64 */
    1724,
    /* XPLINK_STACKALLOC */
    1727,
    /* X_MemFoldPseudo */
    1727,
    /* ZEXT128 */
    1732,
    /* A */
    1734,
    /* AD */
    1739,
    /* ADB */
    1744,
    /* ADBR */
    1749,
    /* ADR */
    1752,
    /* ADTR */
    1755,
    /* ADTRA */
    1758,
    /* AE */
    1762,
    /* AEB */
    1767,
    /* AEBR */
    1772,
    /* AER */
    1775,
    /* AFI */
    1778,
    /* AG */
    1781,
    /* AGF */
    1786,
    /* AGFI */
    1791,
    /* AGFR */
    1794,
    /* AGH */
    1797,
    /* AGHI */
    1802,
    /* AGHIK */
    1805,
    /* AGR */
    1808,
    /* AGRK */
    1811,
    /* AGSI */
    1814,
    /* AH */
    1817,
    /* AHHHR */
    1822,
    /* AHHLR */
    1825,
    /* AHI */
    1828,
    /* AHIK */
    1831,
    /* AHY */
    1834,
    /* AIH */
    1839,
    /* AL */
    1842,
    /* ALC */
    1847,
    /* ALCG */
    1852,
    /* ALCGR */
    1857,
    /* ALCR */
    1860,
    /* ALFI */
    1863,
    /* ALG */
    1866,
    /* ALGF */
    1871,
    /* ALGFI */
    1876,
    /* ALGFR */
    1879,
    /* ALGHSIK */
    1882,
    /* ALGR */
    1885,
    /* ALGRK */
    1888,
    /* ALGSI */
    1891,
    /* ALHHHR */
    1894,
    /* ALHHLR */
    1897,
    /* ALHSIK */
    1900,
    /* ALR */
    1903,
    /* ALRK */
    1906,
    /* ALSI */
    1909,
    /* ALSIH */
    1912,
    /* ALSIHN */
    1915,
    /* ALY */
    1918,
    /* AP */
    1923,
    /* AR */
    1929,
    /* ARK */
    1932,
    /* ASI */
    1935,
    /* AU */
    1938,
    /* AUR */
    1943,
    /* AW */
    1946,
    /* AWR */
    1951,
    /* AXBR */
    1954,
    /* AXR */
    1957,
    /* AXTR */
    1960,
    /* AXTRA */
    1963,
    /* AY */
    1967,
    /* B */
    1972,
    /* BAKR */
    1975,
    /* BAL */
    1977,
    /* BALR */
    1981,
    /* BAS */
    1983,
    /* BASR */
    1987,
    /* BASSM */
    1989,
    /* BAsmE */
    1991,
    /* BAsmH */
    1994,
    /* BAsmHE */
    1997,
    /* BAsmL */
    2000,
    /* BAsmLE */
    2003,
    /* BAsmLH */
    2006,
    /* BAsmM */
    2009,
    /* BAsmNE */
    2012,
    /* BAsmNH */
    2015,
    /* BAsmNHE */
    2018,
    /* BAsmNL */
    2021,
    /* BAsmNLE */
    2024,
    /* BAsmNLH */
    2027,
    /* BAsmNM */
    2030,
    /* BAsmNO */
    2033,
    /* BAsmNP */
    2036,
    /* BAsmNZ */
    2039,
    /* BAsmO */
    2042,
    /* BAsmP */
    2045,
    /* BAsmZ */
    2048,
    /* BC */
    2051,
    /* BCAsm */
    2056,
    /* BCR */
    2060,
    /* BCRAsm */
    2063,
    /* BCT */
    2065,
    /* BCTG */
    2070,
    /* BCTGR */
    2075,
    /* BCTR */
    2078,
    /* BI */
    2081,
    /* BIAsmE */
    2084,
    /* BIAsmH */
    2087,
    /* BIAsmHE */
    2090,
    /* BIAsmL */
    2093,
    /* BIAsmLE */
    2096,
    /* BIAsmLH */
    2099,
    /* BIAsmM */
    2102,
    /* BIAsmNE */
    2105,
    /* BIAsmNH */
    2108,
    /* BIAsmNHE */
    2111,
    /* BIAsmNL */
    2114,
    /* BIAsmNLE */
    2117,
    /* BIAsmNLH */
    2120,
    /* BIAsmNM */
    2123,
    /* BIAsmNO */
    2126,
    /* BIAsmNP */
    2129,
    /* BIAsmNZ */
    2132,
    /* BIAsmO */
    2135,
    /* BIAsmP */
    2138,
    /* BIAsmZ */
    2141,
    /* BIC */
    2144,
    /* BICAsm */
    2149,
    /* BPP */
    2153,
    /* BPRP */
    2158,
    /* BR */
    2161,
    /* BRAS */
    2162,
    /* BRASL */
    2165,
    /* BRAsmE */
    2168,
    /* BRAsmH */
    2169,
    /* BRAsmHE */
    2170,
    /* BRAsmL */
    2171,
    /* BRAsmLE */
    2172,
    /* BRAsmLH */
    2173,
    /* BRAsmM */
    2174,
    /* BRAsmNE */
    2175,
    /* BRAsmNH */
    2176,
    /* BRAsmNHE */
    2177,
    /* BRAsmNL */
    2178,
    /* BRAsmNLE */
    2179,
    /* BRAsmNLH */
    2180,
    /* BRAsmNM */
    2181,
    /* BRAsmNO */
    2182,
    /* BRAsmNP */
    2183,
    /* BRAsmNZ */
    2184,
    /* BRAsmO */
    2185,
    /* BRAsmP */
    2186,
    /* BRAsmZ */
    2187,
    /* BRC */
    2188,
    /* BRCAsm */
    2191,
    /* BRCL */
    2193,
    /* BRCLAsm */
    2196,
    /* BRCT */
    2198,
    /* BRCTG */
    2201,
    /* BRCTH */
    2204,
    /* BRXH */
    2207,
    /* BRXHG */
    2211,
    /* BRXLE */
    2215,
    /* BRXLG */
    2219,
    /* BSA */
    2223,
    /* BSG */
    2225,
    /* BSM */
    2227,
    /* BXH */
    2229,
    /* BXHG */
    2234,
    /* BXLE */
    2239,
    /* BXLEG */
    2244,
    /* C */
    2249,
    /* CD */
    2253,
    /* CDB */
    2257,
    /* CDBR */
    2261,
    /* CDFBR */
    2263,
    /* CDFBRA */
    2265,
    /* CDFR */
    2269,
    /* CDFTR */
    2271,
    /* CDGBR */
    2275,
    /* CDGBRA */
    2277,
    /* CDGR */
    2281,
    /* CDGTR */
    2283,
    /* CDGTRA */
    2285,
    /* CDLFBR */
    2289,
    /* CDLFTR */
    2293,
    /* CDLGBR */
    2297,
    /* CDLGTR */
    2301,
    /* CDPT */
    2305,
    /* CDR */
    2310,
    /* CDS */
    2312,
    /* CDSG */
    2317,
    /* CDSTR */
    2322,
    /* CDSY */
    2324,
    /* CDTR */
    2329,
    /* CDUTR */
    2331,
    /* CDZT */
    2333,
    /* CE */
    2338,
    /* CEB */
    2342,
    /* CEBR */
    2346,
    /* CEDTR */
    2348,
    /* CEFBR */
    2350,
    /* CEFBRA */
    2352,
    /* CEFR */
    2356,
    /* CEGBR */
    2358,
    /* CEGBRA */
    2360,
    /* CEGR */
    2364,
    /* CELFBR */
    2366,
    /* CELGBR */
    2370,
    /* CER */
    2374,
    /* CEXTR */
    2376,
    /* CFC */
    2378,
    /* CFDBR */
    2380,
    /* CFDBRA */
    2383,
    /* CFDR */
    2387,
    /* CFDTR */
    2390,
    /* CFEBR */
    2394,
    /* CFEBRA */
    2397,
    /* CFER */
    2401,
    /* CFI */
    2404,
    /* CFXBR */
    2406,
    /* CFXBRA */
    2409,
    /* CFXR */
    2413,
    /* CFXTR */
    2416,
    /* CG */
    2420,
    /* CGDBR */
    2424,
    /* CGDBRA */
    2427,
    /* CGDR */
    2431,
    /* CGDTR */
    2434,
    /* CGDTRA */
    2437,
    /* CGEBR */
    2441,
    /* CGEBRA */
    2444,
    /* CGER */
    2448,
    /* CGF */
    2451,
    /* CGFI */
    2455,
    /* CGFR */
    2457,
    /* CGFRL */
    2459,
    /* CGH */
    2461,
    /* CGHI */
    2465,
    /* CGHRL */
    2467,
    /* CGHSI */
    2469,
    /* CGIB */
    2472,
    /* CGIBAsm */
    2477,
    /* CGIBAsmE */
    2482,
    /* CGIBAsmH */
    2486,
    /* CGIBAsmHE */
    2490,
    /* CGIBAsmL */
    2494,
    /* CGIBAsmLE */
    2498,
    /* CGIBAsmLH */
    2502,
    /* CGIBAsmNE */
    2506,
    /* CGIBAsmNH */
    2510,
    /* CGIBAsmNHE */
    2514,
    /* CGIBAsmNL */
    2518,
    /* CGIBAsmNLE */
    2522,
    /* CGIBAsmNLH */
    2526,
    /* CGIJ */
    2530,
    /* CGIJAsm */
    2534,
    /* CGIJAsmE */
    2538,
    /* CGIJAsmH */
    2541,
    /* CGIJAsmHE */
    2544,
    /* CGIJAsmL */
    2547,
    /* CGIJAsmLE */
    2550,
    /* CGIJAsmLH */
    2553,
    /* CGIJAsmNE */
    2556,
    /* CGIJAsmNH */
    2559,
    /* CGIJAsmNHE */
    2562,
    /* CGIJAsmNL */
    2565,
    /* CGIJAsmNLE */
    2568,
    /* CGIJAsmNLH */
    2571,
    /* CGIT */
    2574,
    /* CGITAsm */
    2577,
    /* CGITAsmE */
    2580,
    /* CGITAsmH */
    2582,
    /* CGITAsmHE */
    2584,
    /* CGITAsmL */
    2586,
    /* CGITAsmLE */
    2588,
    /* CGITAsmLH */
    2590,
    /* CGITAsmNE */
    2592,
    /* CGITAsmNH */
    2594,
    /* CGITAsmNHE */
    2596,
    /* CGITAsmNL */
    2598,
    /* CGITAsmNLE */
    2600,
    /* CGITAsmNLH */
    2602,
    /* CGR */
    2604,
    /* CGRB */
    2606,
    /* CGRBAsm */
    2611,
    /* CGRBAsmE */
    2616,
    /* CGRBAsmH */
    2620,
    /* CGRBAsmHE */
    2624,
    /* CGRBAsmL */
    2628,
    /* CGRBAsmLE */
    2632,
    /* CGRBAsmLH */
    2636,
    /* CGRBAsmNE */
    2640,
    /* CGRBAsmNH */
    2644,
    /* CGRBAsmNHE */
    2648,
    /* CGRBAsmNL */
    2652,
    /* CGRBAsmNLE */
    2656,
    /* CGRBAsmNLH */
    2660,
    /* CGRJ */
    2664,
    /* CGRJAsm */
    2668,
    /* CGRJAsmE */
    2672,
    /* CGRJAsmH */
    2675,
    /* CGRJAsmHE */
    2678,
    /* CGRJAsmL */
    2681,
    /* CGRJAsmLE */
    2684,
    /* CGRJAsmLH */
    2687,
    /* CGRJAsmNE */
    2690,
    /* CGRJAsmNH */
    2693,
    /* CGRJAsmNHE */
    2696,
    /* CGRJAsmNL */
    2699,
    /* CGRJAsmNLE */
    2702,
    /* CGRJAsmNLH */
    2705,
    /* CGRL */
    2708,
    /* CGRT */
    2710,
    /* CGRTAsm */
    2713,
    /* CGRTAsmE */
    2716,
    /* CGRTAsmH */
    2718,
    /* CGRTAsmHE */
    2720,
    /* CGRTAsmL */
    2722,
    /* CGRTAsmLE */
    2724,
    /* CGRTAsmLH */
    2726,
    /* CGRTAsmNE */
    2728,
    /* CGRTAsmNH */
    2730,
    /* CGRTAsmNHE */
    2732,
    /* CGRTAsmNL */
    2734,
    /* CGRTAsmNLE */
    2736,
    /* CGRTAsmNLH */
    2738,
    /* CGXBR */
    2740,
    /* CGXBRA */
    2743,
    /* CGXR */
    2747,
    /* CGXTR */
    2750,
    /* CGXTRA */
    2753,
    /* CH */
    2757,
    /* CHF */
    2761,
    /* CHHR */
    2765,
    /* CHHSI */
    2767,
    /* CHI */
    2770,
    /* CHLR */
    2772,
    /* CHRL */
    2774,
    /* CHSI */
    2776,
    /* CHY */
    2779,
    /* CIB */
    2783,
    /* CIBAsm */
    2788,
    /* CIBAsmE */
    2793,
    /* CIBAsmH */
    2797,
    /* CIBAsmHE */
    2801,
    /* CIBAsmL */
    2805,
    /* CIBAsmLE */
    2809,
    /* CIBAsmLH */
    2813,
    /* CIBAsmNE */
    2817,
    /* CIBAsmNH */
    2821,
    /* CIBAsmNHE */
    2825,
    /* CIBAsmNL */
    2829,
    /* CIBAsmNLE */
    2833,
    /* CIBAsmNLH */
    2837,
    /* CIH */
    2841,
    /* CIJ */
    2843,
    /* CIJAsm */
    2847,
    /* CIJAsmE */
    2851,
    /* CIJAsmH */
    2854,
    /* CIJAsmHE */
    2857,
    /* CIJAsmL */
    2860,
    /* CIJAsmLE */
    2863,
    /* CIJAsmLH */
    2866,
    /* CIJAsmNE */
    2869,
    /* CIJAsmNH */
    2872,
    /* CIJAsmNHE */
    2875,
    /* CIJAsmNL */
    2878,
    /* CIJAsmNLE */
    2881,
    /* CIJAsmNLH */
    2884,
    /* CIT */
    2887,
    /* CITAsm */
    2890,
    /* CITAsmE */
    2893,
    /* CITAsmH */
    2895,
    /* CITAsmHE */
    2897,
    /* CITAsmL */
    2899,
    /* CITAsmLE */
    2901,
    /* CITAsmLH */
    2903,
    /* CITAsmNE */
    2905,
    /* CITAsmNH */
    2907,
    /* CITAsmNHE */
    2909,
    /* CITAsmNL */
    2911,
    /* CITAsmNLE */
    2913,
    /* CITAsmNLH */
    2915,
    /* CKSM */
    2917,
    /* CL */
    2921,
    /* CLC */
    2925,
    /* CLCL */
    2930,
    /* CLCLE */
    2934,
    /* CLCLU */
    2940,
    /* CLFDBR */
    2946,
    /* CLFDTR */
    2950,
    /* CLFEBR */
    2954,
    /* CLFHSI */
    2958,
    /* CLFI */
    2961,
    /* CLFIT */
    2963,
    /* CLFITAsm */
    2966,
    /* CLFITAsmE */
    2969,
    /* CLFITAsmH */
    2971,
    /* CLFITAsmHE */
    2973,
    /* CLFITAsmL */
    2975,
    /* CLFITAsmLE */
    2977,
    /* CLFITAsmLH */
    2979,
    /* CLFITAsmNE */
    2981,
    /* CLFITAsmNH */
    2983,
    /* CLFITAsmNHE */
    2985,
    /* CLFITAsmNL */
    2987,
    /* CLFITAsmNLE */
    2989,
    /* CLFITAsmNLH */
    2991,
    /* CLFXBR */
    2993,
    /* CLFXTR */
    2997,
    /* CLG */
    3001,
    /* CLGDBR */
    3005,
    /* CLGDTR */
    3009,
    /* CLGEBR */
    3013,
    /* CLGF */
    3017,
    /* CLGFI */
    3021,
    /* CLGFR */
    3023,
    /* CLGFRL */
    3025,
    /* CLGHRL */
    3027,
    /* CLGHSI */
    3029,
    /* CLGIB */
    3032,
    /* CLGIBAsm */
    3037,
    /* CLGIBAsmE */
    3042,
    /* CLGIBAsmH */
    3046,
    /* CLGIBAsmHE */
    3050,
    /* CLGIBAsmL */
    3054,
    /* CLGIBAsmLE */
    3058,
    /* CLGIBAsmLH */
    3062,
    /* CLGIBAsmNE */
    3066,
    /* CLGIBAsmNH */
    3070,
    /* CLGIBAsmNHE */
    3074,
    /* CLGIBAsmNL */
    3078,
    /* CLGIBAsmNLE */
    3082,
    /* CLGIBAsmNLH */
    3086,
    /* CLGIJ */
    3090,
    /* CLGIJAsm */
    3094,
    /* CLGIJAsmE */
    3098,
    /* CLGIJAsmH */
    3101,
    /* CLGIJAsmHE */
    3104,
    /* CLGIJAsmL */
    3107,
    /* CLGIJAsmLE */
    3110,
    /* CLGIJAsmLH */
    3113,
    /* CLGIJAsmNE */
    3116,
    /* CLGIJAsmNH */
    3119,
    /* CLGIJAsmNHE */
    3122,
    /* CLGIJAsmNL */
    3125,
    /* CLGIJAsmNLE */
    3128,
    /* CLGIJAsmNLH */
    3131,
    /* CLGIT */
    3134,
    /* CLGITAsm */
    3137,
    /* CLGITAsmE */
    3140,
    /* CLGITAsmH */
    3142,
    /* CLGITAsmHE */
    3144,
    /* CLGITAsmL */
    3146,
    /* CLGITAsmLE */
    3148,
    /* CLGITAsmLH */
    3150,
    /* CLGITAsmNE */
    3152,
    /* CLGITAsmNH */
    3154,
    /* CLGITAsmNHE */
    3156,
    /* CLGITAsmNL */
    3158,
    /* CLGITAsmNLE */
    3160,
    /* CLGITAsmNLH */
    3162,
    /* CLGR */
    3164,
    /* CLGRB */
    3166,
    /* CLGRBAsm */
    3171,
    /* CLGRBAsmE */
    3176,
    /* CLGRBAsmH */
    3180,
    /* CLGRBAsmHE */
    3184,
    /* CLGRBAsmL */
    3188,
    /* CLGRBAsmLE */
    3192,
    /* CLGRBAsmLH */
    3196,
    /* CLGRBAsmNE */
    3200,
    /* CLGRBAsmNH */
    3204,
    /* CLGRBAsmNHE */
    3208,
    /* CLGRBAsmNL */
    3212,
    /* CLGRBAsmNLE */
    3216,
    /* CLGRBAsmNLH */
    3220,
    /* CLGRJ */
    3224,
    /* CLGRJAsm */
    3228,
    /* CLGRJAsmE */
    3232,
    /* CLGRJAsmH */
    3235,
    /* CLGRJAsmHE */
    3238,
    /* CLGRJAsmL */
    3241,
    /* CLGRJAsmLE */
    3244,
    /* CLGRJAsmLH */
    3247,
    /* CLGRJAsmNE */
    3250,
    /* CLGRJAsmNH */
    3253,
    /* CLGRJAsmNHE */
    3256,
    /* CLGRJAsmNL */
    3259,
    /* CLGRJAsmNLE */
    3262,
    /* CLGRJAsmNLH */
    3265,
    /* CLGRL */
    3268,
    /* CLGRT */
    3270,
    /* CLGRTAsm */
    3273,
    /* CLGRTAsmE */
    3276,
    /* CLGRTAsmH */
    3278,
    /* CLGRTAsmHE */
    3280,
    /* CLGRTAsmL */
    3282,
    /* CLGRTAsmLE */
    3284,
    /* CLGRTAsmLH */
    3286,
    /* CLGRTAsmNE */
    3288,
    /* CLGRTAsmNH */
    3290,
    /* CLGRTAsmNHE */
    3292,
    /* CLGRTAsmNL */
    3294,
    /* CLGRTAsmNLE */
    3296,
    /* CLGRTAsmNLH */
    3298,
    /* CLGT */
    3300,
    /* CLGTAsm */
    3304,
    /* CLGTAsmE */
    3308,
    /* CLGTAsmH */
    3311,
    /* CLGTAsmHE */
    3314,
    /* CLGTAsmL */
    3317,
    /* CLGTAsmLE */
    3320,
    /* CLGTAsmLH */
    3323,
    /* CLGTAsmNE */
    3326,
    /* CLGTAsmNH */
    3329,
    /* CLGTAsmNHE */
    3332,
    /* CLGTAsmNL */
    3335,
    /* CLGTAsmNLE */
    3338,
    /* CLGTAsmNLH */
    3341,
    /* CLGXBR */
    3344,
    /* CLGXTR */
    3348,
    /* CLHF */
    3352,
    /* CLHHR */
    3356,
    /* CLHHSI */
    3358,
    /* CLHLR */
    3361,
    /* CLHRL */
    3363,
    /* CLI */
    3365,
    /* CLIB */
    3368,
    /* CLIBAsm */
    3373,
    /* CLIBAsmE */
    3378,
    /* CLIBAsmH */
    3382,
    /* CLIBAsmHE */
    3386,
    /* CLIBAsmL */
    3390,
    /* CLIBAsmLE */
    3394,
    /* CLIBAsmLH */
    3398,
    /* CLIBAsmNE */
    3402,
    /* CLIBAsmNH */
    3406,
    /* CLIBAsmNHE */
    3410,
    /* CLIBAsmNL */
    3414,
    /* CLIBAsmNLE */
    3418,
    /* CLIBAsmNLH */
    3422,
    /* CLIH */
    3426,
    /* CLIJ */
    3428,
    /* CLIJAsm */
    3432,
    /* CLIJAsmE */
    3436,
    /* CLIJAsmH */
    3439,
    /* CLIJAsmHE */
    3442,
    /* CLIJAsmL */
    3445,
    /* CLIJAsmLE */
    3448,
    /* CLIJAsmLH */
    3451,
    /* CLIJAsmNE */
    3454,
    /* CLIJAsmNH */
    3457,
    /* CLIJAsmNHE */
    3460,
    /* CLIJAsmNL */
    3463,
    /* CLIJAsmNLE */
    3466,
    /* CLIJAsmNLH */
    3469,
    /* CLIY */
    3472,
    /* CLM */
    3475,
    /* CLMH */
    3479,
    /* CLMY */
    3483,
    /* CLR */
    3487,
    /* CLRB */
    3489,
    /* CLRBAsm */
    3494,
    /* CLRBAsmE */
    3499,
    /* CLRBAsmH */
    3503,
    /* CLRBAsmHE */
    3507,
    /* CLRBAsmL */
    3511,
    /* CLRBAsmLE */
    3515,
    /* CLRBAsmLH */
    3519,
    /* CLRBAsmNE */
    3523,
    /* CLRBAsmNH */
    3527,
    /* CLRBAsmNHE */
    3531,
    /* CLRBAsmNL */
    3535,
    /* CLRBAsmNLE */
    3539,
    /* CLRBAsmNLH */
    3543,
    /* CLRJ */
    3547,
    /* CLRJAsm */
    3551,
    /* CLRJAsmE */
    3555,
    /* CLRJAsmH */
    3558,
    /* CLRJAsmHE */
    3561,
    /* CLRJAsmL */
    3564,
    /* CLRJAsmLE */
    3567,
    /* CLRJAsmLH */
    3570,
    /* CLRJAsmNE */
    3573,
    /* CLRJAsmNH */
    3576,
    /* CLRJAsmNHE */
    3579,
    /* CLRJAsmNL */
    3582,
    /* CLRJAsmNLE */
    3585,
    /* CLRJAsmNLH */
    3588,
    /* CLRL */
    3591,
    /* CLRT */
    3593,
    /* CLRTAsm */
    3596,
    /* CLRTAsmE */
    3599,
    /* CLRTAsmH */
    3601,
    /* CLRTAsmHE */
    3603,
    /* CLRTAsmL */
    3605,
    /* CLRTAsmLE */
    3607,
    /* CLRTAsmLH */
    3609,
    /* CLRTAsmNE */
    3611,
    /* CLRTAsmNH */
    3613,
    /* CLRTAsmNHE */
    3615,
    /* CLRTAsmNL */
    3617,
    /* CLRTAsmNLE */
    3619,
    /* CLRTAsmNLH */
    3621,
    /* CLST */
    3623,
    /* CLT */
    3627,
    /* CLTAsm */
    3631,
    /* CLTAsmE */
    3635,
    /* CLTAsmH */
    3638,
    /* CLTAsmHE */
    3641,
    /* CLTAsmL */
    3644,
    /* CLTAsmLE */
    3647,
    /* CLTAsmLH */
    3650,
    /* CLTAsmNE */
    3653,
    /* CLTAsmNH */
    3656,
    /* CLTAsmNHE */
    3659,
    /* CLTAsmNL */
    3662,
    /* CLTAsmNLE */
    3665,
    /* CLTAsmNLH */
    3668,
    /* CLY */
    3671,
    /* CMPSC */
    3675,
    /* CP */
    3679,
    /* CPDT */
    3685,
    /* CPSDRdd */
    3690,
    /* CPSDRds */
    3693,
    /* CPSDRsd */
    3696,
    /* CPSDRss */
    3699,
    /* CPXT */
    3702,
    /* CPYA */
    3707,
    /* CR */
    3709,
    /* CRB */
    3711,
    /* CRBAsm */
    3716,
    /* CRBAsmE */
    3721,
    /* CRBAsmH */
    3725,
    /* CRBAsmHE */
    3729,
    /* CRBAsmL */
    3733,
    /* CRBAsmLE */
    3737,
    /* CRBAsmLH */
    3741,
    /* CRBAsmNE */
    3745,
    /* CRBAsmNH */
    3749,
    /* CRBAsmNHE */
    3753,
    /* CRBAsmNL */
    3757,
    /* CRBAsmNLE */
    3761,
    /* CRBAsmNLH */
    3765,
    /* CRDTE */
    3769,
    /* CRDTEOpt */
    3773,
    /* CRJ */
    3776,
    /* CRJAsm */
    3780,
    /* CRJAsmE */
    3784,
    /* CRJAsmH */
    3787,
    /* CRJAsmHE */
    3790,
    /* CRJAsmL */
    3793,
    /* CRJAsmLE */
    3796,
    /* CRJAsmLH */
    3799,
    /* CRJAsmNE */
    3802,
    /* CRJAsmNH */
    3805,
    /* CRJAsmNHE */
    3808,
    /* CRJAsmNL */
    3811,
    /* CRJAsmNLE */
    3814,
    /* CRJAsmNLH */
    3817,
    /* CRL */
    3820,
    /* CRT */
    3822,
    /* CRTAsm */
    3825,
    /* CRTAsmE */
    3828,
    /* CRTAsmH */
    3830,
    /* CRTAsmHE */
    3832,
    /* CRTAsmL */
    3834,
    /* CRTAsmLE */
    3836,
    /* CRTAsmLH */
    3838,
    /* CRTAsmNE */
    3840,
    /* CRTAsmNH */
    3842,
    /* CRTAsmNHE */
    3844,
    /* CRTAsmNL */
    3846,
    /* CRTAsmNLE */
    3848,
    /* CRTAsmNLH */
    3850,
    /* CS */
    3852,
    /* CSCH */
    3857,
    /* CSDTR */
    3857,
    /* CSG */
    3860,
    /* CSP */
    3865,
    /* CSPG */
    3868,
    /* CSST */
    3871,
    /* CSXTR */
    3876,
    /* CSY */
    3879,
    /* CU12 */
    3884,
    /* CU12Opt */
    3889,
    /* CU14 */
    3893,
    /* CU14Opt */
    3898,
    /* CU21 */
    3902,
    /* CU21Opt */
    3907,
    /* CU24 */
    3911,
    /* CU24Opt */
    3916,
    /* CU41 */
    3920,
    /* CU42 */
    3924,
    /* CUDTR */
    3928,
    /* CUSE */
    3930,
    /* CUTFU */
    3934,
    /* CUTFUOpt */
    3939,
    /* CUUTF */
    3943,
    /* CUUTFOpt */
    3948,
    /* CUXTR */
    3952,
    /* CVB */
    3954,
    /* CVBG */
    3959,
    /* CVBY */
    3964,
    /* CVD */
    3969,
    /* CVDG */
    3973,
    /* CVDY */
    3977,
    /* CXBR */
    3981,
    /* CXFBR */
    3983,
    /* CXFBRA */
    3985,
    /* CXFR */
    3989,
    /* CXFTR */
    3991,
    /* CXGBR */
    3995,
    /* CXGBRA */
    3997,
    /* CXGR */
    4001,
    /* CXGTR */
    4003,
    /* CXGTRA */
    4005,
    /* CXLFBR */
    4009,
    /* CXLFTR */
    4013,
    /* CXLGBR */
    4017,
    /* CXLGTR */
    4021,
    /* CXPT */
    4025,
    /* CXR */
    4030,
    /* CXSTR */
    4032,
    /* CXTR */
    4034,
    /* CXUTR */
    4036,
    /* CXZT */
    4038,
    /* CY */
    4043,
    /* CZDT */
    4047,
    /* CZXT */
    4052,
    /* D */
    4057,
    /* DD */
    4062,
    /* DDB */
    4067,
    /* DDBR */
    4072,
    /* DDR */
    4075,
    /* DDTR */
    4078,
    /* DDTRA */
    4081,
    /* DE */
    4085,
    /* DEB */
    4090,
    /* DEBR */
    4095,
    /* DER */
    4098,
    /* DFLTCC */
    4101,
    /* DIAG */
    4106,
    /* DIDBR */
    4110,
    /* DIEBR */
    4115,
    /* DL */
    4120,
    /* DLG */
    4125,
    /* DLGR */
    4130,
    /* DLR */
    4133,
    /* DP */
    4136,
    /* DR */
    4142,
    /* DSG */
    4145,
    /* DSGF */
    4150,
    /* DSGFR */
    4155,
    /* DSGR */
    4158,
    /* DXBR */
    4161,
    /* DXR */
    4164,
    /* DXTR */
    4167,
    /* DXTRA */
    4170,
    /* EAR */
    4174,
    /* ECAG */
    4176,
    /* ECCTR */
    4180,
    /* ECPGA */
    4182,
    /* ECTG */
    4184,
    /* ED */
    4189,
    /* EDMK */
    4194,
    /* EEDTR */
    4199,
    /* EEXTR */
    4201,
    /* EFPC */
    4203,
    /* EPAIR */
    4204,
    /* EPAR */
    4205,
    /* EPCTR */
    4206,
    /* EPSW */
    4208,
    /* EREG */
    4210,
    /* EREGG */
    4212,
    /* ESAIR */
    4214,
    /* ESAR */
    4215,
    /* ESDTR */
    4216,
    /* ESEA */
    4218,
    /* ESTA */
    4220,
    /* ESXTR */
    4222,
    /* ETND */
    4224,
    /* EX */
    4225,
    /* EXRL */
    4229,
    /* FIDBR */
    4231,
    /* FIDBRA */
    4234,
    /* FIDR */
    4238,
    /* FIDTR */
    4240,
    /* FIEBR */
    4244,
    /* FIEBRA */
    4247,
    /* FIER */
    4251,
    /* FIXBR */
    4253,
    /* FIXBRA */
    4256,
    /* FIXR */
    4260,
    /* FIXTR */
    4262,
    /* FLOGR */
    4266,
    /* HDR */
    4268,
    /* HER */
    4270,
    /* HSCH */
    4272,
    /* IAC */
    4272,
    /* IC */
    4273,
    /* IC32 */
    4278,
    /* IC32Y */
    4283,
    /* ICM */
    4288,
    /* ICMH */
    4293,
    /* ICMY */
    4298,
    /* ICY */
    4303,
    /* IDTE */
    4308,
    /* IDTEOpt */
    4312,
    /* IEDTR */
    4315,
    /* IEXTR */
    4318,
    /* IIHF */
    4321,
    /* IIHH */
    4323,
    /* IIHL */
    4326,
    /* IILF */
    4329,
    /* IILH */
    4331,
    /* IILL */
    4334,
    /* IPK */
    4337,
    /* IPM */
    4337,
    /* IPTE */
    4338,
    /* IPTEOpt */
    4342,
    /* IPTEOptOpt */
    4345,
    /* IRBM */
    4347,
    /* ISKE */
    4349,
    /* IVSK */
    4352,
    /* InsnE */
    4355,
    /* InsnRI */
    4356,
    /* InsnRIE */
    4359,
    /* InsnRIL */
    4363,
    /* InsnRILU */
    4366,
    /* InsnRIS */
    4369,
    /* InsnRR */
    4375,
    /* InsnRRE */
    4378,
    /* InsnRRF */
    4381,
    /* InsnRRS */
    4386,
    /* InsnRS */
    4392,
    /* InsnRSE */
    4397,
    /* InsnRSI */
    4402,
    /* InsnRSY */
    4406,
    /* InsnRX */
    4411,
    /* InsnRXE */
    4416,
    /* InsnRXF */
    4421,
    /* InsnRXY */
    4427,
    /* InsnS */
    4432,
    /* InsnSI */
    4435,
    /* InsnSIL */
    4439,
    /* InsnSIY */
    4443,
    /* InsnSS */
    4447,
    /* InsnSSE */
    4454,
    /* InsnSSF */
    4459,
    /* InsnVRI */
    4465,
    /* InsnVRR */
    4471,
    /* InsnVRS */
    4478,
    /* InsnVRV */
    4484,
    /* InsnVRX */
    4490,
    /* InsnVSI */
    4496,
    /* J */
    4501,
    /* JAsmE */
    4502,
    /* JAsmH */
    4503,
    /* JAsmHE */
    4504,
    /* JAsmL */
    4505,
    /* JAsmLE */
    4506,
    /* JAsmLH */
    4507,
    /* JAsmM */
    4508,
    /* JAsmNE */
    4509,
    /* JAsmNH */
    4510,
    /* JAsmNHE */
    4511,
    /* JAsmNL */
    4512,
    /* JAsmNLE */
    4513,
    /* JAsmNLH */
    4514,
    /* JAsmNM */
    4515,
    /* JAsmNO */
    4516,
    /* JAsmNP */
    4517,
    /* JAsmNZ */
    4518,
    /* JAsmO */
    4519,
    /* JAsmP */
    4520,
    /* JAsmZ */
    4521,
    /* JG */
    4522,
    /* JGAsmE */
    4523,
    /* JGAsmH */
    4524,
    /* JGAsmHE */
    4525,
    /* JGAsmL */
    4526,
    /* JGAsmLE */
    4527,
    /* JGAsmLH */
    4528,
    /* JGAsmM */
    4529,
    /* JGAsmNE */
    4530,
    /* JGAsmNH */
    4531,
    /* JGAsmNHE */
    4532,
    /* JGAsmNL */
    4533,
    /* JGAsmNLE */
    4534,
    /* JGAsmNLH */
    4535,
    /* JGAsmNM */
    4536,
    /* JGAsmNO */
    4537,
    /* JGAsmNP */
    4538,
    /* JGAsmNZ */
    4539,
    /* JGAsmO */
    4540,
    /* JGAsmP */
    4541,
    /* JGAsmZ */
    4542,
    /* KDB */
    4543,
    /* KDBR */
    4547,
    /* KDSA */
    4549,
    /* KDTR */
    4552,
    /* KEB */
    4554,
    /* KEBR */
    4558,
    /* KIMD */
    4560,
    /* KLMD */
    4563,
    /* KM */
    4566,
    /* KMA */
    4570,
    /* KMAC */
    4576,
    /* KMC */
    4579,
    /* KMCTR */
    4583,
    /* KMF */
    4589,
    /* KMO */
    4593,
    /* KXBR */
    4597,
    /* KXTR */
    4599,
    /* L */
    4601,
    /* LA */
    4605,
    /* LAA */
    4609,
    /* LAAG */
    4613,
    /* LAAL */
    4617,
    /* LAALG */
    4621,
    /* LAE */
    4625,
    /* LAEY */
    4629,
    /* LAM */
    4633,
    /* LAMY */
    4637,
    /* LAN */
    4641,
    /* LANG */
    4645,
    /* LAO */
    4649,
    /* LAOG */
    4653,
    /* LARL */
    4657,
    /* LASP */
    4659,
    /* LAT */
    4663,
    /* LAX */
    4667,
    /* LAXG */
    4671,
    /* LAY */
    4675,
    /* LB */
    4679,
    /* LBEAR */
    4683,
    /* LBH */
    4685,
    /* LBR */
    4689,
    /* LCBB */
    4691,
    /* LCCTL */
    4696,
    /* LCDBR */
    4698,
    /* LCDFR */
    4700,
    /* LCDFR_32 */
    4702,
    /* LCDR */
    4704,
    /* LCEBR */
    4706,
    /* LCER */
    4708,
    /* LCGFR */
    4710,
    /* LCGR */
    4712,
    /* LCR */
    4714,
    /* LCTL */
    4716,
    /* LCTLG */
    4720,
    /* LCXBR */
    4724,
    /* LCXR */
    4726,
    /* LD */
    4728,
    /* LDE */
    4732,
    /* LDE32 */
    4736,
    /* LDEB */
    4740,
    /* LDEBR */
    4744,
    /* LDER */
    4746,
    /* LDETR */
    4748,
    /* LDGR */
    4751,
    /* LDR */
    4753,
    /* LDR32 */
    4755,
    /* LDXBR */
    4757,
    /* LDXBRA */
    4759,
    /* LDXR */
    4763,
    /* LDXTR */
    4765,
    /* LDY */
    4769,
    /* LE */
    4773,
    /* LEDBR */
    4777,
    /* LEDBRA */
    4779,
    /* LEDR */
    4783,
    /* LEDTR */
    4785,
    /* LER */
    4789,
    /* LEXBR */
    4791,
    /* LEXBRA */
    4793,
    /* LEXR */
    4797,
    /* LEY */
    4799,
    /* LFAS */
    4803,
    /* LFH */
    4805,
    /* LFHAT */
    4809,
    /* LFPC */
    4813,
    /* LG */
    4815,
    /* LGAT */
    4819,
    /* LGB */
    4823,
    /* LGBR */
    4827,
    /* LGDR */
    4829,
    /* LGF */
    4831,
    /* LGFI */
    4835,
    /* LGFR */
    4837,
    /* LGFRL */
    4839,
    /* LGG */
    4841,
    /* LGH */
    4845,
    /* LGHI */
    4849,
    /* LGHR */
    4851,
    /* LGHRL */
    4853,
    /* LGR */
    4855,
    /* LGRL */
    4857,
    /* LGSC */
    4859,
    /* LH */
    4863,
    /* LHH */
    4867,
    /* LHI */
    4871,
    /* LHR */
    4873,
    /* LHRL */
    4875,
    /* LHY */
    4877,
    /* LLC */
    4881,
    /* LLCH */
    4885,
    /* LLCR */
    4889,
    /* LLGC */
    4891,
    /* LLGCR */
    4895,
    /* LLGF */
    4897,
    /* LLGFAT */
    4901,
    /* LLGFR */
    4905,
    /* LLGFRL */
    4907,
    /* LLGFSG */
    4909,
    /* LLGH */
    4913,
    /* LLGHR */
    4917,
    /* LLGHRL */
    4919,
    /* LLGT */
    4921,
    /* LLGTAT */
    4925,
    /* LLGTR */
    4929,
    /* LLH */
    4931,
    /* LLHH */
    4935,
    /* LLHR */
    4939,
    /* LLHRL */
    4941,
    /* LLIHF */
    4943,
    /* LLIHH */
    4945,
    /* LLIHL */
    4947,
    /* LLILF */
    4949,
    /* LLILH */
    4951,
    /* LLILL */
    4953,
    /* LLZRGF */
    4955,
    /* LM */
    4959,
    /* LMD */
    4963,
    /* LMG */
    4969,
    /* LMH */
    4973,
    /* LMY */
    4977,
    /* LNDBR */
    4981,
    /* LNDFR */
    4983,
    /* LNDFR_32 */
    4985,
    /* LNDR */
    4987,
    /* LNEBR */
    4989,
    /* LNER */
    4991,
    /* LNGFR */
    4993,
    /* LNGR */
    4995,
    /* LNR */
    4997,
    /* LNXBR */
    4999,
    /* LNXR */
    5001,
    /* LOC */
    5003,
    /* LOCAsm */
    5009,
    /* LOCAsmE */
    5014,
    /* LOCAsmH */
    5018,
    /* LOCAsmHE */
    5022,
    /* LOCAsmL */
    5026,
    /* LOCAsmLE */
    5030,
    /* LOCAsmLH */
    5034,
    /* LOCAsmM */
    5038,
    /* LOCAsmNE */
    5042,
    /* LOCAsmNH */
    5046,
    /* LOCAsmNHE */
    5050,
    /* LOCAsmNL */
    5054,
    /* LOCAsmNLE */
    5058,
    /* LOCAsmNLH */
    5062,
    /* LOCAsmNM */
    5066,
    /* LOCAsmNO */
    5070,
    /* LOCAsmNP */
    5074,
    /* LOCAsmNZ */
    5078,
    /* LOCAsmO */
    5082,
    /* LOCAsmP */
    5086,
    /* LOCAsmZ */
    5090,
    /* LOCFH */
    5094,
    /* LOCFHAsm */
    5100,
    /* LOCFHAsmE */
    5105,
    /* LOCFHAsmH */
    5109,
    /* LOCFHAsmHE */
    5113,
    /* LOCFHAsmL */
    5117,
    /* LOCFHAsmLE */
    5121,
    /* LOCFHAsmLH */
    5125,
    /* LOCFHAsmM */
    5129,
    /* LOCFHAsmNE */
    5133,
    /* LOCFHAsmNH */
    5137,
    /* LOCFHAsmNHE */
    5141,
    /* LOCFHAsmNL */
    5145,
    /* LOCFHAsmNLE */
    5149,
    /* LOCFHAsmNLH */
    5153,
    /* LOCFHAsmNM */
    5157,
    /* LOCFHAsmNO */
    5161,
    /* LOCFHAsmNP */
    5165,
    /* LOCFHAsmNZ */
    5169,
    /* LOCFHAsmO */
    5173,
    /* LOCFHAsmP */
    5177,
    /* LOCFHAsmZ */
    5181,
    /* LOCFHR */
    5185,
    /* LOCFHRAsm */
    5190,
    /* LOCFHRAsmE */
    5194,
    /* LOCFHRAsmH */
    5197,
    /* LOCFHRAsmHE */
    5200,
    /* LOCFHRAsmL */
    5203,
    /* LOCFHRAsmLE */
    5206,
    /* LOCFHRAsmLH */
    5209,
    /* LOCFHRAsmM */
    5212,
    /* LOCFHRAsmNE */
    5215,
    /* LOCFHRAsmNH */
    5218,
    /* LOCFHRAsmNHE */
    5221,
    /* LOCFHRAsmNL */
    5224,
    /* LOCFHRAsmNLE */
    5227,
    /* LOCFHRAsmNLH */
    5230,
    /* LOCFHRAsmNM */
    5233,
    /* LOCFHRAsmNO */
    5236,
    /* LOCFHRAsmNP */
    5239,
    /* LOCFHRAsmNZ */
    5242,
    /* LOCFHRAsmO */
    5245,
    /* LOCFHRAsmP */
    5248,
    /* LOCFHRAsmZ */
    5251,
    /* LOCG */
    5254,
    /* LOCGAsm */
    5260,
    /* LOCGAsmE */
    5265,
    /* LOCGAsmH */
    5269,
    /* LOCGAsmHE */
    5273,
    /* LOCGAsmL */
    5277,
    /* LOCGAsmLE */
    5281,
    /* LOCGAsmLH */
    5285,
    /* LOCGAsmM */
    5289,
    /* LOCGAsmNE */
    5293,
    /* LOCGAsmNH */
    5297,
    /* LOCGAsmNHE */
    5301,
    /* LOCGAsmNL */
    5305,
    /* LOCGAsmNLE */
    5309,
    /* LOCGAsmNLH */
    5313,
    /* LOCGAsmNM */
    5317,
    /* LOCGAsmNO */
    5321,
    /* LOCGAsmNP */
    5325,
    /* LOCGAsmNZ */
    5329,
    /* LOCGAsmO */
    5333,
    /* LOCGAsmP */
    5337,
    /* LOCGAsmZ */
    5341,
    /* LOCGHI */
    5345,
    /* LOCGHIAsm */
    5350,
    /* LOCGHIAsmE */
    5354,
    /* LOCGHIAsmH */
    5357,
    /* LOCGHIAsmHE */
    5360,
    /* LOCGHIAsmL */
    5363,
    /* LOCGHIAsmLE */
    5366,
    /* LOCGHIAsmLH */
    5369,
    /* LOCGHIAsmM */
    5372,
    /* LOCGHIAsmNE */
    5375,
    /* LOCGHIAsmNH */
    5378,
    /* LOCGHIAsmNHE */
    5381,
    /* LOCGHIAsmNL */
    5384,
    /* LOCGHIAsmNLE */
    5387,
    /* LOCGHIAsmNLH */
    5390,
    /* LOCGHIAsmNM */
    5393,
    /* LOCGHIAsmNO */
    5396,
    /* LOCGHIAsmNP */
    5399,
    /* LOCGHIAsmNZ */
    5402,
    /* LOCGHIAsmO */
    5405,
    /* LOCGHIAsmP */
    5408,
    /* LOCGHIAsmZ */
    5411,
    /* LOCGR */
    5414,
    /* LOCGRAsm */
    5419,
    /* LOCGRAsmE */
    5423,
    /* LOCGRAsmH */
    5426,
    /* LOCGRAsmHE */
    5429,
    /* LOCGRAsmL */
    5432,
    /* LOCGRAsmLE */
    5435,
    /* LOCGRAsmLH */
    5438,
    /* LOCGRAsmM */
    5441,
    /* LOCGRAsmNE */
    5444,
    /* LOCGRAsmNH */
    5447,
    /* LOCGRAsmNHE */
    5450,
    /* LOCGRAsmNL */
    5453,
    /* LOCGRAsmNLE */
    5456,
    /* LOCGRAsmNLH */
    5459,
    /* LOCGRAsmNM */
    5462,
    /* LOCGRAsmNO */
    5465,
    /* LOCGRAsmNP */
    5468,
    /* LOCGRAsmNZ */
    5471,
    /* LOCGRAsmO */
    5474,
    /* LOCGRAsmP */
    5477,
    /* LOCGRAsmZ */
    5480,
    /* LOCHHI */
    5483,
    /* LOCHHIAsm */
    5488,
    /* LOCHHIAsmE */
    5492,
    /* LOCHHIAsmH */
    5495,
    /* LOCHHIAsmHE */
    5498,
    /* LOCHHIAsmL */
    5501,
    /* LOCHHIAsmLE */
    5504,
    /* LOCHHIAsmLH */
    5507,
    /* LOCHHIAsmM */
    5510,
    /* LOCHHIAsmNE */
    5513,
    /* LOCHHIAsmNH */
    5516,
    /* LOCHHIAsmNHE */
    5519,
    /* LOCHHIAsmNL */
    5522,
    /* LOCHHIAsmNLE */
    5525,
    /* LOCHHIAsmNLH */
    5528,
    /* LOCHHIAsmNM */
    5531,
    /* LOCHHIAsmNO */
    5534,
    /* LOCHHIAsmNP */
    5537,
    /* LOCHHIAsmNZ */
    5540,
    /* LOCHHIAsmO */
    5543,
    /* LOCHHIAsmP */
    5546,
    /* LOCHHIAsmZ */
    5549,
    /* LOCHI */
    5552,
    /* LOCHIAsm */
    5557,
    /* LOCHIAsmE */
    5561,
    /* LOCHIAsmH */
    5564,
    /* LOCHIAsmHE */
    5567,
    /* LOCHIAsmL */
    5570,
    /* LOCHIAsmLE */
    5573,
    /* LOCHIAsmLH */
    5576,
    /* LOCHIAsmM */
    5579,
    /* LOCHIAsmNE */
    5582,
    /* LOCHIAsmNH */
    5585,
    /* LOCHIAsmNHE */
    5588,
    /* LOCHIAsmNL */
    5591,
    /* LOCHIAsmNLE */
    5594,
    /* LOCHIAsmNLH */
    5597,
    /* LOCHIAsmNM */
    5600,
    /* LOCHIAsmNO */
    5603,
    /* LOCHIAsmNP */
    5606,
    /* LOCHIAsmNZ */
    5609,
    /* LOCHIAsmO */
    5612,
    /* LOCHIAsmP */
    5615,
    /* LOCHIAsmZ */
    5618,
    /* LOCR */
    5621,
    /* LOCRAsm */
    5626,
    /* LOCRAsmE */
    5630,
    /* LOCRAsmH */
    5633,
    /* LOCRAsmHE */
    5636,
    /* LOCRAsmL */
    5639,
    /* LOCRAsmLE */
    5642,
    /* LOCRAsmLH */
    5645,
    /* LOCRAsmM */
    5648,
    /* LOCRAsmNE */
    5651,
    /* LOCRAsmNH */
    5654,
    /* LOCRAsmNHE */
    5657,
    /* LOCRAsmNL */
    5660,
    /* LOCRAsmNLE */
    5663,
    /* LOCRAsmNLH */
    5666,
    /* LOCRAsmNM */
    5669,
    /* LOCRAsmNO */
    5672,
    /* LOCRAsmNP */
    5675,
    /* LOCRAsmNZ */
    5678,
    /* LOCRAsmO */
    5681,
    /* LOCRAsmP */
    5684,
    /* LOCRAsmZ */
    5687,
    /* LPCTL */
    5690,
    /* LPD */
    5692,
    /* LPDBR */
    5697,
    /* LPDFR */
    5699,
    /* LPDFR_32 */
    5701,
    /* LPDG */
    5703,
    /* LPDR */
    5708,
    /* LPEBR */
    5710,
    /* LPER */
    5712,
    /* LPGFR */
    5714,
    /* LPGR */
    5716,
    /* LPP */
    5718,
    /* LPQ */
    5720,
    /* LPR */
    5724,
    /* LPSW */
    5726,
    /* LPSWE */
    5728,
    /* LPSWEY */
    5730,
    /* LPTEA */
    5732,
    /* LPXBR */
    5737,
    /* LPXR */
    5739,
    /* LR */
    5741,
    /* LRA */
    5743,
    /* LRAG */
    5747,
    /* LRAY */
    5751,
    /* LRDR */
    5755,
    /* LRER */
    5757,
    /* LRL */
    5759,
    /* LRV */
    5761,
    /* LRVG */
    5765,
    /* LRVGR */
    5769,
    /* LRVH */
    5771,
    /* LRVR */
    5775,
    /* LSCTL */
    5777,
    /* LT */
    5779,
    /* LTDBR */
    5783,
    /* LTDBRCompare */
    5785,
    /* LTDR */
    5787,
    /* LTDTR */
    5789,
    /* LTEBR */
    5791,
    /* LTEBRCompare */
    5793,
    /* LTER */
    5795,
    /* LTG */
    5797,
    /* LTGF */
    5801,
    /* LTGFR */
    5805,
    /* LTGR */
    5807,
    /* LTR */
    5809,
    /* LTXBR */
    5811,
    /* LTXBRCompare */
    5813,
    /* LTXR */
    5815,
    /* LTXTR */
    5817,
    /* LURA */
    5819,
    /* LURAG */
    5821,
    /* LXD */
    5823,
    /* LXDB */
    5827,
    /* LXDBR */
    5831,
    /* LXDR */
    5833,
    /* LXDTR */
    5835,
    /* LXE */
    5838,
    /* LXEB */
    5842,
    /* LXEBR */
    5846,
    /* LXER */
    5848,
    /* LXR */
    5850,
    /* LY */
    5852,
    /* LZDR */
    5856,
    /* LZER */
    5857,
    /* LZRF */
    5858,
    /* LZRG */
    5862,
    /* LZXR */
    5866,
    /* M */
    5867,
    /* MAD */
    5872,
    /* MADB */
    5878,
    /* MADBR */
    5884,
    /* MADR */
    5888,
    /* MAE */
    5892,
    /* MAEB */
    5898,
    /* MAEBR */
    5904,
    /* MAER */
    5908,
    /* MAY */
    5912,
    /* MAYH */
    5918,
    /* MAYHR */
    5924,
    /* MAYL */
    5928,
    /* MAYLR */
    5934,
    /* MAYR */
    5938,
    /* MC */
    5942,
    /* MD */
    5945,
    /* MDB */
    5950,
    /* MDBR */
    5955,
    /* MDE */
    5958,
    /* MDEB */
    5963,
    /* MDEBR */
    5968,
    /* MDER */
    5971,
    /* MDR */
    5974,
    /* MDTR */
    5977,
    /* MDTRA */
    5980,
    /* ME */
    5984,
    /* MEE */
    5989,
    /* MEEB */
    5994,
    /* MEEBR */
    5999,
    /* MEER */
    6002,
    /* MER */
    6005,
    /* MFY */
    6008,
    /* MG */
    6013,
    /* MGH */
    6018,
    /* MGHI */
    6023,
    /* MGRK */
    6026,
    /* MH */
    6029,
    /* MHI */
    6034,
    /* MHY */
    6037,
    /* ML */
    6042,
    /* MLG */
    6047,
    /* MLGR */
    6052,
    /* MLR */
    6055,
    /* MP */
    6058,
    /* MR */
    6064,
    /* MS */
    6067,
    /* MSC */
    6072,
    /* MSCH */
    6077,
    /* MSD */
    6079,
    /* MSDB */
    6085,
    /* MSDBR */
    6091,
    /* MSDR */
    6095,
    /* MSE */
    6099,
    /* MSEB */
    6105,
    /* MSEBR */
    6111,
    /* MSER */
    6115,
    /* MSFI */
    6119,
    /* MSG */
    6122,
    /* MSGC */
    6127,
    /* MSGF */
    6132,
    /* MSGFI */
    6137,
    /* MSGFR */
    6140,
    /* MSGR */
    6143,
    /* MSGRKC */
    6146,
    /* MSR */
    6149,
    /* MSRKC */
    6152,
    /* MSTA */
    6155,
    /* MSY */
    6156,
    /* MVC */
    6161,
    /* MVCDK */
    6166,
    /* MVCIN */
    6170,
    /* MVCK */
    6175,
    /* MVCL */
    6181,
    /* MVCLE */
    6185,
    /* MVCLU */
    6191,
    /* MVCOS */
    6197,
    /* MVCP */
    6202,
    /* MVCRL */
    6208,
    /* MVCS */
    6212,
    /* MVCSK */
    6218,
    /* MVGHI */
    6222,
    /* MVHHI */
    6225,
    /* MVHI */
    6228,
    /* MVI */
    6231,
    /* MVIY */
    6234,
    /* MVN */
    6237,
    /* MVO */
    6242,
    /* MVPG */
    6248,
    /* MVST */
    6250,
    /* MVZ */
    6254,
    /* MXBR */
    6259,
    /* MXD */
    6262,
    /* MXDB */
    6267,
    /* MXDBR */
    6272,
    /* MXDR */
    6275,
    /* MXR */
    6278,
    /* MXTR */
    6281,
    /* MXTRA */
    6284,
    /* MY */
    6288,
    /* MYH */
    6293,
    /* MYHR */
    6298,
    /* MYL */
    6301,
    /* MYLR */
    6306,
    /* MYR */
    6309,
    /* N */
    6312,
    /* NC */
    6317,
    /* NCGRK */
    6322,
    /* NCRK */
    6325,
    /* NG */
    6328,
    /* NGR */
    6333,
    /* NGRK */
    6336,
    /* NI */
    6339,
    /* NIAI */
    6342,
    /* NIHF */
    6344,
    /* NIHH */
    6347,
    /* NIHL */
    6350,
    /* NILF */
    6353,
    /* NILH */
    6356,
    /* NILL */
    6359,
    /* NIY */
    6362,
    /* NNGRK */
    6365,
    /* NNPA */
    6368,
    /* NNRK */
    6368,
    /* NOGRK */
    6371,
    /* NOP_bare */
    6374,
    /* NORK */
    6374,
    /* NR */
    6377,
    /* NRK */
    6380,
    /* NTSTG */
    6383,
    /* NXGRK */
    6387,
    /* NXRK */
    6390,
    /* NY */
    6393,
    /* O */
    6398,
    /* OC */
    6403,
    /* OCGRK */
    6408,
    /* OCRK */
    6411,
    /* OG */
    6414,
    /* OGR */
    6419,
    /* OGRK */
    6422,
    /* OI */
    6425,
    /* OIHF */
    6428,
    /* OIHH */
    6431,
    /* OIHL */
    6434,
    /* OILF */
    6437,
    /* OILH */
    6440,
    /* OILL */
    6443,
    /* OIY */
    6446,
    /* OR */
    6449,
    /* ORK */
    6452,
    /* OY */
    6455,
    /* PACK */
    6460,
    /* PALB */
    6466,
    /* PC */
    6466,
    /* PCC */
    6468,
    /* PCKMO */
    6468,
    /* PFD */
    6468,
    /* PFDRL */
    6472,
    /* PFMF */
    6474,
    /* PFPO */
    6477,
    /* PGIN */
    6477,
    /* PGOUT */
    6479,
    /* PKA */
    6481,
    /* PKU */
    6486,
    /* PLO */
    6491,
    /* POPCNT */
    6497,
    /* POPCNTOpt */
    6499,
    /* PPA */
    6502,
    /* PPNO */
    6505,
    /* PR */
    6509,
    /* PRNO */
    6509,
    /* PT */
    6513,
    /* PTF */
    6515,
    /* PTFF */
    6517,
    /* PTI */
    6517,
    /* PTLB */
    6519,
    /* QADTR */
    6519,
    /* QAXTR */
    6524,
    /* QCTRI */
    6529,
    /* QPACI */
    6531,
    /* QSI */
    6533,
    /* RCHP */
    6535,
    /* RDP */
    6535,
    /* RDPOpt */
    6539,
    /* RISBG */
    6542,
    /* RISBG32 */
    6548,
    /* RISBGN */
    6554,
    /* RISBHG */
    6560,
    /* RISBLG */
    6566,
    /* RLL */
    6572,
    /* RLLG */
    6576,
    /* RNSBG */
    6580,
    /* ROSBG */
    6586,
    /* RP */
    6592,
    /* RRBE */
    6594,
    /* RRBM */
    6596,
    /* RRDTR */
    6598,
    /* RRXTR */
    6603,
    /* RSCH */
    6608,
    /* RXSBG */
    6608,
    /* S */
    6614,
    /* SAC */
    6619,
    /* SACF */
    6621,
    /* SAL */
    6623,
    /* SAM24 */
    6623,
    /* SAM31 */
    6623,
    /* SAM64 */
    6623,
    /* SAR */
    6623,
    /* SCCTR */
    6625,
    /* SCHM */
    6627,
    /* SCK */
    6627,
    /* SCKC */
    6629,
    /* SCKPF */
    6631,
    /* SD */
    6631,
    /* SDB */
    6636,
    /* SDBR */
    6641,
    /* SDR */
    6644,
    /* SDTR */
    6647,
    /* SDTRA */
    6650,
    /* SE */
    6654,
    /* SEB */
    6659,
    /* SEBR */
    6664,
    /* SELFHR */
    6667,
    /* SELFHRAsm */
    6672,
    /* SELFHRAsmE */
    6676,
    /* SELFHRAsmH */
    6679,
    /* SELFHRAsmHE */
    6682,
    /* SELFHRAsmL */
    6685,
    /* SELFHRAsmLE */
    6688,
    /* SELFHRAsmLH */
    6691,
    /* SELFHRAsmM */
    6694,
    /* SELFHRAsmNE */
    6697,
    /* SELFHRAsmNH */
    6700,
    /* SELFHRAsmNHE */
    6703,
    /* SELFHRAsmNL */
    6706,
    /* SELFHRAsmNLE */
    6709,
    /* SELFHRAsmNLH */
    6712,
    /* SELFHRAsmNM */
    6715,
    /* SELFHRAsmNO */
    6718,
    /* SELFHRAsmNP */
    6721,
    /* SELFHRAsmNZ */
    6724,
    /* SELFHRAsmO */
    6727,
    /* SELFHRAsmP */
    6730,
    /* SELFHRAsmZ */
    6733,
    /* SELGR */
    6736,
    /* SELGRAsm */
    6741,
    /* SELGRAsmE */
    6745,
    /* SELGRAsmH */
    6748,
    /* SELGRAsmHE */
    6751,
    /* SELGRAsmL */
    6754,
    /* SELGRAsmLE */
    6757,
    /* SELGRAsmLH */
    6760,
    /* SELGRAsmM */
    6763,
    /* SELGRAsmNE */
    6766,
    /* SELGRAsmNH */
    6769,
    /* SELGRAsmNHE */
    6772,
    /* SELGRAsmNL */
    6775,
    /* SELGRAsmNLE */
    6778,
    /* SELGRAsmNLH */
    6781,
    /* SELGRAsmNM */
    6784,
    /* SELGRAsmNO */
    6787,
    /* SELGRAsmNP */
    6790,
    /* SELGRAsmNZ */
    6793,
    /* SELGRAsmO */
    6796,
    /* SELGRAsmP */
    6799,
    /* SELGRAsmZ */
    6802,
    /* SELR */
    6805,
    /* SELRAsm */
    6810,
    /* SELRAsmE */
    6814,
    /* SELRAsmH */
    6817,
    /* SELRAsmHE */
    6820,
    /* SELRAsmL */
    6823,
    /* SELRAsmLE */
    6826,
    /* SELRAsmLH */
    6829,
    /* SELRAsmM */
    6832,
    /* SELRAsmNE */
    6835,
    /* SELRAsmNH */
    6838,
    /* SELRAsmNHE */
    6841,
    /* SELRAsmNL */
    6844,
    /* SELRAsmNLE */
    6847,
    /* SELRAsmNLH */
    6850,
    /* SELRAsmNM */
    6853,
    /* SELRAsmNO */
    6856,
    /* SELRAsmNP */
    6859,
    /* SELRAsmNZ */
    6862,
    /* SELRAsmO */
    6865,
    /* SELRAsmP */
    6868,
    /* SELRAsmZ */
    6871,
    /* SER */
    6874,
    /* SFASR */
    6877,
    /* SFPC */
    6878,
    /* SG */
    6879,
    /* SGF */
    6884,
    /* SGFR */
    6889,
    /* SGH */
    6892,
    /* SGR */
    6897,
    /* SGRK */
    6900,
    /* SH */
    6903,
    /* SHHHR */
    6908,
    /* SHHLR */
    6911,
    /* SHY */
    6914,
    /* SIE */
    6919,
    /* SIGA */
    6921,
    /* SIGP */
    6923,
    /* SL */
    6927,
    /* SLA */
    6932,
    /* SLAG */
    6936,
    /* SLAK */
    6940,
    /* SLB */
    6944,
    /* SLBG */
    6949,
    /* SLBGR */
    6954,
    /* SLBR */
    6957,
    /* SLDA */
    6960,
    /* SLDL */
    6964,
    /* SLDT */
    6968,
    /* SLFI */
    6973,
    /* SLG */
    6976,
    /* SLGF */
    6981,
    /* SLGFI */
    6986,
    /* SLGFR */
    6989,
    /* SLGR */
    6992,
    /* SLGRK */
    6995,
    /* SLHHHR */
    6998,
    /* SLHHLR */
    7001,
    /* SLL */
    7004,
    /* SLLG */
    7008,
    /* SLLK */
    7012,
    /* SLR */
    7016,
    /* SLRK */
    7019,
    /* SLXT */
    7022,
    /* SLY */
    7027,
    /* SORTL */
    7032,
    /* SP */
    7036,
    /* SPCTR */
    7042,
    /* SPKA */
    7044,
    /* SPM */
    7046,
    /* SPT */
    7047,
    /* SPX */
    7049,
    /* SQD */
    7051,
    /* SQDB */
    7055,
    /* SQDBR */
    7059,
    /* SQDR */
    7061,
    /* SQE */
    7063,
    /* SQEB */
    7067,
    /* SQEBR */
    7071,
    /* SQER */
    7073,
    /* SQXBR */
    7075,
    /* SQXR */
    7077,
    /* SR */
    7079,
    /* SRA */
    7082,
    /* SRAG */
    7086,
    /* SRAK */
    7090,
    /* SRDA */
    7094,
    /* SRDL */
    7098,
    /* SRDT */
    7102,
    /* SRK */
    7107,
    /* SRL */
    7110,
    /* SRLG */
    7114,
    /* SRLK */
    7118,
    /* SRNM */
    7122,
    /* SRNMB */
    7124,
    /* SRNMT */
    7126,
    /* SRP */
    7128,
    /* SRST */
    7134,
    /* SRSTU */
    7138,
    /* SRXT */
    7142,
    /* SSAIR */
    7147,
    /* SSAR */
    7148,
    /* SSCH */
    7149,
    /* SSKE */
    7151,
    /* SSKEOpt */
    7154,
    /* SSM */
    7156,
    /* ST */
    7158,
    /* STAM */
    7162,
    /* STAMY */
    7166,
    /* STAP */
    7170,
    /* STBEAR */
    7172,
    /* STC */
    7174,
    /* STCH */
    7178,
    /* STCK */
    7182,
    /* STCKC */
    7184,
    /* STCKE */
    7186,
    /* STCKF */
    7188,
    /* STCM */
    7190,
    /* STCMH */
    7194,
    /* STCMY */
    7198,
    /* STCPS */
    7202,
    /* STCRW */
    7204,
    /* STCTG */
    7206,
    /* STCTL */
    7210,
    /* STCY */
    7214,
    /* STD */
    7218,
    /* STDY */
    7222,
    /* STE */
    7226,
    /* STEY */
    7230,
    /* STFH */
    7234,
    /* STFL */
    7238,
    /* STFLE */
    7240,
    /* STFPC */
    7242,
    /* STG */
    7244,
    /* STGRL */
    7248,
    /* STGSC */
    7250,
    /* STH */
    7254,
    /* STHH */
    7258,
    /* STHRL */
    7262,
    /* STHY */
    7264,
    /* STIDP */
    7268,
    /* STM */
    7270,
    /* STMG */
    7274,
    /* STMH */
    7278,
    /* STMY */
    7282,
    /* STNSM */
    7286,
    /* STOC */
    7289,
    /* STOCAsm */
    7294,
    /* STOCAsmE */
    7298,
    /* STOCAsmH */
    7301,
    /* STOCAsmHE */
    7304,
    /* STOCAsmL */
    7307,
    /* STOCAsmLE */
    7310,
    /* STOCAsmLH */
    7313,
    /* STOCAsmM */
    7316,
    /* STOCAsmNE */
    7319,
    /* STOCAsmNH */
    7322,
    /* STOCAsmNHE */
    7325,
    /* STOCAsmNL */
    7328,
    /* STOCAsmNLE */
    7331,
    /* STOCAsmNLH */
    7334,
    /* STOCAsmNM */
    7337,
    /* STOCAsmNO */
    7340,
    /* STOCAsmNP */
    7343,
    /* STOCAsmNZ */
    7346,
    /* STOCAsmO */
    7349,
    /* STOCAsmP */
    7352,
    /* STOCAsmZ */
    7355,
    /* STOCFH */
    7358,
    /* STOCFHAsm */
    7363,
    /* STOCFHAsmE */
    7367,
    /* STOCFHAsmH */
    7370,
    /* STOCFHAsmHE */
    7373,
    /* STOCFHAsmL */
    7376,
    /* STOCFHAsmLE */
    7379,
    /* STOCFHAsmLH */
    7382,
    /* STOCFHAsmM */
    7385,
    /* STOCFHAsmNE */
    7388,
    /* STOCFHAsmNH */
    7391,
    /* STOCFHAsmNHE */
    7394,
    /* STOCFHAsmNL */
    7397,
    /* STOCFHAsmNLE */
    7400,
    /* STOCFHAsmNLH */
    7403,
    /* STOCFHAsmNM */
    7406,
    /* STOCFHAsmNO */
    7409,
    /* STOCFHAsmNP */
    7412,
    /* STOCFHAsmNZ */
    7415,
    /* STOCFHAsmO */
    7418,
    /* STOCFHAsmP */
    7421,
    /* STOCFHAsmZ */
    7424,
    /* STOCG */
    7427,
    /* STOCGAsm */
    7432,
    /* STOCGAsmE */
    7436,
    /* STOCGAsmH */
    7439,
    /* STOCGAsmHE */
    7442,
    /* STOCGAsmL */
    7445,
    /* STOCGAsmLE */
    7448,
    /* STOCGAsmLH */
    7451,
    /* STOCGAsmM */
    7454,
    /* STOCGAsmNE */
    7457,
    /* STOCGAsmNH */
    7460,
    /* STOCGAsmNHE */
    7463,
    /* STOCGAsmNL */
    7466,
    /* STOCGAsmNLE */
    7469,
    /* STOCGAsmNLH */
    7472,
    /* STOCGAsmNM */
    7475,
    /* STOCGAsmNO */
    7478,
    /* STOCGAsmNP */
    7481,
    /* STOCGAsmNZ */
    7484,
    /* STOCGAsmO */
    7487,
    /* STOCGAsmP */
    7490,
    /* STOCGAsmZ */
    7493,
    /* STOSM */
    7496,
    /* STPQ */
    7499,
    /* STPT */
    7503,
    /* STPX */
    7505,
    /* STRAG */
    7507,
    /* STRL */
    7511,
    /* STRV */
    7513,
    /* STRVG */
    7517,
    /* STRVH */
    7521,
    /* STSCH */
    7525,
    /* STSI */
    7527,
    /* STURA */
    7529,
    /* STURG */
    7531,
    /* STY */
    7533,
    /* SU */
    7537,
    /* SUR */
    7542,
    /* SVC */
    7545,
    /* SW */
    7546,
    /* SWR */
    7551,
    /* SXBR */
    7554,
    /* SXR */
    7557,
    /* SXTR */
    7560,
    /* SXTRA */
    7563,
    /* SY */
    7567,
    /* TABORT */
    7572,
    /* TAM */
    7574,
    /* TAR */
    7574,
    /* TB */
    7576,
    /* TBDR */
    7578,
    /* TBEDR */
    7581,
    /* TBEGIN */
    7584,
    /* TBEGINC */
    7587,
    /* TCDB */
    7590,
    /* TCEB */
    7594,
    /* TCXB */
    7598,
    /* TDCDT */
    7602,
    /* TDCET */
    7606,
    /* TDCXT */
    7610,
    /* TDGDT */
    7614,
    /* TDGET */
    7618,
    /* TDGXT */
    7622,
    /* TEND */
    7626,
    /* THDER */
    7626,
    /* THDR */
    7628,
    /* TM */
    7630,
    /* TMHH */
    7633,
    /* TMHL */
    7635,
    /* TMLH */
    7637,
    /* TMLL */
    7639,
    /* TMY */
    7641,
    /* TP */
    7644,
    /* TPI */
    7647,
    /* TPROT */
    7649,
    /* TR */
    7653,
    /* TRACE */
    7658,
    /* TRACG */
    7662,
    /* TRAP2 */
    7666,
    /* TRAP4 */
    7666,
    /* TRE */
    7668,
    /* TROO */
    7672,
    /* TROOOpt */
    7677,
    /* TROT */
    7681,
    /* TROTOpt */
    7686,
    /* TRT */
    7690,
    /* TRTE */
    7695,
    /* TRTEOpt */
    7699,
    /* TRTO */
    7702,
    /* TRTOOpt */
    7707,
    /* TRTR */
    7711,
    /* TRTRE */
    7716,
    /* TRTREOpt */
    7720,
    /* TRTT */
    7723,
    /* TRTTOpt */
    7728,
    /* TS */
    7732,
    /* TSCH */
    7734,
    /* UNPK */
    7736,
    /* UNPKA */
    7742,
    /* UNPKU */
    7747,
    /* UPT */
    7752,
    /* VA */
    7752,
    /* VAB */
    7756,
    /* VAC */
    7759,
    /* VACC */
    7764,
    /* VACCB */
    7768,
    /* VACCC */
    7771,
    /* VACCCQ */
    7776,
    /* VACCF */
    7780,
    /* VACCG */
    7783,
    /* VACCH */
    7786,
    /* VACCQ */
    7789,
    /* VACQ */
    7792,
    /* VAF */
    7796,
    /* VAG */
    7799,
    /* VAH */
    7802,
    /* VAP */
    7805,
    /* VAQ */
    7810,
    /* VAVG */
    7813,
    /* VAVGB */
    7817,
    /* VAVGF */
    7820,
    /* VAVGG */
    7823,
    /* VAVGH */
    7826,
    /* VAVGL */
    7829,
    /* VAVGLB */
    7833,
    /* VAVGLF */
    7836,
    /* VAVGLG */
    7839,
    /* VAVGLH */
    7842,
    /* VBPERM */
    7845,
    /* VCDG */
    7848,
    /* VCDGB */
    7853,
    /* VCDLG */
    7857,
    /* VCDLGB */
    7862,
    /* VCEFB */
    7866,
    /* VCELFB */
    7870,
    /* VCEQ */
    7874,
    /* VCEQB */
    7879,
    /* VCEQBS */
    7882,
    /* VCEQF */
    7885,
    /* VCEQFS */
    7888,
    /* VCEQG */
    7891,
    /* VCEQGS */
    7894,
    /* VCEQH */
    7897,
    /* VCEQHS */
    7900,
    /* VCFEB */
    7903,
    /* VCFN */
    7907,
    /* VCFPL */
    7911,
    /* VCFPS */
    7916,
    /* VCGD */
    7921,
    /* VCGDB */
    7926,
    /* VCH */
    7930,
    /* VCHB */
    7935,
    /* VCHBS */
    7938,
    /* VCHF */
    7941,
    /* VCHFS */
    7944,
    /* VCHG */
    7947,
    /* VCHGS */
    7950,
    /* VCHH */
    7953,
    /* VCHHS */
    7956,
    /* VCHL */
    7959,
    /* VCHLB */
    7964,
    /* VCHLBS */
    7967,
    /* VCHLF */
    7970,
    /* VCHLFS */
    7973,
    /* VCHLG */
    7976,
    /* VCHLGS */
    7979,
    /* VCHLH */
    7982,
    /* VCHLHS */
    7985,
    /* VCKSM */
    7988,
    /* VCLFEB */
    7991,
    /* VCLFNH */
    7995,
    /* VCLFNL */
    7999,
    /* VCLFP */
    8003,
    /* VCLGD */
    8008,
    /* VCLGDB */
    8013,
    /* VCLZ */
    8017,
    /* VCLZB */
    8020,
    /* VCLZDP */
    8022,
    /* VCLZF */
    8025,
    /* VCLZG */
    8027,
    /* VCLZH */
    8029,
    /* VCNF */
    8031,
    /* VCP */
    8035,
    /* VCRNF */
    8038,
    /* VCSFP */
    8043,
    /* VCSPH */
    8048,
    /* VCTZ */
    8052,
    /* VCTZB */
    8055,
    /* VCTZF */
    8057,
    /* VCTZG */
    8059,
    /* VCTZH */
    8061,
    /* VCVB */
    8063,
    /* VCVBG */
    8066,
    /* VCVBGOpt */
    8069,
    /* VCVBOpt */
    8073,
    /* VCVD */
    8077,
    /* VCVDG */
    8081,
    /* VDP */
    8085,
    /* VEC */
    8090,
    /* VECB */
    8093,
    /* VECF */
    8095,
    /* VECG */
    8097,
    /* VECH */
    8099,
    /* VECL */
    8101,
    /* VECLB */
    8104,
    /* VECLF */
    8106,
    /* VECLG */
    8108,
    /* VECLH */
    8110,
    /* VERIM */
    8112,
    /* VERIMB */
    8118,
    /* VERIMF */
    8123,
    /* VERIMG */
    8128,
    /* VERIMH */
    8133,
    /* VERLL */
    8138,
    /* VERLLB */
    8143,
    /* VERLLF */
    8147,
    /* VERLLG */
    8151,
    /* VERLLH */
    8155,
    /* VERLLV */
    8159,
    /* VERLLVB */
    8163,
    /* VERLLVF */
    8166,
    /* VERLLVG */
    8169,
    /* VERLLVH */
    8172,
    /* VESL */
    8175,
    /* VESLB */
    8180,
    /* VESLF */
    8184,
    /* VESLG */
    8188,
    /* VESLH */
    8192,
    /* VESLV */
    8196,
    /* VESLVB */
    8200,
    /* VESLVF */
    8203,
    /* VESLVG */
    8206,
    /* VESLVH */
    8209,
    /* VESRA */
    8212,
    /* VESRAB */
    8217,
    /* VESRAF */
    8221,
    /* VESRAG */
    8225,
    /* VESRAH */
    8229,
    /* VESRAV */
    8233,
    /* VESRAVB */
    8237,
    /* VESRAVF */
    8240,
    /* VESRAVG */
    8243,
    /* VESRAVH */
    8246,
    /* VESRL */
    8249,
    /* VESRLB */
    8254,
    /* VESRLF */
    8258,
    /* VESRLG */
    8262,
    /* VESRLH */
    8266,
    /* VESRLV */
    8270,
    /* VESRLVB */
    8274,
    /* VESRLVF */
    8277,
    /* VESRLVG */
    8280,
    /* VESRLVH */
    8283,
    /* VFA */
    8286,
    /* VFADB */
    8291,
    /* VFAE */
    8294,
    /* VFAEB */
    8299,
    /* VFAEBS */
    8303,
    /* VFAEF */
    8307,
    /* VFAEFS */
    8311,
    /* VFAEH */
    8315,
    /* VFAEHS */
    8319,
    /* VFAEZB */
    8323,
    /* VFAEZBS */
    8327,
    /* VFAEZF */
    8331,
    /* VFAEZFS */
    8335,
    /* VFAEZH */
    8339,
    /* VFAEZHS */
    8343,
    /* VFASB */
    8347,
    /* VFCE */
    8350,
    /* VFCEDB */
    8356,
    /* VFCEDBS */
    8359,
    /* VFCESB */
    8362,
    /* VFCESBS */
    8365,
    /* VFCH */
    8368,
    /* VFCHDB */
    8374,
    /* VFCHDBS */
    8377,
    /* VFCHE */
    8380,
    /* VFCHEDB */
    8386,
    /* VFCHEDBS */
    8389,
    /* VFCHESB */
    8392,
    /* VFCHESBS */
    8395,
    /* VFCHSB */
    8398,
    /* VFCHSBS */
    8401,
    /* VFD */
    8404,
    /* VFDDB */
    8409,
    /* VFDSB */
    8412,
    /* VFEE */
    8415,
    /* VFEEB */
    8420,
    /* VFEEBS */
    8424,
    /* VFEEF */
    8427,
    /* VFEEFS */
    8431,
    /* VFEEH */
    8434,
    /* VFEEHS */
    8438,
    /* VFEEZB */
    8441,
    /* VFEEZBS */
    8444,
    /* VFEEZF */
    8447,
    /* VFEEZFS */
    8450,
    /* VFEEZH */
    8453,
    /* VFEEZHS */
    8456,
    /* VFENE */
    8459,
    /* VFENEB */
    8464,
    /* VFENEBS */
    8468,
    /* VFENEF */
    8471,
    /* VFENEFS */
    8475,
    /* VFENEH */
    8478,
    /* VFENEHS */
    8482,
    /* VFENEZB */
    8485,
    /* VFENEZBS */
    8488,
    /* VFENEZF */
    8491,
    /* VFENEZFS */
    8494,
    /* VFENEZH */
    8497,
    /* VFENEZHS */
    8500,
    /* VFI */
    8503,
    /* VFIDB */
    8508,
    /* VFISB */
    8512,
    /* VFKEDB */
    8516,
    /* VFKEDBS */
    8519,
    /* VFKESB */
    8522,
    /* VFKESBS */
    8525,
    /* VFKHDB */
    8528,
    /* VFKHDBS */
    8531,
    /* VFKHEDB */
    8534,
    /* VFKHEDBS */
    8537,
    /* VFKHESB */
    8540,
    /* VFKHESBS */
    8543,
    /* VFKHSB */
    8546,
    /* VFKHSBS */
    8549,
    /* VFLCDB */
    8552,
    /* VFLCSB */
    8554,
    /* VFLL */
    8556,
    /* VFLLS */
    8560,
    /* VFLNDB */
    8562,
    /* VFLNSB */
    8564,
    /* VFLPDB */
    8566,
    /* VFLPSB */
    8568,
    /* VFLR */
    8570,
    /* VFLRD */
    8575,
    /* VFM */
    8579,
    /* VFMA */
    8584,
    /* VFMADB */
    8590,
    /* VFMASB */
    8594,
    /* VFMAX */
    8598,
    /* VFMAXDB */
    8604,
    /* VFMAXSB */
    8608,
    /* VFMDB */
    8612,
    /* VFMIN */
    8615,
    /* VFMINDB */
    8621,
    /* VFMINSB */
    8625,
    /* VFMS */
    8629,
    /* VFMSB */
    8635,
    /* VFMSDB */
    8638,
    /* VFMSSB */
    8642,
    /* VFNMA */
    8646,
    /* VFNMADB */
    8652,
    /* VFNMASB */
    8656,
    /* VFNMS */
    8660,
    /* VFNMSDB */
    8666,
    /* VFNMSSB */
    8670,
    /* VFPSO */
    8674,
    /* VFPSODB */
    8679,
    /* VFPSOSB */
    8682,
    /* VFS */
    8685,
    /* VFSDB */
    8690,
    /* VFSQ */
    8693,
    /* VFSQDB */
    8697,
    /* VFSQSB */
    8699,
    /* VFSSB */
    8701,
    /* VFTCI */
    8704,
    /* VFTCIDB */
    8709,
    /* VFTCISB */
    8712,
    /* VGBM */
    8715,
    /* VGEF */
    8717,
    /* VGEG */
    8723,
    /* VGFM */
    8729,
    /* VGFMA */
    8733,
    /* VGFMAB */
    8738,
    /* VGFMAF */
    8742,
    /* VGFMAG */
    8746,
    /* VGFMAH */
    8750,
    /* VGFMB */
    8754,
    /* VGFMF */
    8757,
    /* VGFMG */
    8760,
    /* VGFMH */
    8763,
    /* VGM */
    8766,
    /* VGMB */
    8770,
    /* VGMF */
    8773,
    /* VGMG */
    8776,
    /* VGMH */
    8779,
    /* VISTR */
    8782,
    /* VISTRB */
    8786,
    /* VISTRBS */
    8789,
    /* VISTRF */
    8791,
    /* VISTRFS */
    8794,
    /* VISTRH */
    8796,
    /* VISTRHS */
    8799,
    /* VL */
    8801,
    /* VLAlign */
    8805,
    /* VLBB */
    8810,
    /* VLBR */
    8815,
    /* VLBRF */
    8820,
    /* VLBRG */
    8824,
    /* VLBRH */
    8828,
    /* VLBRQ */
    8832,
    /* VLBRREP */
    8836,
    /* VLBRREPF */
    8841,
    /* VLBRREPG */
    8845,
    /* VLBRREPH */
    8849,
    /* VLC */
    8853,
    /* VLCB */
    8856,
    /* VLCF */
    8858,
    /* VLCG */
    8860,
    /* VLCH */
    8862,
    /* VLDE */
    8864,
    /* VLDEB */
    8868,
    /* VLEB */
    8870,
    /* VLEBRF */
    8876,
    /* VLEBRG */
    8882,
    /* VLEBRH */
    8888,
    /* VLED */
    8894,
    /* VLEDB */
    8899,
    /* VLEF */
    8903,
    /* VLEG */
    8909,
    /* VLEH */
    8915,
    /* VLEIB */
    8921,
    /* VLEIF */
    8925,
    /* VLEIG */
    8929,
    /* VLEIH */
    8933,
    /* VLER */
    8937,
    /* VLERF */
    8942,
    /* VLERG */
    8946,
    /* VLERH */
    8950,
    /* VLGV */
    8954,
    /* VLGVB */
    8959,
    /* VLGVF */
    8963,
    /* VLGVG */
    8967,
    /* VLGVH */
    8971,
    /* VLIP */
    8975,
    /* VLL */
    8978,
    /* VLLEBRZ */
    8982,
    /* VLLEBRZE */
    8987,
    /* VLLEBRZF */
    8991,
    /* VLLEBRZG */
    8995,
    /* VLLEBRZH */
    8999,
    /* VLLEZ */
    9003,
    /* VLLEZB */
    9008,
    /* VLLEZF */
    9012,
    /* VLLEZG */
    9016,
    /* VLLEZH */
    9020,
    /* VLLEZLF */
    9024,
    /* VLM */
    9028,
    /* VLMAlign */
    9032,
    /* VLP */
    9037,
    /* VLPB */
    9040,
    /* VLPF */
    9042,
    /* VLPG */
    9044,
    /* VLPH */
    9046,
    /* VLR */
    9048,
    /* VLREP */
    9050,
    /* VLREPB */
    9055,
    /* VLREPF */
    9059,
    /* VLREPG */
    9063,
    /* VLREPH */
    9067,
    /* VLRL */
    9071,
    /* VLRLR */
    9075,
    /* VLVG */
    9079,
    /* VLVGB */
    9085,
    /* VLVGF */
    9090,
    /* VLVGG */
    9095,
    /* VLVGH */
    9100,
    /* VLVGP */
    9105,
    /* VMAE */
    9108,
    /* VMAEB */
    9113,
    /* VMAEF */
    9117,
    /* VMAEH */
    9121,
    /* VMAH */
    9125,
    /* VMAHB */
    9130,
    /* VMAHF */
    9134,
    /* VMAHH */
    9138,
    /* VMAL */
    9142,
    /* VMALB */
    9147,
    /* VMALE */
    9151,
    /* VMALEB */
    9156,
    /* VMALEF */
    9160,
    /* VMALEH */
    9164,
    /* VMALF */
    9168,
    /* VMALH */
    9172,
    /* VMALHB */
    9177,
    /* VMALHF */
    9181,
    /* VMALHH */
    9185,
    /* VMALHW */
    9189,
    /* VMALO */
    9193,
    /* VMALOB */
    9198,
    /* VMALOF */
    9202,
    /* VMALOH */
    9206,
    /* VMAO */
    9210,
    /* VMAOB */
    9215,
    /* VMAOF */
    9219,
    /* VMAOH */
    9223,
    /* VME */
    9227,
    /* VMEB */
    9231,
    /* VMEF */
    9234,
    /* VMEH */
    9237,
    /* VMH */
    9240,
    /* VMHB */
    9244,
    /* VMHF */
    9247,
    /* VMHH */
    9250,
    /* VML */
    9253,
    /* VMLB */
    9257,
    /* VMLE */
    9260,
    /* VMLEB */
    9264,
    /* VMLEF */
    9267,
    /* VMLEH */
    9270,
    /* VMLF */
    9273,
    /* VMLH */
    9276,
    /* VMLHB */
    9280,
    /* VMLHF */
    9283,
    /* VMLHH */
    9286,
    /* VMLHW */
    9289,
    /* VMLO */
    9292,
    /* VMLOB */
    9296,
    /* VMLOF */
    9299,
    /* VMLOH */
    9302,
    /* VMN */
    9305,
    /* VMNB */
    9309,
    /* VMNF */
    9312,
    /* VMNG */
    9315,
    /* VMNH */
    9318,
    /* VMNL */
    9321,
    /* VMNLB */
    9325,
    /* VMNLF */
    9328,
    /* VMNLG */
    9331,
    /* VMNLH */
    9334,
    /* VMO */
    9337,
    /* VMOB */
    9341,
    /* VMOF */
    9344,
    /* VMOH */
    9347,
    /* VMP */
    9350,
    /* VMRH */
    9355,
    /* VMRHB */
    9359,
    /* VMRHF */
    9362,
    /* VMRHG */
    9365,
    /* VMRHH */
    9368,
    /* VMRL */
    9371,
    /* VMRLB */
    9375,
    /* VMRLF */
    9378,
    /* VMRLG */
    9381,
    /* VMRLH */
    9384,
    /* VMSL */
    9387,
    /* VMSLG */
    9393,
    /* VMSP */
    9398,
    /* VMX */
    9403,
    /* VMXB */
    9407,
    /* VMXF */
    9410,
    /* VMXG */
    9413,
    /* VMXH */
    9416,
    /* VMXL */
    9419,
    /* VMXLB */
    9423,
    /* VMXLF */
    9426,
    /* VMXLG */
    9429,
    /* VMXLH */
    9432,
    /* VN */
    9435,
    /* VNC */
    9438,
    /* VNN */
    9441,
    /* VNO */
    9444,
    /* VNX */
    9447,
    /* VO */
    9450,
    /* VOC */
    9453,
    /* VONE */
    9456,
    /* VPDI */
    9457,
    /* VPERM */
    9461,
    /* VPK */
    9465,
    /* VPKF */
    9469,
    /* VPKG */
    9472,
    /* VPKH */
    9475,
    /* VPKLS */
    9478,
    /* VPKLSF */
    9483,
    /* VPKLSFS */
    9486,
    /* VPKLSG */
    9489,
    /* VPKLSGS */
    9492,
    /* VPKLSH */
    9495,
    /* VPKLSHS */
    9498,
    /* VPKS */
    9501,
    /* VPKSF */
    9506,
    /* VPKSFS */
    9509,
    /* VPKSG */
    9512,
    /* VPKSGS */
    9515,
    /* VPKSH */
    9518,
    /* VPKSHS */
    9521,
    /* VPKZ */
    9524,
    /* VPKZR */
    9528,
    /* VPOPCT */
    9533,
    /* VPOPCTB */
    9536,
    /* VPOPCTF */
    9538,
    /* VPOPCTG */
    9540,
    /* VPOPCTH */
    9542,
    /* VPSOP */
    9544,
    /* VREP */
    9549,
    /* VREPB */
    9553,
    /* VREPF */
    9556,
    /* VREPG */
    9559,
    /* VREPH */
    9562,
    /* VREPI */
    9565,
    /* VREPIB */
    9568,
    /* VREPIF */
    9570,
    /* VREPIG */
    9572,
    /* VREPIH */
    9574,
    /* VRP */
    9576,
    /* VS */
    9581,
    /* VSB */
    9585,
    /* VSBCBI */
    9588,
    /* VSBCBIQ */
    9593,
    /* VSBI */
    9597,
    /* VSBIQ */
    9602,
    /* VSCBI */
    9606,
    /* VSCBIB */
    9610,
    /* VSCBIF */
    9613,
    /* VSCBIG */
    9616,
    /* VSCBIH */
    9619,
    /* VSCBIQ */
    9622,
    /* VSCEF */
    9625,
    /* VSCEG */
    9630,
    /* VSCHDP */
    9635,
    /* VSCHP */
    9639,
    /* VSCHSP */
    9644,
    /* VSCHXP */
    9648,
    /* VSCSHP */
    9652,
    /* VSDP */
    9655,
    /* VSEG */
    9660,
    /* VSEGB */
    9663,
    /* VSEGF */
    9665,
    /* VSEGH */
    9667,
    /* VSEL */
    9669,
    /* VSF */
    9673,
    /* VSG */
    9676,
    /* VSH */
    9679,
    /* VSL */
    9682,
    /* VSLB */
    9685,
    /* VSLD */
    9688,
    /* VSLDB */
    9692,
    /* VSP */
    9696,
    /* VSQ */
    9701,
    /* VSRA */
    9704,
    /* VSRAB */
    9707,
    /* VSRD */
    9710,
    /* VSRL */
    9714,
    /* VSRLB */
    9717,
    /* VSRP */
    9720,
    /* VSRPR */
    9725,
    /* VST */
    9730,
    /* VSTAlign */
    9734,
    /* VSTBR */
    9739,
    /* VSTBRF */
    9744,
    /* VSTBRG */
    9748,
    /* VSTBRH */
    9752,
    /* VSTBRQ */
    9756,
    /* VSTEB */
    9760,
    /* VSTEBRF */
    9765,
    /* VSTEBRG */
    9770,
    /* VSTEBRH */
    9775,
    /* VSTEF */
    9780,
    /* VSTEG */
    9785,
    /* VSTEH */
    9790,
    /* VSTER */
    9795,
    /* VSTERF */
    9800,
    /* VSTERG */
    9804,
    /* VSTERH */
    9808,
    /* VSTL */
    9812,
    /* VSTM */
    9816,
    /* VSTMAlign */
    9820,
    /* VSTRC */
    9825,
    /* VSTRCB */
    9831,
    /* VSTRCBS */
    9836,
    /* VSTRCF */
    9841,
    /* VSTRCFS */
    9846,
    /* VSTRCH */
    9851,
    /* VSTRCHS */
    9856,
    /* VSTRCZB */
    9861,
    /* VSTRCZBS */
    9866,
    /* VSTRCZF */
    9871,
    /* VSTRCZFS */
    9876,
    /* VSTRCZH */
    9881,
    /* VSTRCZHS */
    9886,
    /* VSTRL */
    9891,
    /* VSTRLR */
    9895,
    /* VSTRS */
    9899,
    /* VSTRSB */
    9905,
    /* VSTRSF */
    9910,
    /* VSTRSH */
    9915,
    /* VSTRSZB */
    9920,
    /* VSTRSZF */
    9924,
    /* VSTRSZH */
    9928,
    /* VSUM */
    9932,
    /* VSUMB */
    9936,
    /* VSUMG */
    9939,
    /* VSUMGF */
    9943,
    /* VSUMGH */
    9946,
    /* VSUMH */
    9949,
    /* VSUMQ */
    9952,
    /* VSUMQF */
    9956,
    /* VSUMQG */
    9959,
    /* VTM */
    9962,
    /* VTP */
    9964,
    /* VUPH */
    9965,
    /* VUPHB */
    9968,
    /* VUPHF */
    9970,
    /* VUPHH */
    9972,
    /* VUPKZ */
    9974,
    /* VUPKZH */
    9978,
    /* VUPKZL */
    9981,
    /* VUPL */
    9984,
    /* VUPLB */
    9987,
    /* VUPLF */
    9989,
    /* VUPLH */
    9991,
    /* VUPLHB */
    9994,
    /* VUPLHF */
    9996,
    /* VUPLHH */
    9998,
    /* VUPLHW */
    10000,
    /* VUPLL */
    10002,
    /* VUPLLB */
    10005,
    /* VUPLLF */
    10007,
    /* VUPLLH */
    10009,
    /* VX */
    10011,
    /* VZERO */
    10014,
    /* WCDGB */
    10015,
    /* WCDLGB */
    10019,
    /* WCEFB */
    10023,
    /* WCELFB */
    10027,
    /* WCFEB */
    10031,
    /* WCGDB */
    10035,
    /* WCLFEB */
    10039,
    /* WCLGDB */
    10043,
    /* WFADB */
    10047,
    /* WFASB */
    10050,
    /* WFAXB */
    10053,
    /* WFC */
    10056,
    /* WFCDB */
    10060,
    /* WFCEDB */
    10062,
    /* WFCEDBS */
    10065,
    /* WFCESB */
    10068,
    /* WFCESBS */
    10071,
    /* WFCEXB */
    10074,
    /* WFCEXBS */
    10077,
    /* WFCHDB */
    10080,
    /* WFCHDBS */
    10083,
    /* WFCHEDB */
    10086,
    /* WFCHEDBS */
    10089,
    /* WFCHESB */
    10092,
    /* WFCHESBS */
    10095,
    /* WFCHEXB */
    10098,
    /* WFCHEXBS */
    10101,
    /* WFCHSB */
    10104,
    /* WFCHSBS */
    10107,
    /* WFCHXB */
    10110,
    /* WFCHXBS */
    10113,
    /* WFCSB */
    10116,
    /* WFCXB */
    10118,
    /* WFDDB */
    10120,
    /* WFDSB */
    10123,
    /* WFDXB */
    10126,
    /* WFIDB */
    10129,
    /* WFISB */
    10133,
    /* WFIXB */
    10137,
    /* WFK */
    10141,
    /* WFKDB */
    10145,
    /* WFKEDB */
    10147,
    /* WFKEDBS */
    10150,
    /* WFKESB */
    10153,
    /* WFKESBS */
    10156,
    /* WFKEXB */
    10159,
    /* WFKEXBS */
    10162,
    /* WFKHDB */
    10165,
    /* WFKHDBS */
    10168,
    /* WFKHEDB */
    10171,
    /* WFKHEDBS */
    10174,
    /* WFKHESB */
    10177,
    /* WFKHESBS */
    10180,
    /* WFKHEXB */
    10183,
    /* WFKHEXBS */
    10186,
    /* WFKHSB */
    10189,
    /* WFKHSBS */
    10192,
    /* WFKHXB */
    10195,
    /* WFKHXBS */
    10198,
    /* WFKSB */
    10201,
    /* WFKXB */
    10203,
    /* WFLCDB */
    10205,
    /* WFLCSB */
    10207,
    /* WFLCXB */
    10209,
    /* WFLLD */
    10211,
    /* WFLLS */
    10213,
    /* WFLNDB */
    10215,
    /* WFLNSB */
    10217,
    /* WFLNXB */
    10219,
    /* WFLPDB */
    10221,
    /* WFLPSB */
    10223,
    /* WFLPXB */
    10225,
    /* WFLRD */
    10227,
    /* WFLRX */
    10231,
    /* WFMADB */
    10235,
    /* WFMASB */
    10239,
    /* WFMAXB */
    10243,
    /* WFMAXDB */
    10247,
    /* WFMAXSB */
    10251,
    /* WFMAXXB */
    10255,
    /* WFMDB */
    10259,
    /* WFMINDB */
    10262,
    /* WFMINSB */
    10266,
    /* WFMINXB */
    10270,
    /* WFMSB */
    10274,
    /* WFMSDB */
    10277,
    /* WFMSSB */
    10281,
    /* WFMSXB */
    10285,
    /* WFMXB */
    10289,
    /* WFNMADB */
    10292,
    /* WFNMASB */
    10296,
    /* WFNMAXB */
    10300,
    /* WFNMSDB */
    10304,
    /* WFNMSSB */
    10308,
    /* WFNMSXB */
    10312,
    /* WFPSODB */
    10316,
    /* WFPSOSB */
    10319,
    /* WFPSOXB */
    10322,
    /* WFSDB */
    10325,
    /* WFSQDB */
    10328,
    /* WFSQSB */
    10330,
    /* WFSQXB */
    10332,
    /* WFSSB */
    10334,
    /* WFSXB */
    10337,
    /* WFTCIDB */
    10340,
    /* WFTCISB */
    10343,
    /* WFTCIXB */
    10346,
    /* WLDEB */
    10349,
    /* WLEDB */
    10351,
    /* X */
    10355,
    /* XC */
    10360,
    /* XG */
    10365,
    /* XGR */
    10370,
    /* XGRK */
    10373,
    /* XI */
    10376,
    /* XIHF */
    10379,
    /* XILF */
    10382,
    /* XIY */
    10385,
    /* XR */
    10388,
    /* XRK */
    10391,
    /* XSCH */
    10394,
    /* XY */
    10394,
    /* ZAP */
    10399,
  };

  using namespace OpTypes;
  static const int16_t OpcodeOperandTypes[] = {
    
    /* PHI */
    -1, 
    /* INLINEASM */
    /* INLINEASM_BR */
    /* CFI_INSTRUCTION */
    i32imm, 
    /* EH_LABEL */
    i32imm, 
    /* GC_LABEL */
    i32imm, 
    /* ANNOTATION_LABEL */
    i32imm, 
    /* KILL */
    /* EXTRACT_SUBREG */
    -1, -1, i32imm, 
    /* INSERT_SUBREG */
    -1, -1, -1, i32imm, 
    /* IMPLICIT_DEF */
    -1, 
    /* SUBREG_TO_REG */
    -1, -1, -1, i32imm, 
    /* COPY_TO_REGCLASS */
    -1, -1, i32imm, 
    /* DBG_VALUE */
    /* DBG_VALUE_LIST */
    /* DBG_INSTR_REF */
    /* DBG_PHI */
    /* DBG_LABEL */
    -1, 
    /* REG_SEQUENCE */
    -1, -1, 
    /* COPY */
    -1, -1, 
    /* BUNDLE */
    /* LIFETIME_START */
    i32imm, 
    /* LIFETIME_END */
    i32imm, 
    /* PSEUDO_PROBE */
    i64imm, i64imm, i8imm, i32imm, 
    /* ARITH_FENCE */
    -1, -1, 
    /* STACKMAP */
    i64imm, i32imm, 
    /* FENTRY_CALL */
    /* PATCHPOINT */
    -1, i64imm, i32imm, -1, i32imm, i32imm, 
    /* LOAD_STACK_GUARD */
    -1, 
    /* PREALLOCATED_SETUP */
    i32imm, 
    /* PREALLOCATED_ARG */
    -1, i32imm, i32imm, 
    /* STATEPOINT */
    /* LOCAL_ESCAPE */
    -1, i32imm, 
    /* FAULTING_OP */
    -1, 
    /* PATCHABLE_OP */
    /* PATCHABLE_FUNCTION_ENTER */
    /* PATCHABLE_RET */
    /* PATCHABLE_FUNCTION_EXIT */
    /* PATCHABLE_TAIL_CALL */
    /* PATCHABLE_EVENT_CALL */
    -1, -1, 
    /* PATCHABLE_TYPED_EVENT_CALL */
    -1, -1, -1, 
    /* ICALL_BRANCH_FUNNEL */
    /* MEMBARRIER */
    /* G_ASSERT_SEXT */
    type0, type0, untyped_imm_0, 
    /* G_ASSERT_ZEXT */
    type0, type0, untyped_imm_0, 
    /* G_ASSERT_ALIGN */
    type0, type0, untyped_imm_0, 
    /* G_ADD */
    type0, type0, type0, 
    /* G_SUB */
    type0, type0, type0, 
    /* G_MUL */
    type0, type0, type0, 
    /* G_SDIV */
    type0, type0, type0, 
    /* G_UDIV */
    type0, type0, type0, 
    /* G_SREM */
    type0, type0, type0, 
    /* G_UREM */
    type0, type0, type0, 
    /* G_SDIVREM */
    type0, type0, type0, type0, 
    /* G_UDIVREM */
    type0, type0, type0, type0, 
    /* G_AND */
    type0, type0, type0, 
    /* G_OR */
    type0, type0, type0, 
    /* G_XOR */
    type0, type0, type0, 
    /* G_IMPLICIT_DEF */
    type0, 
    /* G_PHI */
    type0, 
    /* G_FRAME_INDEX */
    type0, -1, 
    /* G_GLOBAL_VALUE */
    type0, -1, 
    /* G_CONSTANT_POOL */
    type0, -1, 
    /* G_EXTRACT */
    type0, type1, untyped_imm_0, 
    /* G_UNMERGE_VALUES */
    type0, type1, 
    /* G_INSERT */
    type0, type0, type1, untyped_imm_0, 
    /* G_MERGE_VALUES */
    type0, type1, 
    /* G_BUILD_VECTOR */
    type0, type1, 
    /* G_BUILD_VECTOR_TRUNC */
    type0, type1, 
    /* G_CONCAT_VECTORS */
    type0, type1, 
    /* G_PTRTOINT */
    type0, type1, 
    /* G_INTTOPTR */
    type0, type1, 
    /* G_BITCAST */
    type0, type1, 
    /* G_FREEZE */
    type0, type0, 
    /* G_INTRINSIC_FPTRUNC_ROUND */
    type0, type1, i32imm, 
    /* G_INTRINSIC_TRUNC */
    type0, type0, 
    /* G_INTRINSIC_ROUND */
    type0, type0, 
    /* G_INTRINSIC_LRINT */
    type0, type1, 
    /* G_INTRINSIC_ROUNDEVEN */
    type0, type0, 
    /* G_READCYCLECOUNTER */
    type0, 
    /* G_LOAD */
    type0, ptype1, 
    /* G_SEXTLOAD */
    type0, ptype1, 
    /* G_ZEXTLOAD */
    type0, ptype1, 
    /* G_INDEXED_LOAD */
    type0, ptype1, ptype1, type2, -1, 
    /* G_INDEXED_SEXTLOAD */
    type0, ptype1, ptype1, type2, -1, 
    /* G_INDEXED_ZEXTLOAD */
    type0, ptype1, ptype1, type2, -1, 
    /* G_STORE */
    type0, ptype1, 
    /* G_INDEXED_STORE */
    ptype0, type1, ptype0, ptype2, -1, 
    /* G_ATOMIC_CMPXCHG_WITH_SUCCESS */
    type0, type1, type2, type0, type0, 
    /* G_ATOMIC_CMPXCHG */
    type0, ptype1, type0, type0, 
    /* G_ATOMICRMW_XCHG */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_ADD */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_SUB */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_AND */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_NAND */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_OR */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_XOR */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_MAX */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_MIN */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_UMAX */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_UMIN */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_FADD */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_FSUB */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_FMAX */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_FMIN */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_UINC_WRAP */
    type0, ptype1, type0, 
    /* G_ATOMICRMW_UDEC_WRAP */
    type0, ptype1, type0, 
    /* G_FENCE */
    i32imm, i32imm, 
    /* G_BRCOND */
    type0, -1, 
    /* G_BRINDIRECT */
    type0, 
    /* G_INVOKE_REGION_START */
    /* G_INTRINSIC */
    -1, 
    /* G_INTRINSIC_W_SIDE_EFFECTS */
    -1, 
    /* G_ANYEXT */
    type0, type1, 
    /* G_TRUNC */
    type0, type1, 
    /* G_CONSTANT */
    type0, -1, 
    /* G_FCONSTANT */
    type0, -1, 
    /* G_VASTART */
    type0, 
    /* G_VAARG */
    type0, type1, -1, 
    /* G_SEXT */
    type0, type1, 
    /* G_SEXT_INREG */
    type0, type0, untyped_imm_0, 
    /* G_ZEXT */
    type0, type1, 
    /* G_SHL */
    type0, type0, type1, 
    /* G_LSHR */
    type0, type0, type1, 
    /* G_ASHR */
    type0, type0, type1, 
    /* G_FSHL */
    type0, type0, type0, type1, 
    /* G_FSHR */
    type0, type0, type0, type1, 
    /* G_ROTR */
    type0, type0, type1, 
    /* G_ROTL */
    type0, type0, type1, 
    /* G_ICMP */
    type0, -1, type1, type1, 
    /* G_FCMP */
    type0, -1, type1, type1, 
    /* G_SELECT */
    type0, type1, type0, type0, 
    /* G_UADDO */
    type0, type1, type0, type0, 
    /* G_UADDE */
    type0, type1, type0, type0, type1, 
    /* G_USUBO */
    type0, type1, type0, type0, 
    /* G_USUBE */
    type0, type1, type0, type0, type1, 
    /* G_SADDO */
    type0, type1, type0, type0, 
    /* G_SADDE */
    type0, type1, type0, type0, type1, 
    /* G_SSUBO */
    type0, type1, type0, type0, 
    /* G_SSUBE */
    type0, type1, type0, type0, type1, 
    /* G_UMULO */
    type0, type1, type0, type0, 
    /* G_SMULO */
    type0, type1, type0, type0, 
    /* G_UMULH */
    type0, type0, type0, 
    /* G_SMULH */
    type0, type0, type0, 
    /* G_UADDSAT */
    type0, type0, type0, 
    /* G_SADDSAT */
    type0, type0, type0, 
    /* G_USUBSAT */
    type0, type0, type0, 
    /* G_SSUBSAT */
    type0, type0, type0, 
    /* G_USHLSAT */
    type0, type0, type1, 
    /* G_SSHLSAT */
    type0, type0, type1, 
    /* G_SMULFIX */
    type0, type0, type0, untyped_imm_0, 
    /* G_UMULFIX */
    type0, type0, type0, untyped_imm_0, 
    /* G_SMULFIXSAT */
    type0, type0, type0, untyped_imm_0, 
    /* G_UMULFIXSAT */
    type0, type0, type0, untyped_imm_0, 
    /* G_SDIVFIX */
    type0, type0, type0, untyped_imm_0, 
    /* G_UDIVFIX */
    type0, type0, type0, untyped_imm_0, 
    /* G_SDIVFIXSAT */
    type0, type0, type0, untyped_imm_0, 
    /* G_UDIVFIXSAT */
    type0, type0, type0, untyped_imm_0, 
    /* G_FADD */
    type0, type0, type0, 
    /* G_FSUB */
    type0, type0, type0, 
    /* G_FMUL */
    type0, type0, type0, 
    /* G_FMA */
    type0, type0, type0, type0, 
    /* G_FMAD */
    type0, type0, type0, type0, 
    /* G_FDIV */
    type0, type0, type0, 
    /* G_FREM */
    type0, type0, type0, 
    /* G_FPOW */
    type0, type0, type0, 
    /* G_FPOWI */
    type0, type0, type1, 
    /* G_FEXP */
    type0, type0, 
    /* G_FEXP2 */
    type0, type0, 
    /* G_FLOG */
    type0, type0, 
    /* G_FLOG2 */
    type0, type0, 
    /* G_FLOG10 */
    type0, type0, 
    /* G_FNEG */
    type0, type0, 
    /* G_FPEXT */
    type0, type1, 
    /* G_FPTRUNC */
    type0, type1, 
    /* G_FPTOSI */
    type0, type1, 
    /* G_FPTOUI */
    type0, type1, 
    /* G_SITOFP */
    type0, type1, 
    /* G_UITOFP */
    type0, type1, 
    /* G_FABS */
    type0, type0, 
    /* G_FCOPYSIGN */
    type0, type0, type1, 
    /* G_IS_FPCLASS */
    type0, type1, -1, 
    /* G_FCANONICALIZE */
    type0, type0, 
    /* G_FMINNUM */
    type0, type0, type0, 
    /* G_FMAXNUM */
    type0, type0, type0, 
    /* G_FMINNUM_IEEE */
    type0, type0, type0, 
    /* G_FMAXNUM_IEEE */
    type0, type0, type0, 
    /* G_FMINIMUM */
    type0, type0, type0, 
    /* G_FMAXIMUM */
    type0, type0, type0, 
    /* G_PTR_ADD */
    ptype0, ptype0, type1, 
    /* G_PTRMASK */
    ptype0, ptype0, type1, 
    /* G_SMIN */
    type0, type0, type0, 
    /* G_SMAX */
    type0, type0, type0, 
    /* G_UMIN */
    type0, type0, type0, 
    /* G_UMAX */
    type0, type0, type0, 
    /* G_ABS */
    type0, type0, 
    /* G_LROUND */
    type0, type1, 
    /* G_LLROUND */
    type0, type1, 
    /* G_BR */
    -1, 
    /* G_BRJT */
    ptype0, -1, type1, 
    /* G_INSERT_VECTOR_ELT */
    type0, type0, type1, type2, 
    /* G_EXTRACT_VECTOR_ELT */
    type0, type1, type2, 
    /* G_SHUFFLE_VECTOR */
    type0, type1, type1, -1, 
    /* G_CTTZ */
    type0, type1, 
    /* G_CTTZ_ZERO_UNDEF */
    type0, type1, 
    /* G_CTLZ */
    type0, type1, 
    /* G_CTLZ_ZERO_UNDEF */
    type0, type1, 
    /* G_CTPOP */
    type0, type1, 
    /* G_BSWAP */
    type0, type0, 
    /* G_BITREVERSE */
    type0, type0, 
    /* G_FCEIL */
    type0, type0, 
    /* G_FCOS */
    type0, type0, 
    /* G_FSIN */
    type0, type0, 
    /* G_FSQRT */
    type0, type0, 
    /* G_FFLOOR */
    type0, type0, 
    /* G_FRINT */
    type0, type0, 
    /* G_FNEARBYINT */
    type0, type0, 
    /* G_ADDRSPACE_CAST */
    type0, type1, 
    /* G_BLOCK_ADDR */
    type0, -1, 
    /* G_JUMP_TABLE */
    type0, -1, 
    /* G_DYN_STACKALLOC */
    ptype0, type1, i32imm, 
    /* G_STRICT_FADD */
    type0, type0, type0, 
    /* G_STRICT_FSUB */
    type0, type0, type0, 
    /* G_STRICT_FMUL */
    type0, type0, type0, 
    /* G_STRICT_FDIV */
    type0, type0, type0, 
    /* G_STRICT_FREM */
    type0, type0, type0, 
    /* G_STRICT_FMA */
    type0, type0, type0, type0, 
    /* G_STRICT_FSQRT */
    type0, type0, 
    /* G_READ_REGISTER */
    type0, -1, 
    /* G_WRITE_REGISTER */
    -1, type0, 
    /* G_MEMCPY */
    ptype0, ptype1, type2, untyped_imm_0, 
    /* G_MEMCPY_INLINE */
    ptype0, ptype1, type2, 
    /* G_MEMMOVE */
    ptype0, ptype1, type2, untyped_imm_0, 
    /* G_MEMSET */
    ptype0, type1, type2, untyped_imm_0, 
    /* G_BZERO */
    ptype0, type1, untyped_imm_0, 
    /* G_VECREDUCE_SEQ_FADD */
    type0, type1, type2, 
    /* G_VECREDUCE_SEQ_FMUL */
    type0, type1, type2, 
    /* G_VECREDUCE_FADD */
    type0, type1, 
    /* G_VECREDUCE_FMUL */
    type0, type1, 
    /* G_VECREDUCE_FMAX */
    type0, type1, 
    /* G_VECREDUCE_FMIN */
    type0, type1, 
    /* G_VECREDUCE_ADD */
    type0, type1, 
    /* G_VECREDUCE_MUL */
    type0, type1, 
    /* G_VECREDUCE_AND */
    type0, type1, 
    /* G_VECREDUCE_OR */
    type0, type1, 
    /* G_VECREDUCE_XOR */
    type0, type1, 
    /* G_VECREDUCE_SMAX */
    type0, type1, 
    /* G_VECREDUCE_SMIN */
    type0, type1, 
    /* G_VECREDUCE_UMAX */
    type0, type1, 
    /* G_VECREDUCE_UMIN */
    type0, type1, 
    /* G_SBFX */
    type0, type0, type1, type1, 
    /* G_UBFX */
    type0, type0, type1, type1, 
    /* ADB_MemFoldPseudo */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* ADJCALLSTACKDOWN */
    i64imm, i64imm, 
    /* ADJCALLSTACKUP */
    i64imm, i64imm, 
    /* ADJDYNALLOC */
    GR64, ADDR64, disp12imm64, ADDR64, 
    /* AEB_MemFoldPseudo */
    FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* AEXT128 */
    GR128, GR64, 
    /* AFIMux */
    GRX32, GRX32, simm32, 
    /* AG_MemFoldPseudo */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* AHIMux */
    GRX32, GRX32, imm32sx16, 
    /* AHIMuxK */
    GRX32, GRX32, imm32sx16, 
    /* ALG_MemFoldPseudo */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* AL_MemFoldPseudo */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* ATOMIC_CMP_SWAPW */
    GR32, ADDR64, disp20imm64, GR32, GR32, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOADW_AFI */
    GR32, ADDR64, disp20imm64, simm32, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOADW_AR */
    GR32, ADDR64, disp20imm64, GR32, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOADW_MAX */
    GR32, ADDR64, disp20imm64, GR32, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOADW_MIN */
    GR32, ADDR64, disp20imm64, GR32, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOADW_NILH */
    GR32, ADDR64, disp20imm64, imm32lh16c, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOADW_NILHi */
    GR32, ADDR64, disp20imm64, imm32lh16c, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOADW_NR */
    GR32, ADDR64, disp20imm64, GR32, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOADW_NRi */
    GR32, ADDR64, disp20imm64, GR32, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOADW_OILH */
    GR32, ADDR64, disp20imm64, imm32lh16, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOADW_OR */
    GR32, ADDR64, disp20imm64, GR32, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOADW_SR */
    GR32, ADDR64, disp20imm64, GR32, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOADW_UMAX */
    GR32, ADDR64, disp20imm64, GR32, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOADW_UMIN */
    GR32, ADDR64, disp20imm64, GR32, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOADW_XILF */
    GR32, ADDR64, disp20imm64, uimm32, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOADW_XR */
    GR32, ADDR64, disp20imm64, GR32, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_LOAD_AFI */
    GR32, ADDR64, disp20imm64, simm32, 
    /* ATOMIC_LOAD_AGFI */
    GR64, ADDR64, disp20imm64, imm64sx32, 
    /* ATOMIC_LOAD_AGHI */
    GR64, ADDR64, disp20imm64, imm64sx16, 
    /* ATOMIC_LOAD_AGR */
    GR64, ADDR64, disp20imm64, GR64, 
    /* ATOMIC_LOAD_AHI */
    GR32, ADDR64, disp20imm64, imm32sx16, 
    /* ATOMIC_LOAD_AR */
    GR32, ADDR64, disp20imm64, GR32, 
    /* ATOMIC_LOAD_MAX_32 */
    GR32, ADDR64, disp20imm64, GR32, 
    /* ATOMIC_LOAD_MAX_64 */
    GR64, ADDR64, disp20imm64, GR64, 
    /* ATOMIC_LOAD_MIN_32 */
    GR32, ADDR64, disp20imm64, GR32, 
    /* ATOMIC_LOAD_MIN_64 */
    GR64, ADDR64, disp20imm64, GR64, 
    /* ATOMIC_LOAD_NGR */
    GR64, ADDR64, disp20imm64, GR64, 
    /* ATOMIC_LOAD_NGRi */
    GR64, ADDR64, disp20imm64, GR64, 
    /* ATOMIC_LOAD_NIHF64 */
    GR64, ADDR64, disp20imm64, imm64hf32c, 
    /* ATOMIC_LOAD_NIHF64i */
    GR64, ADDR64, disp20imm64, imm64hf32c, 
    /* ATOMIC_LOAD_NIHH64 */
    GR64, ADDR64, disp20imm64, imm64hh16c, 
    /* ATOMIC_LOAD_NIHH64i */
    GR64, ADDR64, disp20imm64, imm64hh16c, 
    /* ATOMIC_LOAD_NIHL64 */
    GR64, ADDR64, disp20imm64, imm64hl16c, 
    /* ATOMIC_LOAD_NIHL64i */
    GR64, ADDR64, disp20imm64, imm64hl16c, 
    /* ATOMIC_LOAD_NILF */
    GR32, ADDR64, disp20imm64, uimm32, 
    /* ATOMIC_LOAD_NILF64 */
    GR64, ADDR64, disp20imm64, imm64lf32c, 
    /* ATOMIC_LOAD_NILF64i */
    GR64, ADDR64, disp20imm64, imm64lf32c, 
    /* ATOMIC_LOAD_NILFi */
    GR32, ADDR64, disp20imm64, uimm32, 
    /* ATOMIC_LOAD_NILH */
    GR32, ADDR64, disp20imm64, imm32lh16c, 
    /* ATOMIC_LOAD_NILH64 */
    GR64, ADDR64, disp20imm64, imm64lh16c, 
    /* ATOMIC_LOAD_NILH64i */
    GR64, ADDR64, disp20imm64, imm64lh16c, 
    /* ATOMIC_LOAD_NILHi */
    GR32, ADDR64, disp20imm64, imm32lh16c, 
    /* ATOMIC_LOAD_NILL */
    GR32, ADDR64, disp20imm64, imm32ll16c, 
    /* ATOMIC_LOAD_NILL64 */
    GR64, ADDR64, disp20imm64, imm64ll16c, 
    /* ATOMIC_LOAD_NILL64i */
    GR64, ADDR64, disp20imm64, imm64ll16c, 
    /* ATOMIC_LOAD_NILLi */
    GR32, ADDR64, disp20imm64, imm32ll16c, 
    /* ATOMIC_LOAD_NR */
    GR32, ADDR64, disp20imm64, GR32, 
    /* ATOMIC_LOAD_NRi */
    GR32, ADDR64, disp20imm64, GR32, 
    /* ATOMIC_LOAD_OGR */
    GR64, ADDR64, disp20imm64, GR64, 
    /* ATOMIC_LOAD_OIHF64 */
    GR64, ADDR64, disp20imm64, imm64hf32, 
    /* ATOMIC_LOAD_OIHH64 */
    GR64, ADDR64, disp20imm64, imm64hh16, 
    /* ATOMIC_LOAD_OIHL64 */
    GR64, ADDR64, disp20imm64, imm64hl16, 
    /* ATOMIC_LOAD_OILF */
    GR32, ADDR64, disp20imm64, uimm32, 
    /* ATOMIC_LOAD_OILF64 */
    GR64, ADDR64, disp20imm64, imm64lf32, 
    /* ATOMIC_LOAD_OILH */
    GR32, ADDR64, disp20imm64, imm32lh16, 
    /* ATOMIC_LOAD_OILH64 */
    GR64, ADDR64, disp20imm64, imm64lh16, 
    /* ATOMIC_LOAD_OILL */
    GR32, ADDR64, disp20imm64, imm32ll16, 
    /* ATOMIC_LOAD_OILL64 */
    GR64, ADDR64, disp20imm64, imm64ll16, 
    /* ATOMIC_LOAD_OR */
    GR32, ADDR64, disp20imm64, GR32, 
    /* ATOMIC_LOAD_SGR */
    GR64, ADDR64, disp20imm64, GR64, 
    /* ATOMIC_LOAD_SR */
    GR32, ADDR64, disp20imm64, GR32, 
    /* ATOMIC_LOAD_UMAX_32 */
    GR32, ADDR64, disp20imm64, GR32, 
    /* ATOMIC_LOAD_UMAX_64 */
    GR64, ADDR64, disp20imm64, GR64, 
    /* ATOMIC_LOAD_UMIN_32 */
    GR32, ADDR64, disp20imm64, GR32, 
    /* ATOMIC_LOAD_UMIN_64 */
    GR64, ADDR64, disp20imm64, GR64, 
    /* ATOMIC_LOAD_XGR */
    GR64, ADDR64, disp20imm64, GR64, 
    /* ATOMIC_LOAD_XIHF64 */
    GR64, ADDR64, disp20imm64, imm64hf32, 
    /* ATOMIC_LOAD_XILF */
    GR32, ADDR64, disp20imm64, uimm32, 
    /* ATOMIC_LOAD_XILF64 */
    GR64, ADDR64, disp20imm64, imm64lf32, 
    /* ATOMIC_LOAD_XR */
    GR32, ADDR64, disp20imm64, GR32, 
    /* ATOMIC_SWAPW */
    GR32, ADDR64, disp20imm64, GR32, ADDR32, ADDR32, uimm32, 
    /* ATOMIC_SWAP_32 */
    GR32, ADDR64, disp20imm64, GR32, 
    /* ATOMIC_SWAP_64 */
    GR64, ADDR64, disp20imm64, GR64, 
    /* A_MemFoldPseudo */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* CFIMux */
    GRX32, simm32, 
    /* CGIBCall */
    GR64, imm64sx8, cond4, ADDR64, 
    /* CGIBReturn */
    GR64, imm64sx8, cond4, 
    /* CGRBCall */
    GR64, GR64, cond4, ADDR64, 
    /* CGRBReturn */
    GR64, GR64, cond4, 
    /* CHIMux */
    GRX32, imm32sx16, 
    /* CIBCall */
    GR32, imm32sx8, cond4, ADDR64, 
    /* CIBReturn */
    GR32, imm32sx8, cond4, 
    /* CLCImm */
    ADDR64, disp12imm64, ADDR64, disp12imm64, imm64, 
    /* CLCReg */
    ADDR64, disp12imm64, ADDR64, disp12imm64, ADDR64, 
    /* CLFIMux */
    GRX32, uimm32, 
    /* CLGIBCall */
    GR64, imm64zx8, cond4, ADDR64, 
    /* CLGIBReturn */
    GR64, imm64zx8, cond4, 
    /* CLGRBCall */
    GR64, GR64, cond4, ADDR64, 
    /* CLGRBReturn */
    GR64, GR64, cond4, 
    /* CLIBCall */
    GR32, imm32zx8, cond4, ADDR64, 
    /* CLIBReturn */
    GR32, imm32zx8, cond4, 
    /* CLMux */
    GRX32, ADDR64, disp20imm64, ADDR64, 
    /* CLRBCall */
    GR32, GR32, cond4, ADDR64, 
    /* CLRBReturn */
    GR32, GR32, cond4, 
    /* CLSTLoop */
    GR64, GR64, GR64, GR32, 
    /* CMux */
    GRX32, ADDR64, disp20imm64, ADDR64, 
    /* CRBCall */
    GR32, GR32, cond4, ADDR64, 
    /* CRBReturn */
    GR32, GR32, cond4, 
    /* CallBASR */
    ADDR64, 
    /* CallBASR_STACKEXT */
    ADDR64, 
    /* CallBASR_XPLINK64 */
    ADDR64, 
    /* CallBCR */
    cond4, cond4, ADDR64, 
    /* CallBR */
    ADDR64, 
    /* CallBRASL */
    pcrel32, 
    /* CallBRASL_XPLINK64 */
    pcrel32, 
    /* CallBRCL */
    cond4, cond4, pcrel32, 
    /* CallJG */
    pcrel32, 
    /* CondReturn */
    cond4, cond4, 
    /* CondReturn_XPLINK */
    cond4, cond4, 
    /* CondStore16 */
    GR32, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStore16Inv */
    GR32, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStore16Mux */
    GRX32, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStore16MuxInv */
    GRX32, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStore32 */
    GR32, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStore32Inv */
    GR32, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStore32Mux */
    GRX32, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStore32MuxInv */
    GRX32, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStore64 */
    GR64, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStore64Inv */
    GR64, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStore8 */
    GR32, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStore8Inv */
    GR32, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStore8Mux */
    GRX32, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStore8MuxInv */
    GRX32, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStoreF32 */
    FP32, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStoreF32Inv */
    FP32, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStoreF64 */
    FP64, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondStoreF64Inv */
    FP64, ADDR64, disp20imm64, ADDR64, imm32zx4, imm32zx4, 
    /* CondTrap */
    cond4, cond4, 
    /* DDB_MemFoldPseudo */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* DEB_MemFoldPseudo */
    FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* EXRL_Pseudo */
    i64imm, ADDR64, ADDR64, disp12imm64, ADDR64, disp12imm64, 
    /* GOT */
    GR64, 
    /* IIFMux */
    GRX32, uimm32, 
    /* IIHF64 */
    GR64, GR64, imm64hf32, 
    /* IIHH64 */
    GR64, GR64, imm64hh16, 
    /* IIHL64 */
    GR64, GR64, imm64hl16, 
    /* IIHMux */
    GRX32, GRX32, imm32lh16, 
    /* IILF64 */
    GR64, GR64, imm64lf32, 
    /* IILH64 */
    GR64, GR64, imm64lh16, 
    /* IILL64 */
    GR64, GR64, imm64ll16, 
    /* IILMux */
    GRX32, GRX32, imm32ll16, 
    /* L128 */
    GR128, ADDR64, disp20imm64, ADDR64, 
    /* LBMux */
    GRX32, ADDR64, disp20imm64, ADDR64, 
    /* LEFR */
    VR32, GR32, 
    /* LFER */
    GR64, VR32, 
    /* LHIMux */
    GRX32, imm32sx16, 
    /* LHMux */
    GRX32, ADDR64, disp20imm64, ADDR64, 
    /* LLCMux */
    GRX32, ADDR64, disp20imm64, ADDR64, 
    /* LLCRMux */
    GRX32, GRX32, 
    /* LLHMux */
    GRX32, ADDR64, disp20imm64, ADDR64, 
    /* LLHRMux */
    GRX32, GRX32, 
    /* LMux */
    GRX32, ADDR64, disp20imm64, ADDR64, 
    /* LOCG_MemFoldPseudo */
    GR64, GR64, ADDR64, disp20imm64, cond4, cond4, 
    /* LOCHIMux */
    GRX32, GRX32, imm32sx16, cond4, cond4, 
    /* LOCMux */
    GRX32, GRX32, ADDR64, disp20imm64, cond4, cond4, 
    /* LOCMux_MemFoldPseudo */
    GRX32, GRX32, ADDR64, disp20imm64, cond4, cond4, 
    /* LOCRMux */
    GRX32, GRX32, GRX32, cond4, cond4, 
    /* LTDBRCompare_VecPseudo */
    FP64, FP64, 
    /* LTEBRCompare_VecPseudo */
    FP32, FP32, 
    /* LTXBRCompare_VecPseudo */
    FP128, FP128, 
    /* LX */
    FP128, ADDR64, disp20imm64, ADDR64, 
    /* MADB_MemFoldPseudo */
    FP64, FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MAEB_MemFoldPseudo */
    FP32, FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* MDB_MemFoldPseudo */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MEEB_MemFoldPseudo */
    FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* MSC_MemFoldPseudo */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* MSDB_MemFoldPseudo */
    FP64, FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MSEB_MemFoldPseudo */
    FP32, FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* MSGC_MemFoldPseudo */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* MVCImm */
    ADDR64, disp12imm64, ADDR64, disp12imm64, imm64, 
    /* MVCReg */
    ADDR64, disp12imm64, ADDR64, disp12imm64, ADDR64, 
    /* MVSTLoop */
    GR64, GR64, GR64, GR32, 
    /* MemsetImmImm */
    ADDR64, disp12imm64, imm64, imm32zx8trunc, 
    /* MemsetImmReg */
    ADDR64, disp12imm64, imm64, GR32, 
    /* MemsetRegImm */
    ADDR64, disp12imm64, ADDR64, imm32zx8trunc, 
    /* MemsetRegReg */
    ADDR64, disp12imm64, ADDR64, GR32, 
    /* NCImm */
    ADDR64, disp12imm64, ADDR64, disp12imm64, imm64, 
    /* NCReg */
    ADDR64, disp12imm64, ADDR64, disp12imm64, ADDR64, 
    /* NG_MemFoldPseudo */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* NIFMux */
    GRX32, GRX32, uimm32, 
    /* NIHF64 */
    GR64, GR64, imm64hf32c, 
    /* NIHH64 */
    GR64, GR64, imm64hh16c, 
    /* NIHL64 */
    GR64, GR64, imm64hl16c, 
    /* NIHMux */
    GRX32, GRX32, imm32lh16c, 
    /* NILF64 */
    GR64, GR64, imm64lf32c, 
    /* NILH64 */
    GR64, GR64, imm64lh16c, 
    /* NILL64 */
    GR64, GR64, imm64ll16c, 
    /* NILMux */
    GRX32, GRX32, imm32ll16c, 
    /* N_MemFoldPseudo */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* OCImm */
    ADDR64, disp12imm64, ADDR64, disp12imm64, imm64, 
    /* OCReg */
    ADDR64, disp12imm64, ADDR64, disp12imm64, ADDR64, 
    /* OG_MemFoldPseudo */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* OIFMux */
    GRX32, GRX32, uimm32, 
    /* OIHF64 */
    GR64, GR64, imm64hf32, 
    /* OIHH64 */
    GR64, GR64, imm64hh16, 
    /* OIHL64 */
    GR64, GR64, imm64hl16, 
    /* OIHMux */
    GRX32, GRX32, imm32lh16, 
    /* OILF64 */
    GR64, GR64, imm64lf32, 
    /* OILH64 */
    GR64, GR64, imm64lh16, 
    /* OILL64 */
    GR64, GR64, imm64ll16, 
    /* OILMux */
    GRX32, GRX32, imm32ll16, 
    /* O_MemFoldPseudo */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* PAIR128 */
    GR128, GR64, GR64, 
    /* PROBED_ALLOCA */
    GR64, GR64, GR64, 
    /* PROBED_STACKALLOC */
    i64imm, 
    /* RISBHH */
    GRH32, GRH32, GRH32, imm32zx8, imm32zx8, imm32zx6, 
    /* RISBHL */
    GRH32, GRH32, GR32, imm32zx8, imm32zx8, imm32zx6, 
    /* RISBLH */
    GR32, GR32, GRH32, imm32zx8, imm32zx8, imm32zx6, 
    /* RISBLL */
    GR32, GR32, GR32, imm32zx8, imm32zx8, imm32zx6, 
    /* RISBMux */
    GRX32, GRX32, GRX32, imm32zx8, imm32zx8, imm32zx6, 
    /* Return */
    /* Return_XPLINK */
    /* SDB_MemFoldPseudo */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* SEB_MemFoldPseudo */
    FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* SELRMux */
    GRX32, GRX32, GRX32, cond4, cond4, 
    /* SG_MemFoldPseudo */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* SLG_MemFoldPseudo */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* SL_MemFoldPseudo */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* SRSTLoop */
    GR64, GR64, GR64, GR32, 
    /* ST128 */
    GR128, ADDR64, disp20imm64, ADDR64, 
    /* STCMux */
    GRX32, ADDR64, disp20imm64, ADDR64, 
    /* STHMux */
    GRX32, ADDR64, disp20imm64, ADDR64, 
    /* STMux */
    GRX32, ADDR64, disp20imm64, ADDR64, 
    /* STOCMux */
    GRX32, ADDR64, disp20imm64, cond4, cond4, 
    /* STX */
    FP128, ADDR64, disp20imm64, ADDR64, 
    /* S_MemFoldPseudo */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* Select32 */
    GR32, GR32, GR32, imm32zx4, imm32zx4, 
    /* Select64 */
    GR64, GR64, GR64, imm32zx4, imm32zx4, 
    /* SelectF128 */
    FP128, FP128, FP128, imm32zx4, imm32zx4, 
    /* SelectF32 */
    FP32, FP32, FP32, imm32zx4, imm32zx4, 
    /* SelectF64 */
    FP64, FP64, FP64, imm32zx4, imm32zx4, 
    /* SelectVR128 */
    VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* SelectVR32 */
    VR32, VR32, VR32, imm32zx4, imm32zx4, 
    /* SelectVR64 */
    VR64, VR64, VR64, imm32zx4, imm32zx4, 
    /* Serialize */
    /* TBEGIN_nofloat */
    ADDR64, disp12imm64, imm32zx16, 
    /* TLS_GDCALL */
    tlssym, 
    /* TLS_LDCALL */
    tlssym, 
    /* TMHH64 */
    GR64, imm64hh16, 
    /* TMHL64 */
    GR64, imm64hl16, 
    /* TMHMux */
    GRX32, imm32lh16, 
    /* TMLH64 */
    GR64, imm64lh16, 
    /* TMLL64 */
    GR64, imm64ll16, 
    /* TMLMux */
    GRX32, imm32ll16, 
    /* Trap */
    /* VL32 */
    VR32, ADDR64, disp12imm64, ADDR64, 
    /* VL64 */
    VR64, ADDR64, disp12imm64, ADDR64, 
    /* VLR32 */
    VR32, VR32, 
    /* VLR64 */
    VR64, VR64, 
    /* VLVGP32 */
    VR128, GR32, GR32, 
    /* VST32 */
    VR32, ADDR64, disp12imm64, ADDR64, 
    /* VST64 */
    VR64, ADDR64, disp12imm64, ADDR64, 
    /* XCImm */
    ADDR64, disp12imm64, ADDR64, disp12imm64, imm64, 
    /* XCReg */
    ADDR64, disp12imm64, ADDR64, disp12imm64, ADDR64, 
    /* XG_MemFoldPseudo */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* XIFMux */
    GRX32, GRX32, uimm32, 
    /* XIHF64 */
    GR64, GR64, imm64hf32, 
    /* XILF64 */
    GR64, GR64, imm64lf32, 
    /* XPLINK_STACKALLOC */
    /* X_MemFoldPseudo */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* ZEXT128 */
    GR128, GR64, 
    /* A */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* AD */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* ADB */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* ADBR */
    FP64, FP64, FP64, 
    /* ADR */
    FP64, FP64, FP64, 
    /* ADTR */
    FP64, FP64, FP64, 
    /* ADTRA */
    FP64, FP64, FP64, imm32zx4, 
    /* AE */
    FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* AEB */
    FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* AEBR */
    FP32, FP32, FP32, 
    /* AER */
    FP32, FP32, FP32, 
    /* AFI */
    GR32, GR32, simm32, 
    /* AG */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* AGF */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* AGFI */
    GR64, GR64, imm64sx32, 
    /* AGFR */
    GR64, GR64, GR32, 
    /* AGH */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* AGHI */
    GR64, GR64, imm64sx16, 
    /* AGHIK */
    GR64, GR64, imm64sx16, 
    /* AGR */
    GR64, GR64, GR64, 
    /* AGRK */
    GR64, GR64, GR64, 
    /* AGSI */
    ADDR64, disp20imm64, imm64sx8, 
    /* AH */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* AHHHR */
    GRH32, GRH32, GRH32, 
    /* AHHLR */
    GRH32, GRH32, GR32, 
    /* AHI */
    GR32, GR32, imm32sx16, 
    /* AHIK */
    GR32, GR32, imm32sx16, 
    /* AHY */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* AIH */
    GRH32, GRH32, simm32, 
    /* AL */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* ALC */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* ALCG */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* ALCGR */
    GR64, GR64, GR64, 
    /* ALCR */
    GR32, GR32, GR32, 
    /* ALFI */
    GR32, GR32, uimm32, 
    /* ALG */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* ALGF */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* ALGFI */
    GR64, GR64, imm64zx32, 
    /* ALGFR */
    GR64, GR64, GR32, 
    /* ALGHSIK */
    GR64, GR64, imm64sx16, 
    /* ALGR */
    GR64, GR64, GR64, 
    /* ALGRK */
    GR64, GR64, GR64, 
    /* ALGSI */
    ADDR64, disp20imm64, imm64sx8, 
    /* ALHHHR */
    GRH32, GRH32, GRH32, 
    /* ALHHLR */
    GRH32, GRH32, GR32, 
    /* ALHSIK */
    GR32, GR32, imm32sx16, 
    /* ALR */
    GR32, GR32, GR32, 
    /* ALRK */
    GR32, GR32, GR32, 
    /* ALSI */
    ADDR64, disp20imm64, imm32sx8, 
    /* ALSIH */
    GRH32, GRH32, simm32, 
    /* ALSIHN */
    GRH32, GRH32, simm32, 
    /* ALY */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* AP */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, imm64, 
    /* AR */
    GR32, GR32, GR32, 
    /* ARK */
    GR32, GR32, GR32, 
    /* ASI */
    ADDR64, disp20imm64, imm32sx8, 
    /* AU */
    FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* AUR */
    FP32, FP32, FP32, 
    /* AW */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* AWR */
    FP64, FP64, FP64, 
    /* AXBR */
    FP128, FP128, FP128, 
    /* AXR */
    FP128, FP128, FP128, 
    /* AXTR */
    FP128, FP128, FP128, 
    /* AXTRA */
    FP128, FP128, FP128, imm32zx4, 
    /* AY */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* B */
    ADDR64, disp12imm64, ADDR64, 
    /* BAKR */
    GR64, GR64, 
    /* BAL */
    GR64, ADDR64, disp12imm64, ADDR64, 
    /* BALR */
    GR64, ADDR64, 
    /* BAS */
    GR64, ADDR64, disp12imm64, ADDR64, 
    /* BASR */
    GR64, ADDR64, 
    /* BASSM */
    GR64, ADDR64, 
    /* BAsmE */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmH */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmHE */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmL */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmLE */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmLH */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmM */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmNE */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmNH */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmNHE */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmNL */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmNLE */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmNLH */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmNM */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmNO */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmNP */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmNZ */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmO */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmP */
    ADDR64, disp12imm64, ADDR64, 
    /* BAsmZ */
    ADDR64, disp12imm64, ADDR64, 
    /* BC */
    cond4, cond4, ADDR64, disp12imm64, ADDR64, 
    /* BCAsm */
    imm32zx4, ADDR64, disp12imm64, ADDR64, 
    /* BCR */
    cond4, cond4, GR64, 
    /* BCRAsm */
    imm32zx4, GR64, 
    /* BCT */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* BCTG */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* BCTGR */
    GR64, GR64, GR64, 
    /* BCTR */
    GR32, GR32, GR64, 
    /* BI */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmE */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmH */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmHE */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmL */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmLE */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmLH */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmM */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmNE */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmNH */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmNHE */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmNL */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmNLE */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmNLH */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmNM */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmNO */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmNP */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmNZ */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmO */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmP */
    ADDR64, disp20imm64, ADDR64, 
    /* BIAsmZ */
    ADDR64, disp20imm64, ADDR64, 
    /* BIC */
    cond4, cond4, ADDR64, disp20imm64, ADDR64, 
    /* BICAsm */
    imm32zx4, ADDR64, disp20imm64, ADDR64, 
    /* BPP */
    imm32zx4, brtarget16bpp, ADDR64, disp12imm64, ADDR64, 
    /* BPRP */
    imm32zx4, brtarget12bpp, brtarget24bpp, 
    /* BR */
    ADDR64, 
    /* BRAS */
    GR64, brtarget16, tlssym, 
    /* BRASL */
    GR64, brtarget32, tlssym, 
    /* BRAsmE */
    ADDR64, 
    /* BRAsmH */
    ADDR64, 
    /* BRAsmHE */
    ADDR64, 
    /* BRAsmL */
    ADDR64, 
    /* BRAsmLE */
    ADDR64, 
    /* BRAsmLH */
    ADDR64, 
    /* BRAsmM */
    ADDR64, 
    /* BRAsmNE */
    ADDR64, 
    /* BRAsmNH */
    ADDR64, 
    /* BRAsmNHE */
    ADDR64, 
    /* BRAsmNL */
    ADDR64, 
    /* BRAsmNLE */
    ADDR64, 
    /* BRAsmNLH */
    ADDR64, 
    /* BRAsmNM */
    ADDR64, 
    /* BRAsmNO */
    ADDR64, 
    /* BRAsmNP */
    ADDR64, 
    /* BRAsmNZ */
    ADDR64, 
    /* BRAsmO */
    ADDR64, 
    /* BRAsmP */
    ADDR64, 
    /* BRAsmZ */
    ADDR64, 
    /* BRC */
    cond4, cond4, brtarget16, 
    /* BRCAsm */
    imm32zx4, brtarget16, 
    /* BRCL */
    cond4, cond4, brtarget32, 
    /* BRCLAsm */
    imm32zx4, brtarget32, 
    /* BRCT */
    GR32, GR32, brtarget16, 
    /* BRCTG */
    GR64, GR64, brtarget16, 
    /* BRCTH */
    GRH32, GRH32, brtarget32, 
    /* BRXH */
    GR32, GR32, GR32, brtarget16, 
    /* BRXHG */
    GR64, GR64, GR64, brtarget16, 
    /* BRXLE */
    GR32, GR32, GR32, brtarget16, 
    /* BRXLG */
    GR64, GR64, GR64, brtarget16, 
    /* BSA */
    GR64, GR64, 
    /* BSG */
    GR64, GR64, 
    /* BSM */
    GR64, ADDR64, 
    /* BXH */
    GR32, GR32, GR32, ADDR64, disp12imm64, 
    /* BXHG */
    GR64, GR64, GR64, ADDR64, disp20imm64, 
    /* BXLE */
    GR32, GR32, GR32, ADDR64, disp12imm64, 
    /* BXLEG */
    GR64, GR64, GR64, ADDR64, disp20imm64, 
    /* C */
    GR32, ADDR64, disp12imm64, ADDR64, 
    /* CD */
    FP64, ADDR64, disp12imm64, ADDR64, 
    /* CDB */
    FP64, ADDR64, disp12imm64, ADDR64, 
    /* CDBR */
    FP64, FP64, 
    /* CDFBR */
    FP64, GR32, 
    /* CDFBRA */
    FP64, imm32zx4, GR32, imm32zx4, 
    /* CDFR */
    FP64, GR32, 
    /* CDFTR */
    FP64, imm32zx4, GR32, imm32zx4, 
    /* CDGBR */
    FP64, GR64, 
    /* CDGBRA */
    FP64, imm32zx4, GR64, imm32zx4, 
    /* CDGR */
    FP64, GR64, 
    /* CDGTR */
    FP64, GR64, 
    /* CDGTRA */
    FP64, imm32zx4, GR64, imm32zx4, 
    /* CDLFBR */
    FP64, imm32zx4, GR32, imm32zx4, 
    /* CDLFTR */
    FP64, imm32zx4, GR32, imm32zx4, 
    /* CDLGBR */
    FP64, imm32zx4, GR64, imm32zx4, 
    /* CDLGTR */
    FP64, imm32zx4, GR64, imm32zx4, 
    /* CDPT */
    FP64, ADDR64, disp12imm64, imm64, imm32zx4, 
    /* CDR */
    FP64, FP64, 
    /* CDS */
    GR128, GR128, GR128, ADDR64, disp12imm64, 
    /* CDSG */
    GR128, GR128, GR128, ADDR64, disp20imm64, 
    /* CDSTR */
    FP64, GR64, 
    /* CDSY */
    GR128, GR128, GR128, ADDR64, disp20imm64, 
    /* CDTR */
    FP64, FP64, 
    /* CDUTR */
    FP64, GR64, 
    /* CDZT */
    FP64, ADDR64, disp12imm64, imm64, imm32zx4, 
    /* CE */
    FP32, ADDR64, disp12imm64, ADDR64, 
    /* CEB */
    FP32, ADDR64, disp12imm64, ADDR64, 
    /* CEBR */
    FP32, FP32, 
    /* CEDTR */
    FP64, FP64, 
    /* CEFBR */
    FP32, GR32, 
    /* CEFBRA */
    FP32, imm32zx4, GR32, imm32zx4, 
    /* CEFR */
    FP32, GR32, 
    /* CEGBR */
    FP32, GR64, 
    /* CEGBRA */
    FP32, imm32zx4, GR64, imm32zx4, 
    /* CEGR */
    FP32, GR64, 
    /* CELFBR */
    FP32, imm32zx4, GR32, imm32zx4, 
    /* CELGBR */
    FP32, imm32zx4, GR64, imm32zx4, 
    /* CER */
    FP32, FP32, 
    /* CEXTR */
    FP128, FP128, 
    /* CFC */
    ADDR64, disp12imm64, 
    /* CFDBR */
    GR32, imm32zx4, FP64, 
    /* CFDBRA */
    GR32, imm32zx4, FP64, imm32zx4, 
    /* CFDR */
    GR32, imm32zx4, FP64, 
    /* CFDTR */
    GR32, imm32zx4, FP64, imm32zx4, 
    /* CFEBR */
    GR32, imm32zx4, FP32, 
    /* CFEBRA */
    GR32, imm32zx4, FP32, imm32zx4, 
    /* CFER */
    GR32, imm32zx4, FP32, 
    /* CFI */
    GR32, simm32, 
    /* CFXBR */
    GR32, imm32zx4, FP128, 
    /* CFXBRA */
    GR32, imm32zx4, FP128, imm32zx4, 
    /* CFXR */
    GR32, imm32zx4, FP128, 
    /* CFXTR */
    GR32, imm32zx4, FP128, imm32zx4, 
    /* CG */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* CGDBR */
    GR64, imm32zx4, FP64, 
    /* CGDBRA */
    GR64, imm32zx4, FP64, imm32zx4, 
    /* CGDR */
    GR64, imm32zx4, FP64, 
    /* CGDTR */
    GR64, imm32zx4, FP64, 
    /* CGDTRA */
    GR64, imm32zx4, FP64, imm32zx4, 
    /* CGEBR */
    GR64, imm32zx4, FP32, 
    /* CGEBRA */
    GR64, imm32zx4, FP32, imm32zx4, 
    /* CGER */
    GR64, imm32zx4, FP32, 
    /* CGF */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* CGFI */
    GR64, imm64sx32, 
    /* CGFR */
    GR64, GR32, 
    /* CGFRL */
    GR64, pcrel32, 
    /* CGH */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* CGHI */
    GR64, imm64sx16, 
    /* CGHRL */
    GR64, pcrel32, 
    /* CGHSI */
    ADDR64, disp12imm64, imm64sx16, 
    /* CGIB */
    GR64, imm64sx8, cond4, ADDR64, disp12imm64, 
    /* CGIBAsm */
    GR64, imm64sx8, imm32zx4, ADDR64, disp12imm64, 
    /* CGIBAsmE */
    GR64, imm64sx8, ADDR64, disp12imm64, 
    /* CGIBAsmH */
    GR64, imm64sx8, ADDR64, disp12imm64, 
    /* CGIBAsmHE */
    GR64, imm64sx8, ADDR64, disp12imm64, 
    /* CGIBAsmL */
    GR64, imm64sx8, ADDR64, disp12imm64, 
    /* CGIBAsmLE */
    GR64, imm64sx8, ADDR64, disp12imm64, 
    /* CGIBAsmLH */
    GR64, imm64sx8, ADDR64, disp12imm64, 
    /* CGIBAsmNE */
    GR64, imm64sx8, ADDR64, disp12imm64, 
    /* CGIBAsmNH */
    GR64, imm64sx8, ADDR64, disp12imm64, 
    /* CGIBAsmNHE */
    GR64, imm64sx8, ADDR64, disp12imm64, 
    /* CGIBAsmNL */
    GR64, imm64sx8, ADDR64, disp12imm64, 
    /* CGIBAsmNLE */
    GR64, imm64sx8, ADDR64, disp12imm64, 
    /* CGIBAsmNLH */
    GR64, imm64sx8, ADDR64, disp12imm64, 
    /* CGIJ */
    GR64, imm64sx8, cond4, brtarget16, 
    /* CGIJAsm */
    GR64, imm64sx8, imm32zx4, brtarget16, 
    /* CGIJAsmE */
    GR64, imm64sx8, brtarget16, 
    /* CGIJAsmH */
    GR64, imm64sx8, brtarget16, 
    /* CGIJAsmHE */
    GR64, imm64sx8, brtarget16, 
    /* CGIJAsmL */
    GR64, imm64sx8, brtarget16, 
    /* CGIJAsmLE */
    GR64, imm64sx8, brtarget16, 
    /* CGIJAsmLH */
    GR64, imm64sx8, brtarget16, 
    /* CGIJAsmNE */
    GR64, imm64sx8, brtarget16, 
    /* CGIJAsmNH */
    GR64, imm64sx8, brtarget16, 
    /* CGIJAsmNHE */
    GR64, imm64sx8, brtarget16, 
    /* CGIJAsmNL */
    GR64, imm64sx8, brtarget16, 
    /* CGIJAsmNLE */
    GR64, imm64sx8, brtarget16, 
    /* CGIJAsmNLH */
    GR64, imm64sx8, brtarget16, 
    /* CGIT */
    GR64, imm64sx16, cond4, 
    /* CGITAsm */
    GR64, imm64sx16, imm32zx4, 
    /* CGITAsmE */
    GR64, imm64sx16, 
    /* CGITAsmH */
    GR64, imm64sx16, 
    /* CGITAsmHE */
    GR64, imm64sx16, 
    /* CGITAsmL */
    GR64, imm64sx16, 
    /* CGITAsmLE */
    GR64, imm64sx16, 
    /* CGITAsmLH */
    GR64, imm64sx16, 
    /* CGITAsmNE */
    GR64, imm64sx16, 
    /* CGITAsmNH */
    GR64, imm64sx16, 
    /* CGITAsmNHE */
    GR64, imm64sx16, 
    /* CGITAsmNL */
    GR64, imm64sx16, 
    /* CGITAsmNLE */
    GR64, imm64sx16, 
    /* CGITAsmNLH */
    GR64, imm64sx16, 
    /* CGR */
    GR64, GR64, 
    /* CGRB */
    GR64, GR64, cond4, ADDR64, disp12imm64, 
    /* CGRBAsm */
    GR64, GR64, imm32zx4, ADDR64, disp12imm64, 
    /* CGRBAsmE */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CGRBAsmH */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CGRBAsmHE */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CGRBAsmL */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CGRBAsmLE */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CGRBAsmLH */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CGRBAsmNE */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CGRBAsmNH */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CGRBAsmNHE */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CGRBAsmNL */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CGRBAsmNLE */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CGRBAsmNLH */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CGRJ */
    GR64, GR64, cond4, brtarget16, 
    /* CGRJAsm */
    GR64, GR64, imm32zx4, brtarget16, 
    /* CGRJAsmE */
    GR64, GR64, brtarget16, 
    /* CGRJAsmH */
    GR64, GR64, brtarget16, 
    /* CGRJAsmHE */
    GR64, GR64, brtarget16, 
    /* CGRJAsmL */
    GR64, GR64, brtarget16, 
    /* CGRJAsmLE */
    GR64, GR64, brtarget16, 
    /* CGRJAsmLH */
    GR64, GR64, brtarget16, 
    /* CGRJAsmNE */
    GR64, GR64, brtarget16, 
    /* CGRJAsmNH */
    GR64, GR64, brtarget16, 
    /* CGRJAsmNHE */
    GR64, GR64, brtarget16, 
    /* CGRJAsmNL */
    GR64, GR64, brtarget16, 
    /* CGRJAsmNLE */
    GR64, GR64, brtarget16, 
    /* CGRJAsmNLH */
    GR64, GR64, brtarget16, 
    /* CGRL */
    GR64, pcrel32, 
    /* CGRT */
    GR64, GR64, cond4, 
    /* CGRTAsm */
    GR64, GR64, imm32zx4, 
    /* CGRTAsmE */
    GR64, GR64, 
    /* CGRTAsmH */
    GR64, GR64, 
    /* CGRTAsmHE */
    GR64, GR64, 
    /* CGRTAsmL */
    GR64, GR64, 
    /* CGRTAsmLE */
    GR64, GR64, 
    /* CGRTAsmLH */
    GR64, GR64, 
    /* CGRTAsmNE */
    GR64, GR64, 
    /* CGRTAsmNH */
    GR64, GR64, 
    /* CGRTAsmNHE */
    GR64, GR64, 
    /* CGRTAsmNL */
    GR64, GR64, 
    /* CGRTAsmNLE */
    GR64, GR64, 
    /* CGRTAsmNLH */
    GR64, GR64, 
    /* CGXBR */
    GR64, imm32zx4, FP128, 
    /* CGXBRA */
    GR64, imm32zx4, FP128, imm32zx4, 
    /* CGXR */
    GR64, imm32zx4, FP128, 
    /* CGXTR */
    GR64, imm32zx4, FP128, 
    /* CGXTRA */
    GR64, imm32zx4, FP128, imm32zx4, 
    /* CH */
    GR32, ADDR64, disp12imm64, ADDR64, 
    /* CHF */
    GRH32, ADDR64, disp20imm64, ADDR64, 
    /* CHHR */
    GRH32, GRH32, 
    /* CHHSI */
    ADDR64, disp12imm64, imm32sx16, 
    /* CHI */
    GR32, imm32sx16, 
    /* CHLR */
    GRH32, GR32, 
    /* CHRL */
    GR32, pcrel32, 
    /* CHSI */
    ADDR64, disp12imm64, imm32sx16, 
    /* CHY */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* CIB */
    GR32, imm32sx8, cond4, ADDR64, disp12imm64, 
    /* CIBAsm */
    GR32, imm32sx8, imm32zx4, ADDR64, disp12imm64, 
    /* CIBAsmE */
    GR32, imm32sx8, ADDR64, disp12imm64, 
    /* CIBAsmH */
    GR32, imm32sx8, ADDR64, disp12imm64, 
    /* CIBAsmHE */
    GR32, imm32sx8, ADDR64, disp12imm64, 
    /* CIBAsmL */
    GR32, imm32sx8, ADDR64, disp12imm64, 
    /* CIBAsmLE */
    GR32, imm32sx8, ADDR64, disp12imm64, 
    /* CIBAsmLH */
    GR32, imm32sx8, ADDR64, disp12imm64, 
    /* CIBAsmNE */
    GR32, imm32sx8, ADDR64, disp12imm64, 
    /* CIBAsmNH */
    GR32, imm32sx8, ADDR64, disp12imm64, 
    /* CIBAsmNHE */
    GR32, imm32sx8, ADDR64, disp12imm64, 
    /* CIBAsmNL */
    GR32, imm32sx8, ADDR64, disp12imm64, 
    /* CIBAsmNLE */
    GR32, imm32sx8, ADDR64, disp12imm64, 
    /* CIBAsmNLH */
    GR32, imm32sx8, ADDR64, disp12imm64, 
    /* CIH */
    GRH32, simm32, 
    /* CIJ */
    GR32, imm32sx8, cond4, brtarget16, 
    /* CIJAsm */
    GR32, imm32sx8, imm32zx4, brtarget16, 
    /* CIJAsmE */
    GR32, imm32sx8, brtarget16, 
    /* CIJAsmH */
    GR32, imm32sx8, brtarget16, 
    /* CIJAsmHE */
    GR32, imm32sx8, brtarget16, 
    /* CIJAsmL */
    GR32, imm32sx8, brtarget16, 
    /* CIJAsmLE */
    GR32, imm32sx8, brtarget16, 
    /* CIJAsmLH */
    GR32, imm32sx8, brtarget16, 
    /* CIJAsmNE */
    GR32, imm32sx8, brtarget16, 
    /* CIJAsmNH */
    GR32, imm32sx8, brtarget16, 
    /* CIJAsmNHE */
    GR32, imm32sx8, brtarget16, 
    /* CIJAsmNL */
    GR32, imm32sx8, brtarget16, 
    /* CIJAsmNLE */
    GR32, imm32sx8, brtarget16, 
    /* CIJAsmNLH */
    GR32, imm32sx8, brtarget16, 
    /* CIT */
    GR32, imm32sx16, cond4, 
    /* CITAsm */
    GR32, imm32sx16, imm32zx4, 
    /* CITAsmE */
    GR32, imm32sx16, 
    /* CITAsmH */
    GR32, imm32sx16, 
    /* CITAsmHE */
    GR32, imm32sx16, 
    /* CITAsmL */
    GR32, imm32sx16, 
    /* CITAsmLE */
    GR32, imm32sx16, 
    /* CITAsmLH */
    GR32, imm32sx16, 
    /* CITAsmNE */
    GR32, imm32sx16, 
    /* CITAsmNH */
    GR32, imm32sx16, 
    /* CITAsmNHE */
    GR32, imm32sx16, 
    /* CITAsmNL */
    GR32, imm32sx16, 
    /* CITAsmNLE */
    GR32, imm32sx16, 
    /* CITAsmNLH */
    GR32, imm32sx16, 
    /* CKSM */
    GR64, GR128, GR64, GR128, 
    /* CL */
    GR32, ADDR64, disp12imm64, ADDR64, 
    /* CLC */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, 
    /* CLCL */
    GR128, GR128, GR128, GR128, 
    /* CLCLE */
    GR128, GR128, GR128, GR128, ADDR32, disp12imm32, 
    /* CLCLU */
    GR128, GR128, GR128, GR128, ADDR32, disp20imm32, 
    /* CLFDBR */
    GR32, imm32zx4, FP64, imm32zx4, 
    /* CLFDTR */
    GR32, imm32zx4, FP64, imm32zx4, 
    /* CLFEBR */
    GR32, imm32zx4, FP32, imm32zx4, 
    /* CLFHSI */
    ADDR64, disp12imm64, imm32zx16, 
    /* CLFI */
    GR32, uimm32, 
    /* CLFIT */
    GR32, imm32zx16, cond4, 
    /* CLFITAsm */
    GR32, imm32zx16, imm32zx4, 
    /* CLFITAsmE */
    GR32, imm32zx16, 
    /* CLFITAsmH */
    GR32, imm32zx16, 
    /* CLFITAsmHE */
    GR32, imm32zx16, 
    /* CLFITAsmL */
    GR32, imm32zx16, 
    /* CLFITAsmLE */
    GR32, imm32zx16, 
    /* CLFITAsmLH */
    GR32, imm32zx16, 
    /* CLFITAsmNE */
    GR32, imm32zx16, 
    /* CLFITAsmNH */
    GR32, imm32zx16, 
    /* CLFITAsmNHE */
    GR32, imm32zx16, 
    /* CLFITAsmNL */
    GR32, imm32zx16, 
    /* CLFITAsmNLE */
    GR32, imm32zx16, 
    /* CLFITAsmNLH */
    GR32, imm32zx16, 
    /* CLFXBR */
    GR32, imm32zx4, FP128, imm32zx4, 
    /* CLFXTR */
    GR32, imm32zx4, FP128, imm32zx4, 
    /* CLG */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* CLGDBR */
    GR64, imm32zx4, FP64, imm32zx4, 
    /* CLGDTR */
    GR64, imm32zx4, FP64, imm32zx4, 
    /* CLGEBR */
    GR64, imm32zx4, FP32, imm32zx4, 
    /* CLGF */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* CLGFI */
    GR64, imm64zx32, 
    /* CLGFR */
    GR64, GR32, 
    /* CLGFRL */
    GR64, pcrel32, 
    /* CLGHRL */
    GR64, pcrel32, 
    /* CLGHSI */
    ADDR64, disp12imm64, imm64zx16, 
    /* CLGIB */
    GR64, imm64zx8, cond4, ADDR64, disp12imm64, 
    /* CLGIBAsm */
    GR64, imm64zx8, imm32zx4, ADDR64, disp12imm64, 
    /* CLGIBAsmE */
    GR64, imm64zx8, ADDR64, disp12imm64, 
    /* CLGIBAsmH */
    GR64, imm64zx8, ADDR64, disp12imm64, 
    /* CLGIBAsmHE */
    GR64, imm64zx8, ADDR64, disp12imm64, 
    /* CLGIBAsmL */
    GR64, imm64zx8, ADDR64, disp12imm64, 
    /* CLGIBAsmLE */
    GR64, imm64zx8, ADDR64, disp12imm64, 
    /* CLGIBAsmLH */
    GR64, imm64zx8, ADDR64, disp12imm64, 
    /* CLGIBAsmNE */
    GR64, imm64zx8, ADDR64, disp12imm64, 
    /* CLGIBAsmNH */
    GR64, imm64zx8, ADDR64, disp12imm64, 
    /* CLGIBAsmNHE */
    GR64, imm64zx8, ADDR64, disp12imm64, 
    /* CLGIBAsmNL */
    GR64, imm64zx8, ADDR64, disp12imm64, 
    /* CLGIBAsmNLE */
    GR64, imm64zx8, ADDR64, disp12imm64, 
    /* CLGIBAsmNLH */
    GR64, imm64zx8, ADDR64, disp12imm64, 
    /* CLGIJ */
    GR64, imm64zx8, cond4, brtarget16, 
    /* CLGIJAsm */
    GR64, imm64zx8, imm32zx4, brtarget16, 
    /* CLGIJAsmE */
    GR64, imm64zx8, brtarget16, 
    /* CLGIJAsmH */
    GR64, imm64zx8, brtarget16, 
    /* CLGIJAsmHE */
    GR64, imm64zx8, brtarget16, 
    /* CLGIJAsmL */
    GR64, imm64zx8, brtarget16, 
    /* CLGIJAsmLE */
    GR64, imm64zx8, brtarget16, 
    /* CLGIJAsmLH */
    GR64, imm64zx8, brtarget16, 
    /* CLGIJAsmNE */
    GR64, imm64zx8, brtarget16, 
    /* CLGIJAsmNH */
    GR64, imm64zx8, brtarget16, 
    /* CLGIJAsmNHE */
    GR64, imm64zx8, brtarget16, 
    /* CLGIJAsmNL */
    GR64, imm64zx8, brtarget16, 
    /* CLGIJAsmNLE */
    GR64, imm64zx8, brtarget16, 
    /* CLGIJAsmNLH */
    GR64, imm64zx8, brtarget16, 
    /* CLGIT */
    GR64, imm64zx16, cond4, 
    /* CLGITAsm */
    GR64, imm64zx16, imm32zx4, 
    /* CLGITAsmE */
    GR64, imm64zx16, 
    /* CLGITAsmH */
    GR64, imm64zx16, 
    /* CLGITAsmHE */
    GR64, imm64zx16, 
    /* CLGITAsmL */
    GR64, imm64zx16, 
    /* CLGITAsmLE */
    GR64, imm64zx16, 
    /* CLGITAsmLH */
    GR64, imm64zx16, 
    /* CLGITAsmNE */
    GR64, imm64zx16, 
    /* CLGITAsmNH */
    GR64, imm64zx16, 
    /* CLGITAsmNHE */
    GR64, imm64zx16, 
    /* CLGITAsmNL */
    GR64, imm64zx16, 
    /* CLGITAsmNLE */
    GR64, imm64zx16, 
    /* CLGITAsmNLH */
    GR64, imm64zx16, 
    /* CLGR */
    GR64, GR64, 
    /* CLGRB */
    GR64, GR64, cond4, ADDR64, disp12imm64, 
    /* CLGRBAsm */
    GR64, GR64, imm32zx4, ADDR64, disp12imm64, 
    /* CLGRBAsmE */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CLGRBAsmH */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CLGRBAsmHE */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CLGRBAsmL */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CLGRBAsmLE */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CLGRBAsmLH */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CLGRBAsmNE */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CLGRBAsmNH */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CLGRBAsmNHE */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CLGRBAsmNL */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CLGRBAsmNLE */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CLGRBAsmNLH */
    GR64, GR64, ADDR64, disp12imm64, 
    /* CLGRJ */
    GR64, GR64, cond4, brtarget16, 
    /* CLGRJAsm */
    GR64, GR64, imm32zx4, brtarget16, 
    /* CLGRJAsmE */
    GR64, GR64, brtarget16, 
    /* CLGRJAsmH */
    GR64, GR64, brtarget16, 
    /* CLGRJAsmHE */
    GR64, GR64, brtarget16, 
    /* CLGRJAsmL */
    GR64, GR64, brtarget16, 
    /* CLGRJAsmLE */
    GR64, GR64, brtarget16, 
    /* CLGRJAsmLH */
    GR64, GR64, brtarget16, 
    /* CLGRJAsmNE */
    GR64, GR64, brtarget16, 
    /* CLGRJAsmNH */
    GR64, GR64, brtarget16, 
    /* CLGRJAsmNHE */
    GR64, GR64, brtarget16, 
    /* CLGRJAsmNL */
    GR64, GR64, brtarget16, 
    /* CLGRJAsmNLE */
    GR64, GR64, brtarget16, 
    /* CLGRJAsmNLH */
    GR64, GR64, brtarget16, 
    /* CLGRL */
    GR64, pcrel32, 
    /* CLGRT */
    GR64, GR64, cond4, 
    /* CLGRTAsm */
    GR64, GR64, imm32zx4, 
    /* CLGRTAsmE */
    GR64, GR64, 
    /* CLGRTAsmH */
    GR64, GR64, 
    /* CLGRTAsmHE */
    GR64, GR64, 
    /* CLGRTAsmL */
    GR64, GR64, 
    /* CLGRTAsmLE */
    GR64, GR64, 
    /* CLGRTAsmLH */
    GR64, GR64, 
    /* CLGRTAsmNE */
    GR64, GR64, 
    /* CLGRTAsmNH */
    GR64, GR64, 
    /* CLGRTAsmNHE */
    GR64, GR64, 
    /* CLGRTAsmNL */
    GR64, GR64, 
    /* CLGRTAsmNLE */
    GR64, GR64, 
    /* CLGRTAsmNLH */
    GR64, GR64, 
    /* CLGT */
    GR64, ADDR64, disp20imm64, cond4, 
    /* CLGTAsm */
    GR64, ADDR64, disp20imm64, imm32zx4, 
    /* CLGTAsmE */
    GR64, ADDR64, disp20imm64, 
    /* CLGTAsmH */
    GR64, ADDR64, disp20imm64, 
    /* CLGTAsmHE */
    GR64, ADDR64, disp20imm64, 
    /* CLGTAsmL */
    GR64, ADDR64, disp20imm64, 
    /* CLGTAsmLE */
    GR64, ADDR64, disp20imm64, 
    /* CLGTAsmLH */
    GR64, ADDR64, disp20imm64, 
    /* CLGTAsmNE */
    GR64, ADDR64, disp20imm64, 
    /* CLGTAsmNH */
    GR64, ADDR64, disp20imm64, 
    /* CLGTAsmNHE */
    GR64, ADDR64, disp20imm64, 
    /* CLGTAsmNL */
    GR64, ADDR64, disp20imm64, 
    /* CLGTAsmNLE */
    GR64, ADDR64, disp20imm64, 
    /* CLGTAsmNLH */
    GR64, ADDR64, disp20imm64, 
    /* CLGXBR */
    GR64, imm32zx4, FP128, imm32zx4, 
    /* CLGXTR */
    GR64, imm32zx4, FP128, imm32zx4, 
    /* CLHF */
    GRH32, ADDR64, disp20imm64, ADDR64, 
    /* CLHHR */
    GRH32, GRH32, 
    /* CLHHSI */
    ADDR64, disp12imm64, imm32zx16, 
    /* CLHLR */
    GRH32, GR32, 
    /* CLHRL */
    GR32, pcrel32, 
    /* CLI */
    ADDR64, disp12imm64, imm32zx8, 
    /* CLIB */
    GR32, imm32zx8, cond4, ADDR64, disp12imm64, 
    /* CLIBAsm */
    GR32, imm32zx8, imm32zx4, ADDR64, disp12imm64, 
    /* CLIBAsmE */
    GR32, imm32zx8, ADDR64, disp12imm64, 
    /* CLIBAsmH */
    GR32, imm32zx8, ADDR64, disp12imm64, 
    /* CLIBAsmHE */
    GR32, imm32zx8, ADDR64, disp12imm64, 
    /* CLIBAsmL */
    GR32, imm32zx8, ADDR64, disp12imm64, 
    /* CLIBAsmLE */
    GR32, imm32zx8, ADDR64, disp12imm64, 
    /* CLIBAsmLH */
    GR32, imm32zx8, ADDR64, disp12imm64, 
    /* CLIBAsmNE */
    GR32, imm32zx8, ADDR64, disp12imm64, 
    /* CLIBAsmNH */
    GR32, imm32zx8, ADDR64, disp12imm64, 
    /* CLIBAsmNHE */
    GR32, imm32zx8, ADDR64, disp12imm64, 
    /* CLIBAsmNL */
    GR32, imm32zx8, ADDR64, disp12imm64, 
    /* CLIBAsmNLE */
    GR32, imm32zx8, ADDR64, disp12imm64, 
    /* CLIBAsmNLH */
    GR32, imm32zx8, ADDR64, disp12imm64, 
    /* CLIH */
    GRH32, uimm32, 
    /* CLIJ */
    GR32, imm32zx8, cond4, brtarget16, 
    /* CLIJAsm */
    GR32, imm32zx8, imm32zx4, brtarget16, 
    /* CLIJAsmE */
    GR32, imm32zx8, brtarget16, 
    /* CLIJAsmH */
    GR32, imm32zx8, brtarget16, 
    /* CLIJAsmHE */
    GR32, imm32zx8, brtarget16, 
    /* CLIJAsmL */
    GR32, imm32zx8, brtarget16, 
    /* CLIJAsmLE */
    GR32, imm32zx8, brtarget16, 
    /* CLIJAsmLH */
    GR32, imm32zx8, brtarget16, 
    /* CLIJAsmNE */
    GR32, imm32zx8, brtarget16, 
    /* CLIJAsmNH */
    GR32, imm32zx8, brtarget16, 
    /* CLIJAsmNHE */
    GR32, imm32zx8, brtarget16, 
    /* CLIJAsmNL */
    GR32, imm32zx8, brtarget16, 
    /* CLIJAsmNLE */
    GR32, imm32zx8, brtarget16, 
    /* CLIJAsmNLH */
    GR32, imm32zx8, brtarget16, 
    /* CLIY */
    ADDR64, disp20imm64, imm32zx8, 
    /* CLM */
    GR32, imm32zx4, ADDR64, disp12imm64, 
    /* CLMH */
    GRH32, imm32zx4, ADDR64, disp20imm64, 
    /* CLMY */
    GR32, imm32zx4, ADDR64, disp20imm64, 
    /* CLR */
    GR32, GR32, 
    /* CLRB */
    GR32, GR32, cond4, ADDR64, disp12imm64, 
    /* CLRBAsm */
    GR32, GR32, imm32zx4, ADDR64, disp12imm64, 
    /* CLRBAsmE */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CLRBAsmH */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CLRBAsmHE */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CLRBAsmL */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CLRBAsmLE */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CLRBAsmLH */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CLRBAsmNE */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CLRBAsmNH */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CLRBAsmNHE */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CLRBAsmNL */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CLRBAsmNLE */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CLRBAsmNLH */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CLRJ */
    GR32, GR32, cond4, brtarget16, 
    /* CLRJAsm */
    GR32, GR32, imm32zx4, brtarget16, 
    /* CLRJAsmE */
    GR32, GR32, brtarget16, 
    /* CLRJAsmH */
    GR32, GR32, brtarget16, 
    /* CLRJAsmHE */
    GR32, GR32, brtarget16, 
    /* CLRJAsmL */
    GR32, GR32, brtarget16, 
    /* CLRJAsmLE */
    GR32, GR32, brtarget16, 
    /* CLRJAsmLH */
    GR32, GR32, brtarget16, 
    /* CLRJAsmNE */
    GR32, GR32, brtarget16, 
    /* CLRJAsmNH */
    GR32, GR32, brtarget16, 
    /* CLRJAsmNHE */
    GR32, GR32, brtarget16, 
    /* CLRJAsmNL */
    GR32, GR32, brtarget16, 
    /* CLRJAsmNLE */
    GR32, GR32, brtarget16, 
    /* CLRJAsmNLH */
    GR32, GR32, brtarget16, 
    /* CLRL */
    GR32, pcrel32, 
    /* CLRT */
    GR32, GR32, cond4, 
    /* CLRTAsm */
    GR32, GR32, imm32zx4, 
    /* CLRTAsmE */
    GR32, GR32, 
    /* CLRTAsmH */
    GR32, GR32, 
    /* CLRTAsmHE */
    GR32, GR32, 
    /* CLRTAsmL */
    GR32, GR32, 
    /* CLRTAsmLE */
    GR32, GR32, 
    /* CLRTAsmLH */
    GR32, GR32, 
    /* CLRTAsmNE */
    GR32, GR32, 
    /* CLRTAsmNH */
    GR32, GR32, 
    /* CLRTAsmNHE */
    GR32, GR32, 
    /* CLRTAsmNL */
    GR32, GR32, 
    /* CLRTAsmNLE */
    GR32, GR32, 
    /* CLRTAsmNLH */
    GR32, GR32, 
    /* CLST */
    GR64, GR64, GR64, GR64, 
    /* CLT */
    GR32, ADDR64, disp20imm64, cond4, 
    /* CLTAsm */
    GR32, ADDR64, disp20imm64, imm32zx4, 
    /* CLTAsmE */
    GR32, ADDR64, disp20imm64, 
    /* CLTAsmH */
    GR32, ADDR64, disp20imm64, 
    /* CLTAsmHE */
    GR32, ADDR64, disp20imm64, 
    /* CLTAsmL */
    GR32, ADDR64, disp20imm64, 
    /* CLTAsmLE */
    GR32, ADDR64, disp20imm64, 
    /* CLTAsmLH */
    GR32, ADDR64, disp20imm64, 
    /* CLTAsmNE */
    GR32, ADDR64, disp20imm64, 
    /* CLTAsmNH */
    GR32, ADDR64, disp20imm64, 
    /* CLTAsmNHE */
    GR32, ADDR64, disp20imm64, 
    /* CLTAsmNL */
    GR32, ADDR64, disp20imm64, 
    /* CLTAsmNLE */
    GR32, ADDR64, disp20imm64, 
    /* CLTAsmNLH */
    GR32, ADDR64, disp20imm64, 
    /* CLY */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* CMPSC */
    GR128, GR128, GR128, GR128, 
    /* CP */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, imm64, 
    /* CPDT */
    FP64, ADDR64, disp12imm64, imm64, imm32zx4, 
    /* CPSDRdd */
    FP64, FP64, FP64, 
    /* CPSDRds */
    FP64, FP64, FP32, 
    /* CPSDRsd */
    FP32, FP32, FP64, 
    /* CPSDRss */
    FP32, FP32, FP32, 
    /* CPXT */
    FP128, ADDR64, disp12imm64, imm64, imm32zx4, 
    /* CPYA */
    AR32, AR32, 
    /* CR */
    GR32, GR32, 
    /* CRB */
    GR32, GR32, cond4, ADDR64, disp12imm64, 
    /* CRBAsm */
    GR32, GR32, imm32zx4, ADDR64, disp12imm64, 
    /* CRBAsmE */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CRBAsmH */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CRBAsmHE */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CRBAsmL */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CRBAsmLE */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CRBAsmLH */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CRBAsmNE */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CRBAsmNH */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CRBAsmNHE */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CRBAsmNL */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CRBAsmNLE */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CRBAsmNLH */
    GR32, GR32, ADDR64, disp12imm64, 
    /* CRDTE */
    GR128, GR128, GR64, imm32zx4, 
    /* CRDTEOpt */
    GR128, GR128, GR64, 
    /* CRJ */
    GR32, GR32, cond4, brtarget16, 
    /* CRJAsm */
    GR32, GR32, imm32zx4, brtarget16, 
    /* CRJAsmE */
    GR32, GR32, brtarget16, 
    /* CRJAsmH */
    GR32, GR32, brtarget16, 
    /* CRJAsmHE */
    GR32, GR32, brtarget16, 
    /* CRJAsmL */
    GR32, GR32, brtarget16, 
    /* CRJAsmLE */
    GR32, GR32, brtarget16, 
    /* CRJAsmLH */
    GR32, GR32, brtarget16, 
    /* CRJAsmNE */
    GR32, GR32, brtarget16, 
    /* CRJAsmNH */
    GR32, GR32, brtarget16, 
    /* CRJAsmNHE */
    GR32, GR32, brtarget16, 
    /* CRJAsmNL */
    GR32, GR32, brtarget16, 
    /* CRJAsmNLE */
    GR32, GR32, brtarget16, 
    /* CRJAsmNLH */
    GR32, GR32, brtarget16, 
    /* CRL */
    GR32, pcrel32, 
    /* CRT */
    GR32, GR32, cond4, 
    /* CRTAsm */
    GR32, GR32, imm32zx4, 
    /* CRTAsmE */
    GR32, GR32, 
    /* CRTAsmH */
    GR32, GR32, 
    /* CRTAsmHE */
    GR32, GR32, 
    /* CRTAsmL */
    GR32, GR32, 
    /* CRTAsmLE */
    GR32, GR32, 
    /* CRTAsmLH */
    GR32, GR32, 
    /* CRTAsmNE */
    GR32, GR32, 
    /* CRTAsmNH */
    GR32, GR32, 
    /* CRTAsmNHE */
    GR32, GR32, 
    /* CRTAsmNL */
    GR32, GR32, 
    /* CRTAsmNLE */
    GR32, GR32, 
    /* CRTAsmNLH */
    GR32, GR32, 
    /* CS */
    GR32, GR32, GR32, ADDR64, disp12imm64, 
    /* CSCH */
    /* CSDTR */
    GR64, FP64, imm32zx4, 
    /* CSG */
    GR64, GR64, GR64, ADDR64, disp20imm64, 
    /* CSP */
    GR128, GR128, GR64, 
    /* CSPG */
    GR128, GR128, GR64, 
    /* CSST */
    ADDR64, disp12imm64, ADDR64, disp12imm64, GR64, 
    /* CSXTR */
    GR128, FP128, imm32zx4, 
    /* CSY */
    GR32, GR32, GR32, ADDR64, disp20imm64, 
    /* CU12 */
    GR128, GR128, GR128, GR128, imm32zx4, 
    /* CU12Opt */
    GR128, GR128, GR128, GR128, 
    /* CU14 */
    GR128, GR128, GR128, GR128, imm32zx4, 
    /* CU14Opt */
    GR128, GR128, GR128, GR128, 
    /* CU21 */
    GR128, GR128, GR128, GR128, imm32zx4, 
    /* CU21Opt */
    GR128, GR128, GR128, GR128, 
    /* CU24 */
    GR128, GR128, GR128, GR128, imm32zx4, 
    /* CU24Opt */
    GR128, GR128, GR128, GR128, 
    /* CU41 */
    GR128, GR128, GR128, GR128, 
    /* CU42 */
    GR128, GR128, GR128, GR128, 
    /* CUDTR */
    GR64, FP64, 
    /* CUSE */
    GR128, GR128, GR128, GR128, 
    /* CUTFU */
    GR128, GR128, GR128, GR128, imm32zx4, 
    /* CUTFUOpt */
    GR128, GR128, GR128, GR128, 
    /* CUUTF */
    GR128, GR128, GR128, GR128, imm32zx4, 
    /* CUUTFOpt */
    GR128, GR128, GR128, GR128, 
    /* CUXTR */
    GR128, FP128, 
    /* CVB */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* CVBG */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* CVBY */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* CVD */
    GR32, ADDR64, disp12imm64, ADDR64, 
    /* CVDG */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* CVDY */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* CXBR */
    FP128, FP128, 
    /* CXFBR */
    FP128, GR32, 
    /* CXFBRA */
    FP128, imm32zx4, GR32, imm32zx4, 
    /* CXFR */
    FP128, GR32, 
    /* CXFTR */
    FP128, imm32zx4, GR32, imm32zx4, 
    /* CXGBR */
    FP128, GR64, 
    /* CXGBRA */
    FP128, imm32zx4, GR64, imm32zx4, 
    /* CXGR */
    FP128, GR64, 
    /* CXGTR */
    FP128, GR64, 
    /* CXGTRA */
    FP128, imm32zx4, GR64, imm32zx4, 
    /* CXLFBR */
    FP128, imm32zx4, GR32, imm32zx4, 
    /* CXLFTR */
    FP128, imm32zx4, GR32, imm32zx4, 
    /* CXLGBR */
    FP128, imm32zx4, GR64, imm32zx4, 
    /* CXLGTR */
    FP128, imm32zx4, GR64, imm32zx4, 
    /* CXPT */
    FP128, ADDR64, disp12imm64, imm64, imm32zx4, 
    /* CXR */
    FP128, FP128, 
    /* CXSTR */
    FP128, GR128, 
    /* CXTR */
    FP128, FP128, 
    /* CXUTR */
    FP128, GR128, 
    /* CXZT */
    FP128, ADDR64, disp12imm64, imm64, imm32zx4, 
    /* CY */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* CZDT */
    FP64, ADDR64, disp12imm64, imm64, imm32zx4, 
    /* CZXT */
    FP128, ADDR64, disp12imm64, imm64, imm32zx4, 
    /* D */
    GR128, GR128, ADDR64, disp12imm64, ADDR64, 
    /* DD */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* DDB */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* DDBR */
    FP64, FP64, FP64, 
    /* DDR */
    FP64, FP64, FP64, 
    /* DDTR */
    FP64, FP64, FP64, 
    /* DDTRA */
    FP64, FP64, FP64, imm32zx4, 
    /* DE */
    FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* DEB */
    FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* DEBR */
    FP32, FP32, FP32, 
    /* DER */
    FP32, FP32, FP32, 
    /* DFLTCC */
    GR128, GR128, GR128, GR128, GR64, 
    /* DIAG */
    GR32, GR32, ADDR64, disp12imm64, 
    /* DIDBR */
    FP64, FP64, FP64, FP64, imm32zx4, 
    /* DIEBR */
    FP32, FP32, FP32, FP32, imm32zx4, 
    /* DL */
    GR128, GR128, ADDR64, disp20imm64, ADDR64, 
    /* DLG */
    GR128, GR128, ADDR64, disp20imm64, ADDR64, 
    /* DLGR */
    GR128, GR128, GR64, 
    /* DLR */
    GR128, GR128, GR32, 
    /* DP */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, imm64, 
    /* DR */
    GR128, GR128, GR32, 
    /* DSG */
    GR128, GR128, ADDR64, disp20imm64, ADDR64, 
    /* DSGF */
    GR128, GR128, ADDR64, disp20imm64, ADDR64, 
    /* DSGFR */
    GR128, GR128, GR32, 
    /* DSGR */
    GR128, GR128, GR64, 
    /* DXBR */
    FP128, FP128, FP128, 
    /* DXR */
    FP128, FP128, FP128, 
    /* DXTR */
    FP128, FP128, FP128, 
    /* DXTRA */
    FP128, FP128, FP128, imm32zx4, 
    /* EAR */
    GR32, AR32, 
    /* ECAG */
    GR64, GR64, ADDR32, disp20imm32, 
    /* ECCTR */
    GR64, GR64, 
    /* ECPGA */
    GR32, GR64, 
    /* ECTG */
    ADDR64, disp12imm64, ADDR64, disp12imm64, GR64, 
    /* ED */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, 
    /* EDMK */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, 
    /* EEDTR */
    FP64, FP64, 
    /* EEXTR */
    FP128, FP128, 
    /* EFPC */
    GR32, 
    /* EPAIR */
    GR64, 
    /* EPAR */
    GR32, 
    /* EPCTR */
    GR64, GR64, 
    /* EPSW */
    GR32, GR32, 
    /* EREG */
    GR32, GR32, 
    /* EREGG */
    GR64, GR64, 
    /* ESAIR */
    GR64, 
    /* ESAR */
    GR32, 
    /* ESDTR */
    FP64, FP64, 
    /* ESEA */
    GR32, GR32, 
    /* ESTA */
    GR128, GR32, 
    /* ESXTR */
    FP128, FP128, 
    /* ETND */
    GR32, 
    /* EX */
    ADDR64, ADDR64, disp12imm64, ADDR64, 
    /* EXRL */
    ADDR64, pcrel32, 
    /* FIDBR */
    FP64, imm32zx4, FP64, 
    /* FIDBRA */
    FP64, imm32zx4, FP64, imm32zx4, 
    /* FIDR */
    FP64, FP64, 
    /* FIDTR */
    FP64, imm32zx4, FP64, imm32zx4, 
    /* FIEBR */
    FP32, imm32zx4, FP32, 
    /* FIEBRA */
    FP32, imm32zx4, FP32, imm32zx4, 
    /* FIER */
    FP32, FP32, 
    /* FIXBR */
    FP128, imm32zx4, FP128, 
    /* FIXBRA */
    FP128, imm32zx4, FP128, imm32zx4, 
    /* FIXR */
    FP128, FP128, 
    /* FIXTR */
    FP128, imm32zx4, FP128, imm32zx4, 
    /* FLOGR */
    GR128, GR64, 
    /* HDR */
    FP64, FP64, 
    /* HER */
    FP32, FP32, 
    /* HSCH */
    /* IAC */
    GR32, 
    /* IC */
    GR64, GR64, ADDR64, disp12imm64, ADDR64, 
    /* IC32 */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* IC32Y */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* ICM */
    GR32, GR32, imm32zx4, ADDR64, disp12imm64, 
    /* ICMH */
    GRH32, GRH32, imm32zx4, ADDR64, disp20imm64, 
    /* ICMY */
    GR32, GR32, imm32zx4, ADDR64, disp20imm64, 
    /* ICY */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* IDTE */
    GR64, GR64, GR64, imm32zx4, 
    /* IDTEOpt */
    GR64, GR64, GR64, 
    /* IEDTR */
    FP64, FP64, FP64, 
    /* IEXTR */
    FP128, FP128, FP128, 
    /* IIHF */
    GRH32, uimm32, 
    /* IIHH */
    GRH32, GRH32, imm32lh16, 
    /* IIHL */
    GRH32, GRH32, imm32ll16, 
    /* IILF */
    GR32, uimm32, 
    /* IILH */
    GR32, GR32, imm32lh16, 
    /* IILL */
    GR32, GR32, imm32ll16, 
    /* IPK */
    /* IPM */
    GR32, 
    /* IPTE */
    GR64, GR32, GR32, imm32zx4, 
    /* IPTEOpt */
    GR64, GR32, GR32, 
    /* IPTEOptOpt */
    GR64, GR32, 
    /* IRBM */
    GR64, GR64, 
    /* ISKE */
    GR32, GR32, GR64, 
    /* IVSK */
    GR32, GR32, GR64, 
    /* InsnE */
    imm64zx16, 
    /* InsnRI */
    imm64zx32, AnyReg, imm32sx16, 
    /* InsnRIE */
    imm64zx48, AnyReg, AnyReg, brtarget16, 
    /* InsnRIL */
    imm64zx48, AnyReg, brtarget32, 
    /* InsnRILU */
    imm64zx48, AnyReg, uimm32, 
    /* InsnRIS */
    imm64zx48, AnyReg, imm32sx8, imm32zx4, ADDR64, disp12imm64, 
    /* InsnRR */
    imm64zx16, AnyReg, AnyReg, 
    /* InsnRRE */
    imm64zx32, AnyReg, AnyReg, 
    /* InsnRRF */
    imm64zx32, AnyReg, AnyReg, AnyReg, imm32zx4, 
    /* InsnRRS */
    imm64zx48, AnyReg, AnyReg, imm32zx4, ADDR64, disp12imm64, 
    /* InsnRS */
    imm64zx32, AnyReg, AnyReg, ADDR64, disp12imm64, 
    /* InsnRSE */
    imm64zx48, AnyReg, AnyReg, ADDR64, disp12imm64, 
    /* InsnRSI */
    imm64zx48, AnyReg, AnyReg, brtarget16, 
    /* InsnRSY */
    imm64zx48, AnyReg, AnyReg, ADDR64, disp20imm64, 
    /* InsnRX */
    imm64zx32, AnyReg, ADDR64, disp12imm64, ADDR64, 
    /* InsnRXE */
    imm64zx48, AnyReg, ADDR64, disp12imm64, ADDR64, 
    /* InsnRXF */
    imm64zx48, AnyReg, AnyReg, ADDR64, disp12imm64, ADDR64, 
    /* InsnRXY */
    imm64zx48, AnyReg, ADDR64, disp20imm64, ADDR64, 
    /* InsnS */
    imm64zx32, ADDR64, disp12imm64, 
    /* InsnSI */
    imm64zx32, ADDR64, disp12imm64, imm32sx8, 
    /* InsnSIL */
    imm64zx48, ADDR64, disp12imm64, imm32zx16, 
    /* InsnSIY */
    imm64zx48, ADDR64, disp20imm64, imm32zx8, 
    /* InsnSS */
    imm64zx48, ADDR64, disp12imm64, GR64, ADDR64, disp12imm64, AnyReg, 
    /* InsnSSE */
    imm64zx48, ADDR64, disp12imm64, ADDR64, disp12imm64, 
    /* InsnSSF */
    imm64zx48, ADDR64, disp12imm64, ADDR64, disp12imm64, AnyReg, 
    /* InsnVRI */
    imm64zx48, VR128, VR128, imm32zx12, imm32zx4, imm32zx4, 
    /* InsnVRR */
    imm64zx48, VR128, VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* InsnVRS */
    imm64zx48, AnyReg, VR128, ADDR64, disp12imm64, imm32zx4, 
    /* InsnVRV */
    imm64zx48, VR128, ADDR64, disp12imm64, VR128, imm32zx4, 
    /* InsnVRX */
    imm64zx48, VR128, ADDR64, disp12imm64, ADDR64, imm32zx4, 
    /* InsnVSI */
    imm64zx48, VR128, ADDR64, disp12imm64, imm32zx8, 
    /* J */
    brtarget16, 
    /* JAsmE */
    brtarget16, 
    /* JAsmH */
    brtarget16, 
    /* JAsmHE */
    brtarget16, 
    /* JAsmL */
    brtarget16, 
    /* JAsmLE */
    brtarget16, 
    /* JAsmLH */
    brtarget16, 
    /* JAsmM */
    brtarget16, 
    /* JAsmNE */
    brtarget16, 
    /* JAsmNH */
    brtarget16, 
    /* JAsmNHE */
    brtarget16, 
    /* JAsmNL */
    brtarget16, 
    /* JAsmNLE */
    brtarget16, 
    /* JAsmNLH */
    brtarget16, 
    /* JAsmNM */
    brtarget16, 
    /* JAsmNO */
    brtarget16, 
    /* JAsmNP */
    brtarget16, 
    /* JAsmNZ */
    brtarget16, 
    /* JAsmO */
    brtarget16, 
    /* JAsmP */
    brtarget16, 
    /* JAsmZ */
    brtarget16, 
    /* JG */
    brtarget32, 
    /* JGAsmE */
    brtarget32, 
    /* JGAsmH */
    brtarget32, 
    /* JGAsmHE */
    brtarget32, 
    /* JGAsmL */
    brtarget32, 
    /* JGAsmLE */
    brtarget32, 
    /* JGAsmLH */
    brtarget32, 
    /* JGAsmM */
    brtarget32, 
    /* JGAsmNE */
    brtarget32, 
    /* JGAsmNH */
    brtarget32, 
    /* JGAsmNHE */
    brtarget32, 
    /* JGAsmNL */
    brtarget32, 
    /* JGAsmNLE */
    brtarget32, 
    /* JGAsmNLH */
    brtarget32, 
    /* JGAsmNM */
    brtarget32, 
    /* JGAsmNO */
    brtarget32, 
    /* JGAsmNP */
    brtarget32, 
    /* JGAsmNZ */
    brtarget32, 
    /* JGAsmO */
    brtarget32, 
    /* JGAsmP */
    brtarget32, 
    /* JGAsmZ */
    brtarget32, 
    /* KDB */
    FP64, ADDR64, disp12imm64, ADDR64, 
    /* KDBR */
    FP64, FP64, 
    /* KDSA */
    GR128, GR64, GR128, 
    /* KDTR */
    FP64, FP64, 
    /* KEB */
    FP32, ADDR64, disp12imm64, ADDR64, 
    /* KEBR */
    FP32, FP32, 
    /* KIMD */
    GR128, GR64, GR128, 
    /* KLMD */
    GR128, GR64, GR128, 
    /* KM */
    GR128, GR128, GR128, GR128, 
    /* KMA */
    GR128, GR128, GR128, GR128, GR128, GR128, 
    /* KMAC */
    GR128, GR64, GR128, 
    /* KMC */
    GR128, GR128, GR128, GR128, 
    /* KMCTR */
    GR128, GR128, GR128, GR128, GR128, GR128, 
    /* KMF */
    GR128, GR128, GR128, GR128, 
    /* KMO */
    GR128, GR128, GR128, GR128, 
    /* KXBR */
    FP128, FP128, 
    /* KXTR */
    FP128, FP128, 
    /* L */
    GR32, ADDR64, disp12imm64, ADDR64, 
    /* LA */
    GR64, ADDR64, disp12imm64, ADDR64, 
    /* LAA */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LAAG */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LAAL */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LAALG */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LAE */
    GR64, ADDR64, disp12imm64, ADDR64, 
    /* LAEY */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LAM */
    AR32, AR32, ADDR64, disp12imm64, 
    /* LAMY */
    AR32, AR32, ADDR64, disp20imm64, 
    /* LAN */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LANG */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LAO */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LAOG */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LARL */
    GR64, pcrel32, 
    /* LASP */
    ADDR64, disp12imm64, ADDR64, disp12imm64, 
    /* LAT */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* LAX */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LAXG */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LAY */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LB */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* LBEAR */
    ADDR64, disp12imm64, 
    /* LBH */
    GRH32, ADDR64, disp20imm64, ADDR64, 
    /* LBR */
    GR32, GR32, 
    /* LCBB */
    GR32, ADDR64, disp12imm64, ADDR64, imm32zx4, 
    /* LCCTL */
    ADDR64, disp12imm64, 
    /* LCDBR */
    FP64, FP64, 
    /* LCDFR */
    FP64, FP64, 
    /* LCDFR_32 */
    FP32, FP32, 
    /* LCDR */
    FP64, FP64, 
    /* LCEBR */
    FP32, FP32, 
    /* LCER */
    FP32, FP32, 
    /* LCGFR */
    GR64, GR32, 
    /* LCGR */
    GR64, GR64, 
    /* LCR */
    GR32, GR32, 
    /* LCTL */
    CR64, CR64, ADDR64, disp12imm64, 
    /* LCTLG */
    CR64, CR64, ADDR64, disp20imm64, 
    /* LCXBR */
    FP128, FP128, 
    /* LCXR */
    FP128, FP128, 
    /* LD */
    FP64, ADDR64, disp12imm64, ADDR64, 
    /* LDE */
    FP64, ADDR64, disp12imm64, ADDR64, 
    /* LDE32 */
    FP32, ADDR64, disp12imm64, ADDR64, 
    /* LDEB */
    FP64, ADDR64, disp12imm64, ADDR64, 
    /* LDEBR */
    FP64, FP32, 
    /* LDER */
    FP64, FP32, 
    /* LDETR */
    FP64, FP32, imm32zx4, 
    /* LDGR */
    FP64, GR64, 
    /* LDR */
    FP64, FP64, 
    /* LDR32 */
    FP32, FP32, 
    /* LDXBR */
    FP128, FP128, 
    /* LDXBRA */
    FP128, imm32zx4, FP128, imm32zx4, 
    /* LDXR */
    FP64, FP128, 
    /* LDXTR */
    FP128, imm32zx4, FP128, imm32zx4, 
    /* LDY */
    FP64, ADDR64, disp20imm64, ADDR64, 
    /* LE */
    FP32, ADDR64, disp12imm64, ADDR64, 
    /* LEDBR */
    FP32, FP64, 
    /* LEDBRA */
    FP32, imm32zx4, FP64, imm32zx4, 
    /* LEDR */
    FP32, FP64, 
    /* LEDTR */
    FP32, imm32zx4, FP64, imm32zx4, 
    /* LER */
    FP32, FP32, 
    /* LEXBR */
    FP128, FP128, 
    /* LEXBRA */
    FP128, imm32zx4, FP128, imm32zx4, 
    /* LEXR */
    FP32, FP128, 
    /* LEY */
    FP32, ADDR64, disp20imm64, ADDR64, 
    /* LFAS */
    ADDR64, disp12imm64, 
    /* LFH */
    GRH32, ADDR64, disp20imm64, ADDR64, 
    /* LFHAT */
    GRH32, ADDR64, disp20imm64, ADDR64, 
    /* LFPC */
    ADDR64, disp12imm64, 
    /* LG */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LGAT */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LGB */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LGBR */
    GR64, GR64, 
    /* LGDR */
    GR64, FP64, 
    /* LGF */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LGFI */
    GR64, imm64sx32, 
    /* LGFR */
    GR64, GR32, 
    /* LGFRL */
    GR64, pcrel32, 
    /* LGG */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LGH */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LGHI */
    GR64, imm64sx16, 
    /* LGHR */
    GR64, GR64, 
    /* LGHRL */
    GR64, pcrel32, 
    /* LGR */
    GR64, GR64, 
    /* LGRL */
    GR64, pcrel32, 
    /* LGSC */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LH */
    GR32, ADDR64, disp12imm64, ADDR64, 
    /* LHH */
    GRH32, ADDR64, disp20imm64, ADDR64, 
    /* LHI */
    GR32, imm32sx16, 
    /* LHR */
    GR32, GR32, 
    /* LHRL */
    GR32, pcrel32, 
    /* LHY */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* LLC */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* LLCH */
    GRH32, ADDR64, disp20imm64, ADDR64, 
    /* LLCR */
    GR32, GR32, 
    /* LLGC */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LLGCR */
    GR64, GR64, 
    /* LLGF */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LLGFAT */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LLGFR */
    GR64, GR32, 
    /* LLGFRL */
    GR64, pcrel32, 
    /* LLGFSG */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LLGH */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LLGHR */
    GR64, GR64, 
    /* LLGHRL */
    GR64, pcrel32, 
    /* LLGT */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LLGTAT */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LLGTR */
    GR64, GR64, 
    /* LLH */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* LLHH */
    GRH32, ADDR64, disp20imm64, ADDR64, 
    /* LLHR */
    GR32, GR32, 
    /* LLHRL */
    GR32, pcrel32, 
    /* LLIHF */
    GR64, imm64hf32, 
    /* LLIHH */
    GR64, imm64hh16, 
    /* LLIHL */
    GR64, imm64hl16, 
    /* LLILF */
    GR64, imm64lf32, 
    /* LLILH */
    GR64, imm64lh16, 
    /* LLILL */
    GR64, imm64ll16, 
    /* LLZRGF */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LM */
    GR32, GR32, ADDR64, disp12imm64, 
    /* LMD */
    GR64, GR64, ADDR64, disp12imm64, ADDR64, disp12imm64, 
    /* LMG */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LMH */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LMY */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LNDBR */
    FP64, FP64, 
    /* LNDFR */
    FP64, FP64, 
    /* LNDFR_32 */
    FP32, FP32, 
    /* LNDR */
    FP64, FP64, 
    /* LNEBR */
    FP32, FP32, 
    /* LNER */
    FP32, FP32, 
    /* LNGFR */
    GR64, GR32, 
    /* LNGR */
    GR64, GR64, 
    /* LNR */
    GR32, GR32, 
    /* LNXBR */
    FP128, FP128, 
    /* LNXR */
    FP128, FP128, 
    /* LOC */
    GR32, GR32, ADDR64, disp20imm64, cond4, cond4, 
    /* LOCAsm */
    GR32, GR32, ADDR64, disp20imm64, imm32zx4, 
    /* LOCAsmE */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmH */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmHE */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmL */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmLE */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmLH */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmM */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmNE */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmNH */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmNHE */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmNL */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmNLE */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmNLH */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmNM */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmNO */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmNP */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmNZ */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmO */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmP */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCAsmZ */
    GR32, GR32, ADDR64, disp20imm64, 
    /* LOCFH */
    GRH32, GRH32, ADDR64, disp20imm64, cond4, cond4, 
    /* LOCFHAsm */
    GRH32, GRH32, ADDR64, disp20imm64, imm32zx4, 
    /* LOCFHAsmE */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmH */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmHE */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmL */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmLE */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmLH */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmM */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmNE */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmNH */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmNHE */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmNL */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmNLE */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmNLH */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmNM */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmNO */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmNP */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmNZ */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmO */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmP */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHAsmZ */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* LOCFHR */
    GRH32, GRH32, GRH32, cond4, cond4, 
    /* LOCFHRAsm */
    GRH32, GRH32, GRH32, imm32zx4, 
    /* LOCFHRAsmE */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmH */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmHE */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmL */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmLE */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmLH */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmM */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmNE */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmNH */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmNHE */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmNL */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmNLE */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmNLH */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmNM */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmNO */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmNP */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmNZ */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmO */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmP */
    GRH32, GRH32, GRH32, 
    /* LOCFHRAsmZ */
    GRH32, GRH32, GRH32, 
    /* LOCG */
    GR64, GR64, ADDR64, disp20imm64, cond4, cond4, 
    /* LOCGAsm */
    GR64, GR64, ADDR64, disp20imm64, imm32zx4, 
    /* LOCGAsmE */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmH */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmHE */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmL */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmLE */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmLH */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmM */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmNE */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmNH */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmNHE */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmNL */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmNLE */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmNLH */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmNM */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmNO */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmNP */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmNZ */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmO */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmP */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGAsmZ */
    GR64, GR64, ADDR64, disp20imm64, 
    /* LOCGHI */
    GR64, GR64, imm64sx16, cond4, cond4, 
    /* LOCGHIAsm */
    GR64, GR64, imm64sx16, imm32zx4, 
    /* LOCGHIAsmE */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmH */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmHE */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmL */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmLE */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmLH */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmM */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmNE */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmNH */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmNHE */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmNL */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmNLE */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmNLH */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmNM */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmNO */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmNP */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmNZ */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmO */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmP */
    GR64, GR64, imm64sx16, 
    /* LOCGHIAsmZ */
    GR64, GR64, imm64sx16, 
    /* LOCGR */
    GR64, GR64, GR64, cond4, cond4, 
    /* LOCGRAsm */
    GR64, GR64, GR64, imm32zx4, 
    /* LOCGRAsmE */
    GR64, GR64, GR64, 
    /* LOCGRAsmH */
    GR64, GR64, GR64, 
    /* LOCGRAsmHE */
    GR64, GR64, GR64, 
    /* LOCGRAsmL */
    GR64, GR64, GR64, 
    /* LOCGRAsmLE */
    GR64, GR64, GR64, 
    /* LOCGRAsmLH */
    GR64, GR64, GR64, 
    /* LOCGRAsmM */
    GR64, GR64, GR64, 
    /* LOCGRAsmNE */
    GR64, GR64, GR64, 
    /* LOCGRAsmNH */
    GR64, GR64, GR64, 
    /* LOCGRAsmNHE */
    GR64, GR64, GR64, 
    /* LOCGRAsmNL */
    GR64, GR64, GR64, 
    /* LOCGRAsmNLE */
    GR64, GR64, GR64, 
    /* LOCGRAsmNLH */
    GR64, GR64, GR64, 
    /* LOCGRAsmNM */
    GR64, GR64, GR64, 
    /* LOCGRAsmNO */
    GR64, GR64, GR64, 
    /* LOCGRAsmNP */
    GR64, GR64, GR64, 
    /* LOCGRAsmNZ */
    GR64, GR64, GR64, 
    /* LOCGRAsmO */
    GR64, GR64, GR64, 
    /* LOCGRAsmP */
    GR64, GR64, GR64, 
    /* LOCGRAsmZ */
    GR64, GR64, GR64, 
    /* LOCHHI */
    GRH32, GRH32, imm32sx16, cond4, cond4, 
    /* LOCHHIAsm */
    GRH32, GRH32, imm32sx16, imm32zx4, 
    /* LOCHHIAsmE */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmH */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmHE */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmL */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmLE */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmLH */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmM */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmNE */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmNH */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmNHE */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmNL */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmNLE */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmNLH */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmNM */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmNO */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmNP */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmNZ */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmO */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmP */
    GRH32, GRH32, imm32sx16, 
    /* LOCHHIAsmZ */
    GRH32, GRH32, imm32sx16, 
    /* LOCHI */
    GR32, GR32, imm32sx16, cond4, cond4, 
    /* LOCHIAsm */
    GR32, GR32, imm32sx16, imm32zx4, 
    /* LOCHIAsmE */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmH */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmHE */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmL */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmLE */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmLH */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmM */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmNE */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmNH */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmNHE */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmNL */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmNLE */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmNLH */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmNM */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmNO */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmNP */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmNZ */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmO */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmP */
    GR32, GR32, imm32sx16, 
    /* LOCHIAsmZ */
    GR32, GR32, imm32sx16, 
    /* LOCR */
    GR32, GR32, GR32, cond4, cond4, 
    /* LOCRAsm */
    GR32, GR32, GR32, imm32zx4, 
    /* LOCRAsmE */
    GR32, GR32, GR32, 
    /* LOCRAsmH */
    GR32, GR32, GR32, 
    /* LOCRAsmHE */
    GR32, GR32, GR32, 
    /* LOCRAsmL */
    GR32, GR32, GR32, 
    /* LOCRAsmLE */
    GR32, GR32, GR32, 
    /* LOCRAsmLH */
    GR32, GR32, GR32, 
    /* LOCRAsmM */
    GR32, GR32, GR32, 
    /* LOCRAsmNE */
    GR32, GR32, GR32, 
    /* LOCRAsmNH */
    GR32, GR32, GR32, 
    /* LOCRAsmNHE */
    GR32, GR32, GR32, 
    /* LOCRAsmNL */
    GR32, GR32, GR32, 
    /* LOCRAsmNLE */
    GR32, GR32, GR32, 
    /* LOCRAsmNLH */
    GR32, GR32, GR32, 
    /* LOCRAsmNM */
    GR32, GR32, GR32, 
    /* LOCRAsmNO */
    GR32, GR32, GR32, 
    /* LOCRAsmNP */
    GR32, GR32, GR32, 
    /* LOCRAsmNZ */
    GR32, GR32, GR32, 
    /* LOCRAsmO */
    GR32, GR32, GR32, 
    /* LOCRAsmP */
    GR32, GR32, GR32, 
    /* LOCRAsmZ */
    GR32, GR32, GR32, 
    /* LPCTL */
    ADDR64, disp12imm64, 
    /* LPD */
    GR128, ADDR64, disp12imm64, ADDR64, disp12imm64, 
    /* LPDBR */
    FP64, FP64, 
    /* LPDFR */
    FP64, FP64, 
    /* LPDFR_32 */
    FP32, FP32, 
    /* LPDG */
    GR128, ADDR64, disp12imm64, ADDR64, disp12imm64, 
    /* LPDR */
    FP64, FP64, 
    /* LPEBR */
    FP32, FP32, 
    /* LPER */
    FP32, FP32, 
    /* LPGFR */
    GR64, GR32, 
    /* LPGR */
    GR64, GR64, 
    /* LPP */
    ADDR64, disp12imm64, 
    /* LPQ */
    GR128, ADDR64, disp20imm64, ADDR64, 
    /* LPR */
    GR32, GR32, 
    /* LPSW */
    ADDR64, disp12imm64, 
    /* LPSWE */
    ADDR64, disp12imm64, 
    /* LPSWEY */
    ADDR64, disp20imm64, 
    /* LPTEA */
    GR64, GR64, GR64, GR64, imm32zx4, 
    /* LPXBR */
    FP128, FP128, 
    /* LPXR */
    FP128, FP128, 
    /* LR */
    GR32, GR32, 
    /* LRA */
    GR64, ADDR64, disp12imm64, ADDR64, 
    /* LRAG */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LRAY */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LRDR */
    FP64, FP128, 
    /* LRER */
    FP32, FP64, 
    /* LRL */
    GR32, pcrel32, 
    /* LRV */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* LRVG */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LRVGR */
    GR64, GR64, 
    /* LRVH */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* LRVR */
    GR32, GR32, 
    /* LSCTL */
    ADDR64, disp12imm64, 
    /* LT */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* LTDBR */
    FP64, FP64, 
    /* LTDBRCompare */
    FP64, FP64, 
    /* LTDR */
    FP64, FP64, 
    /* LTDTR */
    FP64, FP64, 
    /* LTEBR */
    FP32, FP32, 
    /* LTEBRCompare */
    FP32, FP32, 
    /* LTER */
    FP32, FP32, 
    /* LTG */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LTGF */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LTGFR */
    GR64, GR32, 
    /* LTGR */
    GR64, GR64, 
    /* LTR */
    GR32, GR32, 
    /* LTXBR */
    FP128, FP128, 
    /* LTXBRCompare */
    FP128, FP128, 
    /* LTXR */
    FP128, FP128, 
    /* LTXTR */
    FP128, FP128, 
    /* LURA */
    GR32, GR64, 
    /* LURAG */
    GR64, GR64, 
    /* LXD */
    FP128, ADDR64, disp12imm64, ADDR64, 
    /* LXDB */
    FP128, ADDR64, disp12imm64, ADDR64, 
    /* LXDBR */
    FP128, FP64, 
    /* LXDR */
    FP128, FP64, 
    /* LXDTR */
    FP128, FP64, imm32zx4, 
    /* LXE */
    FP128, ADDR64, disp12imm64, ADDR64, 
    /* LXEB */
    FP128, ADDR64, disp12imm64, ADDR64, 
    /* LXEBR */
    FP128, FP32, 
    /* LXER */
    FP128, FP32, 
    /* LXR */
    FP128, FP128, 
    /* LY */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* LZDR */
    FP64, 
    /* LZER */
    FP32, 
    /* LZRF */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* LZRG */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* LZXR */
    FP128, 
    /* M */
    GR128, GR128, ADDR64, disp12imm64, ADDR64, 
    /* MAD */
    FP64, FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MADB */
    FP64, FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MADBR */
    FP64, FP64, FP64, FP64, 
    /* MADR */
    FP64, FP64, FP64, FP64, 
    /* MAE */
    FP32, FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* MAEB */
    FP32, FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* MAEBR */
    FP32, FP32, FP32, FP32, 
    /* MAER */
    FP32, FP32, FP32, FP32, 
    /* MAY */
    FP128, FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MAYH */
    FP64, FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MAYHR */
    FP64, FP64, FP64, FP64, 
    /* MAYL */
    FP64, FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MAYLR */
    FP64, FP64, FP64, FP64, 
    /* MAYR */
    FP128, FP64, FP64, FP64, 
    /* MC */
    ADDR64, disp12imm64, imm32zx8, 
    /* MD */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MDB */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MDBR */
    FP64, FP64, FP64, 
    /* MDE */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MDEB */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MDEBR */
    FP64, FP64, FP32, 
    /* MDER */
    FP64, FP64, FP32, 
    /* MDR */
    FP64, FP64, FP64, 
    /* MDTR */
    FP64, FP64, FP64, 
    /* MDTRA */
    FP64, FP64, FP64, imm32zx4, 
    /* ME */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MEE */
    FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* MEEB */
    FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* MEEBR */
    FP32, FP32, FP32, 
    /* MEER */
    FP32, FP32, FP32, 
    /* MER */
    FP64, FP64, FP32, 
    /* MFY */
    GR128, GR128, ADDR64, disp20imm64, ADDR64, 
    /* MG */
    GR128, GR128, ADDR64, disp20imm64, ADDR64, 
    /* MGH */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* MGHI */
    GR64, GR64, imm64sx16, 
    /* MGRK */
    GR128, GR64, GR64, 
    /* MH */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* MHI */
    GR32, GR32, imm32sx16, 
    /* MHY */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* ML */
    GR128, GR128, ADDR64, disp20imm64, ADDR64, 
    /* MLG */
    GR128, GR128, ADDR64, disp20imm64, ADDR64, 
    /* MLGR */
    GR128, GR128, GR64, 
    /* MLR */
    GR128, GR128, GR32, 
    /* MP */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, imm64, 
    /* MR */
    GR128, GR128, GR32, 
    /* MS */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* MSC */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* MSCH */
    ADDR64, disp12imm64, 
    /* MSD */
    FP64, FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MSDB */
    FP64, FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MSDBR */
    FP64, FP64, FP64, FP64, 
    /* MSDR */
    FP64, FP64, FP64, FP64, 
    /* MSE */
    FP32, FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* MSEB */
    FP32, FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* MSEBR */
    FP32, FP32, FP32, FP32, 
    /* MSER */
    FP32, FP32, FP32, FP32, 
    /* MSFI */
    GR32, GR32, simm32, 
    /* MSG */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* MSGC */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* MSGF */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* MSGFI */
    GR64, GR64, imm64sx32, 
    /* MSGFR */
    GR64, GR64, GR32, 
    /* MSGR */
    GR64, GR64, GR64, 
    /* MSGRKC */
    GR64, GR64, GR64, 
    /* MSR */
    GR32, GR32, GR32, 
    /* MSRKC */
    GR32, GR32, GR32, 
    /* MSTA */
    GR128, 
    /* MSY */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* MVC */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, 
    /* MVCDK */
    ADDR64, disp12imm64, ADDR64, disp12imm64, 
    /* MVCIN */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, 
    /* MVCK */
    ADDR64, disp12imm64, GR64, ADDR64, disp12imm64, GR64, 
    /* MVCL */
    GR128, GR128, GR128, GR128, 
    /* MVCLE */
    GR128, GR128, GR128, GR128, ADDR32, disp12imm32, 
    /* MVCLU */
    GR128, GR128, GR128, GR128, ADDR32, disp20imm32, 
    /* MVCOS */
    ADDR64, disp12imm64, ADDR64, disp12imm64, GR64, 
    /* MVCP */
    ADDR64, disp12imm64, GR64, ADDR64, disp12imm64, GR64, 
    /* MVCRL */
    ADDR64, disp12imm64, ADDR64, disp12imm64, 
    /* MVCS */
    ADDR64, disp12imm64, GR64, ADDR64, disp12imm64, GR64, 
    /* MVCSK */
    ADDR64, disp12imm64, ADDR64, disp12imm64, 
    /* MVGHI */
    ADDR64, disp12imm64, imm64sx16, 
    /* MVHHI */
    ADDR64, disp12imm64, imm32sx16trunc, 
    /* MVHI */
    ADDR64, disp12imm64, imm32sx16, 
    /* MVI */
    ADDR64, disp12imm64, imm32zx8trunc, 
    /* MVIY */
    ADDR64, disp20imm64, imm32zx8trunc, 
    /* MVN */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, 
    /* MVO */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, imm64, 
    /* MVPG */
    GR64, GR64, 
    /* MVST */
    GR64, GR64, GR64, GR64, 
    /* MVZ */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, 
    /* MXBR */
    FP128, FP128, FP128, 
    /* MXD */
    FP128, FP128, ADDR64, disp12imm64, ADDR64, 
    /* MXDB */
    FP128, FP128, ADDR64, disp12imm64, ADDR64, 
    /* MXDBR */
    FP128, FP128, FP64, 
    /* MXDR */
    FP128, FP128, FP64, 
    /* MXR */
    FP128, FP128, FP128, 
    /* MXTR */
    FP128, FP128, FP128, 
    /* MXTRA */
    FP128, FP128, FP128, imm32zx4, 
    /* MY */
    FP128, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MYH */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MYHR */
    FP64, FP64, FP64, 
    /* MYL */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* MYLR */
    FP64, FP64, FP64, 
    /* MYR */
    FP128, FP64, FP64, 
    /* N */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* NC */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, 
    /* NCGRK */
    GR64, GR64, GR64, 
    /* NCRK */
    GR32, GR32, GR32, 
    /* NG */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* NGR */
    GR64, GR64, GR64, 
    /* NGRK */
    GR64, GR64, GR64, 
    /* NI */
    ADDR64, disp12imm64, imm32zx8, 
    /* NIAI */
    imm32zx4, imm32zx4, 
    /* NIHF */
    GRH32, GRH32, uimm32, 
    /* NIHH */
    GRH32, GRH32, imm32lh16c, 
    /* NIHL */
    GRH32, GRH32, imm32ll16c, 
    /* NILF */
    GR32, GR32, uimm32, 
    /* NILH */
    GR32, GR32, imm32lh16c, 
    /* NILL */
    GR32, GR32, imm32ll16c, 
    /* NIY */
    ADDR64, disp20imm64, imm32zx8, 
    /* NNGRK */
    GR64, GR64, GR64, 
    /* NNPA */
    /* NNRK */
    GR32, GR32, GR32, 
    /* NOGRK */
    GR64, GR64, GR64, 
    /* NOP_bare */
    /* NORK */
    GR32, GR32, GR32, 
    /* NR */
    GR32, GR32, GR32, 
    /* NRK */
    GR32, GR32, GR32, 
    /* NTSTG */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* NXGRK */
    GR64, GR64, GR64, 
    /* NXRK */
    GR32, GR32, GR32, 
    /* NY */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* O */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* OC */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, 
    /* OCGRK */
    GR64, GR64, GR64, 
    /* OCRK */
    GR32, GR32, GR32, 
    /* OG */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* OGR */
    GR64, GR64, GR64, 
    /* OGRK */
    GR64, GR64, GR64, 
    /* OI */
    ADDR64, disp12imm64, imm32zx8, 
    /* OIHF */
    GRH32, GRH32, uimm32, 
    /* OIHH */
    GRH32, GRH32, imm32lh16, 
    /* OIHL */
    GRH32, GRH32, imm32ll16, 
    /* OILF */
    GR32, GR32, uimm32, 
    /* OILH */
    GR32, GR32, imm32lh16, 
    /* OILL */
    GR32, GR32, imm32ll16, 
    /* OIY */
    ADDR64, disp20imm64, imm32zx8, 
    /* OR */
    GR32, GR32, GR32, 
    /* ORK */
    GR32, GR32, GR32, 
    /* OY */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* PACK */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, imm64, 
    /* PALB */
    /* PC */
    ADDR64, disp12imm64, 
    /* PCC */
    /* PCKMO */
    /* PFD */
    imm32zx4, ADDR64, disp20imm64, ADDR64, 
    /* PFDRL */
    imm32zx4_timm, pcrel32, 
    /* PFMF */
    GR64, GR32, GR64, 
    /* PFPO */
    /* PGIN */
    GR64, GR64, 
    /* PGOUT */
    GR64, GR64, 
    /* PKA */
    ADDR64, disp12imm64, ADDR64, disp12imm64, imm64, 
    /* PKU */
    ADDR64, disp12imm64, ADDR64, disp12imm64, imm64, 
    /* PLO */
    GR64, ADDR64, disp12imm64, GR64, ADDR64, disp12imm64, 
    /* POPCNT */
    GR64, GR64, 
    /* POPCNTOpt */
    GR64, GR64, imm32zx4, 
    /* PPA */
    GR64, GR64, imm32zx4, 
    /* PPNO */
    GR128, GR128, GR128, GR128, 
    /* PR */
    /* PRNO */
    GR128, GR128, GR128, GR128, 
    /* PT */
    GR32, GR64, 
    /* PTF */
    GR64, GR64, 
    /* PTFF */
    /* PTI */
    GR64, GR64, 
    /* PTLB */
    /* QADTR */
    FP64, FP64, FP64, FP64, imm32zx4, 
    /* QAXTR */
    FP128, FP128, FP128, FP128, imm32zx4, 
    /* QCTRI */
    ADDR64, disp12imm64, 
    /* QPACI */
    ADDR64, disp12imm64, 
    /* QSI */
    ADDR64, disp12imm64, 
    /* RCHP */
    /* RDP */
    GR64, GR64, GR64, imm32zx4, 
    /* RDPOpt */
    GR64, GR64, GR64, 
    /* RISBG */
    GR64, GR64, GR64, imm32zx8, imm32zx8, imm32zx6, 
    /* RISBG32 */
    GR32, GR32, GR32, imm32zx8, imm32zx8, imm32zx6, 
    /* RISBGN */
    GR64, GR64, GR64, imm32zx8, imm32zx8, imm32zx6, 
    /* RISBHG */
    GRH32, GRH32, GR64, imm32zx8, imm32zx8, imm32zx6, 
    /* RISBLG */
    GR32, GR32, GR64, imm32zx8, imm32zx8, imm32zx6, 
    /* RLL */
    GR32, GR32, ADDR32, disp20imm32, 
    /* RLLG */
    GR64, GR64, ADDR32, disp20imm32, 
    /* RNSBG */
    GR64, GR64, GR64, imm32zx8, imm32zx8, imm32zx6, 
    /* ROSBG */
    GR64, GR64, GR64, imm32zx8, imm32zx8, imm32zx6, 
    /* RP */
    ADDR64, disp12imm64, 
    /* RRBE */
    GR32, GR64, 
    /* RRBM */
    GR64, GR64, 
    /* RRDTR */
    FP64, FP64, FP64, FP64, imm32zx4, 
    /* RRXTR */
    FP128, FP128, FP128, FP128, imm32zx4, 
    /* RSCH */
    /* RXSBG */
    GR64, GR64, GR64, imm32zx8, imm32zx8, imm32zx6, 
    /* S */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* SAC */
    ADDR64, disp12imm64, 
    /* SACF */
    ADDR64, disp12imm64, 
    /* SAL */
    /* SAM24 */
    /* SAM31 */
    /* SAM64 */
    /* SAR */
    AR32, GR32, 
    /* SCCTR */
    GR64, GR64, 
    /* SCHM */
    /* SCK */
    ADDR64, disp12imm64, 
    /* SCKC */
    ADDR64, disp12imm64, 
    /* SCKPF */
    /* SD */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* SDB */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* SDBR */
    FP64, FP64, FP64, 
    /* SDR */
    FP64, FP64, FP64, 
    /* SDTR */
    FP64, FP64, FP64, 
    /* SDTRA */
    FP64, FP64, FP64, imm32zx4, 
    /* SE */
    FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* SEB */
    FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* SEBR */
    FP32, FP32, FP32, 
    /* SELFHR */
    GRH32, GRH32, GRH32, cond4, cond4, 
    /* SELFHRAsm */
    GRH32, GRH32, GRH32, imm32zx4, 
    /* SELFHRAsmE */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmH */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmHE */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmL */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmLE */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmLH */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmM */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmNE */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmNH */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmNHE */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmNL */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmNLE */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmNLH */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmNM */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmNO */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmNP */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmNZ */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmO */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmP */
    GRH32, GRH32, GRH32, 
    /* SELFHRAsmZ */
    GRH32, GRH32, GRH32, 
    /* SELGR */
    GR64, GR64, GR64, cond4, cond4, 
    /* SELGRAsm */
    GR64, GR64, GR64, imm32zx4, 
    /* SELGRAsmE */
    GR64, GR64, GR64, 
    /* SELGRAsmH */
    GR64, GR64, GR64, 
    /* SELGRAsmHE */
    GR64, GR64, GR64, 
    /* SELGRAsmL */
    GR64, GR64, GR64, 
    /* SELGRAsmLE */
    GR64, GR64, GR64, 
    /* SELGRAsmLH */
    GR64, GR64, GR64, 
    /* SELGRAsmM */
    GR64, GR64, GR64, 
    /* SELGRAsmNE */
    GR64, GR64, GR64, 
    /* SELGRAsmNH */
    GR64, GR64, GR64, 
    /* SELGRAsmNHE */
    GR64, GR64, GR64, 
    /* SELGRAsmNL */
    GR64, GR64, GR64, 
    /* SELGRAsmNLE */
    GR64, GR64, GR64, 
    /* SELGRAsmNLH */
    GR64, GR64, GR64, 
    /* SELGRAsmNM */
    GR64, GR64, GR64, 
    /* SELGRAsmNO */
    GR64, GR64, GR64, 
    /* SELGRAsmNP */
    GR64, GR64, GR64, 
    /* SELGRAsmNZ */
    GR64, GR64, GR64, 
    /* SELGRAsmO */
    GR64, GR64, GR64, 
    /* SELGRAsmP */
    GR64, GR64, GR64, 
    /* SELGRAsmZ */
    GR64, GR64, GR64, 
    /* SELR */
    GR32, GR32, GR32, cond4, cond4, 
    /* SELRAsm */
    GR32, GR32, GR32, imm32zx4, 
    /* SELRAsmE */
    GR32, GR32, GR32, 
    /* SELRAsmH */
    GR32, GR32, GR32, 
    /* SELRAsmHE */
    GR32, GR32, GR32, 
    /* SELRAsmL */
    GR32, GR32, GR32, 
    /* SELRAsmLE */
    GR32, GR32, GR32, 
    /* SELRAsmLH */
    GR32, GR32, GR32, 
    /* SELRAsmM */
    GR32, GR32, GR32, 
    /* SELRAsmNE */
    GR32, GR32, GR32, 
    /* SELRAsmNH */
    GR32, GR32, GR32, 
    /* SELRAsmNHE */
    GR32, GR32, GR32, 
    /* SELRAsmNL */
    GR32, GR32, GR32, 
    /* SELRAsmNLE */
    GR32, GR32, GR32, 
    /* SELRAsmNLH */
    GR32, GR32, GR32, 
    /* SELRAsmNM */
    GR32, GR32, GR32, 
    /* SELRAsmNO */
    GR32, GR32, GR32, 
    /* SELRAsmNP */
    GR32, GR32, GR32, 
    /* SELRAsmNZ */
    GR32, GR32, GR32, 
    /* SELRAsmO */
    GR32, GR32, GR32, 
    /* SELRAsmP */
    GR32, GR32, GR32, 
    /* SELRAsmZ */
    GR32, GR32, GR32, 
    /* SER */
    FP32, FP32, FP32, 
    /* SFASR */
    GR32, 
    /* SFPC */
    GR32, 
    /* SG */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* SGF */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* SGFR */
    GR64, GR64, GR32, 
    /* SGH */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* SGR */
    GR64, GR64, GR64, 
    /* SGRK */
    GR64, GR64, GR64, 
    /* SH */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* SHHHR */
    GRH32, GRH32, GRH32, 
    /* SHHLR */
    GRH32, GRH32, GR32, 
    /* SHY */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* SIE */
    ADDR64, disp12imm64, 
    /* SIGA */
    ADDR64, disp12imm64, 
    /* SIGP */
    GR64, GR64, ADDR64, disp12imm64, 
    /* SL */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* SLA */
    GR32, GR32, ADDR32, disp12imm32, 
    /* SLAG */
    GR64, GR64, ADDR32, disp20imm32, 
    /* SLAK */
    GR32, GR32, ADDR32, disp20imm32, 
    /* SLB */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* SLBG */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* SLBGR */
    GR64, GR64, GR64, 
    /* SLBR */
    GR32, GR32, GR32, 
    /* SLDA */
    GR128, GR128, ADDR32, disp12imm32, 
    /* SLDL */
    GR128, GR128, ADDR32, disp12imm32, 
    /* SLDT */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* SLFI */
    GR32, GR32, uimm32, 
    /* SLG */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* SLGF */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* SLGFI */
    GR64, GR64, imm64zx32, 
    /* SLGFR */
    GR64, GR64, GR32, 
    /* SLGR */
    GR64, GR64, GR64, 
    /* SLGRK */
    GR64, GR64, GR64, 
    /* SLHHHR */
    GRH32, GRH32, GRH32, 
    /* SLHHLR */
    GRH32, GRH32, GR32, 
    /* SLL */
    GR32, GR32, ADDR32, disp12imm32, 
    /* SLLG */
    GR64, GR64, ADDR32, disp20imm32, 
    /* SLLK */
    GR32, GR32, ADDR32, disp20imm32, 
    /* SLR */
    GR32, GR32, GR32, 
    /* SLRK */
    GR32, GR32, GR32, 
    /* SLXT */
    FP128, FP128, ADDR64, disp12imm64, ADDR64, 
    /* SLY */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* SORTL */
    GR128, GR128, GR128, GR128, 
    /* SP */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, imm64, 
    /* SPCTR */
    GR64, GR64, 
    /* SPKA */
    ADDR64, disp12imm64, 
    /* SPM */
    GR32, 
    /* SPT */
    ADDR64, disp12imm64, 
    /* SPX */
    ADDR64, disp12imm64, 
    /* SQD */
    FP64, ADDR64, disp12imm64, ADDR64, 
    /* SQDB */
    FP64, ADDR64, disp12imm64, ADDR64, 
    /* SQDBR */
    FP64, FP64, 
    /* SQDR */
    FP64, FP64, 
    /* SQE */
    FP32, ADDR64, disp12imm64, ADDR64, 
    /* SQEB */
    FP32, ADDR64, disp12imm64, ADDR64, 
    /* SQEBR */
    FP32, FP32, 
    /* SQER */
    FP32, FP32, 
    /* SQXBR */
    FP128, FP128, 
    /* SQXR */
    FP128, FP128, 
    /* SR */
    GR32, GR32, GR32, 
    /* SRA */
    GR32, GR32, ADDR32, disp12imm32, 
    /* SRAG */
    GR64, GR64, ADDR32, disp20imm32, 
    /* SRAK */
    GR32, GR32, ADDR32, disp20imm32, 
    /* SRDA */
    GR128, GR128, ADDR32, disp12imm32, 
    /* SRDL */
    GR128, GR128, ADDR32, disp12imm32, 
    /* SRDT */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* SRK */
    GR32, GR32, GR32, 
    /* SRL */
    GR32, GR32, ADDR32, disp12imm32, 
    /* SRLG */
    GR64, GR64, ADDR32, disp20imm32, 
    /* SRLK */
    GR32, GR32, ADDR32, disp20imm32, 
    /* SRNM */
    ADDR32, disp12imm32, 
    /* SRNMB */
    ADDR32, disp12imm32, 
    /* SRNMT */
    ADDR32, disp12imm32, 
    /* SRP */
    ADDR64, disp12imm64, imm64, ADDR32, disp12imm32, imm32zx4, 
    /* SRST */
    GR64, GR64, GR64, GR64, 
    /* SRSTU */
    GR64, GR64, GR64, GR64, 
    /* SRXT */
    FP128, FP128, ADDR64, disp12imm64, ADDR64, 
    /* SSAIR */
    GR64, 
    /* SSAR */
    GR32, 
    /* SSCH */
    ADDR64, disp12imm64, 
    /* SSKE */
    GR32, GR64, imm32zx4, 
    /* SSKEOpt */
    GR32, GR64, 
    /* SSM */
    ADDR64, disp12imm64, 
    /* ST */
    GR32, ADDR64, disp12imm64, ADDR64, 
    /* STAM */
    AR32, AR32, ADDR64, disp12imm64, 
    /* STAMY */
    AR32, AR32, ADDR64, disp20imm64, 
    /* STAP */
    ADDR64, disp12imm64, 
    /* STBEAR */
    ADDR64, disp12imm64, 
    /* STC */
    GR32, ADDR64, disp12imm64, ADDR64, 
    /* STCH */
    GRH32, ADDR64, disp20imm64, ADDR64, 
    /* STCK */
    ADDR64, disp12imm64, 
    /* STCKC */
    ADDR64, disp12imm64, 
    /* STCKE */
    ADDR64, disp12imm64, 
    /* STCKF */
    ADDR64, disp12imm64, 
    /* STCM */
    GR32, imm32zx4, ADDR64, disp12imm64, 
    /* STCMH */
    GRH32, imm32zx4, ADDR64, disp20imm64, 
    /* STCMY */
    GR32, imm32zx4, ADDR64, disp20imm64, 
    /* STCPS */
    ADDR64, disp12imm64, 
    /* STCRW */
    ADDR64, disp12imm64, 
    /* STCTG */
    CR64, CR64, ADDR64, disp20imm64, 
    /* STCTL */
    CR64, CR64, ADDR64, disp12imm64, 
    /* STCY */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* STD */
    FP64, ADDR64, disp12imm64, ADDR64, 
    /* STDY */
    FP64, ADDR64, disp20imm64, ADDR64, 
    /* STE */
    FP32, ADDR64, disp12imm64, ADDR64, 
    /* STEY */
    FP32, ADDR64, disp20imm64, ADDR64, 
    /* STFH */
    GRH32, ADDR64, disp20imm64, ADDR64, 
    /* STFL */
    ADDR64, disp12imm64, 
    /* STFLE */
    ADDR64, disp12imm64, 
    /* STFPC */
    ADDR64, disp12imm64, 
    /* STG */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* STGRL */
    GR64, pcrel32, 
    /* STGSC */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* STH */
    GR32, ADDR64, disp12imm64, ADDR64, 
    /* STHH */
    GRH32, ADDR64, disp20imm64, ADDR64, 
    /* STHRL */
    GR32, pcrel32, 
    /* STHY */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* STIDP */
    ADDR64, disp12imm64, 
    /* STM */
    GR32, GR32, ADDR64, disp12imm64, 
    /* STMG */
    GR64, GR64, ADDR64, disp20imm64, 
    /* STMH */
    GRH32, GRH32, ADDR64, disp20imm64, 
    /* STMY */
    GR32, GR32, ADDR64, disp20imm64, 
    /* STNSM */
    ADDR64, disp12imm64, imm32zx8, 
    /* STOC */
    GR32, ADDR64, disp20imm64, cond4, cond4, 
    /* STOCAsm */
    GR32, ADDR64, disp20imm64, imm32zx4, 
    /* STOCAsmE */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmH */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmHE */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmL */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmLE */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmLH */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmM */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmNE */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmNH */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmNHE */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmNL */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmNLE */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmNLH */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmNM */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmNO */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmNP */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmNZ */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmO */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmP */
    GR32, ADDR64, disp20imm64, 
    /* STOCAsmZ */
    GR32, ADDR64, disp20imm64, 
    /* STOCFH */
    GRH32, ADDR64, disp20imm64, cond4, cond4, 
    /* STOCFHAsm */
    GRH32, ADDR64, disp20imm64, imm32zx4, 
    /* STOCFHAsmE */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmH */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmHE */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmL */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmLE */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmLH */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmM */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmNE */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmNH */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmNHE */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmNL */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmNLE */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmNLH */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmNM */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmNO */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmNP */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmNZ */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmO */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmP */
    GRH32, ADDR64, disp20imm64, 
    /* STOCFHAsmZ */
    GRH32, ADDR64, disp20imm64, 
    /* STOCG */
    GR64, ADDR64, disp20imm64, cond4, cond4, 
    /* STOCGAsm */
    GR64, ADDR64, disp20imm64, imm32zx4, 
    /* STOCGAsmE */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmH */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmHE */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmL */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmLE */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmLH */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmM */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmNE */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmNH */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmNHE */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmNL */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmNLE */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmNLH */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmNM */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmNO */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmNP */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmNZ */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmO */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmP */
    GR64, ADDR64, disp20imm64, 
    /* STOCGAsmZ */
    GR64, ADDR64, disp20imm64, 
    /* STOSM */
    ADDR64, disp12imm64, imm32zx8, 
    /* STPQ */
    GR128, ADDR64, disp20imm64, ADDR64, 
    /* STPT */
    ADDR64, disp12imm64, 
    /* STPX */
    ADDR64, disp12imm64, 
    /* STRAG */
    ADDR64, disp12imm64, ADDR64, disp12imm64, 
    /* STRL */
    GR32, pcrel32, 
    /* STRV */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* STRVG */
    GR64, ADDR64, disp20imm64, ADDR64, 
    /* STRVH */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* STSCH */
    ADDR64, disp12imm64, 
    /* STSI */
    ADDR64, disp12imm64, 
    /* STURA */
    GR32, GR64, 
    /* STURG */
    GR64, GR64, 
    /* STY */
    GR32, ADDR64, disp20imm64, ADDR64, 
    /* SU */
    FP32, FP32, ADDR64, disp12imm64, ADDR64, 
    /* SUR */
    FP32, FP32, FP32, 
    /* SVC */
    imm32zx8, 
    /* SW */
    FP64, FP64, ADDR64, disp12imm64, ADDR64, 
    /* SWR */
    FP64, FP64, FP64, 
    /* SXBR */
    FP128, FP128, FP128, 
    /* SXR */
    FP128, FP128, FP128, 
    /* SXTR */
    FP128, FP128, FP128, 
    /* SXTRA */
    FP128, FP128, FP128, imm32zx4, 
    /* SY */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* TABORT */
    ADDR64, disp12imm64, 
    /* TAM */
    /* TAR */
    AR32, GR32, 
    /* TB */
    GR64, GR64, 
    /* TBDR */
    FP64, imm32zx4, FP64, 
    /* TBEDR */
    FP32, imm32zx4, FP64, 
    /* TBEGIN */
    ADDR64, disp12imm64, imm32zx16, 
    /* TBEGINC */
    ADDR64, disp12imm64, imm32zx16, 
    /* TCDB */
    FP64, ADDR64, disp12imm64, ADDR64, 
    /* TCEB */
    FP32, ADDR64, disp12imm64, ADDR64, 
    /* TCXB */
    FP128, ADDR64, disp12imm64, ADDR64, 
    /* TDCDT */
    FP64, ADDR64, disp12imm64, ADDR64, 
    /* TDCET */
    FP32, ADDR64, disp12imm64, ADDR64, 
    /* TDCXT */
    FP128, ADDR64, disp12imm64, ADDR64, 
    /* TDGDT */
    FP64, ADDR64, disp12imm64, ADDR64, 
    /* TDGET */
    FP32, ADDR64, disp12imm64, ADDR64, 
    /* TDGXT */
    FP128, ADDR64, disp12imm64, ADDR64, 
    /* TEND */
    /* THDER */
    FP64, FP32, 
    /* THDR */
    FP64, FP64, 
    /* TM */
    ADDR64, disp12imm64, imm32zx8, 
    /* TMHH */
    GRH32, imm32lh16, 
    /* TMHL */
    GRH32, imm32ll16, 
    /* TMLH */
    GR32, imm32lh16, 
    /* TMLL */
    GR32, imm32ll16, 
    /* TMY */
    ADDR64, disp20imm64, imm32zx8, 
    /* TP */
    ADDR64, disp12imm64, imm64, 
    /* TPI */
    ADDR64, disp12imm64, 
    /* TPROT */
    ADDR64, disp12imm64, ADDR64, disp12imm64, 
    /* TR */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, 
    /* TRACE */
    GR32, GR32, ADDR64, disp12imm64, 
    /* TRACG */
    GR64, GR64, ADDR64, disp20imm64, 
    /* TRAP2 */
    /* TRAP4 */
    ADDR64, disp12imm64, 
    /* TRE */
    GR128, GR64, GR128, GR64, 
    /* TROO */
    GR128, GR64, GR128, GR64, imm32zx4, 
    /* TROOOpt */
    GR128, GR64, GR128, GR64, 
    /* TROT */
    GR128, GR64, GR128, GR64, imm32zx4, 
    /* TROTOpt */
    GR128, GR64, GR128, GR64, 
    /* TRT */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, 
    /* TRTE */
    GR64, GR128, GR128, imm32zx4, 
    /* TRTEOpt */
    GR64, GR128, GR128, 
    /* TRTO */
    GR128, GR64, GR128, GR64, imm32zx4, 
    /* TRTOOpt */
    GR128, GR64, GR128, GR64, 
    /* TRTR */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, 
    /* TRTRE */
    GR64, GR128, GR128, imm32zx4, 
    /* TRTREOpt */
    GR64, GR128, GR128, 
    /* TRTT */
    GR128, GR64, GR128, GR64, imm32zx4, 
    /* TRTTOpt */
    GR128, GR64, GR128, GR64, 
    /* TS */
    ADDR64, disp12imm64, 
    /* TSCH */
    ADDR64, disp12imm64, 
    /* UNPK */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, imm64, 
    /* UNPKA */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, 
    /* UNPKU */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, 
    /* UPT */
    /* VA */
    VR128, VR128, VR128, imm32zx4, 
    /* VAB */
    VR128, VR128, VR128, 
    /* VAC */
    VR128, VR128, VR128, VR128, imm32zx4, 
    /* VACC */
    VR128, VR128, VR128, imm32zx4, 
    /* VACCB */
    VR128, VR128, VR128, 
    /* VACCC */
    VR128, VR128, VR128, VR128, imm32zx4, 
    /* VACCCQ */
    VR128, VR128, VR128, VR128, 
    /* VACCF */
    VR128, VR128, VR128, 
    /* VACCG */
    VR128, VR128, VR128, 
    /* VACCH */
    VR128, VR128, VR128, 
    /* VACCQ */
    VR128, VR128, VR128, 
    /* VACQ */
    VR128, VR128, VR128, VR128, 
    /* VAF */
    VR128, VR128, VR128, 
    /* VAG */
    VR128, VR128, VR128, 
    /* VAH */
    VR128, VR128, VR128, 
    /* VAP */
    VR128, VR128, VR128, imm32zx8, imm32zx4, 
    /* VAQ */
    VR128, VR128, VR128, 
    /* VAVG */
    VR128, VR128, VR128, imm32zx4, 
    /* VAVGB */
    VR128, VR128, VR128, 
    /* VAVGF */
    VR128, VR128, VR128, 
    /* VAVGG */
    VR128, VR128, VR128, 
    /* VAVGH */
    VR128, VR128, VR128, 
    /* VAVGL */
    VR128, VR128, VR128, imm32zx4, 
    /* VAVGLB */
    VR128, VR128, VR128, 
    /* VAVGLF */
    VR128, VR128, VR128, 
    /* VAVGLG */
    VR128, VR128, VR128, 
    /* VAVGLH */
    VR128, VR128, VR128, 
    /* VBPERM */
    VR128, VR128, VR128, 
    /* VCDG */
    VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VCDGB */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VCDLG */
    VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VCDLGB */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VCEFB */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VCELFB */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VCEQ */
    VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VCEQB */
    VR128, VR128, VR128, 
    /* VCEQBS */
    VR128, VR128, VR128, 
    /* VCEQF */
    VR128, VR128, VR128, 
    /* VCEQFS */
    VR128, VR128, VR128, 
    /* VCEQG */
    VR128, VR128, VR128, 
    /* VCEQGS */
    VR128, VR128, VR128, 
    /* VCEQH */
    VR128, VR128, VR128, 
    /* VCEQHS */
    VR128, VR128, VR128, 
    /* VCFEB */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VCFN */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VCFPL */
    VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VCFPS */
    VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VCGD */
    VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VCGDB */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VCH */
    VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VCHB */
    VR128, VR128, VR128, 
    /* VCHBS */
    VR128, VR128, VR128, 
    /* VCHF */
    VR128, VR128, VR128, 
    /* VCHFS */
    VR128, VR128, VR128, 
    /* VCHG */
    VR128, VR128, VR128, 
    /* VCHGS */
    VR128, VR128, VR128, 
    /* VCHH */
    VR128, VR128, VR128, 
    /* VCHHS */
    VR128, VR128, VR128, 
    /* VCHL */
    VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VCHLB */
    VR128, VR128, VR128, 
    /* VCHLBS */
    VR128, VR128, VR128, 
    /* VCHLF */
    VR128, VR128, VR128, 
    /* VCHLFS */
    VR128, VR128, VR128, 
    /* VCHLG */
    VR128, VR128, VR128, 
    /* VCHLGS */
    VR128, VR128, VR128, 
    /* VCHLH */
    VR128, VR128, VR128, 
    /* VCHLHS */
    VR128, VR128, VR128, 
    /* VCKSM */
    VR128, VR128, VR128, 
    /* VCLFEB */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VCLFNH */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VCLFNL */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VCLFP */
    VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VCLGD */
    VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VCLGDB */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VCLZ */
    VR128, VR128, imm32zx4, 
    /* VCLZB */
    VR128, VR128, 
    /* VCLZDP */
    VR128, VR128, imm32zx4, 
    /* VCLZF */
    VR128, VR128, 
    /* VCLZG */
    VR128, VR128, 
    /* VCLZH */
    VR128, VR128, 
    /* VCNF */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VCP */
    VR128, VR128, imm32zx4, 
    /* VCRNF */
    VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VCSFP */
    VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VCSPH */
    VR128, VR128, VR128, imm32zx4, 
    /* VCTZ */
    VR128, VR128, imm32zx4, 
    /* VCTZB */
    VR128, VR128, 
    /* VCTZF */
    VR128, VR128, 
    /* VCTZG */
    VR128, VR128, 
    /* VCTZH */
    VR128, VR128, 
    /* VCVB */
    GR32, VR128, imm32zx4, 
    /* VCVBG */
    GR64, VR128, imm32zx4, 
    /* VCVBGOpt */
    GR64, VR128, imm32zx4, imm32zx4, 
    /* VCVBOpt */
    GR32, VR128, imm32zx4, imm32zx4, 
    /* VCVD */
    VR128, GR32, imm32zx8, imm32zx4, 
    /* VCVDG */
    VR128, GR64, imm32zx8, imm32zx4, 
    /* VDP */
    VR128, VR128, VR128, imm32zx8, imm32zx4, 
    /* VEC */
    VR128, VR128, imm32zx4, 
    /* VECB */
    VR128, VR128, 
    /* VECF */
    VR128, VR128, 
    /* VECG */
    VR128, VR128, 
    /* VECH */
    VR128, VR128, 
    /* VECL */
    VR128, VR128, imm32zx4, 
    /* VECLB */
    VR128, VR128, 
    /* VECLF */
    VR128, VR128, 
    /* VECLG */
    VR128, VR128, 
    /* VECLH */
    VR128, VR128, 
    /* VERIM */
    VR128, VR128, VR128, VR128, imm32zx8, imm32zx4, 
    /* VERIMB */
    VR128, VR128, VR128, VR128, imm32zx8, 
    /* VERIMF */
    VR128, VR128, VR128, VR128, imm32zx8, 
    /* VERIMG */
    VR128, VR128, VR128, VR128, imm32zx8, 
    /* VERIMH */
    VR128, VR128, VR128, VR128, imm32zx8, 
    /* VERLL */
    VR128, VR128, ADDR32, disp12imm32, imm32zx4, 
    /* VERLLB */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VERLLF */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VERLLG */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VERLLH */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VERLLV */
    VR128, VR128, VR128, imm32zx4, 
    /* VERLLVB */
    VR128, VR128, VR128, 
    /* VERLLVF */
    VR128, VR128, VR128, 
    /* VERLLVG */
    VR128, VR128, VR128, 
    /* VERLLVH */
    VR128, VR128, VR128, 
    /* VESL */
    VR128, VR128, ADDR32, disp12imm32, imm32zx4, 
    /* VESLB */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VESLF */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VESLG */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VESLH */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VESLV */
    VR128, VR128, VR128, imm32zx4, 
    /* VESLVB */
    VR128, VR128, VR128, 
    /* VESLVF */
    VR128, VR128, VR128, 
    /* VESLVG */
    VR128, VR128, VR128, 
    /* VESLVH */
    VR128, VR128, VR128, 
    /* VESRA */
    VR128, VR128, ADDR32, disp12imm32, imm32zx4, 
    /* VESRAB */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VESRAF */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VESRAG */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VESRAH */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VESRAV */
    VR128, VR128, VR128, imm32zx4, 
    /* VESRAVB */
    VR128, VR128, VR128, 
    /* VESRAVF */
    VR128, VR128, VR128, 
    /* VESRAVG */
    VR128, VR128, VR128, 
    /* VESRAVH */
    VR128, VR128, VR128, 
    /* VESRL */
    VR128, VR128, ADDR32, disp12imm32, imm32zx4, 
    /* VESRLB */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VESRLF */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VESRLG */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VESRLH */
    VR128, VR128, ADDR32, disp12imm32, 
    /* VESRLV */
    VR128, VR128, VR128, imm32zx4, 
    /* VESRLVB */
    VR128, VR128, VR128, 
    /* VESRLVF */
    VR128, VR128, VR128, 
    /* VESRLVG */
    VR128, VR128, VR128, 
    /* VESRLVH */
    VR128, VR128, VR128, 
    /* VFA */
    VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VFADB */
    VR128, VR128, VR128, 
    /* VFAE */
    VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VFAEB */
    VR128, VR128, VR128, imm32zx4even_timm, 
    /* VFAEBS */
    VR128, VR128, VR128, imm32zx4even_timm, 
    /* VFAEF */
    VR128, VR128, VR128, imm32zx4even_timm, 
    /* VFAEFS */
    VR128, VR128, VR128, imm32zx4even_timm, 
    /* VFAEH */
    VR128, VR128, VR128, imm32zx4even_timm, 
    /* VFAEHS */
    VR128, VR128, VR128, imm32zx4even_timm, 
    /* VFAEZB */
    VR128, VR128, VR128, imm32zx4even_timm, 
    /* VFAEZBS */
    VR128, VR128, VR128, imm32zx4even_timm, 
    /* VFAEZF */
    VR128, VR128, VR128, imm32zx4even_timm, 
    /* VFAEZFS */
    VR128, VR128, VR128, imm32zx4even_timm, 
    /* VFAEZH */
    VR128, VR128, VR128, imm32zx4even_timm, 
    /* VFAEZHS */
    VR128, VR128, VR128, imm32zx4even_timm, 
    /* VFASB */
    VR128, VR128, VR128, 
    /* VFCE */
    VR128, VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VFCEDB */
    VR128, VR128, VR128, 
    /* VFCEDBS */
    VR128, VR128, VR128, 
    /* VFCESB */
    VR128, VR128, VR128, 
    /* VFCESBS */
    VR128, VR128, VR128, 
    /* VFCH */
    VR128, VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VFCHDB */
    VR128, VR128, VR128, 
    /* VFCHDBS */
    VR128, VR128, VR128, 
    /* VFCHE */
    VR128, VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VFCHEDB */
    VR128, VR128, VR128, 
    /* VFCHEDBS */
    VR128, VR128, VR128, 
    /* VFCHESB */
    VR128, VR128, VR128, 
    /* VFCHESBS */
    VR128, VR128, VR128, 
    /* VFCHSB */
    VR128, VR128, VR128, 
    /* VFCHSBS */
    VR128, VR128, VR128, 
    /* VFD */
    VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VFDDB */
    VR128, VR128, VR128, 
    /* VFDSB */
    VR128, VR128, VR128, 
    /* VFEE */
    VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VFEEB */
    VR128, VR128, VR128, imm32zx4, 
    /* VFEEBS */
    VR128, VR128, VR128, 
    /* VFEEF */
    VR128, VR128, VR128, imm32zx4, 
    /* VFEEFS */
    VR128, VR128, VR128, 
    /* VFEEH */
    VR128, VR128, VR128, imm32zx4, 
    /* VFEEHS */
    VR128, VR128, VR128, 
    /* VFEEZB */
    VR128, VR128, VR128, 
    /* VFEEZBS */
    VR128, VR128, VR128, 
    /* VFEEZF */
    VR128, VR128, VR128, 
    /* VFEEZFS */
    VR128, VR128, VR128, 
    /* VFEEZH */
    VR128, VR128, VR128, 
    /* VFEEZHS */
    VR128, VR128, VR128, 
    /* VFENE */
    VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VFENEB */
    VR128, VR128, VR128, imm32zx4, 
    /* VFENEBS */
    VR128, VR128, VR128, 
    /* VFENEF */
    VR128, VR128, VR128, imm32zx4, 
    /* VFENEFS */
    VR128, VR128, VR128, 
    /* VFENEH */
    VR128, VR128, VR128, imm32zx4, 
    /* VFENEHS */
    VR128, VR128, VR128, 
    /* VFENEZB */
    VR128, VR128, VR128, 
    /* VFENEZBS */
    VR128, VR128, VR128, 
    /* VFENEZF */
    VR128, VR128, VR128, 
    /* VFENEZFS */
    VR128, VR128, VR128, 
    /* VFENEZH */
    VR128, VR128, VR128, 
    /* VFENEZHS */
    VR128, VR128, VR128, 
    /* VFI */
    VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VFIDB */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VFISB */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VFKEDB */
    VR128, VR128, VR128, 
    /* VFKEDBS */
    VR128, VR128, VR128, 
    /* VFKESB */
    VR128, VR128, VR128, 
    /* VFKESBS */
    VR128, VR128, VR128, 
    /* VFKHDB */
    VR128, VR128, VR128, 
    /* VFKHDBS */
    VR128, VR128, VR128, 
    /* VFKHEDB */
    VR128, VR128, VR128, 
    /* VFKHEDBS */
    VR128, VR128, VR128, 
    /* VFKHESB */
    VR128, VR128, VR128, 
    /* VFKHESBS */
    VR128, VR128, VR128, 
    /* VFKHSB */
    VR128, VR128, VR128, 
    /* VFKHSBS */
    VR128, VR128, VR128, 
    /* VFLCDB */
    VR128, VR128, 
    /* VFLCSB */
    VR128, VR128, 
    /* VFLL */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VFLLS */
    VR128, VR128, 
    /* VFLNDB */
    VR128, VR128, 
    /* VFLNSB */
    VR128, VR128, 
    /* VFLPDB */
    VR128, VR128, 
    /* VFLPSB */
    VR128, VR128, 
    /* VFLR */
    VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VFLRD */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VFM */
    VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VFMA */
    VR128, VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VFMADB */
    VR128, VR128, VR128, VR128, 
    /* VFMASB */
    VR128, VR128, VR128, VR128, 
    /* VFMAX */
    VR128, VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VFMAXDB */
    VR128, VR128, VR128, imm32zx4, 
    /* VFMAXSB */
    VR128, VR128, VR128, imm32zx4, 
    /* VFMDB */
    VR128, VR128, VR128, 
    /* VFMIN */
    VR128, VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VFMINDB */
    VR128, VR128, VR128, imm32zx4, 
    /* VFMINSB */
    VR128, VR128, VR128, imm32zx4, 
    /* VFMS */
    VR128, VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VFMSB */
    VR128, VR128, VR128, 
    /* VFMSDB */
    VR128, VR128, VR128, VR128, 
    /* VFMSSB */
    VR128, VR128, VR128, VR128, 
    /* VFNMA */
    VR128, VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VFNMADB */
    VR128, VR128, VR128, VR128, 
    /* VFNMASB */
    VR128, VR128, VR128, VR128, 
    /* VFNMS */
    VR128, VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VFNMSDB */
    VR128, VR128, VR128, VR128, 
    /* VFNMSSB */
    VR128, VR128, VR128, VR128, 
    /* VFPSO */
    VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VFPSODB */
    VR128, VR128, imm32zx4, 
    /* VFPSOSB */
    VR128, VR128, imm32zx4, 
    /* VFS */
    VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VFSDB */
    VR128, VR128, VR128, 
    /* VFSQ */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VFSQDB */
    VR128, VR128, 
    /* VFSQSB */
    VR128, VR128, 
    /* VFSSB */
    VR128, VR128, VR128, 
    /* VFTCI */
    VR128, VR128, imm32zx12, imm32zx4, imm32zx4, 
    /* VFTCIDB */
    VR128, VR128, imm32zx12, 
    /* VFTCISB */
    VR128, VR128, imm32zx12, 
    /* VGBM */
    VR128, imm32zx16_timm, 
    /* VGEF */
    VR128, VR128, ADDR64, disp12imm64, VR128, imm32zx2, 
    /* VGEG */
    VR128, VR128, ADDR64, disp12imm64, VR128, imm32zx1, 
    /* VGFM */
    VR128, VR128, VR128, imm32zx4, 
    /* VGFMA */
    VR128, VR128, VR128, VR128, imm32zx4, 
    /* VGFMAB */
    VR128, VR128, VR128, VR128, 
    /* VGFMAF */
    VR128, VR128, VR128, VR128, 
    /* VGFMAG */
    VR128, VR128, VR128, VR128, 
    /* VGFMAH */
    VR128, VR128, VR128, VR128, 
    /* VGFMB */
    VR128, VR128, VR128, 
    /* VGFMF */
    VR128, VR128, VR128, 
    /* VGFMG */
    VR128, VR128, VR128, 
    /* VGFMH */
    VR128, VR128, VR128, 
    /* VGM */
    VR128, imm32zx8, imm32zx8, imm32zx4, 
    /* VGMB */
    VR128, imm32zx8, imm32zx8, 
    /* VGMF */
    VR128, imm32zx8, imm32zx8, 
    /* VGMG */
    VR128, imm32zx8, imm32zx8, 
    /* VGMH */
    VR128, imm32zx8, imm32zx8, 
    /* VISTR */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VISTRB */
    VR128, VR128, imm32zx4, 
    /* VISTRBS */
    VR128, VR128, 
    /* VISTRF */
    VR128, VR128, imm32zx4, 
    /* VISTRFS */
    VR128, VR128, 
    /* VISTRH */
    VR128, VR128, imm32zx4, 
    /* VISTRHS */
    VR128, VR128, 
    /* VL */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLAlign */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx4, 
    /* VLBB */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx4, 
    /* VLBR */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx4, 
    /* VLBRF */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLBRG */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLBRH */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLBRQ */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLBRREP */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx4, 
    /* VLBRREPF */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLBRREPG */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLBRREPH */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLC */
    VR128, VR128, imm32zx4, 
    /* VLCB */
    VR128, VR128, 
    /* VLCF */
    VR128, VR128, 
    /* VLCG */
    VR128, VR128, 
    /* VLCH */
    VR128, VR128, 
    /* VLDE */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VLDEB */
    VR128, VR128, 
    /* VLEB */
    VR128, VR128, ADDR64, disp12imm64, ADDR64, imm32zx4, 
    /* VLEBRF */
    VR128, VR128, ADDR64, disp12imm64, ADDR64, imm32zx2, 
    /* VLEBRG */
    VR128, VR128, ADDR64, disp12imm64, ADDR64, imm32zx1, 
    /* VLEBRH */
    VR128, VR128, ADDR64, disp12imm64, ADDR64, imm32zx3, 
    /* VLED */
    VR128, VR128, imm32zx4, imm32zx4, imm32zx4, 
    /* VLEDB */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* VLEF */
    VR128, VR128, ADDR64, disp12imm64, ADDR64, imm32zx2, 
    /* VLEG */
    VR128, VR128, ADDR64, disp12imm64, ADDR64, imm32zx1, 
    /* VLEH */
    VR128, VR128, ADDR64, disp12imm64, ADDR64, imm32zx3, 
    /* VLEIB */
    VR128, VR128, imm32sx16trunc, imm32zx4, 
    /* VLEIF */
    VR128, VR128, imm32sx16, imm32zx2, 
    /* VLEIG */
    VR128, VR128, imm64sx16, imm32zx1, 
    /* VLEIH */
    VR128, VR128, imm32sx16trunc, imm32zx3, 
    /* VLER */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx4, 
    /* VLERF */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLERG */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLERH */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLGV */
    GR64, VR128, ADDR32, disp12imm32, imm32zx4, 
    /* VLGVB */
    GR64, VR128, ADDR32, disp12imm32, 
    /* VLGVF */
    GR64, VR128, ADDR32, disp12imm32, 
    /* VLGVG */
    GR64, VR128, ADDR32, disp12imm32, 
    /* VLGVH */
    GR64, VR128, ADDR32, disp12imm32, 
    /* VLIP */
    VR128, imm32zx16, imm32zx4, 
    /* VLL */
    VR128, GR32, ADDR64, disp12imm64, 
    /* VLLEBRZ */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx4, 
    /* VLLEBRZE */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLLEBRZF */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLLEBRZG */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLLEBRZH */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLLEZ */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx4, 
    /* VLLEZB */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLLEZF */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLLEZG */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLLEZH */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLLEZLF */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLM */
    VR128, VR128, ADDR64, disp12imm64, 
    /* VLMAlign */
    VR128, VR128, ADDR64, disp12imm64, imm32zx4, 
    /* VLP */
    VR128, VR128, imm32zx4, 
    /* VLPB */
    VR128, VR128, 
    /* VLPF */
    VR128, VR128, 
    /* VLPG */
    VR128, VR128, 
    /* VLPH */
    VR128, VR128, 
    /* VLR */
    VR128, VR128, 
    /* VLREP */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx4, 
    /* VLREPB */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLREPF */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLREPG */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLREPH */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VLRL */
    VR128, ADDR64, disp12imm64, imm32zx8, 
    /* VLRLR */
    VR128, GR32, ADDR64, disp12imm64, 
    /* VLVG */
    VR128, VR128, GR64, ADDR32, disp12imm32, imm32zx4, 
    /* VLVGB */
    VR128, VR128, GR32, ADDR32, disp12imm32, 
    /* VLVGF */
    VR128, VR128, GR32, ADDR32, disp12imm32, 
    /* VLVGG */
    VR128, VR128, GR64, ADDR32, disp12imm32, 
    /* VLVGH */
    VR128, VR128, GR32, ADDR32, disp12imm32, 
    /* VLVGP */
    VR128, GR64, GR64, 
    /* VMAE */
    VR128, VR128, VR128, VR128, imm32zx4, 
    /* VMAEB */
    VR128, VR128, VR128, VR128, 
    /* VMAEF */
    VR128, VR128, VR128, VR128, 
    /* VMAEH */
    VR128, VR128, VR128, VR128, 
    /* VMAH */
    VR128, VR128, VR128, VR128, imm32zx4, 
    /* VMAHB */
    VR128, VR128, VR128, VR128, 
    /* VMAHF */
    VR128, VR128, VR128, VR128, 
    /* VMAHH */
    VR128, VR128, VR128, VR128, 
    /* VMAL */
    VR128, VR128, VR128, VR128, imm32zx4, 
    /* VMALB */
    VR128, VR128, VR128, VR128, 
    /* VMALE */
    VR128, VR128, VR128, VR128, imm32zx4, 
    /* VMALEB */
    VR128, VR128, VR128, VR128, 
    /* VMALEF */
    VR128, VR128, VR128, VR128, 
    /* VMALEH */
    VR128, VR128, VR128, VR128, 
    /* VMALF */
    VR128, VR128, VR128, VR128, 
    /* VMALH */
    VR128, VR128, VR128, VR128, imm32zx4, 
    /* VMALHB */
    VR128, VR128, VR128, VR128, 
    /* VMALHF */
    VR128, VR128, VR128, VR128, 
    /* VMALHH */
    VR128, VR128, VR128, VR128, 
    /* VMALHW */
    VR128, VR128, VR128, VR128, 
    /* VMALO */
    VR128, VR128, VR128, VR128, imm32zx4, 
    /* VMALOB */
    VR128, VR128, VR128, VR128, 
    /* VMALOF */
    VR128, VR128, VR128, VR128, 
    /* VMALOH */
    VR128, VR128, VR128, VR128, 
    /* VMAO */
    VR128, VR128, VR128, VR128, imm32zx4, 
    /* VMAOB */
    VR128, VR128, VR128, VR128, 
    /* VMAOF */
    VR128, VR128, VR128, VR128, 
    /* VMAOH */
    VR128, VR128, VR128, VR128, 
    /* VME */
    VR128, VR128, VR128, imm32zx4, 
    /* VMEB */
    VR128, VR128, VR128, 
    /* VMEF */
    VR128, VR128, VR128, 
    /* VMEH */
    VR128, VR128, VR128, 
    /* VMH */
    VR128, VR128, VR128, imm32zx4, 
    /* VMHB */
    VR128, VR128, VR128, 
    /* VMHF */
    VR128, VR128, VR128, 
    /* VMHH */
    VR128, VR128, VR128, 
    /* VML */
    VR128, VR128, VR128, imm32zx4, 
    /* VMLB */
    VR128, VR128, VR128, 
    /* VMLE */
    VR128, VR128, VR128, imm32zx4, 
    /* VMLEB */
    VR128, VR128, VR128, 
    /* VMLEF */
    VR128, VR128, VR128, 
    /* VMLEH */
    VR128, VR128, VR128, 
    /* VMLF */
    VR128, VR128, VR128, 
    /* VMLH */
    VR128, VR128, VR128, imm32zx4, 
    /* VMLHB */
    VR128, VR128, VR128, 
    /* VMLHF */
    VR128, VR128, VR128, 
    /* VMLHH */
    VR128, VR128, VR128, 
    /* VMLHW */
    VR128, VR128, VR128, 
    /* VMLO */
    VR128, VR128, VR128, imm32zx4, 
    /* VMLOB */
    VR128, VR128, VR128, 
    /* VMLOF */
    VR128, VR128, VR128, 
    /* VMLOH */
    VR128, VR128, VR128, 
    /* VMN */
    VR128, VR128, VR128, imm32zx4, 
    /* VMNB */
    VR128, VR128, VR128, 
    /* VMNF */
    VR128, VR128, VR128, 
    /* VMNG */
    VR128, VR128, VR128, 
    /* VMNH */
    VR128, VR128, VR128, 
    /* VMNL */
    VR128, VR128, VR128, imm32zx4, 
    /* VMNLB */
    VR128, VR128, VR128, 
    /* VMNLF */
    VR128, VR128, VR128, 
    /* VMNLG */
    VR128, VR128, VR128, 
    /* VMNLH */
    VR128, VR128, VR128, 
    /* VMO */
    VR128, VR128, VR128, imm32zx4, 
    /* VMOB */
    VR128, VR128, VR128, 
    /* VMOF */
    VR128, VR128, VR128, 
    /* VMOH */
    VR128, VR128, VR128, 
    /* VMP */
    VR128, VR128, VR128, imm32zx8, imm32zx4, 
    /* VMRH */
    VR128, VR128, VR128, imm32zx4, 
    /* VMRHB */
    VR128, VR128, VR128, 
    /* VMRHF */
    VR128, VR128, VR128, 
    /* VMRHG */
    VR128, VR128, VR128, 
    /* VMRHH */
    VR128, VR128, VR128, 
    /* VMRL */
    VR128, VR128, VR128, imm32zx4, 
    /* VMRLB */
    VR128, VR128, VR128, 
    /* VMRLF */
    VR128, VR128, VR128, 
    /* VMRLG */
    VR128, VR128, VR128, 
    /* VMRLH */
    VR128, VR128, VR128, 
    /* VMSL */
    VR128, VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VMSLG */
    VR128, VR128, VR128, VR128, imm32zx4_timm, 
    /* VMSP */
    VR128, VR128, VR128, imm32zx8, imm32zx4, 
    /* VMX */
    VR128, VR128, VR128, imm32zx4, 
    /* VMXB */
    VR128, VR128, VR128, 
    /* VMXF */
    VR128, VR128, VR128, 
    /* VMXG */
    VR128, VR128, VR128, 
    /* VMXH */
    VR128, VR128, VR128, 
    /* VMXL */
    VR128, VR128, VR128, imm32zx4, 
    /* VMXLB */
    VR128, VR128, VR128, 
    /* VMXLF */
    VR128, VR128, VR128, 
    /* VMXLG */
    VR128, VR128, VR128, 
    /* VMXLH */
    VR128, VR128, VR128, 
    /* VN */
    VR128, VR128, VR128, 
    /* VNC */
    VR128, VR128, VR128, 
    /* VNN */
    VR128, VR128, VR128, 
    /* VNO */
    VR128, VR128, VR128, 
    /* VNX */
    VR128, VR128, VR128, 
    /* VO */
    VR128, VR128, VR128, 
    /* VOC */
    VR128, VR128, VR128, 
    /* VONE */
    VR128, 
    /* VPDI */
    VR128, VR128, VR128, imm32zx4, 
    /* VPERM */
    VR128, VR128, VR128, VR128, 
    /* VPK */
    VR128, VR128, VR128, imm32zx4, 
    /* VPKF */
    VR128, VR128, VR128, 
    /* VPKG */
    VR128, VR128, VR128, 
    /* VPKH */
    VR128, VR128, VR128, 
    /* VPKLS */
    VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VPKLSF */
    VR128, VR128, VR128, 
    /* VPKLSFS */
    VR128, VR128, VR128, 
    /* VPKLSG */
    VR128, VR128, VR128, 
    /* VPKLSGS */
    VR128, VR128, VR128, 
    /* VPKLSH */
    VR128, VR128, VR128, 
    /* VPKLSHS */
    VR128, VR128, VR128, 
    /* VPKS */
    VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VPKSF */
    VR128, VR128, VR128, 
    /* VPKSFS */
    VR128, VR128, VR128, 
    /* VPKSG */
    VR128, VR128, VR128, 
    /* VPKSGS */
    VR128, VR128, VR128, 
    /* VPKSH */
    VR128, VR128, VR128, 
    /* VPKSHS */
    VR128, VR128, VR128, 
    /* VPKZ */
    VR128, ADDR64, disp12imm64, imm32zx8, 
    /* VPKZR */
    VR128, VR128, VR128, imm32zx8, imm32zx4, 
    /* VPOPCT */
    VR128, VR128, imm32zx4, 
    /* VPOPCTB */
    VR128, VR128, 
    /* VPOPCTF */
    VR128, VR128, 
    /* VPOPCTG */
    VR128, VR128, 
    /* VPOPCTH */
    VR128, VR128, 
    /* VPSOP */
    VR128, VR128, imm32zx8, imm32zx8, imm32zx4, 
    /* VREP */
    VR128, VR128, imm32zx16, imm32zx4, 
    /* VREPB */
    VR128, VR128, imm32zx16, 
    /* VREPF */
    VR128, VR128, imm32zx16, 
    /* VREPG */
    VR128, VR128, imm32zx16, 
    /* VREPH */
    VR128, VR128, imm32zx16, 
    /* VREPI */
    VR128, imm32sx16, imm32zx4, 
    /* VREPIB */
    VR128, imm32sx16_timm, 
    /* VREPIF */
    VR128, imm32sx16_timm, 
    /* VREPIG */
    VR128, imm32sx16_timm, 
    /* VREPIH */
    VR128, imm32sx16_timm, 
    /* VRP */
    VR128, VR128, VR128, imm32zx8, imm32zx4, 
    /* VS */
    VR128, VR128, VR128, imm32zx4, 
    /* VSB */
    VR128, VR128, VR128, 
    /* VSBCBI */
    VR128, VR128, VR128, VR128, imm32zx4, 
    /* VSBCBIQ */
    VR128, VR128, VR128, VR128, 
    /* VSBI */
    VR128, VR128, VR128, VR128, imm32zx4, 
    /* VSBIQ */
    VR128, VR128, VR128, VR128, 
    /* VSCBI */
    VR128, VR128, VR128, imm32zx4, 
    /* VSCBIB */
    VR128, VR128, VR128, 
    /* VSCBIF */
    VR128, VR128, VR128, 
    /* VSCBIG */
    VR128, VR128, VR128, 
    /* VSCBIH */
    VR128, VR128, VR128, 
    /* VSCBIQ */
    VR128, VR128, VR128, 
    /* VSCEF */
    VR128, ADDR64, disp12imm64, VR128, imm32zx2, 
    /* VSCEG */
    VR128, ADDR64, disp12imm64, VR128, imm32zx1, 
    /* VSCHDP */
    VR128, VR128, VR128, imm32zx4, 
    /* VSCHP */
    VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VSCHSP */
    VR128, VR128, VR128, imm32zx4, 
    /* VSCHXP */
    VR128, VR128, VR128, imm32zx4, 
    /* VSCSHP */
    VR128, VR128, VR128, 
    /* VSDP */
    VR128, VR128, VR128, imm32zx8, imm32zx4, 
    /* VSEG */
    VR128, VR128, imm32zx4, 
    /* VSEGB */
    VR128, VR128, 
    /* VSEGF */
    VR128, VR128, 
    /* VSEGH */
    VR128, VR128, 
    /* VSEL */
    VR128, VR128, VR128, VR128, 
    /* VSF */
    VR128, VR128, VR128, 
    /* VSG */
    VR128, VR128, VR128, 
    /* VSH */
    VR128, VR128, VR128, 
    /* VSL */
    VR128, VR128, VR128, 
    /* VSLB */
    VR128, VR128, VR128, 
    /* VSLD */
    VR128, VR128, VR128, imm32zx8, 
    /* VSLDB */
    VR128, VR128, VR128, imm32zx8, 
    /* VSP */
    VR128, VR128, VR128, imm32zx8, imm32zx4, 
    /* VSQ */
    VR128, VR128, VR128, 
    /* VSRA */
    VR128, VR128, VR128, 
    /* VSRAB */
    VR128, VR128, VR128, 
    /* VSRD */
    VR128, VR128, VR128, imm32zx8, 
    /* VSRL */
    VR128, VR128, VR128, 
    /* VSRLB */
    VR128, VR128, VR128, 
    /* VSRP */
    VR128, VR128, imm32zx8, imm32zx8, imm32zx4, 
    /* VSRPR */
    VR128, VR128, VR128, imm32zx8, imm32zx4, 
    /* VST */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VSTAlign */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx4, 
    /* VSTBR */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx4, 
    /* VSTBRF */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VSTBRG */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VSTBRH */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VSTBRQ */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VSTEB */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx4, 
    /* VSTEBRF */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx2, 
    /* VSTEBRG */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx1, 
    /* VSTEBRH */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx3, 
    /* VSTEF */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx2, 
    /* VSTEG */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx1, 
    /* VSTEH */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx3, 
    /* VSTER */
    VR128, ADDR64, disp12imm64, ADDR64, imm32zx4, 
    /* VSTERF */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VSTERG */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VSTERH */
    VR128, ADDR64, disp12imm64, ADDR64, 
    /* VSTL */
    VR128, GR32, ADDR64, disp12imm64, 
    /* VSTM */
    VR128, VR128, ADDR64, disp12imm64, 
    /* VSTMAlign */
    VR128, VR128, ADDR64, disp12imm64, imm32zx4, 
    /* VSTRC */
    VR128, VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VSTRCB */
    VR128, VR128, VR128, VR128, imm32zx4even_timm, 
    /* VSTRCBS */
    VR128, VR128, VR128, VR128, imm32zx4even_timm, 
    /* VSTRCF */
    VR128, VR128, VR128, VR128, imm32zx4even_timm, 
    /* VSTRCFS */
    VR128, VR128, VR128, VR128, imm32zx4even_timm, 
    /* VSTRCH */
    VR128, VR128, VR128, VR128, imm32zx4even_timm, 
    /* VSTRCHS */
    VR128, VR128, VR128, VR128, imm32zx4even_timm, 
    /* VSTRCZB */
    VR128, VR128, VR128, VR128, imm32zx4even_timm, 
    /* VSTRCZBS */
    VR128, VR128, VR128, VR128, imm32zx4even_timm, 
    /* VSTRCZF */
    VR128, VR128, VR128, VR128, imm32zx4even_timm, 
    /* VSTRCZFS */
    VR128, VR128, VR128, VR128, imm32zx4even_timm, 
    /* VSTRCZH */
    VR128, VR128, VR128, VR128, imm32zx4even_timm, 
    /* VSTRCZHS */
    VR128, VR128, VR128, VR128, imm32zx4even_timm, 
    /* VSTRL */
    VR128, ADDR64, disp12imm64, imm32zx8, 
    /* VSTRLR */
    VR128, GR32, ADDR64, disp12imm64, 
    /* VSTRS */
    VR128, VR128, VR128, VR128, imm32zx4, imm32zx4, 
    /* VSTRSB */
    VR128, VR128, VR128, VR128, imm32zx4, 
    /* VSTRSF */
    VR128, VR128, VR128, VR128, imm32zx4, 
    /* VSTRSH */
    VR128, VR128, VR128, VR128, imm32zx4, 
    /* VSTRSZB */
    VR128, VR128, VR128, VR128, 
    /* VSTRSZF */
    VR128, VR128, VR128, VR128, 
    /* VSTRSZH */
    VR128, VR128, VR128, VR128, 
    /* VSUM */
    VR128, VR128, VR128, imm32zx4, 
    /* VSUMB */
    VR128, VR128, VR128, 
    /* VSUMG */
    VR128, VR128, VR128, imm32zx4, 
    /* VSUMGF */
    VR128, VR128, VR128, 
    /* VSUMGH */
    VR128, VR128, VR128, 
    /* VSUMH */
    VR128, VR128, VR128, 
    /* VSUMQ */
    VR128, VR128, VR128, imm32zx4, 
    /* VSUMQF */
    VR128, VR128, VR128, 
    /* VSUMQG */
    VR128, VR128, VR128, 
    /* VTM */
    VR128, VR128, 
    /* VTP */
    VR128, 
    /* VUPH */
    VR128, VR128, imm32zx4, 
    /* VUPHB */
    VR128, VR128, 
    /* VUPHF */
    VR128, VR128, 
    /* VUPHH */
    VR128, VR128, 
    /* VUPKZ */
    VR128, ADDR64, disp12imm64, imm32zx8, 
    /* VUPKZH */
    VR128, VR128, imm32zx4, 
    /* VUPKZL */
    VR128, VR128, imm32zx4, 
    /* VUPL */
    VR128, VR128, imm32zx4, 
    /* VUPLB */
    VR128, VR128, 
    /* VUPLF */
    VR128, VR128, 
    /* VUPLH */
    VR128, VR128, imm32zx4, 
    /* VUPLHB */
    VR128, VR128, 
    /* VUPLHF */
    VR128, VR128, 
    /* VUPLHH */
    VR128, VR128, 
    /* VUPLHW */
    VR128, VR128, 
    /* VUPLL */
    VR128, VR128, imm32zx4, 
    /* VUPLLB */
    VR128, VR128, 
    /* VUPLLF */
    VR128, VR128, 
    /* VUPLLH */
    VR128, VR128, 
    /* VX */
    VR128, VR128, VR128, 
    /* VZERO */
    VR128, 
    /* WCDGB */
    VR64, VR64, imm32zx4, imm32zx4, 
    /* WCDLGB */
    VR64, VR64, imm32zx4, imm32zx4, 
    /* WCEFB */
    VR32, VR32, imm32zx4, imm32zx4, 
    /* WCELFB */
    VR32, VR32, imm32zx4, imm32zx4, 
    /* WCFEB */
    VR32, VR32, imm32zx4, imm32zx4, 
    /* WCGDB */
    VR64, VR64, imm32zx4, imm32zx4, 
    /* WCLFEB */
    VR32, VR32, imm32zx4, imm32zx4, 
    /* WCLGDB */
    VR64, VR64, imm32zx4, imm32zx4, 
    /* WFADB */
    VR64, VR64, VR64, 
    /* WFASB */
    VR32, VR32, VR32, 
    /* WFAXB */
    VR128, VR128, VR128, 
    /* WFC */
    VR64, VR64, imm32zx4, imm32zx4, 
    /* WFCDB */
    VR64, VR64, 
    /* WFCEDB */
    VR64, VR64, VR64, 
    /* WFCEDBS */
    VR64, VR64, VR64, 
    /* WFCESB */
    VR32, VR32, VR32, 
    /* WFCESBS */
    VR32, VR32, VR32, 
    /* WFCEXB */
    VR128, VR128, VR128, 
    /* WFCEXBS */
    VR128, VR128, VR128, 
    /* WFCHDB */
    VR64, VR64, VR64, 
    /* WFCHDBS */
    VR64, VR64, VR64, 
    /* WFCHEDB */
    VR64, VR64, VR64, 
    /* WFCHEDBS */
    VR64, VR64, VR64, 
    /* WFCHESB */
    VR32, VR32, VR32, 
    /* WFCHESBS */
    VR32, VR32, VR32, 
    /* WFCHEXB */
    VR128, VR128, VR128, 
    /* WFCHEXBS */
    VR128, VR128, VR128, 
    /* WFCHSB */
    VR32, VR32, VR32, 
    /* WFCHSBS */
    VR32, VR32, VR32, 
    /* WFCHXB */
    VR128, VR128, VR128, 
    /* WFCHXBS */
    VR128, VR128, VR128, 
    /* WFCSB */
    VR32, VR32, 
    /* WFCXB */
    VR128, VR128, 
    /* WFDDB */
    VR64, VR64, VR64, 
    /* WFDSB */
    VR32, VR32, VR32, 
    /* WFDXB */
    VR128, VR128, VR128, 
    /* WFIDB */
    VR64, VR64, imm32zx4, imm32zx4, 
    /* WFISB */
    VR32, VR32, imm32zx4, imm32zx4, 
    /* WFIXB */
    VR128, VR128, imm32zx4, imm32zx4, 
    /* WFK */
    VR64, VR64, imm32zx4, imm32zx4, 
    /* WFKDB */
    VR64, VR64, 
    /* WFKEDB */
    VR64, VR64, VR64, 
    /* WFKEDBS */
    VR64, VR64, VR64, 
    /* WFKESB */
    VR32, VR32, VR32, 
    /* WFKESBS */
    VR32, VR32, VR32, 
    /* WFKEXB */
    VR128, VR128, VR128, 
    /* WFKEXBS */
    VR128, VR128, VR128, 
    /* WFKHDB */
    VR64, VR64, VR64, 
    /* WFKHDBS */
    VR64, VR64, VR64, 
    /* WFKHEDB */
    VR64, VR64, VR64, 
    /* WFKHEDBS */
    VR64, VR64, VR64, 
    /* WFKHESB */
    VR32, VR32, VR32, 
    /* WFKHESBS */
    VR32, VR32, VR32, 
    /* WFKHEXB */
    VR128, VR128, VR128, 
    /* WFKHEXBS */
    VR128, VR128, VR128, 
    /* WFKHSB */
    VR32, VR32, VR32, 
    /* WFKHSBS */
    VR32, VR32, VR32, 
    /* WFKHXB */
    VR128, VR128, VR128, 
    /* WFKHXBS */
    VR128, VR128, VR128, 
    /* WFKSB */
    VR32, VR32, 
    /* WFKXB */
    VR128, VR128, 
    /* WFLCDB */
    VR64, VR64, 
    /* WFLCSB */
    VR32, VR32, 
    /* WFLCXB */
    VR128, VR128, 
    /* WFLLD */
    VR128, VR64, 
    /* WFLLS */
    VR64, VR32, 
    /* WFLNDB */
    VR64, VR64, 
    /* WFLNSB */
    VR32, VR32, 
    /* WFLNXB */
    VR128, VR128, 
    /* WFLPDB */
    VR64, VR64, 
    /* WFLPSB */
    VR32, VR32, 
    /* WFLPXB */
    VR128, VR128, 
    /* WFLRD */
    VR32, VR64, imm32zx4, imm32zx4, 
    /* WFLRX */
    VR64, VR128, imm32zx4, imm32zx4, 
    /* WFMADB */
    VR64, VR64, VR64, VR64, 
    /* WFMASB */
    VR32, VR32, VR32, VR32, 
    /* WFMAXB */
    VR128, VR128, VR128, VR128, 
    /* WFMAXDB */
    VR64, VR64, VR64, imm32zx4, 
    /* WFMAXSB */
    VR32, VR32, VR32, imm32zx4, 
    /* WFMAXXB */
    VR128, VR128, VR128, imm32zx4, 
    /* WFMDB */
    VR64, VR64, VR64, 
    /* WFMINDB */
    VR64, VR64, VR64, imm32zx4, 
    /* WFMINSB */
    VR32, VR32, VR32, imm32zx4, 
    /* WFMINXB */
    VR128, VR128, VR128, imm32zx4, 
    /* WFMSB */
    VR32, VR32, VR32, 
    /* WFMSDB */
    VR64, VR64, VR64, VR64, 
    /* WFMSSB */
    VR32, VR32, VR32, VR32, 
    /* WFMSXB */
    VR128, VR128, VR128, VR128, 
    /* WFMXB */
    VR128, VR128, VR128, 
    /* WFNMADB */
    VR64, VR64, VR64, VR64, 
    /* WFNMASB */
    VR32, VR32, VR32, VR32, 
    /* WFNMAXB */
    VR128, VR128, VR128, VR128, 
    /* WFNMSDB */
    VR64, VR64, VR64, VR64, 
    /* WFNMSSB */
    VR32, VR32, VR32, VR32, 
    /* WFNMSXB */
    VR128, VR128, VR128, VR128, 
    /* WFPSODB */
    VR64, VR64, imm32zx4, 
    /* WFPSOSB */
    VR32, VR32, imm32zx4, 
    /* WFPSOXB */
    VR128, VR128, imm32zx4, 
    /* WFSDB */
    VR64, VR64, VR64, 
    /* WFSQDB */
    VR64, VR64, 
    /* WFSQSB */
    VR32, VR32, 
    /* WFSQXB */
    VR128, VR128, 
    /* WFSSB */
    VR32, VR32, VR32, 
    /* WFSXB */
    VR128, VR128, VR128, 
    /* WFTCIDB */
    VR64, VR64, imm32zx12, 
    /* WFTCISB */
    VR32, VR32, imm32zx12, 
    /* WFTCIXB */
    VR128, VR128, imm32zx12, 
    /* WLDEB */
    VR64, VR32, 
    /* WLEDB */
    VR32, VR64, imm32zx4, imm32zx4, 
    /* X */
    GR32, GR32, ADDR64, disp12imm64, ADDR64, 
    /* XC */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, 
    /* XG */
    GR64, GR64, ADDR64, disp20imm64, ADDR64, 
    /* XGR */
    GR64, GR64, GR64, 
    /* XGRK */
    GR64, GR64, GR64, 
    /* XI */
    ADDR64, disp12imm64, imm32zx8, 
    /* XIHF */
    GRH32, GRH32, uimm32, 
    /* XILF */
    GR32, GR32, uimm32, 
    /* XIY */
    ADDR64, disp20imm64, imm32zx8, 
    /* XR */
    GR32, GR32, GR32, 
    /* XRK */
    GR32, GR32, GR32, 
    /* XSCH */
    /* XY */
    GR32, GR32, ADDR64, disp20imm64, ADDR64, 
    /* ZAP */
    ADDR64, disp12imm64, imm64, ADDR64, disp12imm64, imm64, 
  };
  return OpcodeOperandTypes[Offsets[Opcode] + OpIdx];
}
} // end namespace SystemZ
} // end namespace llvm
#endif // GET_INSTRINFO_OPERAND_TYPE

#ifdef GET_INSTRINFO_MEM_OPERAND_SIZE
#undef GET_INSTRINFO_MEM_OPERAND_SIZE
namespace llvm {
namespace SystemZ {
LLVM_READONLY
static int getMemOperandSize(int OpType) {
  switch (OpType) {
  default: return 0;
  }
}
} // end namespace SystemZ
} // end namespace llvm
#endif // GET_INSTRINFO_MEM_OPERAND_SIZE

#ifdef GET_INSTRINFO_LOGICAL_OPERAND_SIZE_MAP
#undef GET_INSTRINFO_LOGICAL_OPERAND_SIZE_MAP
namespace llvm {
namespace SystemZ {
LLVM_READONLY static unsigned
getLogicalOperandSize(uint16_t Opcode, uint16_t LogicalOpIdx) {
  return LogicalOpIdx;
}
LLVM_READONLY static inline unsigned
getLogicalOperandIdx(uint16_t Opcode, uint16_t LogicalOpIdx) {
  auto S = 0U;
  for (auto i = 0U; i < LogicalOpIdx; ++i)
    S += getLogicalOperandSize(Opcode, i);
  return S;
}
} // end namespace SystemZ
} // end namespace llvm
#endif // GET_INSTRINFO_LOGICAL_OPERAND_SIZE_MAP

#ifdef GET_INSTRINFO_LOGICAL_OPERAND_TYPE_MAP
#undef GET_INSTRINFO_LOGICAL_OPERAND_TYPE_MAP
namespace llvm {
namespace SystemZ {
LLVM_READONLY static int
getLogicalOperandType(uint16_t Opcode, uint16_t LogicalOpIdx) {
  return -1;
}
} // end namespace SystemZ
} // end namespace llvm
#endif // GET_INSTRINFO_LOGICAL_OPERAND_TYPE_MAP

#ifdef GET_INSTRINFO_MC_HELPER_DECLS
#undef GET_INSTRINFO_MC_HELPER_DECLS

namespace llvm {
class MCInst;
class FeatureBitset;

namespace SystemZ_MC {

void verifyInstructionPredicates(unsigned Opcode, const FeatureBitset &Features);

} // end namespace SystemZ_MC
} // end namespace llvm

#endif // GET_INSTRINFO_MC_HELPER_DECLS

#ifdef GET_INSTRINFO_MC_HELPERS
#undef GET_INSTRINFO_MC_HELPERS

namespace llvm {
namespace SystemZ_MC {

} // end namespace SystemZ_MC
} // end namespace llvm

#endif // GET_GENISTRINFO_MC_HELPERS

#ifdef ENABLE_INSTR_PREDICATE_VERIFIER
#undef ENABLE_INSTR_PREDICATE_VERIFIER
#include <sstream>

namespace llvm {
namespace SystemZ_MC {

// Bits for subtarget features that participate in instruction matching.
enum SubtargetFeatureBits : uint8_t {
  Feature_FeatureSoftFloatBit = 33,
  Feature_FeatureDistinctOpsBit = 4,
  Feature_FeatureFastSerializationBit = 9,
  Feature_FeatureFPExtensionBit = 8,
  Feature_FeatureHighWordBit = 11,
  Feature_FeatureInterlockedAccess1Bit = 13,
  Feature_FeatureLoadStoreOnCondBit = 16,
  Feature_FeaturePopulationCountBit = 28,
  Feature_FeatureMessageSecurityAssist3Bit = 18,
  Feature_FeatureMessageSecurityAssist4Bit = 19,
  Feature_FeatureResetReferenceBitsMultipleBit = 32,
  Feature_FeatureExecutionHintBit = 7,
  Feature_FeatureLoadAndTrapBit = 14,
  Feature_FeatureMiscellaneousExtensionsBit = 24,
  Feature_FeatureProcessorAssistBit = 30,
  Feature_FeatureTransactionalExecutionBit = 34,
  Feature_FeatureDFPZonedConversionBit = 2,
  Feature_FeatureEnhancedDAT2Bit = 5,
  Feature_FeatureLoadAndZeroRightmostByteBit = 15,
  Feature_FeatureLoadStoreOnCond2Bit = 17,
  Feature_FeatureMessageSecurityAssist5Bit = 20,
  Feature_FeatureDFPPackedConversionBit = 1,
  Feature_FeatureVectorBit = 35,
  Feature_FeatureMiscellaneousExtensions2Bit = 25,
  Feature_FeatureGuardedStorageBit = 10,
  Feature_FeatureMessageSecurityAssist7Bit = 21,
  Feature_FeatureMessageSecurityAssist8Bit = 22,
  Feature_FeatureVectorEnhancements1Bit = 36,
  Feature_FeatureVectorPackedDecimalBit = 38,
  Feature_FeatureInsertReferenceBitsMultipleBit = 12,
  Feature_FeatureMiscellaneousExtensions3Bit = 26,
  Feature_FeatureMessageSecurityAssist9Bit = 23,
  Feature_FeatureVectorEnhancements2Bit = 37,
  Feature_FeatureVectorPackedDecimalEnhancementBit = 39,
  Feature_FeatureEnhancedSortBit = 6,
  Feature_FeatureDeflateConversionBit = 3,
  Feature_FeatureVectorPackedDecimalEnhancement2Bit = 40,
  Feature_FeatureNNPAssistBit = 27,
  Feature_FeatureBEAREnhancementBit = 0,
  Feature_FeatureResetDATProtectionBit = 31,
  Feature_FeatureProcessorActivityInstrumentationBit = 29,
};

#ifndef NDEBUG
static const char *SubtargetFeatureNames[] = {
  "Feature_FeatureBEAREnhancement",
  "Feature_FeatureDFPPackedConversion",
  "Feature_FeatureDFPZonedConversion",
  "Feature_FeatureDeflateConversion",
  "Feature_FeatureDistinctOps",
  "Feature_FeatureEnhancedDAT2",
  "Feature_FeatureEnhancedSort",
  "Feature_FeatureExecutionHint",
  "Feature_FeatureFPExtension",
  "Feature_FeatureFastSerialization",
  "Feature_FeatureGuardedStorage",
  "Feature_FeatureHighWord",
  "Feature_FeatureInsertReferenceBitsMultiple",
  "Feature_FeatureInterlockedAccess1",
  "Feature_FeatureLoadAndTrap",
  "Feature_FeatureLoadAndZeroRightmostByte",
  "Feature_FeatureLoadStoreOnCond",
  "Feature_FeatureLoadStoreOnCond2",
  "Feature_FeatureMessageSecurityAssist3",
  "Feature_FeatureMessageSecurityAssist4",
  "Feature_FeatureMessageSecurityAssist5",
  "Feature_FeatureMessageSecurityAssist7",
  "Feature_FeatureMessageSecurityAssist8",
  "Feature_FeatureMessageSecurityAssist9",
  "Feature_FeatureMiscellaneousExtensions",
  "Feature_FeatureMiscellaneousExtensions2",
  "Feature_FeatureMiscellaneousExtensions3",
  "Feature_FeatureNNPAssist",
  "Feature_FeaturePopulationCount",
  "Feature_FeatureProcessorActivityInstrumentation",
  "Feature_FeatureProcessorAssist",
  "Feature_FeatureResetDATProtection",
  "Feature_FeatureResetReferenceBitsMultiple",
  "Feature_FeatureSoftFloat",
  "Feature_FeatureTransactionalExecution",
  "Feature_FeatureVector",
  "Feature_FeatureVectorEnhancements1",
  "Feature_FeatureVectorEnhancements2",
  "Feature_FeatureVectorPackedDecimal",
  "Feature_FeatureVectorPackedDecimalEnhancement",
  "Feature_FeatureVectorPackedDecimalEnhancement2",
  nullptr
};

#endif // NDEBUG

FeatureBitset computeAvailableFeatures(const FeatureBitset &FB) {
  FeatureBitset Features;
  if (FB[SystemZ::FeatureSoftFloat])
    Features.set(Feature_FeatureSoftFloatBit);
  if (FB[SystemZ::FeatureDistinctOps])
    Features.set(Feature_FeatureDistinctOpsBit);
  if (FB[SystemZ::FeatureFastSerialization])
    Features.set(Feature_FeatureFastSerializationBit);
  if (FB[SystemZ::FeatureFPExtension])
    Features.set(Feature_FeatureFPExtensionBit);
  if (FB[SystemZ::FeatureHighWord])
    Features.set(Feature_FeatureHighWordBit);
  if (FB[SystemZ::FeatureInterlockedAccess1])
    Features.set(Feature_FeatureInterlockedAccess1Bit);
  if (FB[SystemZ::FeatureLoadStoreOnCond])
    Features.set(Feature_FeatureLoadStoreOnCondBit);
  if (FB[SystemZ::FeaturePopulationCount])
    Features.set(Feature_FeaturePopulationCountBit);
  if (FB[SystemZ::FeatureMessageSecurityAssist3])
    Features.set(Feature_FeatureMessageSecurityAssist3Bit);
  if (FB[SystemZ::FeatureMessageSecurityAssist4])
    Features.set(Feature_FeatureMessageSecurityAssist4Bit);
  if (FB[SystemZ::FeatureResetReferenceBitsMultiple])
    Features.set(Feature_FeatureResetReferenceBitsMultipleBit);
  if (FB[SystemZ::FeatureExecutionHint])
    Features.set(Feature_FeatureExecutionHintBit);
  if (FB[SystemZ::FeatureLoadAndTrap])
    Features.set(Feature_FeatureLoadAndTrapBit);
  if (FB[SystemZ::FeatureMiscellaneousExtensions])
    Features.set(Feature_FeatureMiscellaneousExtensionsBit);
  if (FB[SystemZ::FeatureProcessorAssist])
    Features.set(Feature_FeatureProcessorAssistBit);
  if (FB[SystemZ::FeatureTransactionalExecution])
    Features.set(Feature_FeatureTransactionalExecutionBit);
  if (FB[SystemZ::FeatureDFPZonedConversion])
    Features.set(Feature_FeatureDFPZonedConversionBit);
  if (FB[SystemZ::FeatureEnhancedDAT2])
    Features.set(Feature_FeatureEnhancedDAT2Bit);
  if (FB[SystemZ::FeatureLoadAndZeroRightmostByte])
    Features.set(Feature_FeatureLoadAndZeroRightmostByteBit);
  if (FB[SystemZ::FeatureLoadStoreOnCond2])
    Features.set(Feature_FeatureLoadStoreOnCond2Bit);
  if (FB[SystemZ::FeatureMessageSecurityAssist5])
    Features.set(Feature_FeatureMessageSecurityAssist5Bit);
  if (FB[SystemZ::FeatureDFPPackedConversion])
    Features.set(Feature_FeatureDFPPackedConversionBit);
  if (FB[SystemZ::FeatureVector])
    Features.set(Feature_FeatureVectorBit);
  if (FB[SystemZ::FeatureMiscellaneousExtensions2])
    Features.set(Feature_FeatureMiscellaneousExtensions2Bit);
  if (FB[SystemZ::FeatureGuardedStorage])
    Features.set(Feature_FeatureGuardedStorageBit);
  if (FB[SystemZ::FeatureMessageSecurityAssist7])
    Features.set(Feature_FeatureMessageSecurityAssist7Bit);
  if (FB[SystemZ::FeatureMessageSecurityAssist8])
    Features.set(Feature_FeatureMessageSecurityAssist8Bit);
  if (FB[SystemZ::FeatureVectorEnhancements1])
    Features.set(Feature_FeatureVectorEnhancements1Bit);
  if (FB[SystemZ::FeatureVectorPackedDecimal])
    Features.set(Feature_FeatureVectorPackedDecimalBit);
  if (FB[SystemZ::FeatureInsertReferenceBitsMultiple])
    Features.set(Feature_FeatureInsertReferenceBitsMultipleBit);
  if (FB[SystemZ::FeatureMiscellaneousExtensions3])
    Features.set(Feature_FeatureMiscellaneousExtensions3Bit);
  if (FB[SystemZ::FeatureMessageSecurityAssist9])
    Features.set(Feature_FeatureMessageSecurityAssist9Bit);
  if (FB[SystemZ::FeatureVectorEnhancements2])
    Features.set(Feature_FeatureVectorEnhancements2Bit);
  if (FB[SystemZ::FeatureVectorPackedDecimalEnhancement])
    Features.set(Feature_FeatureVectorPackedDecimalEnhancementBit);
  if (FB[SystemZ::FeatureEnhancedSort])
    Features.set(Feature_FeatureEnhancedSortBit);
  if (FB[SystemZ::FeatureDeflateConversion])
    Features.set(Feature_FeatureDeflateConversionBit);
  if (FB[SystemZ::FeatureVectorPackedDecimalEnhancement2])
    Features.set(Feature_FeatureVectorPackedDecimalEnhancement2Bit);
  if (FB[SystemZ::FeatureNNPAssist])
    Features.set(Feature_FeatureNNPAssistBit);
  if (FB[SystemZ::FeatureBEAREnhancement])
    Features.set(Feature_FeatureBEAREnhancementBit);
  if (FB[SystemZ::FeatureResetDATProtection])
    Features.set(Feature_FeatureResetDATProtectionBit);
  if (FB[SystemZ::FeatureProcessorActivityInstrumentation])
    Features.set(Feature_FeatureProcessorActivityInstrumentationBit);
  return Features;
}

#ifndef NDEBUG
// Feature bitsets.
enum : uint8_t {
  CEFBS_None,
  CEFBS_FeatureBEAREnhancement,
  CEFBS_FeatureDFPPackedConversion,
  CEFBS_FeatureDFPZonedConversion,
  CEFBS_FeatureDeflateConversion,
  CEFBS_FeatureDistinctOps,
  CEFBS_FeatureEnhancedDAT2,
  CEFBS_FeatureEnhancedSort,
  CEFBS_FeatureExecutionHint,
  CEFBS_FeatureFPExtension,
  CEFBS_FeatureGuardedStorage,
  CEFBS_FeatureHighWord,
  CEFBS_FeatureInsertReferenceBitsMultiple,
  CEFBS_FeatureInterlockedAccess1,
  CEFBS_FeatureLoadAndTrap,
  CEFBS_FeatureLoadAndZeroRightmostByte,
  CEFBS_FeatureLoadStoreOnCond,
  CEFBS_FeatureLoadStoreOnCond2,
  CEFBS_FeatureMessageSecurityAssist3,
  CEFBS_FeatureMessageSecurityAssist4,
  CEFBS_FeatureMessageSecurityAssist5,
  CEFBS_FeatureMessageSecurityAssist7,
  CEFBS_FeatureMessageSecurityAssist8,
  CEFBS_FeatureMessageSecurityAssist9,
  CEFBS_FeatureMiscellaneousExtensions,
  CEFBS_FeatureMiscellaneousExtensions2,
  CEFBS_FeatureMiscellaneousExtensions3,
  CEFBS_FeatureNNPAssist,
  CEFBS_FeaturePopulationCount,
  CEFBS_FeatureProcessorActivityInstrumentation,
  CEFBS_FeatureProcessorAssist,
  CEFBS_FeatureResetDATProtection,
  CEFBS_FeatureResetReferenceBitsMultiple,
  CEFBS_FeatureTransactionalExecution,
  CEFBS_FeatureVector,
  CEFBS_FeatureVectorEnhancements1,
  CEFBS_FeatureVectorEnhancements2,
  CEFBS_FeatureVectorPackedDecimal,
  CEFBS_FeatureVectorPackedDecimalEnhancement,
  CEFBS_FeatureVectorPackedDecimalEnhancement2,
  CEFBS_FeatureHighWord_FeatureDistinctOps,
  CEFBS_FeatureVector_FeatureNNPAssist,
};

static constexpr FeatureBitset FeatureBitsets[] = {
  {}, // CEFBS_None
  {Feature_FeatureBEAREnhancementBit, },
  {Feature_FeatureDFPPackedConversionBit, },
  {Feature_FeatureDFPZonedConversionBit, },
  {Feature_FeatureDeflateConversionBit, },
  {Feature_FeatureDistinctOpsBit, },
  {Feature_FeatureEnhancedDAT2Bit, },
  {Feature_FeatureEnhancedSortBit, },
  {Feature_FeatureExecutionHintBit, },
  {Feature_FeatureFPExtensionBit, },
  {Feature_FeatureGuardedStorageBit, },
  {Feature_FeatureHighWordBit, },
  {Feature_FeatureInsertReferenceBitsMultipleBit, },
  {Feature_FeatureInterlockedAccess1Bit, },
  {Feature_FeatureLoadAndTrapBit, },
  {Feature_FeatureLoadAndZeroRightmostByteBit, },
  {Feature_FeatureLoadStoreOnCondBit, },
  {Feature_FeatureLoadStoreOnCond2Bit, },
  {Feature_FeatureMessageSecurityAssist3Bit, },
  {Feature_FeatureMessageSecurityAssist4Bit, },
  {Feature_FeatureMessageSecurityAssist5Bit, },
  {Feature_FeatureMessageSecurityAssist7Bit, },
  {Feature_FeatureMessageSecurityAssist8Bit, },
  {Feature_FeatureMessageSecurityAssist9Bit, },
  {Feature_FeatureMiscellaneousExtensionsBit, },
  {Feature_FeatureMiscellaneousExtensions2Bit, },
  {Feature_FeatureMiscellaneousExtensions3Bit, },
  {Feature_FeatureNNPAssistBit, },
  {Feature_FeaturePopulationCountBit, },
  {Feature_FeatureProcessorActivityInstrumentationBit, },
  {Feature_FeatureProcessorAssistBit, },
  {Feature_FeatureResetDATProtectionBit, },
  {Feature_FeatureResetReferenceBitsMultipleBit, },
  {Feature_FeatureTransactionalExecutionBit, },
  {Feature_FeatureVectorBit, },
  {Feature_FeatureVectorEnhancements1Bit, },
  {Feature_FeatureVectorEnhancements2Bit, },
  {Feature_FeatureVectorPackedDecimalBit, },
  {Feature_FeatureVectorPackedDecimalEnhancementBit, },
  {Feature_FeatureVectorPackedDecimalEnhancement2Bit, },
  {Feature_FeatureHighWordBit, Feature_FeatureDistinctOpsBit, },
  {Feature_FeatureVectorBit, Feature_FeatureNNPAssistBit, },
};
#endif // NDEBUG

void verifyInstructionPredicates(
    unsigned Opcode, const FeatureBitset &Features) {
#ifndef NDEBUG
  static uint8_t RequiredFeaturesRefs[] = {
    CEFBS_None, // PHI = 0
    CEFBS_None, // INLINEASM = 1
    CEFBS_None, // INLINEASM_BR = 2
    CEFBS_None, // CFI_INSTRUCTION = 3
    CEFBS_None, // EH_LABEL = 4
    CEFBS_None, // GC_LABEL = 5
    CEFBS_None, // ANNOTATION_LABEL = 6
    CEFBS_None, // KILL = 7
    CEFBS_None, // EXTRACT_SUBREG = 8
    CEFBS_None, // INSERT_SUBREG = 9
    CEFBS_None, // IMPLICIT_DEF = 10
    CEFBS_None, // SUBREG_TO_REG = 11
    CEFBS_None, // COPY_TO_REGCLASS = 12
    CEFBS_None, // DBG_VALUE = 13
    CEFBS_None, // DBG_VALUE_LIST = 14
    CEFBS_None, // DBG_INSTR_REF = 15
    CEFBS_None, // DBG_PHI = 16
    CEFBS_None, // DBG_LABEL = 17
    CEFBS_None, // REG_SEQUENCE = 18
    CEFBS_None, // COPY = 19
    CEFBS_None, // BUNDLE = 20
    CEFBS_None, // LIFETIME_START = 21
    CEFBS_None, // LIFETIME_END = 22
    CEFBS_None, // PSEUDO_PROBE = 23
    CEFBS_None, // ARITH_FENCE = 24
    CEFBS_None, // STACKMAP = 25
    CEFBS_None, // FENTRY_CALL = 26
    CEFBS_None, // PATCHPOINT = 27
    CEFBS_None, // LOAD_STACK_GUARD = 28
    CEFBS_None, // PREALLOCATED_SETUP = 29
    CEFBS_None, // PREALLOCATED_ARG = 30
    CEFBS_None, // STATEPOINT = 31
    CEFBS_None, // LOCAL_ESCAPE = 32
    CEFBS_None, // FAULTING_OP = 33
    CEFBS_None, // PATCHABLE_OP = 34
    CEFBS_None, // PATCHABLE_FUNCTION_ENTER = 35
    CEFBS_None, // PATCHABLE_RET = 36
    CEFBS_None, // PATCHABLE_FUNCTION_EXIT = 37
    CEFBS_None, // PATCHABLE_TAIL_CALL = 38
    CEFBS_None, // PATCHABLE_EVENT_CALL = 39
    CEFBS_None, // PATCHABLE_TYPED_EVENT_CALL = 40
    CEFBS_None, // ICALL_BRANCH_FUNNEL = 41
    CEFBS_None, // MEMBARRIER = 42
    CEFBS_None, // G_ASSERT_SEXT = 43
    CEFBS_None, // G_ASSERT_ZEXT = 44
    CEFBS_None, // G_ASSERT_ALIGN = 45
    CEFBS_None, // G_ADD = 46
    CEFBS_None, // G_SUB = 47
    CEFBS_None, // G_MUL = 48
    CEFBS_None, // G_SDIV = 49
    CEFBS_None, // G_UDIV = 50
    CEFBS_None, // G_SREM = 51
    CEFBS_None, // G_UREM = 52
    CEFBS_None, // G_SDIVREM = 53
    CEFBS_None, // G_UDIVREM = 54
    CEFBS_None, // G_AND = 55
    CEFBS_None, // G_OR = 56
    CEFBS_None, // G_XOR = 57
    CEFBS_None, // G_IMPLICIT_DEF = 58
    CEFBS_None, // G_PHI = 59
    CEFBS_None, // G_FRAME_INDEX = 60
    CEFBS_None, // G_GLOBAL_VALUE = 61
    CEFBS_None, // G_CONSTANT_POOL = 62
    CEFBS_None, // G_EXTRACT = 63
    CEFBS_None, // G_UNMERGE_VALUES = 64
    CEFBS_None, // G_INSERT = 65
    CEFBS_None, // G_MERGE_VALUES = 66
    CEFBS_None, // G_BUILD_VECTOR = 67
    CEFBS_None, // G_BUILD_VECTOR_TRUNC = 68
    CEFBS_None, // G_CONCAT_VECTORS = 69
    CEFBS_None, // G_PTRTOINT = 70
    CEFBS_None, // G_INTTOPTR = 71
    CEFBS_None, // G_BITCAST = 72
    CEFBS_None, // G_FREEZE = 73
    CEFBS_None, // G_INTRINSIC_FPTRUNC_ROUND = 74
    CEFBS_None, // G_INTRINSIC_TRUNC = 75
    CEFBS_None, // G_INTRINSIC_ROUND = 76
    CEFBS_None, // G_INTRINSIC_LRINT = 77
    CEFBS_None, // G_INTRINSIC_ROUNDEVEN = 78
    CEFBS_None, // G_READCYCLECOUNTER = 79
    CEFBS_None, // G_LOAD = 80
    CEFBS_None, // G_SEXTLOAD = 81
    CEFBS_None, // G_ZEXTLOAD = 82
    CEFBS_None, // G_INDEXED_LOAD = 83
    CEFBS_None, // G_INDEXED_SEXTLOAD = 84
    CEFBS_None, // G_INDEXED_ZEXTLOAD = 85
    CEFBS_None, // G_STORE = 86
    CEFBS_None, // G_INDEXED_STORE = 87
    CEFBS_None, // G_ATOMIC_CMPXCHG_WITH_SUCCESS = 88
    CEFBS_None, // G_ATOMIC_CMPXCHG = 89
    CEFBS_None, // G_ATOMICRMW_XCHG = 90
    CEFBS_None, // G_ATOMICRMW_ADD = 91
    CEFBS_None, // G_ATOMICRMW_SUB = 92
    CEFBS_None, // G_ATOMICRMW_AND = 93
    CEFBS_None, // G_ATOMICRMW_NAND = 94
    CEFBS_None, // G_ATOMICRMW_OR = 95
    CEFBS_None, // G_ATOMICRMW_XOR = 96
    CEFBS_None, // G_ATOMICRMW_MAX = 97
    CEFBS_None, // G_ATOMICRMW_MIN = 98
    CEFBS_None, // G_ATOMICRMW_UMAX = 99
    CEFBS_None, // G_ATOMICRMW_UMIN = 100
    CEFBS_None, // G_ATOMICRMW_FADD = 101
    CEFBS_None, // G_ATOMICRMW_FSUB = 102
    CEFBS_None, // G_ATOMICRMW_FMAX = 103
    CEFBS_None, // G_ATOMICRMW_FMIN = 104
    CEFBS_None, // G_ATOMICRMW_UINC_WRAP = 105
    CEFBS_None, // G_ATOMICRMW_UDEC_WRAP = 106
    CEFBS_None, // G_FENCE = 107
    CEFBS_None, // G_BRCOND = 108
    CEFBS_None, // G_BRINDIRECT = 109
    CEFBS_None, // G_INVOKE_REGION_START = 110
    CEFBS_None, // G_INTRINSIC = 111
    CEFBS_None, // G_INTRINSIC_W_SIDE_EFFECTS = 112
    CEFBS_None, // G_ANYEXT = 113
    CEFBS_None, // G_TRUNC = 114
    CEFBS_None, // G_CONSTANT = 115
    CEFBS_None, // G_FCONSTANT = 116
    CEFBS_None, // G_VASTART = 117
    CEFBS_None, // G_VAARG = 118
    CEFBS_None, // G_SEXT = 119
    CEFBS_None, // G_SEXT_INREG = 120
    CEFBS_None, // G_ZEXT = 121
    CEFBS_None, // G_SHL = 122
    CEFBS_None, // G_LSHR = 123
    CEFBS_None, // G_ASHR = 124
    CEFBS_None, // G_FSHL = 125
    CEFBS_None, // G_FSHR = 126
    CEFBS_None, // G_ROTR = 127
    CEFBS_None, // G_ROTL = 128
    CEFBS_None, // G_ICMP = 129
    CEFBS_None, // G_FCMP = 130
    CEFBS_None, // G_SELECT = 131
    CEFBS_None, // G_UADDO = 132
    CEFBS_None, // G_UADDE = 133
    CEFBS_None, // G_USUBO = 134
    CEFBS_None, // G_USUBE = 135
    CEFBS_None, // G_SADDO = 136
    CEFBS_None, // G_SADDE = 137
    CEFBS_None, // G_SSUBO = 138
    CEFBS_None, // G_SSUBE = 139
    CEFBS_None, // G_UMULO = 140
    CEFBS_None, // G_SMULO = 141
    CEFBS_None, // G_UMULH = 142
    CEFBS_None, // G_SMULH = 143
    CEFBS_None, // G_UADDSAT = 144
    CEFBS_None, // G_SADDSAT = 145
    CEFBS_None, // G_USUBSAT = 146
    CEFBS_None, // G_SSUBSAT = 147
    CEFBS_None, // G_USHLSAT = 148
    CEFBS_None, // G_SSHLSAT = 149
    CEFBS_None, // G_SMULFIX = 150
    CEFBS_None, // G_UMULFIX = 151
    CEFBS_None, // G_SMULFIXSAT = 152
    CEFBS_None, // G_UMULFIXSAT = 153
    CEFBS_None, // G_SDIVFIX = 154
    CEFBS_None, // G_UDIVFIX = 155
    CEFBS_None, // G_SDIVFIXSAT = 156
    CEFBS_None, // G_UDIVFIXSAT = 157
    CEFBS_None, // G_FADD = 158
    CEFBS_None, // G_FSUB = 159
    CEFBS_None, // G_FMUL = 160
    CEFBS_None, // G_FMA = 161
    CEFBS_None, // G_FMAD = 162
    CEFBS_None, // G_FDIV = 163
    CEFBS_None, // G_FREM = 164
    CEFBS_None, // G_FPOW = 165
    CEFBS_None, // G_FPOWI = 166
    CEFBS_None, // G_FEXP = 167
    CEFBS_None, // G_FEXP2 = 168
    CEFBS_None, // G_FLOG = 169
    CEFBS_None, // G_FLOG2 = 170
    CEFBS_None, // G_FLOG10 = 171
    CEFBS_None, // G_FNEG = 172
    CEFBS_None, // G_FPEXT = 173
    CEFBS_None, // G_FPTRUNC = 174
    CEFBS_None, // G_FPTOSI = 175
    CEFBS_None, // G_FPTOUI = 176
    CEFBS_None, // G_SITOFP = 177
    CEFBS_None, // G_UITOFP = 178
    CEFBS_None, // G_FABS = 179
    CEFBS_None, // G_FCOPYSIGN = 180
    CEFBS_None, // G_IS_FPCLASS = 181
    CEFBS_None, // G_FCANONICALIZE = 182
    CEFBS_None, // G_FMINNUM = 183
    CEFBS_None, // G_FMAXNUM = 184
    CEFBS_None, // G_FMINNUM_IEEE = 185
    CEFBS_None, // G_FMAXNUM_IEEE = 186
    CEFBS_None, // G_FMINIMUM = 187
    CEFBS_None, // G_FMAXIMUM = 188
    CEFBS_None, // G_PTR_ADD = 189
    CEFBS_None, // G_PTRMASK = 190
    CEFBS_None, // G_SMIN = 191
    CEFBS_None, // G_SMAX = 192
    CEFBS_None, // G_UMIN = 193
    CEFBS_None, // G_UMAX = 194
    CEFBS_None, // G_ABS = 195
    CEFBS_None, // G_LROUND = 196
    CEFBS_None, // G_LLROUND = 197
    CEFBS_None, // G_BR = 198
    CEFBS_None, // G_BRJT = 199
    CEFBS_None, // G_INSERT_VECTOR_ELT = 200
    CEFBS_None, // G_EXTRACT_VECTOR_ELT = 201
    CEFBS_None, // G_SHUFFLE_VECTOR = 202
    CEFBS_None, // G_CTTZ = 203
    CEFBS_None, // G_CTTZ_ZERO_UNDEF = 204
    CEFBS_None, // G_CTLZ = 205
    CEFBS_None, // G_CTLZ_ZERO_UNDEF = 206
    CEFBS_None, // G_CTPOP = 207
    CEFBS_None, // G_BSWAP = 208
    CEFBS_None, // G_BITREVERSE = 209
    CEFBS_None, // G_FCEIL = 210
    CEFBS_None, // G_FCOS = 211
    CEFBS_None, // G_FSIN = 212
    CEFBS_None, // G_FSQRT = 213
    CEFBS_None, // G_FFLOOR = 214
    CEFBS_None, // G_FRINT = 215
    CEFBS_None, // G_FNEARBYINT = 216
    CEFBS_None, // G_ADDRSPACE_CAST = 217
    CEFBS_None, // G_BLOCK_ADDR = 218
    CEFBS_None, // G_JUMP_TABLE = 219
    CEFBS_None, // G_DYN_STACKALLOC = 220
    CEFBS_None, // G_STRICT_FADD = 221
    CEFBS_None, // G_STRICT_FSUB = 222
    CEFBS_None, // G_STRICT_FMUL = 223
    CEFBS_None, // G_STRICT_FDIV = 224
    CEFBS_None, // G_STRICT_FREM = 225
    CEFBS_None, // G_STRICT_FMA = 226
    CEFBS_None, // G_STRICT_FSQRT = 227
    CEFBS_None, // G_READ_REGISTER = 228
    CEFBS_None, // G_WRITE_REGISTER = 229
    CEFBS_None, // G_MEMCPY = 230
    CEFBS_None, // G_MEMCPY_INLINE = 231
    CEFBS_None, // G_MEMMOVE = 232
    CEFBS_None, // G_MEMSET = 233
    CEFBS_None, // G_BZERO = 234
    CEFBS_None, // G_VECREDUCE_SEQ_FADD = 235
    CEFBS_None, // G_VECREDUCE_SEQ_FMUL = 236
    CEFBS_None, // G_VECREDUCE_FADD = 237
    CEFBS_None, // G_VECREDUCE_FMUL = 238
    CEFBS_None, // G_VECREDUCE_FMAX = 239
    CEFBS_None, // G_VECREDUCE_FMIN = 240
    CEFBS_None, // G_VECREDUCE_ADD = 241
    CEFBS_None, // G_VECREDUCE_MUL = 242
    CEFBS_None, // G_VECREDUCE_AND = 243
    CEFBS_None, // G_VECREDUCE_OR = 244
    CEFBS_None, // G_VECREDUCE_XOR = 245
    CEFBS_None, // G_VECREDUCE_SMAX = 246
    CEFBS_None, // G_VECREDUCE_SMIN = 247
    CEFBS_None, // G_VECREDUCE_UMAX = 248
    CEFBS_None, // G_VECREDUCE_UMIN = 249
    CEFBS_None, // G_SBFX = 250
    CEFBS_None, // G_UBFX = 251
    CEFBS_None, // ADB_MemFoldPseudo = 252
    CEFBS_None, // ADJCALLSTACKDOWN = 253
    CEFBS_None, // ADJCALLSTACKUP = 254
    CEFBS_None, // ADJDYNALLOC = 255
    CEFBS_None, // AEB_MemFoldPseudo = 256
    CEFBS_None, // AEXT128 = 257
    CEFBS_FeatureHighWord, // AFIMux = 258
    CEFBS_None, // AG_MemFoldPseudo = 259
    CEFBS_FeatureHighWord, // AHIMux = 260
    CEFBS_FeatureHighWord_FeatureDistinctOps, // AHIMuxK = 261
    CEFBS_None, // ALG_MemFoldPseudo = 262
    CEFBS_None, // AL_MemFoldPseudo = 263
    CEFBS_None, // ATOMIC_CMP_SWAPW = 264
    CEFBS_None, // ATOMIC_LOADW_AFI = 265
    CEFBS_None, // ATOMIC_LOADW_AR = 266
    CEFBS_None, // ATOMIC_LOADW_MAX = 267
    CEFBS_None, // ATOMIC_LOADW_MIN = 268
    CEFBS_None, // ATOMIC_LOADW_NILH = 269
    CEFBS_None, // ATOMIC_LOADW_NILHi = 270
    CEFBS_None, // ATOMIC_LOADW_NR = 271
    CEFBS_None, // ATOMIC_LOADW_NRi = 272
    CEFBS_None, // ATOMIC_LOADW_OILH = 273
    CEFBS_None, // ATOMIC_LOADW_OR = 274
    CEFBS_None, // ATOMIC_LOADW_SR = 275
    CEFBS_None, // ATOMIC_LOADW_UMAX = 276
    CEFBS_None, // ATOMIC_LOADW_UMIN = 277
    CEFBS_None, // ATOMIC_LOADW_XILF = 278
    CEFBS_None, // ATOMIC_LOADW_XR = 279
    CEFBS_None, // ATOMIC_LOAD_AFI = 280
    CEFBS_None, // ATOMIC_LOAD_AGFI = 281
    CEFBS_None, // ATOMIC_LOAD_AGHI = 282
    CEFBS_None, // ATOMIC_LOAD_AGR = 283
    CEFBS_None, // ATOMIC_LOAD_AHI = 284
    CEFBS_None, // ATOMIC_LOAD_AR = 285
    CEFBS_None, // ATOMIC_LOAD_MAX_32 = 286
    CEFBS_None, // ATOMIC_LOAD_MAX_64 = 287
    CEFBS_None, // ATOMIC_LOAD_MIN_32 = 288
    CEFBS_None, // ATOMIC_LOAD_MIN_64 = 289
    CEFBS_None, // ATOMIC_LOAD_NGR = 290
    CEFBS_None, // ATOMIC_LOAD_NGRi = 291
    CEFBS_None, // ATOMIC_LOAD_NIHF64 = 292
    CEFBS_None, // ATOMIC_LOAD_NIHF64i = 293
    CEFBS_None, // ATOMIC_LOAD_NIHH64 = 294
    CEFBS_None, // ATOMIC_LOAD_NIHH64i = 295
    CEFBS_None, // ATOMIC_LOAD_NIHL64 = 296
    CEFBS_None, // ATOMIC_LOAD_NIHL64i = 297
    CEFBS_None, // ATOMIC_LOAD_NILF = 298
    CEFBS_None, // ATOMIC_LOAD_NILF64 = 299
    CEFBS_None, // ATOMIC_LOAD_NILF64i = 300
    CEFBS_None, // ATOMIC_LOAD_NILFi = 301
    CEFBS_None, // ATOMIC_LOAD_NILH = 302
    CEFBS_None, // ATOMIC_LOAD_NILH64 = 303
    CEFBS_None, // ATOMIC_LOAD_NILH64i = 304
    CEFBS_None, // ATOMIC_LOAD_NILHi = 305
    CEFBS_None, // ATOMIC_LOAD_NILL = 306
    CEFBS_None, // ATOMIC_LOAD_NILL64 = 307
    CEFBS_None, // ATOMIC_LOAD_NILL64i = 308
    CEFBS_None, // ATOMIC_LOAD_NILLi = 309
    CEFBS_None, // ATOMIC_LOAD_NR = 310
    CEFBS_None, // ATOMIC_LOAD_NRi = 311
    CEFBS_None, // ATOMIC_LOAD_OGR = 312
    CEFBS_None, // ATOMIC_LOAD_OIHF64 = 313
    CEFBS_None, // ATOMIC_LOAD_OIHH64 = 314
    CEFBS_None, // ATOMIC_LOAD_OIHL64 = 315
    CEFBS_None, // ATOMIC_LOAD_OILF = 316
    CEFBS_None, // ATOMIC_LOAD_OILF64 = 317
    CEFBS_None, // ATOMIC_LOAD_OILH = 318
    CEFBS_None, // ATOMIC_LOAD_OILH64 = 319
    CEFBS_None, // ATOMIC_LOAD_OILL = 320
    CEFBS_None, // ATOMIC_LOAD_OILL64 = 321
    CEFBS_None, // ATOMIC_LOAD_OR = 322
    CEFBS_None, // ATOMIC_LOAD_SGR = 323
    CEFBS_None, // ATOMIC_LOAD_SR = 324
    CEFBS_None, // ATOMIC_LOAD_UMAX_32 = 325
    CEFBS_None, // ATOMIC_LOAD_UMAX_64 = 326
    CEFBS_None, // ATOMIC_LOAD_UMIN_32 = 327
    CEFBS_None, // ATOMIC_LOAD_UMIN_64 = 328
    CEFBS_None, // ATOMIC_LOAD_XGR = 329
    CEFBS_None, // ATOMIC_LOAD_XIHF64 = 330
    CEFBS_None, // ATOMIC_LOAD_XILF = 331
    CEFBS_None, // ATOMIC_LOAD_XILF64 = 332
    CEFBS_None, // ATOMIC_LOAD_XR = 333
    CEFBS_None, // ATOMIC_SWAPW = 334
    CEFBS_None, // ATOMIC_SWAP_32 = 335
    CEFBS_None, // ATOMIC_SWAP_64 = 336
    CEFBS_None, // A_MemFoldPseudo = 337
    CEFBS_FeatureHighWord, // CFIMux = 338
    CEFBS_None, // CGIBCall = 339
    CEFBS_None, // CGIBReturn = 340
    CEFBS_None, // CGRBCall = 341
    CEFBS_None, // CGRBReturn = 342
    CEFBS_FeatureHighWord, // CHIMux = 343
    CEFBS_None, // CIBCall = 344
    CEFBS_None, // CIBReturn = 345
    CEFBS_None, // CLCImm = 346
    CEFBS_None, // CLCReg = 347
    CEFBS_FeatureHighWord, // CLFIMux = 348
    CEFBS_None, // CLGIBCall = 349
    CEFBS_None, // CLGIBReturn = 350
    CEFBS_None, // CLGRBCall = 351
    CEFBS_None, // CLGRBReturn = 352
    CEFBS_None, // CLIBCall = 353
    CEFBS_None, // CLIBReturn = 354
    CEFBS_FeatureHighWord, // CLMux = 355
    CEFBS_None, // CLRBCall = 356
    CEFBS_None, // CLRBReturn = 357
    CEFBS_None, // CLSTLoop = 358
    CEFBS_FeatureHighWord, // CMux = 359
    CEFBS_None, // CRBCall = 360
    CEFBS_None, // CRBReturn = 361
    CEFBS_None, // CallBASR = 362
    CEFBS_None, // CallBASR_STACKEXT = 363
    CEFBS_None, // CallBASR_XPLINK64 = 364
    CEFBS_None, // CallBCR = 365
    CEFBS_None, // CallBR = 366
    CEFBS_None, // CallBRASL = 367
    CEFBS_None, // CallBRASL_XPLINK64 = 368
    CEFBS_None, // CallBRCL = 369
    CEFBS_None, // CallJG = 370
    CEFBS_None, // CondReturn = 371
    CEFBS_None, // CondReturn_XPLINK = 372
    CEFBS_None, // CondStore16 = 373
    CEFBS_None, // CondStore16Inv = 374
    CEFBS_FeatureHighWord, // CondStore16Mux = 375
    CEFBS_FeatureHighWord, // CondStore16MuxInv = 376
    CEFBS_None, // CondStore32 = 377
    CEFBS_None, // CondStore32Inv = 378
    CEFBS_FeatureLoadStoreOnCond2, // CondStore32Mux = 379
    CEFBS_FeatureLoadStoreOnCond2, // CondStore32MuxInv = 380
    CEFBS_None, // CondStore64 = 381
    CEFBS_None, // CondStore64Inv = 382
    CEFBS_None, // CondStore8 = 383
    CEFBS_None, // CondStore8Inv = 384
    CEFBS_FeatureHighWord, // CondStore8Mux = 385
    CEFBS_FeatureHighWord, // CondStore8MuxInv = 386
    CEFBS_None, // CondStoreF32 = 387
    CEFBS_None, // CondStoreF32Inv = 388
    CEFBS_None, // CondStoreF64 = 389
    CEFBS_None, // CondStoreF64Inv = 390
    CEFBS_None, // CondTrap = 391
    CEFBS_None, // DDB_MemFoldPseudo = 392
    CEFBS_None, // DEB_MemFoldPseudo = 393
    CEFBS_None, // EXRL_Pseudo = 394
    CEFBS_None, // GOT = 395
    CEFBS_FeatureHighWord, // IIFMux = 396
    CEFBS_None, // IIHF64 = 397
    CEFBS_None, // IIHH64 = 398
    CEFBS_None, // IIHL64 = 399
    CEFBS_FeatureHighWord, // IIHMux = 400
    CEFBS_None, // IILF64 = 401
    CEFBS_None, // IILH64 = 402
    CEFBS_None, // IILL64 = 403
    CEFBS_FeatureHighWord, // IILMux = 404
    CEFBS_None, // L128 = 405
    CEFBS_FeatureHighWord, // LBMux = 406
    CEFBS_FeatureVector, // LEFR = 407
    CEFBS_FeatureVector, // LFER = 408
    CEFBS_FeatureHighWord, // LHIMux = 409
    CEFBS_FeatureHighWord, // LHMux = 410
    CEFBS_FeatureHighWord, // LLCMux = 411
    CEFBS_FeatureHighWord, // LLCRMux = 412
    CEFBS_FeatureHighWord, // LLHMux = 413
    CEFBS_FeatureHighWord, // LLHRMux = 414
    CEFBS_FeatureHighWord, // LMux = 415
    CEFBS_FeatureLoadStoreOnCond, // LOCG_MemFoldPseudo = 416
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIMux = 417
    CEFBS_FeatureLoadStoreOnCond2, // LOCMux = 418
    CEFBS_FeatureLoadStoreOnCond2, // LOCMux_MemFoldPseudo = 419
    CEFBS_FeatureLoadStoreOnCond2, // LOCRMux = 420
    CEFBS_None, // LTDBRCompare_VecPseudo = 421
    CEFBS_None, // LTEBRCompare_VecPseudo = 422
    CEFBS_None, // LTXBRCompare_VecPseudo = 423
    CEFBS_None, // LX = 424
    CEFBS_None, // MADB_MemFoldPseudo = 425
    CEFBS_None, // MAEB_MemFoldPseudo = 426
    CEFBS_None, // MDB_MemFoldPseudo = 427
    CEFBS_None, // MEEB_MemFoldPseudo = 428
    CEFBS_FeatureMiscellaneousExtensions2, // MSC_MemFoldPseudo = 429
    CEFBS_None, // MSDB_MemFoldPseudo = 430
    CEFBS_None, // MSEB_MemFoldPseudo = 431
    CEFBS_FeatureMiscellaneousExtensions2, // MSGC_MemFoldPseudo = 432
    CEFBS_None, // MVCImm = 433
    CEFBS_None, // MVCReg = 434
    CEFBS_None, // MVSTLoop = 435
    CEFBS_None, // MemsetImmImm = 436
    CEFBS_None, // MemsetImmReg = 437
    CEFBS_None, // MemsetRegImm = 438
    CEFBS_None, // MemsetRegReg = 439
    CEFBS_None, // NCImm = 440
    CEFBS_None, // NCReg = 441
    CEFBS_None, // NG_MemFoldPseudo = 442
    CEFBS_FeatureHighWord, // NIFMux = 443
    CEFBS_None, // NIHF64 = 444
    CEFBS_None, // NIHH64 = 445
    CEFBS_None, // NIHL64 = 446
    CEFBS_FeatureHighWord, // NIHMux = 447
    CEFBS_None, // NILF64 = 448
    CEFBS_None, // NILH64 = 449
    CEFBS_None, // NILL64 = 450
    CEFBS_FeatureHighWord, // NILMux = 451
    CEFBS_None, // N_MemFoldPseudo = 452
    CEFBS_None, // OCImm = 453
    CEFBS_None, // OCReg = 454
    CEFBS_None, // OG_MemFoldPseudo = 455
    CEFBS_FeatureHighWord, // OIFMux = 456
    CEFBS_None, // OIHF64 = 457
    CEFBS_None, // OIHH64 = 458
    CEFBS_None, // OIHL64 = 459
    CEFBS_FeatureHighWord, // OIHMux = 460
    CEFBS_None, // OILF64 = 461
    CEFBS_None, // OILH64 = 462
    CEFBS_None, // OILL64 = 463
    CEFBS_FeatureHighWord, // OILMux = 464
    CEFBS_None, // O_MemFoldPseudo = 465
    CEFBS_None, // PAIR128 = 466
    CEFBS_None, // PROBED_ALLOCA = 467
    CEFBS_None, // PROBED_STACKALLOC = 468
    CEFBS_FeatureHighWord, // RISBHH = 469
    CEFBS_FeatureHighWord, // RISBHL = 470
    CEFBS_FeatureHighWord, // RISBLH = 471
    CEFBS_FeatureHighWord, // RISBLL = 472
    CEFBS_FeatureHighWord, // RISBMux = 473
    CEFBS_None, // Return = 474
    CEFBS_None, // Return_XPLINK = 475
    CEFBS_None, // SDB_MemFoldPseudo = 476
    CEFBS_None, // SEB_MemFoldPseudo = 477
    CEFBS_FeatureMiscellaneousExtensions3, // SELRMux = 478
    CEFBS_None, // SG_MemFoldPseudo = 479
    CEFBS_None, // SLG_MemFoldPseudo = 480
    CEFBS_None, // SL_MemFoldPseudo = 481
    CEFBS_None, // SRSTLoop = 482
    CEFBS_None, // ST128 = 483
    CEFBS_FeatureHighWord, // STCMux = 484
    CEFBS_FeatureHighWord, // STHMux = 485
    CEFBS_FeatureHighWord, // STMux = 486
    CEFBS_FeatureLoadStoreOnCond2, // STOCMux = 487
    CEFBS_None, // STX = 488
    CEFBS_None, // S_MemFoldPseudo = 489
    CEFBS_None, // Select32 = 490
    CEFBS_None, // Select64 = 491
    CEFBS_None, // SelectF128 = 492
    CEFBS_None, // SelectF32 = 493
    CEFBS_None, // SelectF64 = 494
    CEFBS_FeatureVectorEnhancements1, // SelectVR128 = 495
    CEFBS_FeatureVector, // SelectVR32 = 496
    CEFBS_FeatureVector, // SelectVR64 = 497
    CEFBS_None, // Serialize = 498
    CEFBS_FeatureTransactionalExecution, // TBEGIN_nofloat = 499
    CEFBS_None, // TLS_GDCALL = 500
    CEFBS_None, // TLS_LDCALL = 501
    CEFBS_None, // TMHH64 = 502
    CEFBS_None, // TMHL64 = 503
    CEFBS_FeatureHighWord, // TMHMux = 504
    CEFBS_None, // TMLH64 = 505
    CEFBS_None, // TMLL64 = 506
    CEFBS_FeatureHighWord, // TMLMux = 507
    CEFBS_None, // Trap = 508
    CEFBS_FeatureVector, // VL32 = 509
    CEFBS_FeatureVector, // VL64 = 510
    CEFBS_FeatureVector, // VLR32 = 511
    CEFBS_FeatureVector, // VLR64 = 512
    CEFBS_FeatureVector, // VLVGP32 = 513
    CEFBS_FeatureVector, // VST32 = 514
    CEFBS_FeatureVector, // VST64 = 515
    CEFBS_None, // XCImm = 516
    CEFBS_None, // XCReg = 517
    CEFBS_None, // XG_MemFoldPseudo = 518
    CEFBS_FeatureHighWord, // XIFMux = 519
    CEFBS_None, // XIHF64 = 520
    CEFBS_None, // XILF64 = 521
    CEFBS_None, // XPLINK_STACKALLOC = 522
    CEFBS_None, // X_MemFoldPseudo = 523
    CEFBS_None, // ZEXT128 = 524
    CEFBS_None, // A = 525
    CEFBS_None, // AD = 526
    CEFBS_None, // ADB = 527
    CEFBS_None, // ADBR = 528
    CEFBS_None, // ADR = 529
    CEFBS_None, // ADTR = 530
    CEFBS_FeatureFPExtension, // ADTRA = 531
    CEFBS_None, // AE = 532
    CEFBS_None, // AEB = 533
    CEFBS_None, // AEBR = 534
    CEFBS_None, // AER = 535
    CEFBS_None, // AFI = 536
    CEFBS_None, // AG = 537
    CEFBS_None, // AGF = 538
    CEFBS_None, // AGFI = 539
    CEFBS_None, // AGFR = 540
    CEFBS_FeatureMiscellaneousExtensions2, // AGH = 541
    CEFBS_None, // AGHI = 542
    CEFBS_FeatureDistinctOps, // AGHIK = 543
    CEFBS_None, // AGR = 544
    CEFBS_FeatureDistinctOps, // AGRK = 545
    CEFBS_None, // AGSI = 546
    CEFBS_None, // AH = 547
    CEFBS_FeatureHighWord, // AHHHR = 548
    CEFBS_FeatureHighWord, // AHHLR = 549
    CEFBS_None, // AHI = 550
    CEFBS_FeatureDistinctOps, // AHIK = 551
    CEFBS_None, // AHY = 552
    CEFBS_FeatureHighWord, // AIH = 553
    CEFBS_None, // AL = 554
    CEFBS_None, // ALC = 555
    CEFBS_None, // ALCG = 556
    CEFBS_None, // ALCGR = 557
    CEFBS_None, // ALCR = 558
    CEFBS_None, // ALFI = 559
    CEFBS_None, // ALG = 560
    CEFBS_None, // ALGF = 561
    CEFBS_None, // ALGFI = 562
    CEFBS_None, // ALGFR = 563
    CEFBS_FeatureDistinctOps, // ALGHSIK = 564
    CEFBS_None, // ALGR = 565
    CEFBS_FeatureDistinctOps, // ALGRK = 566
    CEFBS_None, // ALGSI = 567
    CEFBS_FeatureHighWord, // ALHHHR = 568
    CEFBS_FeatureHighWord, // ALHHLR = 569
    CEFBS_FeatureDistinctOps, // ALHSIK = 570
    CEFBS_None, // ALR = 571
    CEFBS_FeatureDistinctOps, // ALRK = 572
    CEFBS_None, // ALSI = 573
    CEFBS_FeatureHighWord, // ALSIH = 574
    CEFBS_FeatureHighWord, // ALSIHN = 575
    CEFBS_None, // ALY = 576
    CEFBS_None, // AP = 577
    CEFBS_None, // AR = 578
    CEFBS_FeatureDistinctOps, // ARK = 579
    CEFBS_None, // ASI = 580
    CEFBS_None, // AU = 581
    CEFBS_None, // AUR = 582
    CEFBS_None, // AW = 583
    CEFBS_None, // AWR = 584
    CEFBS_None, // AXBR = 585
    CEFBS_None, // AXR = 586
    CEFBS_None, // AXTR = 587
    CEFBS_FeatureFPExtension, // AXTRA = 588
    CEFBS_None, // AY = 589
    CEFBS_None, // B = 590
    CEFBS_None, // BAKR = 591
    CEFBS_None, // BAL = 592
    CEFBS_None, // BALR = 593
    CEFBS_None, // BAS = 594
    CEFBS_None, // BASR = 595
    CEFBS_None, // BASSM = 596
    CEFBS_None, // BAsmE = 597
    CEFBS_None, // BAsmH = 598
    CEFBS_None, // BAsmHE = 599
    CEFBS_None, // BAsmL = 600
    CEFBS_None, // BAsmLE = 601
    CEFBS_None, // BAsmLH = 602
    CEFBS_None, // BAsmM = 603
    CEFBS_None, // BAsmNE = 604
    CEFBS_None, // BAsmNH = 605
    CEFBS_None, // BAsmNHE = 606
    CEFBS_None, // BAsmNL = 607
    CEFBS_None, // BAsmNLE = 608
    CEFBS_None, // BAsmNLH = 609
    CEFBS_None, // BAsmNM = 610
    CEFBS_None, // BAsmNO = 611
    CEFBS_None, // BAsmNP = 612
    CEFBS_None, // BAsmNZ = 613
    CEFBS_None, // BAsmO = 614
    CEFBS_None, // BAsmP = 615
    CEFBS_None, // BAsmZ = 616
    CEFBS_None, // BC = 617
    CEFBS_None, // BCAsm = 618
    CEFBS_None, // BCR = 619
    CEFBS_None, // BCRAsm = 620
    CEFBS_None, // BCT = 621
    CEFBS_None, // BCTG = 622
    CEFBS_None, // BCTGR = 623
    CEFBS_None, // BCTR = 624
    CEFBS_FeatureMiscellaneousExtensions2, // BI = 625
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmE = 626
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmH = 627
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmHE = 628
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmL = 629
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmLE = 630
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmLH = 631
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmM = 632
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNE = 633
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNH = 634
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNHE = 635
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNL = 636
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNLE = 637
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNLH = 638
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNM = 639
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNO = 640
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNP = 641
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmNZ = 642
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmO = 643
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmP = 644
    CEFBS_FeatureMiscellaneousExtensions2, // BIAsmZ = 645
    CEFBS_FeatureMiscellaneousExtensions2, // BIC = 646
    CEFBS_FeatureMiscellaneousExtensions2, // BICAsm = 647
    CEFBS_FeatureExecutionHint, // BPP = 648
    CEFBS_FeatureExecutionHint, // BPRP = 649
    CEFBS_None, // BR = 650
    CEFBS_None, // BRAS = 651
    CEFBS_None, // BRASL = 652
    CEFBS_None, // BRAsmE = 653
    CEFBS_None, // BRAsmH = 654
    CEFBS_None, // BRAsmHE = 655
    CEFBS_None, // BRAsmL = 656
    CEFBS_None, // BRAsmLE = 657
    CEFBS_None, // BRAsmLH = 658
    CEFBS_None, // BRAsmM = 659
    CEFBS_None, // BRAsmNE = 660
    CEFBS_None, // BRAsmNH = 661
    CEFBS_None, // BRAsmNHE = 662
    CEFBS_None, // BRAsmNL = 663
    CEFBS_None, // BRAsmNLE = 664
    CEFBS_None, // BRAsmNLH = 665
    CEFBS_None, // BRAsmNM = 666
    CEFBS_None, // BRAsmNO = 667
    CEFBS_None, // BRAsmNP = 668
    CEFBS_None, // BRAsmNZ = 669
    CEFBS_None, // BRAsmO = 670
    CEFBS_None, // BRAsmP = 671
    CEFBS_None, // BRAsmZ = 672
    CEFBS_None, // BRC = 673
    CEFBS_None, // BRCAsm = 674
    CEFBS_None, // BRCL = 675
    CEFBS_None, // BRCLAsm = 676
    CEFBS_None, // BRCT = 677
    CEFBS_None, // BRCTG = 678
    CEFBS_FeatureHighWord, // BRCTH = 679
    CEFBS_None, // BRXH = 680
    CEFBS_None, // BRXHG = 681
    CEFBS_None, // BRXLE = 682
    CEFBS_None, // BRXLG = 683
    CEFBS_None, // BSA = 684
    CEFBS_None, // BSG = 685
    CEFBS_None, // BSM = 686
    CEFBS_None, // BXH = 687
    CEFBS_None, // BXHG = 688
    CEFBS_None, // BXLE = 689
    CEFBS_None, // BXLEG = 690
    CEFBS_None, // C = 691
    CEFBS_None, // CD = 692
    CEFBS_None, // CDB = 693
    CEFBS_None, // CDBR = 694
    CEFBS_None, // CDFBR = 695
    CEFBS_FeatureFPExtension, // CDFBRA = 696
    CEFBS_None, // CDFR = 697
    CEFBS_FeatureFPExtension, // CDFTR = 698
    CEFBS_None, // CDGBR = 699
    CEFBS_FeatureFPExtension, // CDGBRA = 700
    CEFBS_None, // CDGR = 701
    CEFBS_None, // CDGTR = 702
    CEFBS_FeatureFPExtension, // CDGTRA = 703
    CEFBS_FeatureFPExtension, // CDLFBR = 704
    CEFBS_FeatureFPExtension, // CDLFTR = 705
    CEFBS_FeatureFPExtension, // CDLGBR = 706
    CEFBS_FeatureFPExtension, // CDLGTR = 707
    CEFBS_FeatureDFPPackedConversion, // CDPT = 708
    CEFBS_None, // CDR = 709
    CEFBS_None, // CDS = 710
    CEFBS_None, // CDSG = 711
    CEFBS_None, // CDSTR = 712
    CEFBS_None, // CDSY = 713
    CEFBS_None, // CDTR = 714
    CEFBS_None, // CDUTR = 715
    CEFBS_FeatureDFPZonedConversion, // CDZT = 716
    CEFBS_None, // CE = 717
    CEFBS_None, // CEB = 718
    CEFBS_None, // CEBR = 719
    CEFBS_None, // CEDTR = 720
    CEFBS_None, // CEFBR = 721
    CEFBS_FeatureFPExtension, // CEFBRA = 722
    CEFBS_None, // CEFR = 723
    CEFBS_None, // CEGBR = 724
    CEFBS_FeatureFPExtension, // CEGBRA = 725
    CEFBS_None, // CEGR = 726
    CEFBS_FeatureFPExtension, // CELFBR = 727
    CEFBS_FeatureFPExtension, // CELGBR = 728
    CEFBS_None, // CER = 729
    CEFBS_None, // CEXTR = 730
    CEFBS_None, // CFC = 731
    CEFBS_None, // CFDBR = 732
    CEFBS_FeatureFPExtension, // CFDBRA = 733
    CEFBS_None, // CFDR = 734
    CEFBS_FeatureFPExtension, // CFDTR = 735
    CEFBS_None, // CFEBR = 736
    CEFBS_FeatureFPExtension, // CFEBRA = 737
    CEFBS_None, // CFER = 738
    CEFBS_None, // CFI = 739
    CEFBS_None, // CFXBR = 740
    CEFBS_FeatureFPExtension, // CFXBRA = 741
    CEFBS_None, // CFXR = 742
    CEFBS_FeatureFPExtension, // CFXTR = 743
    CEFBS_None, // CG = 744
    CEFBS_None, // CGDBR = 745
    CEFBS_FeatureFPExtension, // CGDBRA = 746
    CEFBS_None, // CGDR = 747
    CEFBS_None, // CGDTR = 748
    CEFBS_FeatureFPExtension, // CGDTRA = 749
    CEFBS_None, // CGEBR = 750
    CEFBS_FeatureFPExtension, // CGEBRA = 751
    CEFBS_None, // CGER = 752
    CEFBS_None, // CGF = 753
    CEFBS_None, // CGFI = 754
    CEFBS_None, // CGFR = 755
    CEFBS_None, // CGFRL = 756
    CEFBS_None, // CGH = 757
    CEFBS_None, // CGHI = 758
    CEFBS_None, // CGHRL = 759
    CEFBS_None, // CGHSI = 760
    CEFBS_None, // CGIB = 761
    CEFBS_None, // CGIBAsm = 762
    CEFBS_None, // CGIBAsmE = 763
    CEFBS_None, // CGIBAsmH = 764
    CEFBS_None, // CGIBAsmHE = 765
    CEFBS_None, // CGIBAsmL = 766
    CEFBS_None, // CGIBAsmLE = 767
    CEFBS_None, // CGIBAsmLH = 768
    CEFBS_None, // CGIBAsmNE = 769
    CEFBS_None, // CGIBAsmNH = 770
    CEFBS_None, // CGIBAsmNHE = 771
    CEFBS_None, // CGIBAsmNL = 772
    CEFBS_None, // CGIBAsmNLE = 773
    CEFBS_None, // CGIBAsmNLH = 774
    CEFBS_None, // CGIJ = 775
    CEFBS_None, // CGIJAsm = 776
    CEFBS_None, // CGIJAsmE = 777
    CEFBS_None, // CGIJAsmH = 778
    CEFBS_None, // CGIJAsmHE = 779
    CEFBS_None, // CGIJAsmL = 780
    CEFBS_None, // CGIJAsmLE = 781
    CEFBS_None, // CGIJAsmLH = 782
    CEFBS_None, // CGIJAsmNE = 783
    CEFBS_None, // CGIJAsmNH = 784
    CEFBS_None, // CGIJAsmNHE = 785
    CEFBS_None, // CGIJAsmNL = 786
    CEFBS_None, // CGIJAsmNLE = 787
    CEFBS_None, // CGIJAsmNLH = 788
    CEFBS_None, // CGIT = 789
    CEFBS_None, // CGITAsm = 790
    CEFBS_None, // CGITAsmE = 791
    CEFBS_None, // CGITAsmH = 792
    CEFBS_None, // CGITAsmHE = 793
    CEFBS_None, // CGITAsmL = 794
    CEFBS_None, // CGITAsmLE = 795
    CEFBS_None, // CGITAsmLH = 796
    CEFBS_None, // CGITAsmNE = 797
    CEFBS_None, // CGITAsmNH = 798
    CEFBS_None, // CGITAsmNHE = 799
    CEFBS_None, // CGITAsmNL = 800
    CEFBS_None, // CGITAsmNLE = 801
    CEFBS_None, // CGITAsmNLH = 802
    CEFBS_None, // CGR = 803
    CEFBS_None, // CGRB = 804
    CEFBS_None, // CGRBAsm = 805
    CEFBS_None, // CGRBAsmE = 806
    CEFBS_None, // CGRBAsmH = 807
    CEFBS_None, // CGRBAsmHE = 808
    CEFBS_None, // CGRBAsmL = 809
    CEFBS_None, // CGRBAsmLE = 810
    CEFBS_None, // CGRBAsmLH = 811
    CEFBS_None, // CGRBAsmNE = 812
    CEFBS_None, // CGRBAsmNH = 813
    CEFBS_None, // CGRBAsmNHE = 814
    CEFBS_None, // CGRBAsmNL = 815
    CEFBS_None, // CGRBAsmNLE = 816
    CEFBS_None, // CGRBAsmNLH = 817
    CEFBS_None, // CGRJ = 818
    CEFBS_None, // CGRJAsm = 819
    CEFBS_None, // CGRJAsmE = 820
    CEFBS_None, // CGRJAsmH = 821
    CEFBS_None, // CGRJAsmHE = 822
    CEFBS_None, // CGRJAsmL = 823
    CEFBS_None, // CGRJAsmLE = 824
    CEFBS_None, // CGRJAsmLH = 825
    CEFBS_None, // CGRJAsmNE = 826
    CEFBS_None, // CGRJAsmNH = 827
    CEFBS_None, // CGRJAsmNHE = 828
    CEFBS_None, // CGRJAsmNL = 829
    CEFBS_None, // CGRJAsmNLE = 830
    CEFBS_None, // CGRJAsmNLH = 831
    CEFBS_None, // CGRL = 832
    CEFBS_None, // CGRT = 833
    CEFBS_None, // CGRTAsm = 834
    CEFBS_None, // CGRTAsmE = 835
    CEFBS_None, // CGRTAsmH = 836
    CEFBS_None, // CGRTAsmHE = 837
    CEFBS_None, // CGRTAsmL = 838
    CEFBS_None, // CGRTAsmLE = 839
    CEFBS_None, // CGRTAsmLH = 840
    CEFBS_None, // CGRTAsmNE = 841
    CEFBS_None, // CGRTAsmNH = 842
    CEFBS_None, // CGRTAsmNHE = 843
    CEFBS_None, // CGRTAsmNL = 844
    CEFBS_None, // CGRTAsmNLE = 845
    CEFBS_None, // CGRTAsmNLH = 846
    CEFBS_None, // CGXBR = 847
    CEFBS_FeatureFPExtension, // CGXBRA = 848
    CEFBS_None, // CGXR = 849
    CEFBS_None, // CGXTR = 850
    CEFBS_FeatureFPExtension, // CGXTRA = 851
    CEFBS_None, // CH = 852
    CEFBS_FeatureHighWord, // CHF = 853
    CEFBS_FeatureHighWord, // CHHR = 854
    CEFBS_None, // CHHSI = 855
    CEFBS_None, // CHI = 856
    CEFBS_FeatureHighWord, // CHLR = 857
    CEFBS_None, // CHRL = 858
    CEFBS_None, // CHSI = 859
    CEFBS_None, // CHY = 860
    CEFBS_None, // CIB = 861
    CEFBS_None, // CIBAsm = 862
    CEFBS_None, // CIBAsmE = 863
    CEFBS_None, // CIBAsmH = 864
    CEFBS_None, // CIBAsmHE = 865
    CEFBS_None, // CIBAsmL = 866
    CEFBS_None, // CIBAsmLE = 867
    CEFBS_None, // CIBAsmLH = 868
    CEFBS_None, // CIBAsmNE = 869
    CEFBS_None, // CIBAsmNH = 870
    CEFBS_None, // CIBAsmNHE = 871
    CEFBS_None, // CIBAsmNL = 872
    CEFBS_None, // CIBAsmNLE = 873
    CEFBS_None, // CIBAsmNLH = 874
    CEFBS_FeatureHighWord, // CIH = 875
    CEFBS_None, // CIJ = 876
    CEFBS_None, // CIJAsm = 877
    CEFBS_None, // CIJAsmE = 878
    CEFBS_None, // CIJAsmH = 879
    CEFBS_None, // CIJAsmHE = 880
    CEFBS_None, // CIJAsmL = 881
    CEFBS_None, // CIJAsmLE = 882
    CEFBS_None, // CIJAsmLH = 883
    CEFBS_None, // CIJAsmNE = 884
    CEFBS_None, // CIJAsmNH = 885
    CEFBS_None, // CIJAsmNHE = 886
    CEFBS_None, // CIJAsmNL = 887
    CEFBS_None, // CIJAsmNLE = 888
    CEFBS_None, // CIJAsmNLH = 889
    CEFBS_None, // CIT = 890
    CEFBS_None, // CITAsm = 891
    CEFBS_None, // CITAsmE = 892
    CEFBS_None, // CITAsmH = 893
    CEFBS_None, // CITAsmHE = 894
    CEFBS_None, // CITAsmL = 895
    CEFBS_None, // CITAsmLE = 896
    CEFBS_None, // CITAsmLH = 897
    CEFBS_None, // CITAsmNE = 898
    CEFBS_None, // CITAsmNH = 899
    CEFBS_None, // CITAsmNHE = 900
    CEFBS_None, // CITAsmNL = 901
    CEFBS_None, // CITAsmNLE = 902
    CEFBS_None, // CITAsmNLH = 903
    CEFBS_None, // CKSM = 904
    CEFBS_None, // CL = 905
    CEFBS_None, // CLC = 906
    CEFBS_None, // CLCL = 907
    CEFBS_None, // CLCLE = 908
    CEFBS_None, // CLCLU = 909
    CEFBS_FeatureFPExtension, // CLFDBR = 910
    CEFBS_FeatureFPExtension, // CLFDTR = 911
    CEFBS_FeatureFPExtension, // CLFEBR = 912
    CEFBS_None, // CLFHSI = 913
    CEFBS_None, // CLFI = 914
    CEFBS_None, // CLFIT = 915
    CEFBS_None, // CLFITAsm = 916
    CEFBS_None, // CLFITAsmE = 917
    CEFBS_None, // CLFITAsmH = 918
    CEFBS_None, // CLFITAsmHE = 919
    CEFBS_None, // CLFITAsmL = 920
    CEFBS_None, // CLFITAsmLE = 921
    CEFBS_None, // CLFITAsmLH = 922
    CEFBS_None, // CLFITAsmNE = 923
    CEFBS_None, // CLFITAsmNH = 924
    CEFBS_None, // CLFITAsmNHE = 925
    CEFBS_None, // CLFITAsmNL = 926
    CEFBS_None, // CLFITAsmNLE = 927
    CEFBS_None, // CLFITAsmNLH = 928
    CEFBS_FeatureFPExtension, // CLFXBR = 929
    CEFBS_FeatureFPExtension, // CLFXTR = 930
    CEFBS_None, // CLG = 931
    CEFBS_FeatureFPExtension, // CLGDBR = 932
    CEFBS_FeatureFPExtension, // CLGDTR = 933
    CEFBS_FeatureFPExtension, // CLGEBR = 934
    CEFBS_None, // CLGF = 935
    CEFBS_None, // CLGFI = 936
    CEFBS_None, // CLGFR = 937
    CEFBS_None, // CLGFRL = 938
    CEFBS_None, // CLGHRL = 939
    CEFBS_None, // CLGHSI = 940
    CEFBS_None, // CLGIB = 941
    CEFBS_None, // CLGIBAsm = 942
    CEFBS_None, // CLGIBAsmE = 943
    CEFBS_None, // CLGIBAsmH = 944
    CEFBS_None, // CLGIBAsmHE = 945
    CEFBS_None, // CLGIBAsmL = 946
    CEFBS_None, // CLGIBAsmLE = 947
    CEFBS_None, // CLGIBAsmLH = 948
    CEFBS_None, // CLGIBAsmNE = 949
    CEFBS_None, // CLGIBAsmNH = 950
    CEFBS_None, // CLGIBAsmNHE = 951
    CEFBS_None, // CLGIBAsmNL = 952
    CEFBS_None, // CLGIBAsmNLE = 953
    CEFBS_None, // CLGIBAsmNLH = 954
    CEFBS_None, // CLGIJ = 955
    CEFBS_None, // CLGIJAsm = 956
    CEFBS_None, // CLGIJAsmE = 957
    CEFBS_None, // CLGIJAsmH = 958
    CEFBS_None, // CLGIJAsmHE = 959
    CEFBS_None, // CLGIJAsmL = 960
    CEFBS_None, // CLGIJAsmLE = 961
    CEFBS_None, // CLGIJAsmLH = 962
    CEFBS_None, // CLGIJAsmNE = 963
    CEFBS_None, // CLGIJAsmNH = 964
    CEFBS_None, // CLGIJAsmNHE = 965
    CEFBS_None, // CLGIJAsmNL = 966
    CEFBS_None, // CLGIJAsmNLE = 967
    CEFBS_None, // CLGIJAsmNLH = 968
    CEFBS_None, // CLGIT = 969
    CEFBS_None, // CLGITAsm = 970
    CEFBS_None, // CLGITAsmE = 971
    CEFBS_None, // CLGITAsmH = 972
    CEFBS_None, // CLGITAsmHE = 973
    CEFBS_None, // CLGITAsmL = 974
    CEFBS_None, // CLGITAsmLE = 975
    CEFBS_None, // CLGITAsmLH = 976
    CEFBS_None, // CLGITAsmNE = 977
    CEFBS_None, // CLGITAsmNH = 978
    CEFBS_None, // CLGITAsmNHE = 979
    CEFBS_None, // CLGITAsmNL = 980
    CEFBS_None, // CLGITAsmNLE = 981
    CEFBS_None, // CLGITAsmNLH = 982
    CEFBS_None, // CLGR = 983
    CEFBS_None, // CLGRB = 984
    CEFBS_None, // CLGRBAsm = 985
    CEFBS_None, // CLGRBAsmE = 986
    CEFBS_None, // CLGRBAsmH = 987
    CEFBS_None, // CLGRBAsmHE = 988
    CEFBS_None, // CLGRBAsmL = 989
    CEFBS_None, // CLGRBAsmLE = 990
    CEFBS_None, // CLGRBAsmLH = 991
    CEFBS_None, // CLGRBAsmNE = 992
    CEFBS_None, // CLGRBAsmNH = 993
    CEFBS_None, // CLGRBAsmNHE = 994
    CEFBS_None, // CLGRBAsmNL = 995
    CEFBS_None, // CLGRBAsmNLE = 996
    CEFBS_None, // CLGRBAsmNLH = 997
    CEFBS_None, // CLGRJ = 998
    CEFBS_None, // CLGRJAsm = 999
    CEFBS_None, // CLGRJAsmE = 1000
    CEFBS_None, // CLGRJAsmH = 1001
    CEFBS_None, // CLGRJAsmHE = 1002
    CEFBS_None, // CLGRJAsmL = 1003
    CEFBS_None, // CLGRJAsmLE = 1004
    CEFBS_None, // CLGRJAsmLH = 1005
    CEFBS_None, // CLGRJAsmNE = 1006
    CEFBS_None, // CLGRJAsmNH = 1007
    CEFBS_None, // CLGRJAsmNHE = 1008
    CEFBS_None, // CLGRJAsmNL = 1009
    CEFBS_None, // CLGRJAsmNLE = 1010
    CEFBS_None, // CLGRJAsmNLH = 1011
    CEFBS_None, // CLGRL = 1012
    CEFBS_None, // CLGRT = 1013
    CEFBS_None, // CLGRTAsm = 1014
    CEFBS_None, // CLGRTAsmE = 1015
    CEFBS_None, // CLGRTAsmH = 1016
    CEFBS_None, // CLGRTAsmHE = 1017
    CEFBS_None, // CLGRTAsmL = 1018
    CEFBS_None, // CLGRTAsmLE = 1019
    CEFBS_None, // CLGRTAsmLH = 1020
    CEFBS_None, // CLGRTAsmNE = 1021
    CEFBS_None, // CLGRTAsmNH = 1022
    CEFBS_None, // CLGRTAsmNHE = 1023
    CEFBS_None, // CLGRTAsmNL = 1024
    CEFBS_None, // CLGRTAsmNLE = 1025
    CEFBS_None, // CLGRTAsmNLH = 1026
    CEFBS_FeatureMiscellaneousExtensions, // CLGT = 1027
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsm = 1028
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmE = 1029
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmH = 1030
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmHE = 1031
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmL = 1032
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmLE = 1033
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmLH = 1034
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmNE = 1035
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmNH = 1036
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmNHE = 1037
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmNL = 1038
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmNLE = 1039
    CEFBS_FeatureMiscellaneousExtensions, // CLGTAsmNLH = 1040
    CEFBS_FeatureFPExtension, // CLGXBR = 1041
    CEFBS_FeatureFPExtension, // CLGXTR = 1042
    CEFBS_FeatureHighWord, // CLHF = 1043
    CEFBS_FeatureHighWord, // CLHHR = 1044
    CEFBS_None, // CLHHSI = 1045
    CEFBS_FeatureHighWord, // CLHLR = 1046
    CEFBS_None, // CLHRL = 1047
    CEFBS_None, // CLI = 1048
    CEFBS_None, // CLIB = 1049
    CEFBS_None, // CLIBAsm = 1050
    CEFBS_None, // CLIBAsmE = 1051
    CEFBS_None, // CLIBAsmH = 1052
    CEFBS_None, // CLIBAsmHE = 1053
    CEFBS_None, // CLIBAsmL = 1054
    CEFBS_None, // CLIBAsmLE = 1055
    CEFBS_None, // CLIBAsmLH = 1056
    CEFBS_None, // CLIBAsmNE = 1057
    CEFBS_None, // CLIBAsmNH = 1058
    CEFBS_None, // CLIBAsmNHE = 1059
    CEFBS_None, // CLIBAsmNL = 1060
    CEFBS_None, // CLIBAsmNLE = 1061
    CEFBS_None, // CLIBAsmNLH = 1062
    CEFBS_FeatureHighWord, // CLIH = 1063
    CEFBS_None, // CLIJ = 1064
    CEFBS_None, // CLIJAsm = 1065
    CEFBS_None, // CLIJAsmE = 1066
    CEFBS_None, // CLIJAsmH = 1067
    CEFBS_None, // CLIJAsmHE = 1068
    CEFBS_None, // CLIJAsmL = 1069
    CEFBS_None, // CLIJAsmLE = 1070
    CEFBS_None, // CLIJAsmLH = 1071
    CEFBS_None, // CLIJAsmNE = 1072
    CEFBS_None, // CLIJAsmNH = 1073
    CEFBS_None, // CLIJAsmNHE = 1074
    CEFBS_None, // CLIJAsmNL = 1075
    CEFBS_None, // CLIJAsmNLE = 1076
    CEFBS_None, // CLIJAsmNLH = 1077
    CEFBS_None, // CLIY = 1078
    CEFBS_None, // CLM = 1079
    CEFBS_None, // CLMH = 1080
    CEFBS_None, // CLMY = 1081
    CEFBS_None, // CLR = 1082
    CEFBS_None, // CLRB = 1083
    CEFBS_None, // CLRBAsm = 1084
    CEFBS_None, // CLRBAsmE = 1085
    CEFBS_None, // CLRBAsmH = 1086
    CEFBS_None, // CLRBAsmHE = 1087
    CEFBS_None, // CLRBAsmL = 1088
    CEFBS_None, // CLRBAsmLE = 1089
    CEFBS_None, // CLRBAsmLH = 1090
    CEFBS_None, // CLRBAsmNE = 1091
    CEFBS_None, // CLRBAsmNH = 1092
    CEFBS_None, // CLRBAsmNHE = 1093
    CEFBS_None, // CLRBAsmNL = 1094
    CEFBS_None, // CLRBAsmNLE = 1095
    CEFBS_None, // CLRBAsmNLH = 1096
    CEFBS_None, // CLRJ = 1097
    CEFBS_None, // CLRJAsm = 1098
    CEFBS_None, // CLRJAsmE = 1099
    CEFBS_None, // CLRJAsmH = 1100
    CEFBS_None, // CLRJAsmHE = 1101
    CEFBS_None, // CLRJAsmL = 1102
    CEFBS_None, // CLRJAsmLE = 1103
    CEFBS_None, // CLRJAsmLH = 1104
    CEFBS_None, // CLRJAsmNE = 1105
    CEFBS_None, // CLRJAsmNH = 1106
    CEFBS_None, // CLRJAsmNHE = 1107
    CEFBS_None, // CLRJAsmNL = 1108
    CEFBS_None, // CLRJAsmNLE = 1109
    CEFBS_None, // CLRJAsmNLH = 1110
    CEFBS_None, // CLRL = 1111
    CEFBS_None, // CLRT = 1112
    CEFBS_None, // CLRTAsm = 1113
    CEFBS_None, // CLRTAsmE = 1114
    CEFBS_None, // CLRTAsmH = 1115
    CEFBS_None, // CLRTAsmHE = 1116
    CEFBS_None, // CLRTAsmL = 1117
    CEFBS_None, // CLRTAsmLE = 1118
    CEFBS_None, // CLRTAsmLH = 1119
    CEFBS_None, // CLRTAsmNE = 1120
    CEFBS_None, // CLRTAsmNH = 1121
    CEFBS_None, // CLRTAsmNHE = 1122
    CEFBS_None, // CLRTAsmNL = 1123
    CEFBS_None, // CLRTAsmNLE = 1124
    CEFBS_None, // CLRTAsmNLH = 1125
    CEFBS_None, // CLST = 1126
    CEFBS_FeatureMiscellaneousExtensions, // CLT = 1127
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsm = 1128
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmE = 1129
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmH = 1130
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmHE = 1131
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmL = 1132
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmLE = 1133
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmLH = 1134
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmNE = 1135
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmNH = 1136
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmNHE = 1137
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmNL = 1138
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmNLE = 1139
    CEFBS_FeatureMiscellaneousExtensions, // CLTAsmNLH = 1140
    CEFBS_None, // CLY = 1141
    CEFBS_None, // CMPSC = 1142
    CEFBS_None, // CP = 1143
    CEFBS_FeatureDFPPackedConversion, // CPDT = 1144
    CEFBS_None, // CPSDRdd = 1145
    CEFBS_None, // CPSDRds = 1146
    CEFBS_None, // CPSDRsd = 1147
    CEFBS_None, // CPSDRss = 1148
    CEFBS_FeatureDFPPackedConversion, // CPXT = 1149
    CEFBS_None, // CPYA = 1150
    CEFBS_None, // CR = 1151
    CEFBS_None, // CRB = 1152
    CEFBS_None, // CRBAsm = 1153
    CEFBS_None, // CRBAsmE = 1154
    CEFBS_None, // CRBAsmH = 1155
    CEFBS_None, // CRBAsmHE = 1156
    CEFBS_None, // CRBAsmL = 1157
    CEFBS_None, // CRBAsmLE = 1158
    CEFBS_None, // CRBAsmLH = 1159
    CEFBS_None, // CRBAsmNE = 1160
    CEFBS_None, // CRBAsmNH = 1161
    CEFBS_None, // CRBAsmNHE = 1162
    CEFBS_None, // CRBAsmNL = 1163
    CEFBS_None, // CRBAsmNLE = 1164
    CEFBS_None, // CRBAsmNLH = 1165
    CEFBS_FeatureEnhancedDAT2, // CRDTE = 1166
    CEFBS_FeatureEnhancedDAT2, // CRDTEOpt = 1167
    CEFBS_None, // CRJ = 1168
    CEFBS_None, // CRJAsm = 1169
    CEFBS_None, // CRJAsmE = 1170
    CEFBS_None, // CRJAsmH = 1171
    CEFBS_None, // CRJAsmHE = 1172
    CEFBS_None, // CRJAsmL = 1173
    CEFBS_None, // CRJAsmLE = 1174
    CEFBS_None, // CRJAsmLH = 1175
    CEFBS_None, // CRJAsmNE = 1176
    CEFBS_None, // CRJAsmNH = 1177
    CEFBS_None, // CRJAsmNHE = 1178
    CEFBS_None, // CRJAsmNL = 1179
    CEFBS_None, // CRJAsmNLE = 1180
    CEFBS_None, // CRJAsmNLH = 1181
    CEFBS_None, // CRL = 1182
    CEFBS_None, // CRT = 1183
    CEFBS_None, // CRTAsm = 1184
    CEFBS_None, // CRTAsmE = 1185
    CEFBS_None, // CRTAsmH = 1186
    CEFBS_None, // CRTAsmHE = 1187
    CEFBS_None, // CRTAsmL = 1188
    CEFBS_None, // CRTAsmLE = 1189
    CEFBS_None, // CRTAsmLH = 1190
    CEFBS_None, // CRTAsmNE = 1191
    CEFBS_None, // CRTAsmNH = 1192
    CEFBS_None, // CRTAsmNHE = 1193
    CEFBS_None, // CRTAsmNL = 1194
    CEFBS_None, // CRTAsmNLE = 1195
    CEFBS_None, // CRTAsmNLH = 1196
    CEFBS_None, // CS = 1197
    CEFBS_None, // CSCH = 1198
    CEFBS_None, // CSDTR = 1199
    CEFBS_None, // CSG = 1200
    CEFBS_None, // CSP = 1201
    CEFBS_None, // CSPG = 1202
    CEFBS_None, // CSST = 1203
    CEFBS_None, // CSXTR = 1204
    CEFBS_None, // CSY = 1205
    CEFBS_None, // CU12 = 1206
    CEFBS_None, // CU12Opt = 1207
    CEFBS_None, // CU14 = 1208
    CEFBS_None, // CU14Opt = 1209
    CEFBS_None, // CU21 = 1210
    CEFBS_None, // CU21Opt = 1211
    CEFBS_None, // CU24 = 1212
    CEFBS_None, // CU24Opt = 1213
    CEFBS_None, // CU41 = 1214
    CEFBS_None, // CU42 = 1215
    CEFBS_None, // CUDTR = 1216
    CEFBS_None, // CUSE = 1217
    CEFBS_None, // CUTFU = 1218
    CEFBS_None, // CUTFUOpt = 1219
    CEFBS_None, // CUUTF = 1220
    CEFBS_None, // CUUTFOpt = 1221
    CEFBS_None, // CUXTR = 1222
    CEFBS_None, // CVB = 1223
    CEFBS_None, // CVBG = 1224
    CEFBS_None, // CVBY = 1225
    CEFBS_None, // CVD = 1226
    CEFBS_None, // CVDG = 1227
    CEFBS_None, // CVDY = 1228
    CEFBS_None, // CXBR = 1229
    CEFBS_None, // CXFBR = 1230
    CEFBS_FeatureFPExtension, // CXFBRA = 1231
    CEFBS_None, // CXFR = 1232
    CEFBS_FeatureFPExtension, // CXFTR = 1233
    CEFBS_None, // CXGBR = 1234
    CEFBS_FeatureFPExtension, // CXGBRA = 1235
    CEFBS_None, // CXGR = 1236
    CEFBS_None, // CXGTR = 1237
    CEFBS_FeatureFPExtension, // CXGTRA = 1238
    CEFBS_FeatureFPExtension, // CXLFBR = 1239
    CEFBS_FeatureFPExtension, // CXLFTR = 1240
    CEFBS_FeatureFPExtension, // CXLGBR = 1241
    CEFBS_FeatureFPExtension, // CXLGTR = 1242
    CEFBS_FeatureDFPPackedConversion, // CXPT = 1243
    CEFBS_None, // CXR = 1244
    CEFBS_None, // CXSTR = 1245
    CEFBS_None, // CXTR = 1246
    CEFBS_None, // CXUTR = 1247
    CEFBS_FeatureDFPZonedConversion, // CXZT = 1248
    CEFBS_None, // CY = 1249
    CEFBS_FeatureDFPZonedConversion, // CZDT = 1250
    CEFBS_FeatureDFPZonedConversion, // CZXT = 1251
    CEFBS_None, // D = 1252
    CEFBS_None, // DD = 1253
    CEFBS_None, // DDB = 1254
    CEFBS_None, // DDBR = 1255
    CEFBS_None, // DDR = 1256
    CEFBS_None, // DDTR = 1257
    CEFBS_FeatureFPExtension, // DDTRA = 1258
    CEFBS_None, // DE = 1259
    CEFBS_None, // DEB = 1260
    CEFBS_None, // DEBR = 1261
    CEFBS_None, // DER = 1262
    CEFBS_FeatureDeflateConversion, // DFLTCC = 1263
    CEFBS_None, // DIAG = 1264
    CEFBS_None, // DIDBR = 1265
    CEFBS_None, // DIEBR = 1266
    CEFBS_None, // DL = 1267
    CEFBS_None, // DLG = 1268
    CEFBS_None, // DLGR = 1269
    CEFBS_None, // DLR = 1270
    CEFBS_None, // DP = 1271
    CEFBS_None, // DR = 1272
    CEFBS_None, // DSG = 1273
    CEFBS_None, // DSGF = 1274
    CEFBS_None, // DSGFR = 1275
    CEFBS_None, // DSGR = 1276
    CEFBS_None, // DXBR = 1277
    CEFBS_None, // DXR = 1278
    CEFBS_None, // DXTR = 1279
    CEFBS_FeatureFPExtension, // DXTRA = 1280
    CEFBS_None, // EAR = 1281
    CEFBS_None, // ECAG = 1282
    CEFBS_None, // ECCTR = 1283
    CEFBS_None, // ECPGA = 1284
    CEFBS_None, // ECTG = 1285
    CEFBS_None, // ED = 1286
    CEFBS_None, // EDMK = 1287
    CEFBS_None, // EEDTR = 1288
    CEFBS_None, // EEXTR = 1289
    CEFBS_None, // EFPC = 1290
    CEFBS_None, // EPAIR = 1291
    CEFBS_None, // EPAR = 1292
    CEFBS_None, // EPCTR = 1293
    CEFBS_None, // EPSW = 1294
    CEFBS_None, // EREG = 1295
    CEFBS_None, // EREGG = 1296
    CEFBS_None, // ESAIR = 1297
    CEFBS_None, // ESAR = 1298
    CEFBS_None, // ESDTR = 1299
    CEFBS_None, // ESEA = 1300
    CEFBS_None, // ESTA = 1301
    CEFBS_None, // ESXTR = 1302
    CEFBS_FeatureTransactionalExecution, // ETND = 1303
    CEFBS_None, // EX = 1304
    CEFBS_None, // EXRL = 1305
    CEFBS_None, // FIDBR = 1306
    CEFBS_FeatureFPExtension, // FIDBRA = 1307
    CEFBS_None, // FIDR = 1308
    CEFBS_None, // FIDTR = 1309
    CEFBS_None, // FIEBR = 1310
    CEFBS_FeatureFPExtension, // FIEBRA = 1311
    CEFBS_None, // FIER = 1312
    CEFBS_None, // FIXBR = 1313
    CEFBS_FeatureFPExtension, // FIXBRA = 1314
    CEFBS_None, // FIXR = 1315
    CEFBS_None, // FIXTR = 1316
    CEFBS_None, // FLOGR = 1317
    CEFBS_None, // HDR = 1318
    CEFBS_None, // HER = 1319
    CEFBS_None, // HSCH = 1320
    CEFBS_None, // IAC = 1321
    CEFBS_None, // IC = 1322
    CEFBS_None, // IC32 = 1323
    CEFBS_None, // IC32Y = 1324
    CEFBS_None, // ICM = 1325
    CEFBS_None, // ICMH = 1326
    CEFBS_None, // ICMY = 1327
    CEFBS_None, // ICY = 1328
    CEFBS_None, // IDTE = 1329
    CEFBS_None, // IDTEOpt = 1330
    CEFBS_None, // IEDTR = 1331
    CEFBS_None, // IEXTR = 1332
    CEFBS_None, // IIHF = 1333
    CEFBS_None, // IIHH = 1334
    CEFBS_None, // IIHL = 1335
    CEFBS_None, // IILF = 1336
    CEFBS_None, // IILH = 1337
    CEFBS_None, // IILL = 1338
    CEFBS_None, // IPK = 1339
    CEFBS_None, // IPM = 1340
    CEFBS_None, // IPTE = 1341
    CEFBS_None, // IPTEOpt = 1342
    CEFBS_None, // IPTEOptOpt = 1343
    CEFBS_FeatureInsertReferenceBitsMultiple, // IRBM = 1344
    CEFBS_None, // ISKE = 1345
    CEFBS_None, // IVSK = 1346
    CEFBS_None, // InsnE = 1347
    CEFBS_None, // InsnRI = 1348
    CEFBS_None, // InsnRIE = 1349
    CEFBS_None, // InsnRIL = 1350
    CEFBS_None, // InsnRILU = 1351
    CEFBS_None, // InsnRIS = 1352
    CEFBS_None, // InsnRR = 1353
    CEFBS_None, // InsnRRE = 1354
    CEFBS_None, // InsnRRF = 1355
    CEFBS_None, // InsnRRS = 1356
    CEFBS_None, // InsnRS = 1357
    CEFBS_None, // InsnRSE = 1358
    CEFBS_None, // InsnRSI = 1359
    CEFBS_None, // InsnRSY = 1360
    CEFBS_None, // InsnRX = 1361
    CEFBS_None, // InsnRXE = 1362
    CEFBS_None, // InsnRXF = 1363
    CEFBS_None, // InsnRXY = 1364
    CEFBS_None, // InsnS = 1365
    CEFBS_None, // InsnSI = 1366
    CEFBS_None, // InsnSIL = 1367
    CEFBS_None, // InsnSIY = 1368
    CEFBS_None, // InsnSS = 1369
    CEFBS_None, // InsnSSE = 1370
    CEFBS_None, // InsnSSF = 1371
    CEFBS_None, // InsnVRI = 1372
    CEFBS_None, // InsnVRR = 1373
    CEFBS_None, // InsnVRS = 1374
    CEFBS_None, // InsnVRV = 1375
    CEFBS_None, // InsnVRX = 1376
    CEFBS_None, // InsnVSI = 1377
    CEFBS_None, // J = 1378
    CEFBS_None, // JAsmE = 1379
    CEFBS_None, // JAsmH = 1380
    CEFBS_None, // JAsmHE = 1381
    CEFBS_None, // JAsmL = 1382
    CEFBS_None, // JAsmLE = 1383
    CEFBS_None, // JAsmLH = 1384
    CEFBS_None, // JAsmM = 1385
    CEFBS_None, // JAsmNE = 1386
    CEFBS_None, // JAsmNH = 1387
    CEFBS_None, // JAsmNHE = 1388
    CEFBS_None, // JAsmNL = 1389
    CEFBS_None, // JAsmNLE = 1390
    CEFBS_None, // JAsmNLH = 1391
    CEFBS_None, // JAsmNM = 1392
    CEFBS_None, // JAsmNO = 1393
    CEFBS_None, // JAsmNP = 1394
    CEFBS_None, // JAsmNZ = 1395
    CEFBS_None, // JAsmO = 1396
    CEFBS_None, // JAsmP = 1397
    CEFBS_None, // JAsmZ = 1398
    CEFBS_None, // JG = 1399
    CEFBS_None, // JGAsmE = 1400
    CEFBS_None, // JGAsmH = 1401
    CEFBS_None, // JGAsmHE = 1402
    CEFBS_None, // JGAsmL = 1403
    CEFBS_None, // JGAsmLE = 1404
    CEFBS_None, // JGAsmLH = 1405
    CEFBS_None, // JGAsmM = 1406
    CEFBS_None, // JGAsmNE = 1407
    CEFBS_None, // JGAsmNH = 1408
    CEFBS_None, // JGAsmNHE = 1409
    CEFBS_None, // JGAsmNL = 1410
    CEFBS_None, // JGAsmNLE = 1411
    CEFBS_None, // JGAsmNLH = 1412
    CEFBS_None, // JGAsmNM = 1413
    CEFBS_None, // JGAsmNO = 1414
    CEFBS_None, // JGAsmNP = 1415
    CEFBS_None, // JGAsmNZ = 1416
    CEFBS_None, // JGAsmO = 1417
    CEFBS_None, // JGAsmP = 1418
    CEFBS_None, // JGAsmZ = 1419
    CEFBS_None, // KDB = 1420
    CEFBS_None, // KDBR = 1421
    CEFBS_FeatureMessageSecurityAssist9, // KDSA = 1422
    CEFBS_None, // KDTR = 1423
    CEFBS_None, // KEB = 1424
    CEFBS_None, // KEBR = 1425
    CEFBS_None, // KIMD = 1426
    CEFBS_None, // KLMD = 1427
    CEFBS_None, // KM = 1428
    CEFBS_FeatureMessageSecurityAssist8, // KMA = 1429
    CEFBS_None, // KMAC = 1430
    CEFBS_None, // KMC = 1431
    CEFBS_FeatureMessageSecurityAssist4, // KMCTR = 1432
    CEFBS_FeatureMessageSecurityAssist4, // KMF = 1433
    CEFBS_FeatureMessageSecurityAssist4, // KMO = 1434
    CEFBS_None, // KXBR = 1435
    CEFBS_None, // KXTR = 1436
    CEFBS_None, // L = 1437
    CEFBS_None, // LA = 1438
    CEFBS_FeatureInterlockedAccess1, // LAA = 1439
    CEFBS_FeatureInterlockedAccess1, // LAAG = 1440
    CEFBS_FeatureInterlockedAccess1, // LAAL = 1441
    CEFBS_FeatureInterlockedAccess1, // LAALG = 1442
    CEFBS_None, // LAE = 1443
    CEFBS_None, // LAEY = 1444
    CEFBS_None, // LAM = 1445
    CEFBS_None, // LAMY = 1446
    CEFBS_FeatureInterlockedAccess1, // LAN = 1447
    CEFBS_FeatureInterlockedAccess1, // LANG = 1448
    CEFBS_FeatureInterlockedAccess1, // LAO = 1449
    CEFBS_FeatureInterlockedAccess1, // LAOG = 1450
    CEFBS_None, // LARL = 1451
    CEFBS_None, // LASP = 1452
    CEFBS_FeatureLoadAndTrap, // LAT = 1453
    CEFBS_FeatureInterlockedAccess1, // LAX = 1454
    CEFBS_FeatureInterlockedAccess1, // LAXG = 1455
    CEFBS_None, // LAY = 1456
    CEFBS_None, // LB = 1457
    CEFBS_FeatureBEAREnhancement, // LBEAR = 1458
    CEFBS_FeatureHighWord, // LBH = 1459
    CEFBS_None, // LBR = 1460
    CEFBS_FeatureVector, // LCBB = 1461
    CEFBS_None, // LCCTL = 1462
    CEFBS_None, // LCDBR = 1463
    CEFBS_None, // LCDFR = 1464
    CEFBS_None, // LCDFR_32 = 1465
    CEFBS_None, // LCDR = 1466
    CEFBS_None, // LCEBR = 1467
    CEFBS_None, // LCER = 1468
    CEFBS_None, // LCGFR = 1469
    CEFBS_None, // LCGR = 1470
    CEFBS_None, // LCR = 1471
    CEFBS_None, // LCTL = 1472
    CEFBS_None, // LCTLG = 1473
    CEFBS_None, // LCXBR = 1474
    CEFBS_None, // LCXR = 1475
    CEFBS_None, // LD = 1476
    CEFBS_None, // LDE = 1477
    CEFBS_None, // LDE32 = 1478
    CEFBS_None, // LDEB = 1479
    CEFBS_None, // LDEBR = 1480
    CEFBS_None, // LDER = 1481
    CEFBS_None, // LDETR = 1482
    CEFBS_None, // LDGR = 1483
    CEFBS_None, // LDR = 1484
    CEFBS_None, // LDR32 = 1485
    CEFBS_None, // LDXBR = 1486
    CEFBS_FeatureFPExtension, // LDXBRA = 1487
    CEFBS_None, // LDXR = 1488
    CEFBS_None, // LDXTR = 1489
    CEFBS_None, // LDY = 1490
    CEFBS_None, // LE = 1491
    CEFBS_None, // LEDBR = 1492
    CEFBS_FeatureFPExtension, // LEDBRA = 1493
    CEFBS_None, // LEDR = 1494
    CEFBS_None, // LEDTR = 1495
    CEFBS_None, // LER = 1496
    CEFBS_None, // LEXBR = 1497
    CEFBS_FeatureFPExtension, // LEXBRA = 1498
    CEFBS_None, // LEXR = 1499
    CEFBS_None, // LEY = 1500
    CEFBS_None, // LFAS = 1501
    CEFBS_FeatureHighWord, // LFH = 1502
    CEFBS_FeatureLoadAndTrap, // LFHAT = 1503
    CEFBS_None, // LFPC = 1504
    CEFBS_None, // LG = 1505
    CEFBS_FeatureLoadAndTrap, // LGAT = 1506
    CEFBS_None, // LGB = 1507
    CEFBS_None, // LGBR = 1508
    CEFBS_None, // LGDR = 1509
    CEFBS_None, // LGF = 1510
    CEFBS_None, // LGFI = 1511
    CEFBS_None, // LGFR = 1512
    CEFBS_None, // LGFRL = 1513
    CEFBS_FeatureGuardedStorage, // LGG = 1514
    CEFBS_None, // LGH = 1515
    CEFBS_None, // LGHI = 1516
    CEFBS_None, // LGHR = 1517
    CEFBS_None, // LGHRL = 1518
    CEFBS_None, // LGR = 1519
    CEFBS_None, // LGRL = 1520
    CEFBS_FeatureGuardedStorage, // LGSC = 1521
    CEFBS_None, // LH = 1522
    CEFBS_FeatureHighWord, // LHH = 1523
    CEFBS_None, // LHI = 1524
    CEFBS_None, // LHR = 1525
    CEFBS_None, // LHRL = 1526
    CEFBS_None, // LHY = 1527
    CEFBS_None, // LLC = 1528
    CEFBS_FeatureHighWord, // LLCH = 1529
    CEFBS_None, // LLCR = 1530
    CEFBS_None, // LLGC = 1531
    CEFBS_None, // LLGCR = 1532
    CEFBS_None, // LLGF = 1533
    CEFBS_FeatureLoadAndTrap, // LLGFAT = 1534
    CEFBS_None, // LLGFR = 1535
    CEFBS_None, // LLGFRL = 1536
    CEFBS_FeatureGuardedStorage, // LLGFSG = 1537
    CEFBS_None, // LLGH = 1538
    CEFBS_None, // LLGHR = 1539
    CEFBS_None, // LLGHRL = 1540
    CEFBS_None, // LLGT = 1541
    CEFBS_FeatureLoadAndTrap, // LLGTAT = 1542
    CEFBS_None, // LLGTR = 1543
    CEFBS_None, // LLH = 1544
    CEFBS_FeatureHighWord, // LLHH = 1545
    CEFBS_None, // LLHR = 1546
    CEFBS_None, // LLHRL = 1547
    CEFBS_None, // LLIHF = 1548
    CEFBS_None, // LLIHH = 1549
    CEFBS_None, // LLIHL = 1550
    CEFBS_None, // LLILF = 1551
    CEFBS_None, // LLILH = 1552
    CEFBS_None, // LLILL = 1553
    CEFBS_FeatureLoadAndZeroRightmostByte, // LLZRGF = 1554
    CEFBS_None, // LM = 1555
    CEFBS_None, // LMD = 1556
    CEFBS_None, // LMG = 1557
    CEFBS_None, // LMH = 1558
    CEFBS_None, // LMY = 1559
    CEFBS_None, // LNDBR = 1560
    CEFBS_None, // LNDFR = 1561
    CEFBS_None, // LNDFR_32 = 1562
    CEFBS_None, // LNDR = 1563
    CEFBS_None, // LNEBR = 1564
    CEFBS_None, // LNER = 1565
    CEFBS_None, // LNGFR = 1566
    CEFBS_None, // LNGR = 1567
    CEFBS_None, // LNR = 1568
    CEFBS_None, // LNXBR = 1569
    CEFBS_None, // LNXR = 1570
    CEFBS_FeatureLoadStoreOnCond, // LOC = 1571
    CEFBS_FeatureLoadStoreOnCond, // LOCAsm = 1572
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmE = 1573
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmH = 1574
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmHE = 1575
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmL = 1576
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmLE = 1577
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmLH = 1578
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmM = 1579
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNE = 1580
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNH = 1581
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNHE = 1582
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNL = 1583
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNLE = 1584
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNLH = 1585
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNM = 1586
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNO = 1587
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNP = 1588
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmNZ = 1589
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmO = 1590
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmP = 1591
    CEFBS_FeatureLoadStoreOnCond, // LOCAsmZ = 1592
    CEFBS_FeatureLoadStoreOnCond2, // LOCFH = 1593
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsm = 1594
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmE = 1595
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmH = 1596
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmHE = 1597
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmL = 1598
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmLE = 1599
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmLH = 1600
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmM = 1601
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNE = 1602
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNH = 1603
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNHE = 1604
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNL = 1605
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNLE = 1606
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNLH = 1607
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNM = 1608
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNO = 1609
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNP = 1610
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmNZ = 1611
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmO = 1612
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmP = 1613
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHAsmZ = 1614
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHR = 1615
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsm = 1616
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmE = 1617
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmH = 1618
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmHE = 1619
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmL = 1620
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmLE = 1621
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmLH = 1622
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmM = 1623
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNE = 1624
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNH = 1625
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNHE = 1626
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNL = 1627
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNLE = 1628
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNLH = 1629
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNM = 1630
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNO = 1631
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNP = 1632
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmNZ = 1633
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmO = 1634
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmP = 1635
    CEFBS_FeatureLoadStoreOnCond2, // LOCFHRAsmZ = 1636
    CEFBS_FeatureLoadStoreOnCond, // LOCG = 1637
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsm = 1638
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmE = 1639
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmH = 1640
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmHE = 1641
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmL = 1642
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmLE = 1643
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmLH = 1644
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmM = 1645
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNE = 1646
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNH = 1647
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNHE = 1648
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNL = 1649
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNLE = 1650
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNLH = 1651
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNM = 1652
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNO = 1653
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNP = 1654
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmNZ = 1655
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmO = 1656
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmP = 1657
    CEFBS_FeatureLoadStoreOnCond, // LOCGAsmZ = 1658
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHI = 1659
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsm = 1660
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmE = 1661
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmH = 1662
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmHE = 1663
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmL = 1664
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmLE = 1665
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmLH = 1666
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmM = 1667
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNE = 1668
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNH = 1669
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNHE = 1670
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNL = 1671
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNLE = 1672
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNLH = 1673
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNM = 1674
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNO = 1675
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNP = 1676
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmNZ = 1677
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmO = 1678
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmP = 1679
    CEFBS_FeatureLoadStoreOnCond2, // LOCGHIAsmZ = 1680
    CEFBS_FeatureLoadStoreOnCond, // LOCGR = 1681
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsm = 1682
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmE = 1683
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmH = 1684
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmHE = 1685
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmL = 1686
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmLE = 1687
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmLH = 1688
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmM = 1689
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNE = 1690
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNH = 1691
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNHE = 1692
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNL = 1693
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNLE = 1694
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNLH = 1695
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNM = 1696
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNO = 1697
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNP = 1698
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmNZ = 1699
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmO = 1700
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmP = 1701
    CEFBS_FeatureLoadStoreOnCond, // LOCGRAsmZ = 1702
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHI = 1703
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsm = 1704
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmE = 1705
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmH = 1706
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmHE = 1707
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmL = 1708
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmLE = 1709
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmLH = 1710
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmM = 1711
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNE = 1712
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNH = 1713
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNHE = 1714
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNL = 1715
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNLE = 1716
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNLH = 1717
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNM = 1718
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNO = 1719
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNP = 1720
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmNZ = 1721
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmO = 1722
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmP = 1723
    CEFBS_FeatureLoadStoreOnCond2, // LOCHHIAsmZ = 1724
    CEFBS_FeatureLoadStoreOnCond2, // LOCHI = 1725
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsm = 1726
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmE = 1727
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmH = 1728
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmHE = 1729
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmL = 1730
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmLE = 1731
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmLH = 1732
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmM = 1733
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNE = 1734
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNH = 1735
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNHE = 1736
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNL = 1737
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNLE = 1738
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNLH = 1739
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNM = 1740
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNO = 1741
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNP = 1742
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmNZ = 1743
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmO = 1744
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmP = 1745
    CEFBS_FeatureLoadStoreOnCond2, // LOCHIAsmZ = 1746
    CEFBS_FeatureLoadStoreOnCond, // LOCR = 1747
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsm = 1748
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmE = 1749
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmH = 1750
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmHE = 1751
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmL = 1752
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmLE = 1753
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmLH = 1754
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmM = 1755
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNE = 1756
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNH = 1757
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNHE = 1758
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNL = 1759
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNLE = 1760
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNLH = 1761
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNM = 1762
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNO = 1763
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNP = 1764
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmNZ = 1765
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmO = 1766
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmP = 1767
    CEFBS_FeatureLoadStoreOnCond, // LOCRAsmZ = 1768
    CEFBS_None, // LPCTL = 1769
    CEFBS_FeatureInterlockedAccess1, // LPD = 1770
    CEFBS_None, // LPDBR = 1771
    CEFBS_None, // LPDFR = 1772
    CEFBS_None, // LPDFR_32 = 1773
    CEFBS_FeatureInterlockedAccess1, // LPDG = 1774
    CEFBS_None, // LPDR = 1775
    CEFBS_None, // LPEBR = 1776
    CEFBS_None, // LPER = 1777
    CEFBS_None, // LPGFR = 1778
    CEFBS_None, // LPGR = 1779
    CEFBS_None, // LPP = 1780
    CEFBS_None, // LPQ = 1781
    CEFBS_None, // LPR = 1782
    CEFBS_None, // LPSW = 1783
    CEFBS_None, // LPSWE = 1784
    CEFBS_FeatureBEAREnhancement, // LPSWEY = 1785
    CEFBS_None, // LPTEA = 1786
    CEFBS_None, // LPXBR = 1787
    CEFBS_None, // LPXR = 1788
    CEFBS_None, // LR = 1789
    CEFBS_None, // LRA = 1790
    CEFBS_None, // LRAG = 1791
    CEFBS_None, // LRAY = 1792
    CEFBS_None, // LRDR = 1793
    CEFBS_None, // LRER = 1794
    CEFBS_None, // LRL = 1795
    CEFBS_None, // LRV = 1796
    CEFBS_None, // LRVG = 1797
    CEFBS_None, // LRVGR = 1798
    CEFBS_None, // LRVH = 1799
    CEFBS_None, // LRVR = 1800
    CEFBS_None, // LSCTL = 1801
    CEFBS_None, // LT = 1802
    CEFBS_None, // LTDBR = 1803
    CEFBS_None, // LTDBRCompare = 1804
    CEFBS_None, // LTDR = 1805
    CEFBS_None, // LTDTR = 1806
    CEFBS_None, // LTEBR = 1807
    CEFBS_None, // LTEBRCompare = 1808
    CEFBS_None, // LTER = 1809
    CEFBS_None, // LTG = 1810
    CEFBS_None, // LTGF = 1811
    CEFBS_None, // LTGFR = 1812
    CEFBS_None, // LTGR = 1813
    CEFBS_None, // LTR = 1814
    CEFBS_None, // LTXBR = 1815
    CEFBS_None, // LTXBRCompare = 1816
    CEFBS_None, // LTXR = 1817
    CEFBS_None, // LTXTR = 1818
    CEFBS_None, // LURA = 1819
    CEFBS_None, // LURAG = 1820
    CEFBS_None, // LXD = 1821
    CEFBS_None, // LXDB = 1822
    CEFBS_None, // LXDBR = 1823
    CEFBS_None, // LXDR = 1824
    CEFBS_None, // LXDTR = 1825
    CEFBS_None, // LXE = 1826
    CEFBS_None, // LXEB = 1827
    CEFBS_None, // LXEBR = 1828
    CEFBS_None, // LXER = 1829
    CEFBS_None, // LXR = 1830
    CEFBS_None, // LY = 1831
    CEFBS_None, // LZDR = 1832
    CEFBS_None, // LZER = 1833
    CEFBS_FeatureLoadAndZeroRightmostByte, // LZRF = 1834
    CEFBS_FeatureLoadAndZeroRightmostByte, // LZRG = 1835
    CEFBS_None, // LZXR = 1836
    CEFBS_None, // M = 1837
    CEFBS_None, // MAD = 1838
    CEFBS_None, // MADB = 1839
    CEFBS_None, // MADBR = 1840
    CEFBS_None, // MADR = 1841
    CEFBS_None, // MAE = 1842
    CEFBS_None, // MAEB = 1843
    CEFBS_None, // MAEBR = 1844
    CEFBS_None, // MAER = 1845
    CEFBS_None, // MAY = 1846
    CEFBS_None, // MAYH = 1847
    CEFBS_None, // MAYHR = 1848
    CEFBS_None, // MAYL = 1849
    CEFBS_None, // MAYLR = 1850
    CEFBS_None, // MAYR = 1851
    CEFBS_None, // MC = 1852
    CEFBS_None, // MD = 1853
    CEFBS_None, // MDB = 1854
    CEFBS_None, // MDBR = 1855
    CEFBS_None, // MDE = 1856
    CEFBS_None, // MDEB = 1857
    CEFBS_None, // MDEBR = 1858
    CEFBS_None, // MDER = 1859
    CEFBS_None, // MDR = 1860
    CEFBS_None, // MDTR = 1861
    CEFBS_FeatureFPExtension, // MDTRA = 1862
    CEFBS_None, // ME = 1863
    CEFBS_None, // MEE = 1864
    CEFBS_None, // MEEB = 1865
    CEFBS_None, // MEEBR = 1866
    CEFBS_None, // MEER = 1867
    CEFBS_None, // MER = 1868
    CEFBS_None, // MFY = 1869
    CEFBS_FeatureMiscellaneousExtensions2, // MG = 1870
    CEFBS_FeatureMiscellaneousExtensions2, // MGH = 1871
    CEFBS_None, // MGHI = 1872
    CEFBS_FeatureMiscellaneousExtensions2, // MGRK = 1873
    CEFBS_None, // MH = 1874
    CEFBS_None, // MHI = 1875
    CEFBS_None, // MHY = 1876
    CEFBS_None, // ML = 1877
    CEFBS_None, // MLG = 1878
    CEFBS_None, // MLGR = 1879
    CEFBS_None, // MLR = 1880
    CEFBS_None, // MP = 1881
    CEFBS_None, // MR = 1882
    CEFBS_None, // MS = 1883
    CEFBS_FeatureMiscellaneousExtensions2, // MSC = 1884
    CEFBS_None, // MSCH = 1885
    CEFBS_None, // MSD = 1886
    CEFBS_None, // MSDB = 1887
    CEFBS_None, // MSDBR = 1888
    CEFBS_None, // MSDR = 1889
    CEFBS_None, // MSE = 1890
    CEFBS_None, // MSEB = 1891
    CEFBS_None, // MSEBR = 1892
    CEFBS_None, // MSER = 1893
    CEFBS_None, // MSFI = 1894
    CEFBS_None, // MSG = 1895
    CEFBS_FeatureMiscellaneousExtensions2, // MSGC = 1896
    CEFBS_None, // MSGF = 1897
    CEFBS_None, // MSGFI = 1898
    CEFBS_None, // MSGFR = 1899
    CEFBS_None, // MSGR = 1900
    CEFBS_FeatureMiscellaneousExtensions2, // MSGRKC = 1901
    CEFBS_None, // MSR = 1902
    CEFBS_FeatureMiscellaneousExtensions2, // MSRKC = 1903
    CEFBS_None, // MSTA = 1904
    CEFBS_None, // MSY = 1905
    CEFBS_None, // MVC = 1906
    CEFBS_None, // MVCDK = 1907
    CEFBS_None, // MVCIN = 1908
    CEFBS_None, // MVCK = 1909
    CEFBS_None, // MVCL = 1910
    CEFBS_None, // MVCLE = 1911
    CEFBS_None, // MVCLU = 1912
    CEFBS_None, // MVCOS = 1913
    CEFBS_None, // MVCP = 1914
    CEFBS_FeatureMiscellaneousExtensions3, // MVCRL = 1915
    CEFBS_None, // MVCS = 1916
    CEFBS_None, // MVCSK = 1917
    CEFBS_None, // MVGHI = 1918
    CEFBS_None, // MVHHI = 1919
    CEFBS_None, // MVHI = 1920
    CEFBS_None, // MVI = 1921
    CEFBS_None, // MVIY = 1922
    CEFBS_None, // MVN = 1923
    CEFBS_None, // MVO = 1924
    CEFBS_None, // MVPG = 1925
    CEFBS_None, // MVST = 1926
    CEFBS_None, // MVZ = 1927
    CEFBS_None, // MXBR = 1928
    CEFBS_None, // MXD = 1929
    CEFBS_None, // MXDB = 1930
    CEFBS_None, // MXDBR = 1931
    CEFBS_None, // MXDR = 1932
    CEFBS_None, // MXR = 1933
    CEFBS_None, // MXTR = 1934
    CEFBS_FeatureFPExtension, // MXTRA = 1935
    CEFBS_None, // MY = 1936
    CEFBS_None, // MYH = 1937
    CEFBS_None, // MYHR = 1938
    CEFBS_None, // MYL = 1939
    CEFBS_None, // MYLR = 1940
    CEFBS_None, // MYR = 1941
    CEFBS_None, // N = 1942
    CEFBS_None, // NC = 1943
    CEFBS_FeatureMiscellaneousExtensions3, // NCGRK = 1944
    CEFBS_FeatureMiscellaneousExtensions3, // NCRK = 1945
    CEFBS_None, // NG = 1946
    CEFBS_None, // NGR = 1947
    CEFBS_FeatureDistinctOps, // NGRK = 1948
    CEFBS_None, // NI = 1949
    CEFBS_FeatureExecutionHint, // NIAI = 1950
    CEFBS_None, // NIHF = 1951
    CEFBS_None, // NIHH = 1952
    CEFBS_None, // NIHL = 1953
    CEFBS_None, // NILF = 1954
    CEFBS_None, // NILH = 1955
    CEFBS_None, // NILL = 1956
    CEFBS_None, // NIY = 1957
    CEFBS_FeatureMiscellaneousExtensions3, // NNGRK = 1958
    CEFBS_FeatureNNPAssist, // NNPA = 1959
    CEFBS_FeatureMiscellaneousExtensions3, // NNRK = 1960
    CEFBS_FeatureMiscellaneousExtensions3, // NOGRK = 1961
    CEFBS_None, // NOP_bare = 1962
    CEFBS_FeatureMiscellaneousExtensions3, // NORK = 1963
    CEFBS_None, // NR = 1964
    CEFBS_FeatureDistinctOps, // NRK = 1965
    CEFBS_FeatureTransactionalExecution, // NTSTG = 1966
    CEFBS_FeatureMiscellaneousExtensions3, // NXGRK = 1967
    CEFBS_FeatureMiscellaneousExtensions3, // NXRK = 1968
    CEFBS_None, // NY = 1969
    CEFBS_None, // O = 1970
    CEFBS_None, // OC = 1971
    CEFBS_FeatureMiscellaneousExtensions3, // OCGRK = 1972
    CEFBS_FeatureMiscellaneousExtensions3, // OCRK = 1973
    CEFBS_None, // OG = 1974
    CEFBS_None, // OGR = 1975
    CEFBS_FeatureDistinctOps, // OGRK = 1976
    CEFBS_None, // OI = 1977
    CEFBS_None, // OIHF = 1978
    CEFBS_None, // OIHH = 1979
    CEFBS_None, // OIHL = 1980
    CEFBS_None, // OILF = 1981
    CEFBS_None, // OILH = 1982
    CEFBS_None, // OILL = 1983
    CEFBS_None, // OIY = 1984
    CEFBS_None, // OR = 1985
    CEFBS_FeatureDistinctOps, // ORK = 1986
    CEFBS_None, // OY = 1987
    CEFBS_None, // PACK = 1988
    CEFBS_None, // PALB = 1989
    CEFBS_None, // PC = 1990
    CEFBS_FeatureMessageSecurityAssist4, // PCC = 1991
    CEFBS_FeatureMessageSecurityAssist3, // PCKMO = 1992
    CEFBS_None, // PFD = 1993
    CEFBS_None, // PFDRL = 1994
    CEFBS_None, // PFMF = 1995
    CEFBS_None, // PFPO = 1996
    CEFBS_None, // PGIN = 1997
    CEFBS_None, // PGOUT = 1998
    CEFBS_None, // PKA = 1999
    CEFBS_None, // PKU = 2000
    CEFBS_None, // PLO = 2001
    CEFBS_FeaturePopulationCount, // POPCNT = 2002
    CEFBS_FeatureMiscellaneousExtensions3, // POPCNTOpt = 2003
    CEFBS_FeatureProcessorAssist, // PPA = 2004
    CEFBS_FeatureMessageSecurityAssist5, // PPNO = 2005
    CEFBS_None, // PR = 2006
    CEFBS_FeatureMessageSecurityAssist7, // PRNO = 2007
    CEFBS_None, // PT = 2008
    CEFBS_None, // PTF = 2009
    CEFBS_None, // PTFF = 2010
    CEFBS_None, // PTI = 2011
    CEFBS_None, // PTLB = 2012
    CEFBS_None, // QADTR = 2013
    CEFBS_None, // QAXTR = 2014
    CEFBS_None, // QCTRI = 2015
    CEFBS_FeatureProcessorActivityInstrumentation, // QPACI = 2016
    CEFBS_None, // QSI = 2017
    CEFBS_None, // RCHP = 2018
    CEFBS_FeatureResetDATProtection, // RDP = 2019
    CEFBS_FeatureResetDATProtection, // RDPOpt = 2020
    CEFBS_None, // RISBG = 2021
    CEFBS_None, // RISBG32 = 2022
    CEFBS_FeatureMiscellaneousExtensions, // RISBGN = 2023
    CEFBS_FeatureHighWord, // RISBHG = 2024
    CEFBS_FeatureHighWord, // RISBLG = 2025
    CEFBS_None, // RLL = 2026
    CEFBS_None, // RLLG = 2027
    CEFBS_None, // RNSBG = 2028
    CEFBS_None, // ROSBG = 2029
    CEFBS_None, // RP = 2030
    CEFBS_None, // RRBE = 2031
    CEFBS_FeatureResetReferenceBitsMultiple, // RRBM = 2032
    CEFBS_None, // RRDTR = 2033
    CEFBS_None, // RRXTR = 2034
    CEFBS_None, // RSCH = 2035
    CEFBS_None, // RXSBG = 2036
    CEFBS_None, // S = 2037
    CEFBS_None, // SAC = 2038
    CEFBS_None, // SACF = 2039
    CEFBS_None, // SAL = 2040
    CEFBS_None, // SAM24 = 2041
    CEFBS_None, // SAM31 = 2042
    CEFBS_None, // SAM64 = 2043
    CEFBS_None, // SAR = 2044
    CEFBS_None, // SCCTR = 2045
    CEFBS_None, // SCHM = 2046
    CEFBS_None, // SCK = 2047
    CEFBS_None, // SCKC = 2048
    CEFBS_None, // SCKPF = 2049
    CEFBS_None, // SD = 2050
    CEFBS_None, // SDB = 2051
    CEFBS_None, // SDBR = 2052
    CEFBS_None, // SDR = 2053
    CEFBS_None, // SDTR = 2054
    CEFBS_FeatureFPExtension, // SDTRA = 2055
    CEFBS_None, // SE = 2056
    CEFBS_None, // SEB = 2057
    CEFBS_None, // SEBR = 2058
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHR = 2059
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsm = 2060
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmE = 2061
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmH = 2062
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmHE = 2063
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmL = 2064
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmLE = 2065
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmLH = 2066
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmM = 2067
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNE = 2068
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNH = 2069
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNHE = 2070
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNL = 2071
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNLE = 2072
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNLH = 2073
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNM = 2074
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNO = 2075
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNP = 2076
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmNZ = 2077
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmO = 2078
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmP = 2079
    CEFBS_FeatureMiscellaneousExtensions3, // SELFHRAsmZ = 2080
    CEFBS_FeatureMiscellaneousExtensions3, // SELGR = 2081
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsm = 2082
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmE = 2083
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmH = 2084
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmHE = 2085
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmL = 2086
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmLE = 2087
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmLH = 2088
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmM = 2089
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNE = 2090
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNH = 2091
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNHE = 2092
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNL = 2093
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNLE = 2094
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNLH = 2095
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNM = 2096
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNO = 2097
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNP = 2098
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmNZ = 2099
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmO = 2100
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmP = 2101
    CEFBS_FeatureMiscellaneousExtensions3, // SELGRAsmZ = 2102
    CEFBS_FeatureMiscellaneousExtensions3, // SELR = 2103
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsm = 2104
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmE = 2105
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmH = 2106
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmHE = 2107
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmL = 2108
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmLE = 2109
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmLH = 2110
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmM = 2111
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNE = 2112
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNH = 2113
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNHE = 2114
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNL = 2115
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNLE = 2116
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNLH = 2117
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNM = 2118
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNO = 2119
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNP = 2120
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmNZ = 2121
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmO = 2122
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmP = 2123
    CEFBS_FeatureMiscellaneousExtensions3, // SELRAsmZ = 2124
    CEFBS_None, // SER = 2125
    CEFBS_None, // SFASR = 2126
    CEFBS_None, // SFPC = 2127
    CEFBS_None, // SG = 2128
    CEFBS_None, // SGF = 2129
    CEFBS_None, // SGFR = 2130
    CEFBS_FeatureMiscellaneousExtensions2, // SGH = 2131
    CEFBS_None, // SGR = 2132
    CEFBS_FeatureDistinctOps, // SGRK = 2133
    CEFBS_None, // SH = 2134
    CEFBS_FeatureHighWord, // SHHHR = 2135
    CEFBS_FeatureHighWord, // SHHLR = 2136
    CEFBS_None, // SHY = 2137
    CEFBS_None, // SIE = 2138
    CEFBS_None, // SIGA = 2139
    CEFBS_None, // SIGP = 2140
    CEFBS_None, // SL = 2141
    CEFBS_None, // SLA = 2142
    CEFBS_None, // SLAG = 2143
    CEFBS_FeatureDistinctOps, // SLAK = 2144
    CEFBS_None, // SLB = 2145
    CEFBS_None, // SLBG = 2146
    CEFBS_None, // SLBGR = 2147
    CEFBS_None, // SLBR = 2148
    CEFBS_None, // SLDA = 2149
    CEFBS_None, // SLDL = 2150
    CEFBS_None, // SLDT = 2151
    CEFBS_None, // SLFI = 2152
    CEFBS_None, // SLG = 2153
    CEFBS_None, // SLGF = 2154
    CEFBS_None, // SLGFI = 2155
    CEFBS_None, // SLGFR = 2156
    CEFBS_None, // SLGR = 2157
    CEFBS_FeatureDistinctOps, // SLGRK = 2158
    CEFBS_FeatureHighWord, // SLHHHR = 2159
    CEFBS_FeatureHighWord, // SLHHLR = 2160
    CEFBS_None, // SLL = 2161
    CEFBS_None, // SLLG = 2162
    CEFBS_FeatureDistinctOps, // SLLK = 2163
    CEFBS_None, // SLR = 2164
    CEFBS_FeatureDistinctOps, // SLRK = 2165
    CEFBS_None, // SLXT = 2166
    CEFBS_None, // SLY = 2167
    CEFBS_FeatureEnhancedSort, // SORTL = 2168
    CEFBS_None, // SP = 2169
    CEFBS_None, // SPCTR = 2170
    CEFBS_None, // SPKA = 2171
    CEFBS_None, // SPM = 2172
    CEFBS_None, // SPT = 2173
    CEFBS_None, // SPX = 2174
    CEFBS_None, // SQD = 2175
    CEFBS_None, // SQDB = 2176
    CEFBS_None, // SQDBR = 2177
    CEFBS_None, // SQDR = 2178
    CEFBS_None, // SQE = 2179
    CEFBS_None, // SQEB = 2180
    CEFBS_None, // SQEBR = 2181
    CEFBS_None, // SQER = 2182
    CEFBS_None, // SQXBR = 2183
    CEFBS_None, // SQXR = 2184
    CEFBS_None, // SR = 2185
    CEFBS_None, // SRA = 2186
    CEFBS_None, // SRAG = 2187
    CEFBS_FeatureDistinctOps, // SRAK = 2188
    CEFBS_None, // SRDA = 2189
    CEFBS_None, // SRDL = 2190
    CEFBS_None, // SRDT = 2191
    CEFBS_FeatureDistinctOps, // SRK = 2192
    CEFBS_None, // SRL = 2193
    CEFBS_None, // SRLG = 2194
    CEFBS_FeatureDistinctOps, // SRLK = 2195
    CEFBS_None, // SRNM = 2196
    CEFBS_FeatureFPExtension, // SRNMB = 2197
    CEFBS_None, // SRNMT = 2198
    CEFBS_None, // SRP = 2199
    CEFBS_None, // SRST = 2200
    CEFBS_None, // SRSTU = 2201
    CEFBS_None, // SRXT = 2202
    CEFBS_None, // SSAIR = 2203
    CEFBS_None, // SSAR = 2204
    CEFBS_None, // SSCH = 2205
    CEFBS_None, // SSKE = 2206
    CEFBS_None, // SSKEOpt = 2207
    CEFBS_None, // SSM = 2208
    CEFBS_None, // ST = 2209
    CEFBS_None, // STAM = 2210
    CEFBS_None, // STAMY = 2211
    CEFBS_None, // STAP = 2212
    CEFBS_FeatureBEAREnhancement, // STBEAR = 2213
    CEFBS_None, // STC = 2214
    CEFBS_FeatureHighWord, // STCH = 2215
    CEFBS_None, // STCK = 2216
    CEFBS_None, // STCKC = 2217
    CEFBS_None, // STCKE = 2218
    CEFBS_None, // STCKF = 2219
    CEFBS_None, // STCM = 2220
    CEFBS_None, // STCMH = 2221
    CEFBS_None, // STCMY = 2222
    CEFBS_None, // STCPS = 2223
    CEFBS_None, // STCRW = 2224
    CEFBS_None, // STCTG = 2225
    CEFBS_None, // STCTL = 2226
    CEFBS_None, // STCY = 2227
    CEFBS_None, // STD = 2228
    CEFBS_None, // STDY = 2229
    CEFBS_None, // STE = 2230
    CEFBS_None, // STEY = 2231
    CEFBS_FeatureHighWord, // STFH = 2232
    CEFBS_None, // STFL = 2233
    CEFBS_None, // STFLE = 2234
    CEFBS_None, // STFPC = 2235
    CEFBS_None, // STG = 2236
    CEFBS_None, // STGRL = 2237
    CEFBS_FeatureGuardedStorage, // STGSC = 2238
    CEFBS_None, // STH = 2239
    CEFBS_FeatureHighWord, // STHH = 2240
    CEFBS_None, // STHRL = 2241
    CEFBS_None, // STHY = 2242
    CEFBS_None, // STIDP = 2243
    CEFBS_None, // STM = 2244
    CEFBS_None, // STMG = 2245
    CEFBS_None, // STMH = 2246
    CEFBS_None, // STMY = 2247
    CEFBS_None, // STNSM = 2248
    CEFBS_FeatureLoadStoreOnCond, // STOC = 2249
    CEFBS_FeatureLoadStoreOnCond, // STOCAsm = 2250
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmE = 2251
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmH = 2252
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmHE = 2253
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmL = 2254
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmLE = 2255
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmLH = 2256
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmM = 2257
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNE = 2258
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNH = 2259
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNHE = 2260
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNL = 2261
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNLE = 2262
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNLH = 2263
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNM = 2264
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNO = 2265
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNP = 2266
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmNZ = 2267
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmO = 2268
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmP = 2269
    CEFBS_FeatureLoadStoreOnCond, // STOCAsmZ = 2270
    CEFBS_FeatureLoadStoreOnCond2, // STOCFH = 2271
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsm = 2272
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmE = 2273
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmH = 2274
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmHE = 2275
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmL = 2276
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmLE = 2277
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmLH = 2278
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmM = 2279
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNE = 2280
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNH = 2281
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNHE = 2282
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNL = 2283
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNLE = 2284
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNLH = 2285
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNM = 2286
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNO = 2287
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNP = 2288
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmNZ = 2289
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmO = 2290
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmP = 2291
    CEFBS_FeatureLoadStoreOnCond2, // STOCFHAsmZ = 2292
    CEFBS_FeatureLoadStoreOnCond, // STOCG = 2293
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsm = 2294
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmE = 2295
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmH = 2296
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmHE = 2297
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmL = 2298
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmLE = 2299
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmLH = 2300
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmM = 2301
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNE = 2302
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNH = 2303
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNHE = 2304
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNL = 2305
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNLE = 2306
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNLH = 2307
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNM = 2308
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNO = 2309
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNP = 2310
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmNZ = 2311
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmO = 2312
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmP = 2313
    CEFBS_FeatureLoadStoreOnCond, // STOCGAsmZ = 2314
    CEFBS_None, // STOSM = 2315
    CEFBS_None, // STPQ = 2316
    CEFBS_None, // STPT = 2317
    CEFBS_None, // STPX = 2318
    CEFBS_None, // STRAG = 2319
    CEFBS_None, // STRL = 2320
    CEFBS_None, // STRV = 2321
    CEFBS_None, // STRVG = 2322
    CEFBS_None, // STRVH = 2323
    CEFBS_None, // STSCH = 2324
    CEFBS_None, // STSI = 2325
    CEFBS_None, // STURA = 2326
    CEFBS_None, // STURG = 2327
    CEFBS_None, // STY = 2328
    CEFBS_None, // SU = 2329
    CEFBS_None, // SUR = 2330
    CEFBS_None, // SVC = 2331
    CEFBS_None, // SW = 2332
    CEFBS_None, // SWR = 2333
    CEFBS_None, // SXBR = 2334
    CEFBS_None, // SXR = 2335
    CEFBS_None, // SXTR = 2336
    CEFBS_FeatureFPExtension, // SXTRA = 2337
    CEFBS_None, // SY = 2338
    CEFBS_FeatureTransactionalExecution, // TABORT = 2339
    CEFBS_None, // TAM = 2340
    CEFBS_None, // TAR = 2341
    CEFBS_None, // TB = 2342
    CEFBS_None, // TBDR = 2343
    CEFBS_None, // TBEDR = 2344
    CEFBS_FeatureTransactionalExecution, // TBEGIN = 2345
    CEFBS_FeatureTransactionalExecution, // TBEGINC = 2346
    CEFBS_None, // TCDB = 2347
    CEFBS_None, // TCEB = 2348
    CEFBS_None, // TCXB = 2349
    CEFBS_None, // TDCDT = 2350
    CEFBS_None, // TDCET = 2351
    CEFBS_None, // TDCXT = 2352
    CEFBS_None, // TDGDT = 2353
    CEFBS_None, // TDGET = 2354
    CEFBS_None, // TDGXT = 2355
    CEFBS_FeatureTransactionalExecution, // TEND = 2356
    CEFBS_None, // THDER = 2357
    CEFBS_None, // THDR = 2358
    CEFBS_None, // TM = 2359
    CEFBS_None, // TMHH = 2360
    CEFBS_None, // TMHL = 2361
    CEFBS_None, // TMLH = 2362
    CEFBS_None, // TMLL = 2363
    CEFBS_None, // TMY = 2364
    CEFBS_None, // TP = 2365
    CEFBS_None, // TPI = 2366
    CEFBS_None, // TPROT = 2367
    CEFBS_None, // TR = 2368
    CEFBS_None, // TRACE = 2369
    CEFBS_None, // TRACG = 2370
    CEFBS_None, // TRAP2 = 2371
    CEFBS_None, // TRAP4 = 2372
    CEFBS_None, // TRE = 2373
    CEFBS_None, // TROO = 2374
    CEFBS_None, // TROOOpt = 2375
    CEFBS_None, // TROT = 2376
    CEFBS_None, // TROTOpt = 2377
    CEFBS_None, // TRT = 2378
    CEFBS_None, // TRTE = 2379
    CEFBS_None, // TRTEOpt = 2380
    CEFBS_None, // TRTO = 2381
    CEFBS_None, // TRTOOpt = 2382
    CEFBS_None, // TRTR = 2383
    CEFBS_None, // TRTRE = 2384
    CEFBS_None, // TRTREOpt = 2385
    CEFBS_None, // TRTT = 2386
    CEFBS_None, // TRTTOpt = 2387
    CEFBS_None, // TS = 2388
    CEFBS_None, // TSCH = 2389
    CEFBS_None, // UNPK = 2390
    CEFBS_None, // UNPKA = 2391
    CEFBS_None, // UNPKU = 2392
    CEFBS_None, // UPT = 2393
    CEFBS_FeatureVector, // VA = 2394
    CEFBS_FeatureVector, // VAB = 2395
    CEFBS_FeatureVector, // VAC = 2396
    CEFBS_FeatureVector, // VACC = 2397
    CEFBS_FeatureVector, // VACCB = 2398
    CEFBS_FeatureVector, // VACCC = 2399
    CEFBS_FeatureVector, // VACCCQ = 2400
    CEFBS_FeatureVector, // VACCF = 2401
    CEFBS_FeatureVector, // VACCG = 2402
    CEFBS_FeatureVector, // VACCH = 2403
    CEFBS_FeatureVector, // VACCQ = 2404
    CEFBS_FeatureVector, // VACQ = 2405
    CEFBS_FeatureVector, // VAF = 2406
    CEFBS_FeatureVector, // VAG = 2407
    CEFBS_FeatureVector, // VAH = 2408
    CEFBS_FeatureVectorPackedDecimal, // VAP = 2409
    CEFBS_FeatureVector, // VAQ = 2410
    CEFBS_FeatureVector, // VAVG = 2411
    CEFBS_FeatureVector, // VAVGB = 2412
    CEFBS_FeatureVector, // VAVGF = 2413
    CEFBS_FeatureVector, // VAVGG = 2414
    CEFBS_FeatureVector, // VAVGH = 2415
    CEFBS_FeatureVector, // VAVGL = 2416
    CEFBS_FeatureVector, // VAVGLB = 2417
    CEFBS_FeatureVector, // VAVGLF = 2418
    CEFBS_FeatureVector, // VAVGLG = 2419
    CEFBS_FeatureVector, // VAVGLH = 2420
    CEFBS_FeatureVectorEnhancements1, // VBPERM = 2421
    CEFBS_FeatureVector, // VCDG = 2422
    CEFBS_FeatureVector, // VCDGB = 2423
    CEFBS_FeatureVector, // VCDLG = 2424
    CEFBS_FeatureVector, // VCDLGB = 2425
    CEFBS_FeatureVectorEnhancements2, // VCEFB = 2426
    CEFBS_FeatureVectorEnhancements2, // VCELFB = 2427
    CEFBS_FeatureVector, // VCEQ = 2428
    CEFBS_FeatureVector, // VCEQB = 2429
    CEFBS_FeatureVector, // VCEQBS = 2430
    CEFBS_FeatureVector, // VCEQF = 2431
    CEFBS_FeatureVector, // VCEQFS = 2432
    CEFBS_FeatureVector, // VCEQG = 2433
    CEFBS_FeatureVector, // VCEQGS = 2434
    CEFBS_FeatureVector, // VCEQH = 2435
    CEFBS_FeatureVector, // VCEQHS = 2436
    CEFBS_FeatureVectorEnhancements2, // VCFEB = 2437
    CEFBS_FeatureVector_FeatureNNPAssist, // VCFN = 2438
    CEFBS_FeatureVectorEnhancements2, // VCFPL = 2439
    CEFBS_FeatureVectorEnhancements2, // VCFPS = 2440
    CEFBS_FeatureVector, // VCGD = 2441
    CEFBS_FeatureVector, // VCGDB = 2442
    CEFBS_FeatureVector, // VCH = 2443
    CEFBS_FeatureVector, // VCHB = 2444
    CEFBS_FeatureVector, // VCHBS = 2445
    CEFBS_FeatureVector, // VCHF = 2446
    CEFBS_FeatureVector, // VCHFS = 2447
    CEFBS_FeatureVector, // VCHG = 2448
    CEFBS_FeatureVector, // VCHGS = 2449
    CEFBS_FeatureVector, // VCHH = 2450
    CEFBS_FeatureVector, // VCHHS = 2451
    CEFBS_FeatureVector, // VCHL = 2452
    CEFBS_FeatureVector, // VCHLB = 2453
    CEFBS_FeatureVector, // VCHLBS = 2454
    CEFBS_FeatureVector, // VCHLF = 2455
    CEFBS_FeatureVector, // VCHLFS = 2456
    CEFBS_FeatureVector, // VCHLG = 2457
    CEFBS_FeatureVector, // VCHLGS = 2458
    CEFBS_FeatureVector, // VCHLH = 2459
    CEFBS_FeatureVector, // VCHLHS = 2460
    CEFBS_FeatureVector, // VCKSM = 2461
    CEFBS_FeatureVectorEnhancements2, // VCLFEB = 2462
    CEFBS_FeatureVector_FeatureNNPAssist, // VCLFNH = 2463
    CEFBS_FeatureVector_FeatureNNPAssist, // VCLFNL = 2464
    CEFBS_FeatureVectorEnhancements2, // VCLFP = 2465
    CEFBS_FeatureVector, // VCLGD = 2466
    CEFBS_FeatureVector, // VCLGDB = 2467
    CEFBS_FeatureVector, // VCLZ = 2468
    CEFBS_FeatureVector, // VCLZB = 2469
    CEFBS_FeatureVectorPackedDecimalEnhancement2, // VCLZDP = 2470
    CEFBS_FeatureVector, // VCLZF = 2471
    CEFBS_FeatureVector, // VCLZG = 2472
    CEFBS_FeatureVector, // VCLZH = 2473
    CEFBS_FeatureVector_FeatureNNPAssist, // VCNF = 2474
    CEFBS_FeatureVectorPackedDecimal, // VCP = 2475
    CEFBS_FeatureVector_FeatureNNPAssist, // VCRNF = 2476
    CEFBS_FeatureVectorEnhancements2, // VCSFP = 2477
    CEFBS_FeatureVectorPackedDecimalEnhancement2, // VCSPH = 2478
    CEFBS_FeatureVector, // VCTZ = 2479
    CEFBS_FeatureVector, // VCTZB = 2480
    CEFBS_FeatureVector, // VCTZF = 2481
    CEFBS_FeatureVector, // VCTZG = 2482
    CEFBS_FeatureVector, // VCTZH = 2483
    CEFBS_FeatureVectorPackedDecimal, // VCVB = 2484
    CEFBS_FeatureVectorPackedDecimal, // VCVBG = 2485
    CEFBS_FeatureVectorPackedDecimalEnhancement, // VCVBGOpt = 2486
    CEFBS_FeatureVectorPackedDecimalEnhancement, // VCVBOpt = 2487
    CEFBS_FeatureVectorPackedDecimal, // VCVD = 2488
    CEFBS_FeatureVectorPackedDecimal, // VCVDG = 2489
    CEFBS_FeatureVectorPackedDecimal, // VDP = 2490
    CEFBS_FeatureVector, // VEC = 2491
    CEFBS_FeatureVector, // VECB = 2492
    CEFBS_FeatureVector, // VECF = 2493
    CEFBS_FeatureVector, // VECG = 2494
    CEFBS_FeatureVector, // VECH = 2495
    CEFBS_FeatureVector, // VECL = 2496
    CEFBS_FeatureVector, // VECLB = 2497
    CEFBS_FeatureVector, // VECLF = 2498
    CEFBS_FeatureVector, // VECLG = 2499
    CEFBS_FeatureVector, // VECLH = 2500
    CEFBS_FeatureVector, // VERIM = 2501
    CEFBS_FeatureVector, // VERIMB = 2502
    CEFBS_FeatureVector, // VERIMF = 2503
    CEFBS_FeatureVector, // VERIMG = 2504
    CEFBS_FeatureVector, // VERIMH = 2505
    CEFBS_FeatureVector, // VERLL = 2506
    CEFBS_FeatureVector, // VERLLB = 2507
    CEFBS_FeatureVector, // VERLLF = 2508
    CEFBS_FeatureVector, // VERLLG = 2509
    CEFBS_FeatureVector, // VERLLH = 2510
    CEFBS_FeatureVector, // VERLLV = 2511
    CEFBS_FeatureVector, // VERLLVB = 2512
    CEFBS_FeatureVector, // VERLLVF = 2513
    CEFBS_FeatureVector, // VERLLVG = 2514
    CEFBS_FeatureVector, // VERLLVH = 2515
    CEFBS_FeatureVector, // VESL = 2516
    CEFBS_FeatureVector, // VESLB = 2517
    CEFBS_FeatureVector, // VESLF = 2518
    CEFBS_FeatureVector, // VESLG = 2519
    CEFBS_FeatureVector, // VESLH = 2520
    CEFBS_FeatureVector, // VESLV = 2521
    CEFBS_FeatureVector, // VESLVB = 2522
    CEFBS_FeatureVector, // VESLVF = 2523
    CEFBS_FeatureVector, // VESLVG = 2524
    CEFBS_FeatureVector, // VESLVH = 2525
    CEFBS_FeatureVector, // VESRA = 2526
    CEFBS_FeatureVector, // VESRAB = 2527
    CEFBS_FeatureVector, // VESRAF = 2528
    CEFBS_FeatureVector, // VESRAG = 2529
    CEFBS_FeatureVector, // VESRAH = 2530
    CEFBS_FeatureVector, // VESRAV = 2531
    CEFBS_FeatureVector, // VESRAVB = 2532
    CEFBS_FeatureVector, // VESRAVF = 2533
    CEFBS_FeatureVector, // VESRAVG = 2534
    CEFBS_FeatureVector, // VESRAVH = 2535
    CEFBS_FeatureVector, // VESRL = 2536
    CEFBS_FeatureVector, // VESRLB = 2537
    CEFBS_FeatureVector, // VESRLF = 2538
    CEFBS_FeatureVector, // VESRLG = 2539
    CEFBS_FeatureVector, // VESRLH = 2540
    CEFBS_FeatureVector, // VESRLV = 2541
    CEFBS_FeatureVector, // VESRLVB = 2542
    CEFBS_FeatureVector, // VESRLVF = 2543
    CEFBS_FeatureVector, // VESRLVG = 2544
    CEFBS_FeatureVector, // VESRLVH = 2545
    CEFBS_FeatureVector, // VFA = 2546
    CEFBS_FeatureVector, // VFADB = 2547
    CEFBS_FeatureVector, // VFAE = 2548
    CEFBS_FeatureVector, // VFAEB = 2549
    CEFBS_FeatureVector, // VFAEBS = 2550
    CEFBS_FeatureVector, // VFAEF = 2551
    CEFBS_FeatureVector, // VFAEFS = 2552
    CEFBS_FeatureVector, // VFAEH = 2553
    CEFBS_FeatureVector, // VFAEHS = 2554
    CEFBS_FeatureVector, // VFAEZB = 2555
    CEFBS_FeatureVector, // VFAEZBS = 2556
    CEFBS_FeatureVector, // VFAEZF = 2557
    CEFBS_FeatureVector, // VFAEZFS = 2558
    CEFBS_FeatureVector, // VFAEZH = 2559
    CEFBS_FeatureVector, // VFAEZHS = 2560
    CEFBS_FeatureVectorEnhancements1, // VFASB = 2561
    CEFBS_FeatureVector, // VFCE = 2562
    CEFBS_FeatureVector, // VFCEDB = 2563
    CEFBS_FeatureVector, // VFCEDBS = 2564
    CEFBS_FeatureVectorEnhancements1, // VFCESB = 2565
    CEFBS_FeatureVectorEnhancements1, // VFCESBS = 2566
    CEFBS_FeatureVector, // VFCH = 2567
    CEFBS_FeatureVector, // VFCHDB = 2568
    CEFBS_FeatureVector, // VFCHDBS = 2569
    CEFBS_FeatureVector, // VFCHE = 2570
    CEFBS_FeatureVector, // VFCHEDB = 2571
    CEFBS_FeatureVector, // VFCHEDBS = 2572
    CEFBS_FeatureVectorEnhancements1, // VFCHESB = 2573
    CEFBS_FeatureVectorEnhancements1, // VFCHESBS = 2574
    CEFBS_FeatureVectorEnhancements1, // VFCHSB = 2575
    CEFBS_FeatureVectorEnhancements1, // VFCHSBS = 2576
    CEFBS_FeatureVector, // VFD = 2577
    CEFBS_FeatureVector, // VFDDB = 2578
    CEFBS_FeatureVectorEnhancements1, // VFDSB = 2579
    CEFBS_FeatureVector, // VFEE = 2580
    CEFBS_FeatureVector, // VFEEB = 2581
    CEFBS_FeatureVector, // VFEEBS = 2582
    CEFBS_FeatureVector, // VFEEF = 2583
    CEFBS_FeatureVector, // VFEEFS = 2584
    CEFBS_FeatureVector, // VFEEH = 2585
    CEFBS_FeatureVector, // VFEEHS = 2586
    CEFBS_FeatureVector, // VFEEZB = 2587
    CEFBS_FeatureVector, // VFEEZBS = 2588
    CEFBS_FeatureVector, // VFEEZF = 2589
    CEFBS_FeatureVector, // VFEEZFS = 2590
    CEFBS_FeatureVector, // VFEEZH = 2591
    CEFBS_FeatureVector, // VFEEZHS = 2592
    CEFBS_FeatureVector, // VFENE = 2593
    CEFBS_FeatureVector, // VFENEB = 2594
    CEFBS_FeatureVector, // VFENEBS = 2595
    CEFBS_FeatureVector, // VFENEF = 2596
    CEFBS_FeatureVector, // VFENEFS = 2597
    CEFBS_FeatureVector, // VFENEH = 2598
    CEFBS_FeatureVector, // VFENEHS = 2599
    CEFBS_FeatureVector, // VFENEZB = 2600
    CEFBS_FeatureVector, // VFENEZBS = 2601
    CEFBS_FeatureVector, // VFENEZF = 2602
    CEFBS_FeatureVector, // VFENEZFS = 2603
    CEFBS_FeatureVector, // VFENEZH = 2604
    CEFBS_FeatureVector, // VFENEZHS = 2605
    CEFBS_FeatureVector, // VFI = 2606
    CEFBS_FeatureVector, // VFIDB = 2607
    CEFBS_FeatureVectorEnhancements1, // VFISB = 2608
    CEFBS_FeatureVectorEnhancements1, // VFKEDB = 2609
    CEFBS_FeatureVectorEnhancements1, // VFKEDBS = 2610
    CEFBS_FeatureVectorEnhancements1, // VFKESB = 2611
    CEFBS_FeatureVectorEnhancements1, // VFKESBS = 2612
    CEFBS_FeatureVectorEnhancements1, // VFKHDB = 2613
    CEFBS_FeatureVectorEnhancements1, // VFKHDBS = 2614
    CEFBS_FeatureVectorEnhancements1, // VFKHEDB = 2615
    CEFBS_FeatureVectorEnhancements1, // VFKHEDBS = 2616
    CEFBS_FeatureVectorEnhancements1, // VFKHESB = 2617
    CEFBS_FeatureVectorEnhancements1, // VFKHESBS = 2618
    CEFBS_FeatureVectorEnhancements1, // VFKHSB = 2619
    CEFBS_FeatureVectorEnhancements1, // VFKHSBS = 2620
    CEFBS_FeatureVector, // VFLCDB = 2621
    CEFBS_FeatureVectorEnhancements1, // VFLCSB = 2622
    CEFBS_FeatureVectorEnhancements1, // VFLL = 2623
    CEFBS_FeatureVectorEnhancements1, // VFLLS = 2624
    CEFBS_FeatureVector, // VFLNDB = 2625
    CEFBS_FeatureVectorEnhancements1, // VFLNSB = 2626
    CEFBS_FeatureVector, // VFLPDB = 2627
    CEFBS_FeatureVectorEnhancements1, // VFLPSB = 2628
    CEFBS_FeatureVectorEnhancements1, // VFLR = 2629
    CEFBS_FeatureVectorEnhancements1, // VFLRD = 2630
    CEFBS_FeatureVector, // VFM = 2631
    CEFBS_FeatureVector, // VFMA = 2632
    CEFBS_FeatureVector, // VFMADB = 2633
    CEFBS_FeatureVectorEnhancements1, // VFMASB = 2634
    CEFBS_FeatureVectorEnhancements1, // VFMAX = 2635
    CEFBS_FeatureVectorEnhancements1, // VFMAXDB = 2636
    CEFBS_FeatureVectorEnhancements1, // VFMAXSB = 2637
    CEFBS_FeatureVector, // VFMDB = 2638
    CEFBS_FeatureVectorEnhancements1, // VFMIN = 2639
    CEFBS_FeatureVectorEnhancements1, // VFMINDB = 2640
    CEFBS_FeatureVectorEnhancements1, // VFMINSB = 2641
    CEFBS_FeatureVector, // VFMS = 2642
    CEFBS_FeatureVectorEnhancements1, // VFMSB = 2643
    CEFBS_FeatureVector, // VFMSDB = 2644
    CEFBS_FeatureVectorEnhancements1, // VFMSSB = 2645
    CEFBS_FeatureVectorEnhancements1, // VFNMA = 2646
    CEFBS_FeatureVectorEnhancements1, // VFNMADB = 2647
    CEFBS_FeatureVectorEnhancements1, // VFNMASB = 2648
    CEFBS_FeatureVectorEnhancements1, // VFNMS = 2649
    CEFBS_FeatureVectorEnhancements1, // VFNMSDB = 2650
    CEFBS_FeatureVectorEnhancements1, // VFNMSSB = 2651
    CEFBS_FeatureVector, // VFPSO = 2652
    CEFBS_FeatureVector, // VFPSODB = 2653
    CEFBS_FeatureVectorEnhancements1, // VFPSOSB = 2654
    CEFBS_FeatureVector, // VFS = 2655
    CEFBS_FeatureVector, // VFSDB = 2656
    CEFBS_FeatureVector, // VFSQ = 2657
    CEFBS_FeatureVector, // VFSQDB = 2658
    CEFBS_FeatureVectorEnhancements1, // VFSQSB = 2659
    CEFBS_FeatureVectorEnhancements1, // VFSSB = 2660
    CEFBS_FeatureVector, // VFTCI = 2661
    CEFBS_FeatureVector, // VFTCIDB = 2662
    CEFBS_FeatureVectorEnhancements1, // VFTCISB = 2663
    CEFBS_FeatureVector, // VGBM = 2664
    CEFBS_FeatureVector, // VGEF = 2665
    CEFBS_FeatureVector, // VGEG = 2666
    CEFBS_FeatureVector, // VGFM = 2667
    CEFBS_FeatureVector, // VGFMA = 2668
    CEFBS_FeatureVector, // VGFMAB = 2669
    CEFBS_FeatureVector, // VGFMAF = 2670
    CEFBS_FeatureVector, // VGFMAG = 2671
    CEFBS_FeatureVector, // VGFMAH = 2672
    CEFBS_FeatureVector, // VGFMB = 2673
    CEFBS_FeatureVector, // VGFMF = 2674
    CEFBS_FeatureVector, // VGFMG = 2675
    CEFBS_FeatureVector, // VGFMH = 2676
    CEFBS_FeatureVector, // VGM = 2677
    CEFBS_FeatureVector, // VGMB = 2678
    CEFBS_FeatureVector, // VGMF = 2679
    CEFBS_FeatureVector, // VGMG = 2680
    CEFBS_FeatureVector, // VGMH = 2681
    CEFBS_FeatureVector, // VISTR = 2682
    CEFBS_FeatureVector, // VISTRB = 2683
    CEFBS_FeatureVector, // VISTRBS = 2684
    CEFBS_FeatureVector, // VISTRF = 2685
    CEFBS_FeatureVector, // VISTRFS = 2686
    CEFBS_FeatureVector, // VISTRH = 2687
    CEFBS_FeatureVector, // VISTRHS = 2688
    CEFBS_FeatureVector, // VL = 2689
    CEFBS_FeatureVector, // VLAlign = 2690
    CEFBS_FeatureVector, // VLBB = 2691
    CEFBS_FeatureVectorEnhancements2, // VLBR = 2692
    CEFBS_FeatureVectorEnhancements2, // VLBRF = 2693
    CEFBS_FeatureVectorEnhancements2, // VLBRG = 2694
    CEFBS_FeatureVectorEnhancements2, // VLBRH = 2695
    CEFBS_FeatureVectorEnhancements2, // VLBRQ = 2696
    CEFBS_FeatureVectorEnhancements2, // VLBRREP = 2697
    CEFBS_FeatureVectorEnhancements2, // VLBRREPF = 2698
    CEFBS_FeatureVectorEnhancements2, // VLBRREPG = 2699
    CEFBS_FeatureVectorEnhancements2, // VLBRREPH = 2700
    CEFBS_FeatureVector, // VLC = 2701
    CEFBS_FeatureVector, // VLCB = 2702
    CEFBS_FeatureVector, // VLCF = 2703
    CEFBS_FeatureVector, // VLCG = 2704
    CEFBS_FeatureVector, // VLCH = 2705
    CEFBS_FeatureVector, // VLDE = 2706
    CEFBS_FeatureVector, // VLDEB = 2707
    CEFBS_FeatureVector, // VLEB = 2708
    CEFBS_FeatureVectorEnhancements2, // VLEBRF = 2709
    CEFBS_FeatureVectorEnhancements2, // VLEBRG = 2710
    CEFBS_FeatureVectorEnhancements2, // VLEBRH = 2711
    CEFBS_FeatureVector, // VLED = 2712
    CEFBS_FeatureVector, // VLEDB = 2713
    CEFBS_FeatureVector, // VLEF = 2714
    CEFBS_FeatureVector, // VLEG = 2715
    CEFBS_FeatureVector, // VLEH = 2716
    CEFBS_FeatureVector, // VLEIB = 2717
    CEFBS_FeatureVector, // VLEIF = 2718
    CEFBS_FeatureVector, // VLEIG = 2719
    CEFBS_FeatureVector, // VLEIH = 2720
    CEFBS_FeatureVectorEnhancements2, // VLER = 2721
    CEFBS_FeatureVectorEnhancements2, // VLERF = 2722
    CEFBS_FeatureVectorEnhancements2, // VLERG = 2723
    CEFBS_FeatureVectorEnhancements2, // VLERH = 2724
    CEFBS_FeatureVector, // VLGV = 2725
    CEFBS_FeatureVector, // VLGVB = 2726
    CEFBS_FeatureVector, // VLGVF = 2727
    CEFBS_FeatureVector, // VLGVG = 2728
    CEFBS_FeatureVector, // VLGVH = 2729
    CEFBS_FeatureVectorPackedDecimal, // VLIP = 2730
    CEFBS_FeatureVector, // VLL = 2731
    CEFBS_FeatureVectorEnhancements2, // VLLEBRZ = 2732
    CEFBS_FeatureVectorEnhancements2, // VLLEBRZE = 2733
    CEFBS_FeatureVectorEnhancements2, // VLLEBRZF = 2734
    CEFBS_FeatureVectorEnhancements2, // VLLEBRZG = 2735
    CEFBS_FeatureVectorEnhancements2, // VLLEBRZH = 2736
    CEFBS_FeatureVector, // VLLEZ = 2737
    CEFBS_FeatureVector, // VLLEZB = 2738
    CEFBS_FeatureVector, // VLLEZF = 2739
    CEFBS_FeatureVector, // VLLEZG = 2740
    CEFBS_FeatureVector, // VLLEZH = 2741
    CEFBS_FeatureVectorEnhancements1, // VLLEZLF = 2742
    CEFBS_FeatureVector, // VLM = 2743
    CEFBS_FeatureVector, // VLMAlign = 2744
    CEFBS_FeatureVector, // VLP = 2745
    CEFBS_FeatureVector, // VLPB = 2746
    CEFBS_FeatureVector, // VLPF = 2747
    CEFBS_FeatureVector, // VLPG = 2748
    CEFBS_FeatureVector, // VLPH = 2749
    CEFBS_FeatureVector, // VLR = 2750
    CEFBS_FeatureVector, // VLREP = 2751
    CEFBS_FeatureVector, // VLREPB = 2752
    CEFBS_FeatureVector, // VLREPF = 2753
    CEFBS_FeatureVector, // VLREPG = 2754
    CEFBS_FeatureVector, // VLREPH = 2755
    CEFBS_FeatureVectorPackedDecimal, // VLRL = 2756
    CEFBS_FeatureVectorPackedDecimal, // VLRLR = 2757
    CEFBS_FeatureVector, // VLVG = 2758
    CEFBS_FeatureVector, // VLVGB = 2759
    CEFBS_FeatureVector, // VLVGF = 2760
    CEFBS_FeatureVector, // VLVGG = 2761
    CEFBS_FeatureVector, // VLVGH = 2762
    CEFBS_FeatureVector, // VLVGP = 2763
    CEFBS_FeatureVector, // VMAE = 2764
    CEFBS_FeatureVector, // VMAEB = 2765
    CEFBS_FeatureVector, // VMAEF = 2766
    CEFBS_FeatureVector, // VMAEH = 2767
    CEFBS_FeatureVector, // VMAH = 2768
    CEFBS_FeatureVector, // VMAHB = 2769
    CEFBS_FeatureVector, // VMAHF = 2770
    CEFBS_FeatureVector, // VMAHH = 2771
    CEFBS_FeatureVector, // VMAL = 2772
    CEFBS_FeatureVector, // VMALB = 2773
    CEFBS_FeatureVector, // VMALE = 2774
    CEFBS_FeatureVector, // VMALEB = 2775
    CEFBS_FeatureVector, // VMALEF = 2776
    CEFBS_FeatureVector, // VMALEH = 2777
    CEFBS_FeatureVector, // VMALF = 2778
    CEFBS_FeatureVector, // VMALH = 2779
    CEFBS_FeatureVector, // VMALHB = 2780
    CEFBS_FeatureVector, // VMALHF = 2781
    CEFBS_FeatureVector, // VMALHH = 2782
    CEFBS_FeatureVector, // VMALHW = 2783
    CEFBS_FeatureVector, // VMALO = 2784
    CEFBS_FeatureVector, // VMALOB = 2785
    CEFBS_FeatureVector, // VMALOF = 2786
    CEFBS_FeatureVector, // VMALOH = 2787
    CEFBS_FeatureVector, // VMAO = 2788
    CEFBS_FeatureVector, // VMAOB = 2789
    CEFBS_FeatureVector, // VMAOF = 2790
    CEFBS_FeatureVector, // VMAOH = 2791
    CEFBS_FeatureVector, // VME = 2792
    CEFBS_FeatureVector, // VMEB = 2793
    CEFBS_FeatureVector, // VMEF = 2794
    CEFBS_FeatureVector, // VMEH = 2795
    CEFBS_FeatureVector, // VMH = 2796
    CEFBS_FeatureVector, // VMHB = 2797
    CEFBS_FeatureVector, // VMHF = 2798
    CEFBS_FeatureVector, // VMHH = 2799
    CEFBS_FeatureVector, // VML = 2800
    CEFBS_FeatureVector, // VMLB = 2801
    CEFBS_FeatureVector, // VMLE = 2802
    CEFBS_FeatureVector, // VMLEB = 2803
    CEFBS_FeatureVector, // VMLEF = 2804
    CEFBS_FeatureVector, // VMLEH = 2805
    CEFBS_FeatureVector, // VMLF = 2806
    CEFBS_FeatureVector, // VMLH = 2807
    CEFBS_FeatureVector, // VMLHB = 2808
    CEFBS_FeatureVector, // VMLHF = 2809
    CEFBS_FeatureVector, // VMLHH = 2810
    CEFBS_FeatureVector, // VMLHW = 2811
    CEFBS_FeatureVector, // VMLO = 2812
    CEFBS_FeatureVector, // VMLOB = 2813
    CEFBS_FeatureVector, // VMLOF = 2814
    CEFBS_FeatureVector, // VMLOH = 2815
    CEFBS_FeatureVector, // VMN = 2816
    CEFBS_FeatureVector, // VMNB = 2817
    CEFBS_FeatureVector, // VMNF = 2818
    CEFBS_FeatureVector, // VMNG = 2819
    CEFBS_FeatureVector, // VMNH = 2820
    CEFBS_FeatureVector, // VMNL = 2821
    CEFBS_FeatureVector, // VMNLB = 2822
    CEFBS_FeatureVector, // VMNLF = 2823
    CEFBS_FeatureVector, // VMNLG = 2824
    CEFBS_FeatureVector, // VMNLH = 2825
    CEFBS_FeatureVector, // VMO = 2826
    CEFBS_FeatureVector, // VMOB = 2827
    CEFBS_FeatureVector, // VMOF = 2828
    CEFBS_FeatureVector, // VMOH = 2829
    CEFBS_FeatureVectorPackedDecimal, // VMP = 2830
    CEFBS_FeatureVector, // VMRH = 2831
    CEFBS_FeatureVector, // VMRHB = 2832
    CEFBS_FeatureVector, // VMRHF = 2833
    CEFBS_FeatureVector, // VMRHG = 2834
    CEFBS_FeatureVector, // VMRHH = 2835
    CEFBS_FeatureVector, // VMRL = 2836
    CEFBS_FeatureVector, // VMRLB = 2837
    CEFBS_FeatureVector, // VMRLF = 2838
    CEFBS_FeatureVector, // VMRLG = 2839
    CEFBS_FeatureVector, // VMRLH = 2840
    CEFBS_FeatureVectorEnhancements1, // VMSL = 2841
    CEFBS_FeatureVectorEnhancements1, // VMSLG = 2842
    CEFBS_FeatureVectorPackedDecimal, // VMSP = 2843
    CEFBS_FeatureVector, // VMX = 2844
    CEFBS_FeatureVector, // VMXB = 2845
    CEFBS_FeatureVector, // VMXF = 2846
    CEFBS_FeatureVector, // VMXG = 2847
    CEFBS_FeatureVector, // VMXH = 2848
    CEFBS_FeatureVector, // VMXL = 2849
    CEFBS_FeatureVector, // VMXLB = 2850
    CEFBS_FeatureVector, // VMXLF = 2851
    CEFBS_FeatureVector, // VMXLG = 2852
    CEFBS_FeatureVector, // VMXLH = 2853
    CEFBS_FeatureVector, // VN = 2854
    CEFBS_FeatureVector, // VNC = 2855
    CEFBS_FeatureVectorEnhancements1, // VNN = 2856
    CEFBS_FeatureVector, // VNO = 2857
    CEFBS_FeatureVectorEnhancements1, // VNX = 2858
    CEFBS_FeatureVector, // VO = 2859
    CEFBS_FeatureVectorEnhancements1, // VOC = 2860
    CEFBS_FeatureVector, // VONE = 2861
    CEFBS_FeatureVector, // VPDI = 2862
    CEFBS_FeatureVector, // VPERM = 2863
    CEFBS_FeatureVector, // VPK = 2864
    CEFBS_FeatureVector, // VPKF = 2865
    CEFBS_FeatureVector, // VPKG = 2866
    CEFBS_FeatureVector, // VPKH = 2867
    CEFBS_FeatureVector, // VPKLS = 2868
    CEFBS_FeatureVector, // VPKLSF = 2869
    CEFBS_FeatureVector, // VPKLSFS = 2870
    CEFBS_FeatureVector, // VPKLSG = 2871
    CEFBS_FeatureVector, // VPKLSGS = 2872
    CEFBS_FeatureVector, // VPKLSH = 2873
    CEFBS_FeatureVector, // VPKLSHS = 2874
    CEFBS_FeatureVector, // VPKS = 2875
    CEFBS_FeatureVector, // VPKSF = 2876
    CEFBS_FeatureVector, // VPKSFS = 2877
    CEFBS_FeatureVector, // VPKSG = 2878
    CEFBS_FeatureVector, // VPKSGS = 2879
    CEFBS_FeatureVector, // VPKSH = 2880
    CEFBS_FeatureVector, // VPKSHS = 2881
    CEFBS_FeatureVectorPackedDecimal, // VPKZ = 2882
    CEFBS_FeatureVectorPackedDecimalEnhancement2, // VPKZR = 2883
    CEFBS_FeatureVector, // VPOPCT = 2884
    CEFBS_FeatureVectorEnhancements1, // VPOPCTB = 2885
    CEFBS_FeatureVectorEnhancements1, // VPOPCTF = 2886
    CEFBS_FeatureVectorEnhancements1, // VPOPCTG = 2887
    CEFBS_FeatureVectorEnhancements1, // VPOPCTH = 2888
    CEFBS_FeatureVectorPackedDecimal, // VPSOP = 2889
    CEFBS_FeatureVector, // VREP = 2890
    CEFBS_FeatureVector, // VREPB = 2891
    CEFBS_FeatureVector, // VREPF = 2892
    CEFBS_FeatureVector, // VREPG = 2893
    CEFBS_FeatureVector, // VREPH = 2894
    CEFBS_FeatureVector, // VREPI = 2895
    CEFBS_FeatureVector, // VREPIB = 2896
    CEFBS_FeatureVector, // VREPIF = 2897
    CEFBS_FeatureVector, // VREPIG = 2898
    CEFBS_FeatureVector, // VREPIH = 2899
    CEFBS_FeatureVectorPackedDecimal, // VRP = 2900
    CEFBS_FeatureVector, // VS = 2901
    CEFBS_FeatureVector, // VSB = 2902
    CEFBS_FeatureVector, // VSBCBI = 2903
    CEFBS_FeatureVector, // VSBCBIQ = 2904
    CEFBS_FeatureVector, // VSBI = 2905
    CEFBS_FeatureVector, // VSBIQ = 2906
    CEFBS_FeatureVector, // VSCBI = 2907
    CEFBS_FeatureVector, // VSCBIB = 2908
    CEFBS_FeatureVector, // VSCBIF = 2909
    CEFBS_FeatureVector, // VSCBIG = 2910
    CEFBS_FeatureVector, // VSCBIH = 2911
    CEFBS_FeatureVector, // VSCBIQ = 2912
    CEFBS_FeatureVector, // VSCEF = 2913
    CEFBS_FeatureVector, // VSCEG = 2914
    CEFBS_FeatureVectorPackedDecimalEnhancement2, // VSCHDP = 2915
    CEFBS_FeatureVectorPackedDecimalEnhancement2, // VSCHP = 2916
    CEFBS_FeatureVectorPackedDecimalEnhancement2, // VSCHSP = 2917
    CEFBS_FeatureVectorPackedDecimalEnhancement2, // VSCHXP = 2918
    CEFBS_FeatureVectorPackedDecimalEnhancement2, // VSCSHP = 2919
    CEFBS_FeatureVectorPackedDecimal, // VSDP = 2920
    CEFBS_FeatureVector, // VSEG = 2921
    CEFBS_FeatureVector, // VSEGB = 2922
    CEFBS_FeatureVector, // VSEGF = 2923
    CEFBS_FeatureVector, // VSEGH = 2924
    CEFBS_FeatureVector, // VSEL = 2925
    CEFBS_FeatureVector, // VSF = 2926
    CEFBS_FeatureVector, // VSG = 2927
    CEFBS_FeatureVector, // VSH = 2928
    CEFBS_FeatureVector, // VSL = 2929
    CEFBS_FeatureVector, // VSLB = 2930
    CEFBS_FeatureVectorEnhancements2, // VSLD = 2931
    CEFBS_FeatureVector, // VSLDB = 2932
    CEFBS_FeatureVectorPackedDecimal, // VSP = 2933
    CEFBS_FeatureVector, // VSQ = 2934
    CEFBS_FeatureVector, // VSRA = 2935
    CEFBS_FeatureVector, // VSRAB = 2936
    CEFBS_FeatureVectorEnhancements2, // VSRD = 2937
    CEFBS_FeatureVector, // VSRL = 2938
    CEFBS_FeatureVector, // VSRLB = 2939
    CEFBS_FeatureVectorPackedDecimal, // VSRP = 2940
    CEFBS_FeatureVectorPackedDecimalEnhancement2, // VSRPR = 2941
    CEFBS_FeatureVector, // VST = 2942
    CEFBS_FeatureVector, // VSTAlign = 2943
    CEFBS_FeatureVectorEnhancements2, // VSTBR = 2944
    CEFBS_FeatureVectorEnhancements2, // VSTBRF = 2945
    CEFBS_FeatureVectorEnhancements2, // VSTBRG = 2946
    CEFBS_FeatureVectorEnhancements2, // VSTBRH = 2947
    CEFBS_FeatureVectorEnhancements2, // VSTBRQ = 2948
    CEFBS_FeatureVector, // VSTEB = 2949
    CEFBS_FeatureVectorEnhancements2, // VSTEBRF = 2950
    CEFBS_FeatureVectorEnhancements2, // VSTEBRG = 2951
    CEFBS_FeatureVectorEnhancements2, // VSTEBRH = 2952
    CEFBS_FeatureVector, // VSTEF = 2953
    CEFBS_FeatureVector, // VSTEG = 2954
    CEFBS_FeatureVector, // VSTEH = 2955
    CEFBS_FeatureVectorEnhancements2, // VSTER = 2956
    CEFBS_FeatureVectorEnhancements2, // VSTERF = 2957
    CEFBS_FeatureVectorEnhancements2, // VSTERG = 2958
    CEFBS_FeatureVectorEnhancements2, // VSTERH = 2959
    CEFBS_FeatureVector, // VSTL = 2960
    CEFBS_FeatureVector, // VSTM = 2961
    CEFBS_FeatureVector, // VSTMAlign = 2962
    CEFBS_FeatureVector, // VSTRC = 2963
    CEFBS_FeatureVector, // VSTRCB = 2964
    CEFBS_FeatureVector, // VSTRCBS = 2965
    CEFBS_FeatureVector, // VSTRCF = 2966
    CEFBS_FeatureVector, // VSTRCFS = 2967
    CEFBS_FeatureVector, // VSTRCH = 2968
    CEFBS_FeatureVector, // VSTRCHS = 2969
    CEFBS_FeatureVector, // VSTRCZB = 2970
    CEFBS_FeatureVector, // VSTRCZBS = 2971
    CEFBS_FeatureVector, // VSTRCZF = 2972
    CEFBS_FeatureVector, // VSTRCZFS = 2973
    CEFBS_FeatureVector, // VSTRCZH = 2974
    CEFBS_FeatureVector, // VSTRCZHS = 2975
    CEFBS_FeatureVectorPackedDecimal, // VSTRL = 2976
    CEFBS_FeatureVectorPackedDecimal, // VSTRLR = 2977
    CEFBS_FeatureVectorEnhancements2, // VSTRS = 2978
    CEFBS_FeatureVectorEnhancements2, // VSTRSB = 2979
    CEFBS_FeatureVectorEnhancements2, // VSTRSF = 2980
    CEFBS_FeatureVectorEnhancements2, // VSTRSH = 2981
    CEFBS_FeatureVectorEnhancements2, // VSTRSZB = 2982
    CEFBS_FeatureVectorEnhancements2, // VSTRSZF = 2983
    CEFBS_FeatureVectorEnhancements2, // VSTRSZH = 2984
    CEFBS_FeatureVector, // VSUM = 2985
    CEFBS_FeatureVector, // VSUMB = 2986
    CEFBS_FeatureVector, // VSUMG = 2987
    CEFBS_FeatureVector, // VSUMGF = 2988
    CEFBS_FeatureVector, // VSUMGH = 2989
    CEFBS_FeatureVector, // VSUMH = 2990
    CEFBS_FeatureVector, // VSUMQ = 2991
    CEFBS_FeatureVector, // VSUMQF = 2992
    CEFBS_FeatureVector, // VSUMQG = 2993
    CEFBS_FeatureVector, // VTM = 2994
    CEFBS_FeatureVectorPackedDecimal, // VTP = 2995
    CEFBS_FeatureVector, // VUPH = 2996
    CEFBS_FeatureVector, // VUPHB = 2997
    CEFBS_FeatureVector, // VUPHF = 2998
    CEFBS_FeatureVector, // VUPHH = 2999
    CEFBS_FeatureVectorPackedDecimal, // VUPKZ = 3000
    CEFBS_FeatureVectorPackedDecimalEnhancement2, // VUPKZH = 3001
    CEFBS_FeatureVectorPackedDecimalEnhancement2, // VUPKZL = 3002
    CEFBS_FeatureVector, // VUPL = 3003
    CEFBS_FeatureVector, // VUPLB = 3004
    CEFBS_FeatureVector, // VUPLF = 3005
    CEFBS_FeatureVector, // VUPLH = 3006
    CEFBS_FeatureVector, // VUPLHB = 3007
    CEFBS_FeatureVector, // VUPLHF = 3008
    CEFBS_FeatureVector, // VUPLHH = 3009
    CEFBS_FeatureVector, // VUPLHW = 3010
    CEFBS_FeatureVector, // VUPLL = 3011
    CEFBS_FeatureVector, // VUPLLB = 3012
    CEFBS_FeatureVector, // VUPLLF = 3013
    CEFBS_FeatureVector, // VUPLLH = 3014
    CEFBS_FeatureVector, // VX = 3015
    CEFBS_FeatureVector, // VZERO = 3016
    CEFBS_FeatureVector, // WCDGB = 3017
    CEFBS_FeatureVector, // WCDLGB = 3018
    CEFBS_FeatureVectorEnhancements2, // WCEFB = 3019
    CEFBS_FeatureVectorEnhancements2, // WCELFB = 3020
    CEFBS_FeatureVectorEnhancements2, // WCFEB = 3021
    CEFBS_FeatureVector, // WCGDB = 3022
    CEFBS_FeatureVectorEnhancements2, // WCLFEB = 3023
    CEFBS_FeatureVector, // WCLGDB = 3024
    CEFBS_FeatureVector, // WFADB = 3025
    CEFBS_FeatureVectorEnhancements1, // WFASB = 3026
    CEFBS_FeatureVectorEnhancements1, // WFAXB = 3027
    CEFBS_FeatureVector, // WFC = 3028
    CEFBS_FeatureVector, // WFCDB = 3029
    CEFBS_FeatureVector, // WFCEDB = 3030
    CEFBS_FeatureVector, // WFCEDBS = 3031
    CEFBS_FeatureVectorEnhancements1, // WFCESB = 3032
    CEFBS_FeatureVectorEnhancements1, // WFCESBS = 3033
    CEFBS_FeatureVectorEnhancements1, // WFCEXB = 3034
    CEFBS_FeatureVectorEnhancements1, // WFCEXBS = 3035
    CEFBS_FeatureVector, // WFCHDB = 3036
    CEFBS_FeatureVector, // WFCHDBS = 3037
    CEFBS_FeatureVector, // WFCHEDB = 3038
    CEFBS_FeatureVector, // WFCHEDBS = 3039
    CEFBS_FeatureVectorEnhancements1, // WFCHESB = 3040
    CEFBS_FeatureVectorEnhancements1, // WFCHESBS = 3041
    CEFBS_FeatureVectorEnhancements1, // WFCHEXB = 3042
    CEFBS_FeatureVectorEnhancements1, // WFCHEXBS = 3043
    CEFBS_FeatureVectorEnhancements1, // WFCHSB = 3044
    CEFBS_FeatureVectorEnhancements1, // WFCHSBS = 3045
    CEFBS_FeatureVectorEnhancements1, // WFCHXB = 3046
    CEFBS_FeatureVectorEnhancements1, // WFCHXBS = 3047
    CEFBS_FeatureVectorEnhancements1, // WFCSB = 3048
    CEFBS_FeatureVectorEnhancements1, // WFCXB = 3049
    CEFBS_FeatureVector, // WFDDB = 3050
    CEFBS_FeatureVectorEnhancements1, // WFDSB = 3051
    CEFBS_FeatureVectorEnhancements1, // WFDXB = 3052
    CEFBS_FeatureVector, // WFIDB = 3053
    CEFBS_FeatureVectorEnhancements1, // WFISB = 3054
    CEFBS_FeatureVectorEnhancements1, // WFIXB = 3055
    CEFBS_FeatureVector, // WFK = 3056
    CEFBS_FeatureVector, // WFKDB = 3057
    CEFBS_FeatureVectorEnhancements1, // WFKEDB = 3058
    CEFBS_FeatureVectorEnhancements1, // WFKEDBS = 3059
    CEFBS_FeatureVectorEnhancements1, // WFKESB = 3060
    CEFBS_FeatureVectorEnhancements1, // WFKESBS = 3061
    CEFBS_FeatureVectorEnhancements1, // WFKEXB = 3062
    CEFBS_FeatureVectorEnhancements1, // WFKEXBS = 3063
    CEFBS_FeatureVectorEnhancements1, // WFKHDB = 3064
    CEFBS_FeatureVectorEnhancements1, // WFKHDBS = 3065
    CEFBS_FeatureVectorEnhancements1, // WFKHEDB = 3066
    CEFBS_FeatureVectorEnhancements1, // WFKHEDBS = 3067
    CEFBS_FeatureVectorEnhancements1, // WFKHESB = 3068
    CEFBS_FeatureVectorEnhancements1, // WFKHESBS = 3069
    CEFBS_FeatureVectorEnhancements1, // WFKHEXB = 3070
    CEFBS_FeatureVectorEnhancements1, // WFKHEXBS = 3071
    CEFBS_FeatureVectorEnhancements1, // WFKHSB = 3072
    CEFBS_FeatureVectorEnhancements1, // WFKHSBS = 3073
    CEFBS_FeatureVectorEnhancements1, // WFKHXB = 3074
    CEFBS_FeatureVectorEnhancements1, // WFKHXBS = 3075
    CEFBS_FeatureVectorEnhancements1, // WFKSB = 3076
    CEFBS_FeatureVectorEnhancements1, // WFKXB = 3077
    CEFBS_FeatureVector, // WFLCDB = 3078
    CEFBS_FeatureVectorEnhancements1, // WFLCSB = 3079
    CEFBS_FeatureVectorEnhancements1, // WFLCXB = 3080
    CEFBS_FeatureVectorEnhancements1, // WFLLD = 3081
    CEFBS_FeatureVectorEnhancements1, // WFLLS = 3082
    CEFBS_FeatureVector, // WFLNDB = 3083
    CEFBS_FeatureVectorEnhancements1, // WFLNSB = 3084
    CEFBS_FeatureVectorEnhancements1, // WFLNXB = 3085
    CEFBS_FeatureVector, // WFLPDB = 3086
    CEFBS_FeatureVectorEnhancements1, // WFLPSB = 3087
    CEFBS_FeatureVectorEnhancements1, // WFLPXB = 3088
    CEFBS_FeatureVectorEnhancements1, // WFLRD = 3089
    CEFBS_FeatureVectorEnhancements1, // WFLRX = 3090
    CEFBS_FeatureVector, // WFMADB = 3091
    CEFBS_FeatureVectorEnhancements1, // WFMASB = 3092
    CEFBS_FeatureVectorEnhancements1, // WFMAXB = 3093
    CEFBS_FeatureVectorEnhancements1, // WFMAXDB = 3094
    CEFBS_FeatureVectorEnhancements1, // WFMAXSB = 3095
    CEFBS_FeatureVectorEnhancements1, // WFMAXXB = 3096
    CEFBS_FeatureVector, // WFMDB = 3097
    CEFBS_FeatureVectorEnhancements1, // WFMINDB = 3098
    CEFBS_FeatureVectorEnhancements1, // WFMINSB = 3099
    CEFBS_FeatureVectorEnhancements1, // WFMINXB = 3100
    CEFBS_FeatureVectorEnhancements1, // WFMSB = 3101
    CEFBS_FeatureVector, // WFMSDB = 3102
    CEFBS_FeatureVectorEnhancements1, // WFMSSB = 3103
    CEFBS_FeatureVectorEnhancements1, // WFMSXB = 3104
    CEFBS_FeatureVectorEnhancements1, // WFMXB = 3105
    CEFBS_FeatureVectorEnhancements1, // WFNMADB = 3106
    CEFBS_FeatureVectorEnhancements1, // WFNMASB = 3107
    CEFBS_FeatureVectorEnhancements1, // WFNMAXB = 3108
    CEFBS_FeatureVectorEnhancements1, // WFNMSDB = 3109
    CEFBS_FeatureVectorEnhancements1, // WFNMSSB = 3110
    CEFBS_FeatureVectorEnhancements1, // WFNMSXB = 3111
    CEFBS_FeatureVector, // WFPSODB = 3112
    CEFBS_FeatureVectorEnhancements1, // WFPSOSB = 3113
    CEFBS_FeatureVectorEnhancements1, // WFPSOXB = 3114
    CEFBS_FeatureVector, // WFSDB = 3115
    CEFBS_FeatureVector, // WFSQDB = 3116
    CEFBS_FeatureVectorEnhancements1, // WFSQSB = 3117
    CEFBS_FeatureVectorEnhancements1, // WFSQXB = 3118
    CEFBS_FeatureVectorEnhancements1, // WFSSB = 3119
    CEFBS_FeatureVectorEnhancements1, // WFSXB = 3120
    CEFBS_FeatureVector, // WFTCIDB = 3121
    CEFBS_FeatureVectorEnhancements1, // WFTCISB = 3122
    CEFBS_FeatureVectorEnhancements1, // WFTCIXB = 3123
    CEFBS_FeatureVector, // WLDEB = 3124
    CEFBS_FeatureVector, // WLEDB = 3125
    CEFBS_None, // X = 3126
    CEFBS_None, // XC = 3127
    CEFBS_None, // XG = 3128
    CEFBS_None, // XGR = 3129
    CEFBS_FeatureDistinctOps, // XGRK = 3130
    CEFBS_None, // XI = 3131
    CEFBS_None, // XIHF = 3132
    CEFBS_None, // XILF = 3133
    CEFBS_None, // XIY = 3134
    CEFBS_None, // XR = 3135
    CEFBS_FeatureDistinctOps, // XRK = 3136
    CEFBS_None, // XSCH = 3137
    CEFBS_None, // XY = 3138
    CEFBS_None, // ZAP = 3139
  };

  assert(Opcode < 3140);
  FeatureBitset AvailableFeatures = computeAvailableFeatures(Features);
  const FeatureBitset &RequiredFeatures = FeatureBitsets[RequiredFeaturesRefs[Opcode]];
  FeatureBitset MissingFeatures =
      (AvailableFeatures & RequiredFeatures) ^
      RequiredFeatures;
  if (MissingFeatures.any()) {
    std::ostringstream Msg;
    Msg << "Attempting to emit " << &SystemZInstrNameData[SystemZInstrNameIndices[Opcode]]
        << " instruction but the ";
    for (unsigned i = 0, e = MissingFeatures.size(); i != e; ++i)
      if (MissingFeatures.test(i))
        Msg << SubtargetFeatureNames[i] << " ";
    Msg << "predicate(s) are not met";
    report_fatal_error(Msg.str().c_str());
  }
#endif // NDEBUG
}
} // end namespace SystemZ_MC
} // end namespace llvm
#endif // ENABLE_INSTR_PREDICATE_VERIFIER

#ifdef GET_INSTRMAP_INFO
#undef GET_INSTRMAP_INFO
namespace llvm {

namespace SystemZ {

enum DispSize {
	DispSize_12,
	DispSize_20
};

enum MemType {
	MemType_target
};

enum NumOpsValue {
	NumOpsValue_2
};

enum OpType {
	OpType_mem
};

// getDisp12Opcode
LLVM_READONLY
int getDisp12Opcode(uint16_t Opcode) {
static const uint16_t getDisp12OpcodeTable[][2] = {
  { SystemZ::AHY, SystemZ::AH },
  { SystemZ::ALY, SystemZ::AL },
  { SystemZ::AY, SystemZ::A },
  { SystemZ::CDSY, SystemZ::CDS },
  { SystemZ::CHY, SystemZ::CH },
  { SystemZ::CLIY, SystemZ::CLI },
  { SystemZ::CLMY, SystemZ::CLM },
  { SystemZ::CLY, SystemZ::CL },
  { SystemZ::CSY, SystemZ::CS },
  { SystemZ::CVBY, SystemZ::CVB },
  { SystemZ::CVDY, SystemZ::CVD },
  { SystemZ::CY, SystemZ::C },
  { SystemZ::IC32Y, SystemZ::IC32 },
  { SystemZ::ICMY, SystemZ::ICM },
  { SystemZ::ICY, SystemZ::IC },
  { SystemZ::LAEY, SystemZ::LAE },
  { SystemZ::LAMY, SystemZ::LAM },
  { SystemZ::LAY, SystemZ::LA },
  { SystemZ::LDY, SystemZ::LD },
  { SystemZ::LEY, SystemZ::LE },
  { SystemZ::LHY, SystemZ::LH },
  { SystemZ::LMY, SystemZ::LM },
  { SystemZ::LRAY, SystemZ::LRA },
  { SystemZ::LY, SystemZ::L },
  { SystemZ::MHY, SystemZ::MH },
  { SystemZ::MSY, SystemZ::MS },
  { SystemZ::MVIY, SystemZ::MVI },
  { SystemZ::NIY, SystemZ::NI },
  { SystemZ::NY, SystemZ::N },
  { SystemZ::OIY, SystemZ::OI },
  { SystemZ::OY, SystemZ::O },
  { SystemZ::SHY, SystemZ::SH },
  { SystemZ::SLY, SystemZ::SL },
  { SystemZ::STAMY, SystemZ::STAM },
  { SystemZ::STCMY, SystemZ::STCM },
  { SystemZ::STCY, SystemZ::STC },
  { SystemZ::STDY, SystemZ::STD },
  { SystemZ::STEY, SystemZ::STE },
  { SystemZ::STHY, SystemZ::STH },
  { SystemZ::STMY, SystemZ::STM },
  { SystemZ::STY, SystemZ::ST },
  { SystemZ::SY, SystemZ::S },
  { SystemZ::TMY, SystemZ::TM },
  { SystemZ::XIY, SystemZ::XI },
  { SystemZ::XY, SystemZ::X },
}; // End of getDisp12OpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 45;
  while (start < end) {
    mid = start + (end - start) / 2;
    if (Opcode == getDisp12OpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getDisp12OpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getDisp12OpcodeTable[mid][1];
}

// getDisp20Opcode
LLVM_READONLY
int getDisp20Opcode(uint16_t Opcode) {
static const uint16_t getDisp20OpcodeTable[][2] = {
  { SystemZ::A, SystemZ::AY },
  { SystemZ::AH, SystemZ::AHY },
  { SystemZ::AL, SystemZ::ALY },
  { SystemZ::C, SystemZ::CY },
  { SystemZ::CDS, SystemZ::CDSY },
  { SystemZ::CH, SystemZ::CHY },
  { SystemZ::CL, SystemZ::CLY },
  { SystemZ::CLI, SystemZ::CLIY },
  { SystemZ::CLM, SystemZ::CLMY },
  { SystemZ::CS, SystemZ::CSY },
  { SystemZ::CVB, SystemZ::CVBY },
  { SystemZ::CVD, SystemZ::CVDY },
  { SystemZ::IC, SystemZ::ICY },
  { SystemZ::IC32, SystemZ::IC32Y },
  { SystemZ::ICM, SystemZ::ICMY },
  { SystemZ::L, SystemZ::LY },
  { SystemZ::LA, SystemZ::LAY },
  { SystemZ::LAE, SystemZ::LAEY },
  { SystemZ::LAM, SystemZ::LAMY },
  { SystemZ::LD, SystemZ::LDY },
  { SystemZ::LE, SystemZ::LEY },
  { SystemZ::LH, SystemZ::LHY },
  { SystemZ::LM, SystemZ::LMY },
  { SystemZ::LRA, SystemZ::LRAY },
  { SystemZ::MH, SystemZ::MHY },
  { SystemZ::MS, SystemZ::MSY },
  { SystemZ::MVI, SystemZ::MVIY },
  { SystemZ::N, SystemZ::NY },
  { SystemZ::NI, SystemZ::NIY },
  { SystemZ::O, SystemZ::OY },
  { SystemZ::OI, SystemZ::OIY },
  { SystemZ::S, SystemZ::SY },
  { SystemZ::SH, SystemZ::SHY },
  { SystemZ::SL, SystemZ::SLY },
  { SystemZ::ST, SystemZ::STY },
  { SystemZ::STAM, SystemZ::STAMY },
  { SystemZ::STC, SystemZ::STCY },
  { SystemZ::STCM, SystemZ::STCMY },
  { SystemZ::STD, SystemZ::STDY },
  { SystemZ::STE, SystemZ::STEY },
  { SystemZ::STH, SystemZ::STHY },
  { SystemZ::STM, SystemZ::STMY },
  { SystemZ::TM, SystemZ::TMY },
  { SystemZ::X, SystemZ::XY },
  { SystemZ::XI, SystemZ::XIY },
}; // End of getDisp20OpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 45;
  while (start < end) {
    mid = start + (end - start) / 2;
    if (Opcode == getDisp20OpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getDisp20OpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getDisp20OpcodeTable[mid][1];
}

// getMemOpcode
LLVM_READONLY
int getMemOpcode(uint16_t Opcode) {
static const uint16_t getMemOpcodeTable[][2] = {
  { SystemZ::LLCRMux, SystemZ::LLCMux },
  { SystemZ::LLHRMux, SystemZ::LLHMux },
  { SystemZ::LOCRMux, SystemZ::LOCMux },
  { SystemZ::SELRMux, SystemZ::LOCMux_MemFoldPseudo },
  { SystemZ::ADBR, SystemZ::ADB },
  { SystemZ::ADR, SystemZ::AD },
  { SystemZ::AEBR, SystemZ::AEB },
  { SystemZ::AER, SystemZ::AE },
  { SystemZ::AGFR, SystemZ::AGF },
  { SystemZ::AGR, SystemZ::AG },
  { SystemZ::AGRK, SystemZ::AG_MemFoldPseudo },
  { SystemZ::ALCGR, SystemZ::ALCG },
  { SystemZ::ALCR, SystemZ::ALC },
  { SystemZ::ALGFR, SystemZ::ALGF },
  { SystemZ::ALGR, SystemZ::ALG },
  { SystemZ::ALGRK, SystemZ::ALG_MemFoldPseudo },
  { SystemZ::ALR, SystemZ::AL },
  { SystemZ::ALRK, SystemZ::AL_MemFoldPseudo },
  { SystemZ::AR, SystemZ::A },
  { SystemZ::ARK, SystemZ::A_MemFoldPseudo },
  { SystemZ::AUR, SystemZ::AU },
  { SystemZ::AWR, SystemZ::AW },
  { SystemZ::CDBR, SystemZ::CDB },
  { SystemZ::CDR, SystemZ::CD },
  { SystemZ::CEBR, SystemZ::CEB },
  { SystemZ::CER, SystemZ::CE },
  { SystemZ::CGFR, SystemZ::CGF },
  { SystemZ::CGR, SystemZ::CG },
  { SystemZ::CLGFR, SystemZ::CLGF },
  { SystemZ::CLGR, SystemZ::CLG },
  { SystemZ::CLR, SystemZ::CL },
  { SystemZ::CR, SystemZ::C },
  { SystemZ::DDBR, SystemZ::DDB },
  { SystemZ::DDR, SystemZ::DD },
  { SystemZ::DEBR, SystemZ::DEB },
  { SystemZ::DER, SystemZ::DE },
  { SystemZ::DLGR, SystemZ::DLG },
  { SystemZ::DLR, SystemZ::DL },
  { SystemZ::DR, SystemZ::D },
  { SystemZ::DSGFR, SystemZ::DSGF },
  { SystemZ::DSGR, SystemZ::DSG },
  { SystemZ::KDBR, SystemZ::KDB },
  { SystemZ::KEBR, SystemZ::KEB },
  { SystemZ::LBR, SystemZ::LB },
  { SystemZ::LDEBR, SystemZ::LDEB },
  { SystemZ::LDER, SystemZ::LDE },
  { SystemZ::LDR, SystemZ::LD },
  { SystemZ::LER, SystemZ::LE },
  { SystemZ::LGBR, SystemZ::LGB },
  { SystemZ::LGFR, SystemZ::LGF },
  { SystemZ::LGHR, SystemZ::LGH },
  { SystemZ::LGR, SystemZ::LG },
  { SystemZ::LHR, SystemZ::LH },
  { SystemZ::LLCR, SystemZ::LLC },
  { SystemZ::LLGCR, SystemZ::LLGC },
  { SystemZ::LLGFR, SystemZ::LLGF },
  { SystemZ::LLGHR, SystemZ::LLGH },
  { SystemZ::LLGTR, SystemZ::LLGT },
  { SystemZ::LLHR, SystemZ::LLH },
  { SystemZ::LOCFHR, SystemZ::LOCFH },
  { SystemZ::LOCGR, SystemZ::LOCG },
  { SystemZ::LOCR, SystemZ::LOC },
  { SystemZ::LR, SystemZ::L },
  { SystemZ::LRVGR, SystemZ::LRVG },
  { SystemZ::LRVR, SystemZ::LRV },
  { SystemZ::LTGFR, SystemZ::LTGF },
  { SystemZ::LTGR, SystemZ::LTG },
  { SystemZ::LTR, SystemZ::LT },
  { SystemZ::LXDBR, SystemZ::LXDB },
  { SystemZ::LXDR, SystemZ::LXD },
  { SystemZ::LXEBR, SystemZ::LXEB },
  { SystemZ::LXER, SystemZ::LXE },
  { SystemZ::MADBR, SystemZ::MADB },
  { SystemZ::MADR, SystemZ::MAD },
  { SystemZ::MAEBR, SystemZ::MAEB },
  { SystemZ::MAER, SystemZ::MAE },
  { SystemZ::MAYHR, SystemZ::MAYH },
  { SystemZ::MAYLR, SystemZ::MAYL },
  { SystemZ::MAYR, SystemZ::MAY },
  { SystemZ::MDBR, SystemZ::MDB },
  { SystemZ::MDEBR, SystemZ::MDEB },
  { SystemZ::MDER, SystemZ::MDE },
  { SystemZ::MDR, SystemZ::MD },
  { SystemZ::MEEBR, SystemZ::MEEB },
  { SystemZ::MEER, SystemZ::MEE },
  { SystemZ::MER, SystemZ::ME },
  { SystemZ::MLGR, SystemZ::MLG },
  { SystemZ::MLR, SystemZ::ML },
  { SystemZ::MR, SystemZ::M },
  { SystemZ::MSDBR, SystemZ::MSDB },
  { SystemZ::MSDR, SystemZ::MSD },
  { SystemZ::MSEBR, SystemZ::MSEB },
  { SystemZ::MSER, SystemZ::MSE },
  { SystemZ::MSGFR, SystemZ::MSGF },
  { SystemZ::MSGR, SystemZ::MSG },
  { SystemZ::MSGRKC, SystemZ::MSGC_MemFoldPseudo },
  { SystemZ::MSR, SystemZ::MS },
  { SystemZ::MSRKC, SystemZ::MSC_MemFoldPseudo },
  { SystemZ::MXDBR, SystemZ::MXDB },
  { SystemZ::MXDR, SystemZ::MXD },
  { SystemZ::MYHR, SystemZ::MYH },
  { SystemZ::MYLR, SystemZ::MYL },
  { SystemZ::MYR, SystemZ::MY },
  { SystemZ::NGR, SystemZ::NG },
  { SystemZ::NGRK, SystemZ::NG_MemFoldPseudo },
  { SystemZ::NR, SystemZ::N },
  { SystemZ::NRK, SystemZ::N_MemFoldPseudo },
  { SystemZ::OGR, SystemZ::OG },
  { SystemZ::OGRK, SystemZ::OG_MemFoldPseudo },
  { SystemZ::OR, SystemZ::O },
  { SystemZ::ORK, SystemZ::O_MemFoldPseudo },
  { SystemZ::SDBR, SystemZ::SDB },
  { SystemZ::SDR, SystemZ::SD },
  { SystemZ::SEBR, SystemZ::SEB },
  { SystemZ::SELGR, SystemZ::LOCG_MemFoldPseudo },
  { SystemZ::SER, SystemZ::SE },
  { SystemZ::SGFR, SystemZ::SGF },
  { SystemZ::SGR, SystemZ::SG },
  { SystemZ::SGRK, SystemZ::SG_MemFoldPseudo },
  { SystemZ::SLBGR, SystemZ::SLBG },
  { SystemZ::SLBR, SystemZ::SLB },
  { SystemZ::SLGFR, SystemZ::SLGF },
  { SystemZ::SLGR, SystemZ::SLG },
  { SystemZ::SLGRK, SystemZ::SLG_MemFoldPseudo },
  { SystemZ::SLR, SystemZ::SL },
  { SystemZ::SLRK, SystemZ::SL_MemFoldPseudo },
  { SystemZ::SQDBR, SystemZ::SQDB },
  { SystemZ::SQDR, SystemZ::SQD },
  { SystemZ::SQEBR, SystemZ::SQEB },
  { SystemZ::SQER, SystemZ::SQE },
  { SystemZ::SR, SystemZ::S },
  { SystemZ::SRK, SystemZ::S_MemFoldPseudo },
  { SystemZ::SUR, SystemZ::SU },
  { SystemZ::SWR, SystemZ::SW },
  { SystemZ::WFADB, SystemZ::ADB_MemFoldPseudo },
  { SystemZ::WFASB, SystemZ::AEB_MemFoldPseudo },
  { SystemZ::WFCDB, SystemZ::CDB },
  { SystemZ::WFCSB, SystemZ::CEB },
  { SystemZ::WFDDB, SystemZ::DDB_MemFoldPseudo },
  { SystemZ::WFDSB, SystemZ::DEB_MemFoldPseudo },
  { SystemZ::WFKDB, SystemZ::KDB },
  { SystemZ::WFKSB, SystemZ::KEB },
  { SystemZ::WFMADB, SystemZ::MADB_MemFoldPseudo },
  { SystemZ::WFMASB, SystemZ::MAEB_MemFoldPseudo },
  { SystemZ::WFMDB, SystemZ::MDB_MemFoldPseudo },
  { SystemZ::WFMSB, SystemZ::MEEB_MemFoldPseudo },
  { SystemZ::WFMSDB, SystemZ::MSDB_MemFoldPseudo },
  { SystemZ::WFMSSB, SystemZ::MSEB_MemFoldPseudo },
  { SystemZ::WFSDB, SystemZ::SDB_MemFoldPseudo },
  { SystemZ::WFSQDB, SystemZ::SQDB },
  { SystemZ::WFSQSB, SystemZ::SQEB },
  { SystemZ::WFSSB, SystemZ::SEB_MemFoldPseudo },
  { SystemZ::WLDEB, SystemZ::LDEB },
  { SystemZ::XGR, SystemZ::XG },
  { SystemZ::XGRK, SystemZ::XG_MemFoldPseudo },
  { SystemZ::XR, SystemZ::X },
  { SystemZ::XRK, SystemZ::X_MemFoldPseudo },
}; // End of getMemOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 157;
  while (start < end) {
    mid = start + (end - start) / 2;
    if (Opcode == getMemOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getMemOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getMemOpcodeTable[mid][1];
}

// getTargetMemOpcode
LLVM_READONLY
int getTargetMemOpcode(uint16_t Opcode) {
static const uint16_t getTargetMemOpcodeTable[][2] = {
  { SystemZ::ADB_MemFoldPseudo, SystemZ::ADB },
  { SystemZ::AEB_MemFoldPseudo, SystemZ::AEB },
  { SystemZ::AG_MemFoldPseudo, SystemZ::AG },
  { SystemZ::ALG_MemFoldPseudo, SystemZ::ALG },
  { SystemZ::AL_MemFoldPseudo, SystemZ::AL },
  { SystemZ::A_MemFoldPseudo, SystemZ::A },
  { SystemZ::DDB_MemFoldPseudo, SystemZ::DDB },
  { SystemZ::DEB_MemFoldPseudo, SystemZ::DEB },
  { SystemZ::LOCG_MemFoldPseudo, SystemZ::LOCG },
  { SystemZ::LOCMux_MemFoldPseudo, SystemZ::LOCMux },
  { SystemZ::MADB_MemFoldPseudo, SystemZ::MADB },
  { SystemZ::MAEB_MemFoldPseudo, SystemZ::MAEB },
  { SystemZ::MDB_MemFoldPseudo, SystemZ::MDB },
  { SystemZ::MEEB_MemFoldPseudo, SystemZ::MEEB },
  { SystemZ::MSC_MemFoldPseudo, SystemZ::MSC },
  { SystemZ::MSDB_MemFoldPseudo, SystemZ::MSDB },
  { SystemZ::MSEB_MemFoldPseudo, SystemZ::MSEB },
  { SystemZ::MSGC_MemFoldPseudo, SystemZ::MSGC },
  { SystemZ::NG_MemFoldPseudo, SystemZ::NG },
  { SystemZ::N_MemFoldPseudo, SystemZ::N },
  { SystemZ::OG_MemFoldPseudo, SystemZ::OG },
  { SystemZ::O_MemFoldPseudo, SystemZ::O },
  { SystemZ::SDB_MemFoldPseudo, SystemZ::SDB },
  { SystemZ::SEB_MemFoldPseudo, SystemZ::SEB },
  { SystemZ::SG_MemFoldPseudo, SystemZ::SG },
  { SystemZ::SLG_MemFoldPseudo, SystemZ::SLG },
  { SystemZ::SL_MemFoldPseudo, SystemZ::SL },
  { SystemZ::S_MemFoldPseudo, SystemZ::S },
  { SystemZ::XG_MemFoldPseudo, SystemZ::XG },
  { SystemZ::X_MemFoldPseudo, SystemZ::X },
}; // End of getTargetMemOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 30;
  while (start < end) {
    mid = start + (end - start) / 2;
    if (Opcode == getTargetMemOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getTargetMemOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getTargetMemOpcodeTable[mid][1];
}

// getTwoOperandOpcode
LLVM_READONLY
int getTwoOperandOpcode(uint16_t Opcode) {
static const uint16_t getTwoOperandOpcodeTable[][2] = {
  { SystemZ::AHIMuxK, SystemZ::AHIMux },
  { SystemZ::SELRMux, SystemZ::LOCRMux },
  { SystemZ::AGHIK, SystemZ::AGHI },
  { SystemZ::AGRK, SystemZ::AGR },
  { SystemZ::AHIK, SystemZ::AHI },
  { SystemZ::ALGRK, SystemZ::ALGR },
  { SystemZ::ALRK, SystemZ::ALR },
  { SystemZ::ARK, SystemZ::AR },
  { SystemZ::NGRK, SystemZ::NGR },
  { SystemZ::NRK, SystemZ::NR },
  { SystemZ::OGRK, SystemZ::OGR },
  { SystemZ::ORK, SystemZ::OR },
  { SystemZ::SELFHR, SystemZ::LOCFHR },
  { SystemZ::SELGR, SystemZ::LOCGR },
  { SystemZ::SELR, SystemZ::LOCR },
  { SystemZ::SGRK, SystemZ::SGR },
  { SystemZ::SLAK, SystemZ::SLA },
  { SystemZ::SLGRK, SystemZ::SLGR },
  { SystemZ::SLLK, SystemZ::SLL },
  { SystemZ::SLRK, SystemZ::SLR },
  { SystemZ::SRAK, SystemZ::SRA },
  { SystemZ::SRK, SystemZ::SR },
  { SystemZ::SRLK, SystemZ::SRL },
  { SystemZ::XGRK, SystemZ::XGR },
  { SystemZ::XRK, SystemZ::XR },
}; // End of getTwoOperandOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 25;
  while (start < end) {
    mid = start + (end - start) / 2;
    if (Opcode == getTwoOperandOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getTwoOperandOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getTwoOperandOpcodeTable[mid][1];
}

} // end namespace SystemZ
} // end namespace llvm
#endif // GET_INSTRMAP_INFO

