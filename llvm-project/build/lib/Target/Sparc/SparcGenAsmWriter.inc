/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
std::pair<const char *, uint64_t> SparcInstPrinter::getMnemonic(const MCInst *MI) {

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrs[] = {
  /* 0 */ "fcmpd %fcc0, \0"
  /* 14 */ "fcmpq %fcc0, \0"
  /* 28 */ "fcmps %fcc0, \0"
  /* 42 */ "ba %icc, \0"
  /* 52 */ "rd %pc, \0"
  /* 61 */ "rd %wim, \0"
  /* 71 */ "rd %tbr, \0"
  /* 81 */ "rd %psr, \0"
  /* 91 */ "fsrc1 \0"
  /* 98 */ "fandnot1 \0"
  /* 108 */ "fnot1 \0"
  /* 115 */ "fornot1 \0"
  /* 124 */ "fsra32 \0"
  /* 132 */ "fpsub32 \0"
  /* 141 */ "fpadd32 \0"
  /* 150 */ "edge32 \0"
  /* 158 */ "fcmple32 \0"
  /* 168 */ "fcmpne32 \0"
  /* 178 */ "fpack32 \0"
  /* 187 */ "cmask32 \0"
  /* 196 */ "fsll32 \0"
  /* 204 */ "fsrl32 \0"
  /* 212 */ "fcmpeq32 \0"
  /* 222 */ "fslas32 \0"
  /* 231 */ "fcmpgt32 \0"
  /* 241 */ "array32 \0"
  /* 250 */ "fsrc2 \0"
  /* 257 */ "fandnot2 \0"
  /* 267 */ "fnot2 \0"
  /* 274 */ "fornot2 \0"
  /* 283 */ "fpadd64 \0"
  /* 292 */ "fsra16 \0"
  /* 300 */ "fpsub16 \0"
  /* 309 */ "fpadd16 \0"
  /* 318 */ "edge16 \0"
  /* 326 */ "fcmple16 \0"
  /* 336 */ "fcmpne16 \0"
  /* 346 */ "fpack16 \0"
  /* 355 */ "cmask16 \0"
  /* 364 */ "fsll16 \0"
  /* 372 */ "fsrl16 \0"
  /* 380 */ "fchksm16 \0"
  /* 390 */ "fmean16 \0"
  /* 399 */ "fcmpeq16 \0"
  /* 409 */ "fslas16 \0"
  /* 418 */ "fcmpgt16 \0"
  /* 428 */ "fmul8x16 \0"
  /* 438 */ "fmuld8ulx16 \0"
  /* 451 */ "fmul8ulx16 \0"
  /* 463 */ "fmuld8sux16 \0"
  /* 476 */ "fmul8sux16 \0"
  /* 488 */ "array16 \0"
  /* 497 */ "edge8 \0"
  /* 504 */ "cmask8 \0"
  /* 512 */ "array8 \0"
  /* 520 */ "!ADJCALLSTACKDOWN \0"
  /* 539 */ "!ADJCALLSTACKUP \0"
  /* 556 */ "fpsub32S \0"
  /* 566 */ "fpsub16S \0"
  /* 576 */ "brgez,a \0"
  /* 585 */ "brlez,a \0"
  /* 594 */ "brgz,a \0"
  /* 602 */ "brlz,a \0"
  /* 610 */ "brnz,a \0"
  /* 618 */ "brz,a \0"
  /* 625 */ "stba \0"
  /* 631 */ "stda \0"
  /* 637 */ "stha \0"
  /* 643 */ "stqa \0"
  /* 649 */ "sra \0"
  /* 654 */ "faligndata \0"
  /* 666 */ "sta \0"
  /* 671 */ "stb \0"
  /* 676 */ "sub \0"
  /* 681 */ "smac \0"
  /* 687 */ "umac \0"
  /* 693 */ "tsubcc \0"
  /* 701 */ "addxccc \0"
  /* 710 */ "taddcc \0"
  /* 718 */ "andcc \0"
  /* 725 */ "smulcc \0"
  /* 733 */ "umulcc \0"
  /* 741 */ "andncc \0"
  /* 749 */ "orncc \0"
  /* 756 */ "xnorcc \0"
  /* 764 */ "xorcc \0"
  /* 771 */ "mulscc \0"
  /* 779 */ "sdivcc \0"
  /* 787 */ "udivcc \0"
  /* 795 */ "subxcc \0"
  /* 803 */ "addxcc \0"
  /* 811 */ "popc \0"
  /* 817 */ "addxc \0"
  /* 824 */ "fsubd \0"
  /* 831 */ "fhsubd \0"
  /* 839 */ "add \0"
  /* 844 */ "faddd \0"
  /* 851 */ "fhaddd \0"
  /* 859 */ "fnhaddd \0"
  /* 868 */ "fnaddd \0"
  /* 876 */ "fcmped \0"
  /* 884 */ "fnegd \0"
  /* 891 */ "fmuld \0"
  /* 898 */ "fsmuld \0"
  /* 906 */ "fand \0"
  /* 912 */ "fnand \0"
  /* 919 */ "fexpand \0"
  /* 928 */ "fitod \0"
  /* 935 */ "fqtod \0"
  /* 942 */ "fstod \0"
  /* 949 */ "fxtod \0"
  /* 956 */ "fcmpd \0"
  /* 963 */ "flcmpd \0"
  /* 971 */ "rd \0"
  /* 975 */ "fabsd \0"
  /* 982 */ "fsqrtd \0"
  /* 990 */ "std \0"
  /* 995 */ "fdivd \0"
  /* 1002 */ "fmovd \0"
  /* 1009 */ "fpmerge \0"
  /* 1018 */ "bshuffle \0"
  /* 1028 */ "fone \0"
  /* 1034 */ "restore \0"
  /* 1043 */ "save \0"
  /* 1049 */ "flush \0"
  /* 1056 */ "sth \0"
  /* 1061 */ "sethi \0"
  /* 1068 */ "umulxhi \0"
  /* 1077 */ "xmulxhi \0"
  /* 1086 */ "fdtoi \0"
  /* 1093 */ "fqtoi \0"
  /* 1100 */ "fstoi \0"
  /* 1107 */ "bmask \0"
  /* 1114 */ "edge32l \0"
  /* 1123 */ "edge16l \0"
  /* 1132 */ "edge8l \0"
  /* 1140 */ "fmul8x16al \0"
  /* 1152 */ "call \0"
  /* 1158 */ "sll \0"
  /* 1163 */ "jmpl \0"
  /* 1169 */ "alignaddrl \0"
  /* 1181 */ "srl \0"
  /* 1186 */ "smul \0"
  /* 1192 */ "umul \0"
  /* 1198 */ "edge32n \0"
  /* 1207 */ "edge16n \0"
  /* 1216 */ "edge8n \0"
  /* 1224 */ "andn \0"
  /* 1230 */ "edge32ln \0"
  /* 1240 */ "edge16ln \0"
  /* 1250 */ "edge8ln \0"
  /* 1259 */ "brgez,a,pn \0"
  /* 1271 */ "brlez,a,pn \0"
  /* 1283 */ "brgz,a,pn \0"
  /* 1294 */ "brlz,a,pn \0"
  /* 1305 */ "brnz,a,pn \0"
  /* 1316 */ "brz,a,pn \0"
  /* 1326 */ "brgez,pn \0"
  /* 1336 */ "brlez,pn \0"
  /* 1346 */ "brgz,pn \0"
  /* 1355 */ "brlz,pn \0"
  /* 1364 */ "brnz,pn \0"
  /* 1373 */ "brz,pn \0"
  /* 1381 */ "orn \0"
  /* 1386 */ "pdistn \0"
  /* 1394 */ "fzero \0"
  /* 1401 */ "cmp \0"
  /* 1406 */ "unimp \0"
  /* 1413 */ "jmp \0"
  /* 1418 */ "fsubq \0"
  /* 1425 */ "faddq \0"
  /* 1432 */ "fcmpeq \0"
  /* 1440 */ "fnegq \0"
  /* 1447 */ "fdmulq \0"
  /* 1455 */ "fmulq \0"
  /* 1462 */ "fdtoq \0"
  /* 1469 */ "fitoq \0"
  /* 1476 */ "fstoq \0"
  /* 1483 */ "fxtoq \0"
  /* 1490 */ "fcmpq \0"
  /* 1497 */ "fabsq \0"
  /* 1504 */ "fsqrtq \0"
  /* 1512 */ "stq \0"
  /* 1517 */ "fdivq \0"
  /* 1524 */ "fmovq \0"
  /* 1531 */ "membar \0"
  /* 1539 */ "alignaddr \0"
  /* 1550 */ "sir \0"
  /* 1555 */ "for \0"
  /* 1560 */ "fnor \0"
  /* 1566 */ "fxnor \0"
  /* 1573 */ "fxor \0"
  /* 1579 */ "rdpr \0"
  /* 1585 */ "wrpr \0"
  /* 1591 */ "pwr \0"
  /* 1596 */ "fsrc1s \0"
  /* 1604 */ "fandnot1s \0"
  /* 1615 */ "fnot1s \0"
  /* 1623 */ "fornot1s \0"
  /* 1633 */ "fpadd32s \0"
  /* 1643 */ "fsrc2s \0"
  /* 1651 */ "fandnot2s \0"
  /* 1662 */ "fnot2s \0"
  /* 1670 */ "fornot2s \0"
  /* 1680 */ "fpadd16s \0"
  /* 1690 */ "fsubs \0"
  /* 1697 */ "fhsubs \0"
  /* 1705 */ "fadds \0"
  /* 1712 */ "fhadds \0"
  /* 1720 */ "fnhadds \0"
  /* 1729 */ "fnadds \0"
  /* 1737 */ "fands \0"
  /* 1744 */ "fnands \0"
  /* 1752 */ "fones \0"
  /* 1759 */ "fcmpes \0"
  /* 1767 */ "fnegs \0"
  /* 1774 */ "fmuls \0"
  /* 1781 */ "fzeros \0"
  /* 1789 */ "fdtos \0"
  /* 1796 */ "fitos \0"
  /* 1803 */ "fqtos \0"
  /* 1810 */ "fxtos \0"
  /* 1817 */ "fcmps \0"
  /* 1824 */ "flcmps \0"
  /* 1832 */ "fors \0"
  /* 1838 */ "fnors \0"
  /* 1845 */ "fxnors \0"
  /* 1853 */ "fxors \0"
  /* 1860 */ "fabss \0"
  /* 1867 */ "fsqrts \0"
  /* 1875 */ "fdivs \0"
  /* 1882 */ "fmovs \0"
  /* 1889 */ "set \0"
  /* 1894 */ "lzcnt \0"
  /* 1901 */ "pdist \0"
  /* 1908 */ "rett \0"
  /* 1914 */ "fmul8x16au \0"
  /* 1926 */ "sdiv \0"
  /* 1932 */ "udiv \0"
  /* 1938 */ "tsubcctv \0"
  /* 1948 */ "taddcctv \0"
  /* 1958 */ "movstosw \0"
  /* 1968 */ "movstouw \0"
  /* 1978 */ "srax \0"
  /* 1984 */ "subx \0"
  /* 1990 */ "addx \0"
  /* 1996 */ "fpackfix \0"
  /* 2006 */ "sllx \0"
  /* 2012 */ "srlx \0"
  /* 2018 */ "xmulx \0"
  /* 2025 */ "fdtox \0"
  /* 2032 */ "movdtox \0"
  /* 2041 */ "fqtox \0"
  /* 2048 */ "fstox \0"
  /* 2055 */ "stx \0"
  /* 2060 */ "sdivx \0"
  /* 2067 */ "udivx \0"
  /* 2074 */ "brgez \0"
  /* 2081 */ "brlez \0"
  /* 2088 */ "brgz \0"
  /* 2094 */ "brlz \0"
  /* 2100 */ "brnz \0"
  /* 2106 */ "brz \0"
  /* 2111 */ "; SELECT_CC_DFP_FCC PSEUDO!\0"
  /* 2139 */ "; SELECT_CC_QFP_FCC PSEUDO!\0"
  /* 2167 */ "; SELECT_CC_FP_FCC PSEUDO!\0"
  /* 2194 */ "; SELECT_CC_Int_FCC PSEUDO!\0"
  /* 2222 */ "; SELECT_CC_DFP_ICC PSEUDO!\0"
  /* 2250 */ "; SELECT_CC_QFP_ICC PSEUDO!\0"
  /* 2278 */ "; SELECT_CC_FP_ICC PSEUDO!\0"
  /* 2305 */ "; SELECT_CC_Int_ICC PSEUDO!\0"
  /* 2333 */ "; SELECT_CC_DFP_XCC PSEUDO!\0"
  /* 2361 */ "; SELECT_CC_QFP_XCC PSEUDO!\0"
  /* 2389 */ "; SELECT_CC_FP_XCC PSEUDO!\0"
  /* 2416 */ "; SELECT_CC_Int_XCC PSEUDO!\0"
  /* 2444 */ "jmp %i7+\0"
  /* 2453 */ "jmp %o7+\0"
  /* 2462 */ "# XRay Function Patchable RET.\0"
  /* 2493 */ "# XRay Typed Event Log.\0"
  /* 2517 */ "# XRay Custom Event Log.\0"
  /* 2542 */ "# XRay Function Enter.\0"
  /* 2565 */ "# XRay Tail Call Exit.\0"
  /* 2588 */ "# XRay Function Exit.\0"
  /* 2610 */ "flush %g0\0"
  /* 2620 */ "ta 1\0"
  /* 2625 */ "ta 3\0"
  /* 2630 */ "ta 5\0"
  /* 2635 */ "LIFETIME_END\0"
  /* 2648 */ "PSEUDO_PROBE\0"
  /* 2661 */ "BUNDLE\0"
  /* 2668 */ "DBG_VALUE\0"
  /* 2678 */ "DBG_INSTR_REF\0"
  /* 2692 */ "DBG_PHI\0"
  /* 2700 */ "DBG_LABEL\0"
  /* 2710 */ "LIFETIME_START\0"
  /* 2725 */ "DBG_VALUE_LIST\0"
  /* 2740 */ "std %cq, [\0"
  /* 2751 */ "std %fq, [\0"
  /* 2762 */ "st %csr, [\0"
  /* 2773 */ "st %fsr, [\0"
  /* 2784 */ "stx %fsr, [\0"
  /* 2796 */ "ldsba [\0"
  /* 2804 */ "lduba [\0"
  /* 2812 */ "ldstuba [\0"
  /* 2822 */ "ldda [\0"
  /* 2829 */ "lda [\0"
  /* 2835 */ "ldsha [\0"
  /* 2843 */ "lduha [\0"
  /* 2851 */ "swapa [\0"
  /* 2859 */ "ldqa [\0"
  /* 2866 */ "casa [\0"
  /* 2873 */ "ldsb [\0"
  /* 2880 */ "ldub [\0"
  /* 2887 */ "ldstub [\0"
  /* 2896 */ "ldd [\0"
  /* 2902 */ "ld [\0"
  /* 2907 */ "prefetch [\0"
  /* 2918 */ "ldsh [\0"
  /* 2925 */ "lduh [\0"
  /* 2932 */ "swap [\0"
  /* 2939 */ "ldq [\0"
  /* 2945 */ "cas [\0"
  /* 2951 */ "ldsw [\0"
  /* 2958 */ "ldx [\0"
  /* 2964 */ "casx [\0"
  /* 2971 */ "cb\0"
  /* 2974 */ "fb\0"
  /* 2977 */ "fmovrd\0"
  /* 2984 */ "fmovd\0"
  /* 2990 */ "# FEntry call\0"
  /* 3004 */ "siam\0"
  /* 3009 */ "shutdown\0"
  /* 3018 */ "nop\0"
  /* 3022 */ "fmovrq\0"
  /* 3029 */ "fmovq\0"
  /* 3035 */ "stbar\0"
  /* 3041 */ "movr\0"
  /* 3046 */ "fmovrs\0"
  /* 3053 */ "fmovs\0"
  /* 3059 */ "t\0"
  /* 3061 */ "mov\0"
  /* 3065 */ "flushw\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2669U,	// DBG_VALUE
    2726U,	// DBG_VALUE_LIST
    2679U,	// DBG_INSTR_REF
    2693U,	// DBG_PHI
    2701U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2662U,	// BUNDLE
    2711U,	// LIFETIME_START
    2636U,	// LIFETIME_END
    2649U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    2991U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2543U,	// PATCHABLE_FUNCTION_ENTER
    2463U,	// PATCHABLE_RET
    2589U,	// PATCHABLE_FUNCTION_EXIT
    2566U,	// PATCHABLE_TAIL_CALL
    2518U,	// PATCHABLE_EVENT_CALL
    2494U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// MEMBARRIER
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_CONSTANT_POOL
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_ATOMICRMW_UINC_WRAP
    0U,	// G_ATOMICRMW_UDEC_WRAP
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    4617U,	// ADJCALLSTACKDOWN
    70172U,	// ADJCALLSTACKUP
    8206U,	// GETPCX
    2112U,	// SELECT_CC_DFP_FCC
    2223U,	// SELECT_CC_DFP_ICC
    2334U,	// SELECT_CC_DFP_XCC
    2168U,	// SELECT_CC_FP_FCC
    2279U,	// SELECT_CC_FP_ICC
    2390U,	// SELECT_CC_FP_XCC
    2195U,	// SELECT_CC_Int_FCC
    2306U,	// SELECT_CC_Int_ICC
    2417U,	// SELECT_CC_Int_XCC
    2140U,	// SELECT_CC_QFP_FCC
    2251U,	// SELECT_CC_QFP_ICC
    2362U,	// SELECT_CC_QFP_XCC
    2111330U,	// SET
    20984520U,	// ADDCCri
    20984520U,	// ADDCCrr
    20985799U,	// ADDCri
    20985799U,	// ADDCrr
    20984612U,	// ADDEri
    20984612U,	// ADDErr
    20984626U,	// ADDXC
    20984510U,	// ADDXCCC
    20984648U,	// ADDXri
    20984648U,	// ADDXrr
    20984648U,	// ADDri
    20984648U,	// ADDrr
    20985348U,	// ALIGNADDR
    20984978U,	// ALIGNADDRL
    20984527U,	// ANDCCri
    20984527U,	// ANDCCrr
    20984550U,	// ANDNCCri
    20984550U,	// ANDNCCrr
    20985033U,	// ANDNri
    20985033U,	// ANDNrr
    20985033U,	// ANDXNrr
    20984716U,	// ANDXri
    20984716U,	// ANDXrr
    20984716U,	// ANDri
    20984716U,	// ANDrr
    20984297U,	// ARRAY16
    20984050U,	// ARRAY32
    20984321U,	// ARRAY8
    70260U,	// BA
    2247581U,	// BCOND
    2313117U,	// BCONDA
    87430U,	// BINDri
    87430U,	// BINDrr
    20984916U,	// BMASK
    69675U,	// BPA
    21121951U,	// BPFCC
    21187487U,	// BPFCCA
    281503U,	// BPFCCANT
    347039U,	// BPFCCNT
    5356U,	// BPGEZapn
    4673U,	// BPGEZapt
    5423U,	// BPGEZnapn
    6171U,	// BPGEZnapt
    5380U,	// BPGZapn
    4691U,	// BPGZapt
    5443U,	// BPGZnapn
    6185U,	// BPGZnapt
    2509725U,	// BPICC
    478109U,	// BPICCA
    543645U,	// BPICCANT
    609181U,	// BPICCNT
    5368U,	// BPLEZapn
    4682U,	// BPLEZapt
    5433U,	// BPLEZnapn
    6178U,	// BPLEZnapt
    5391U,	// BPLZapn
    4699U,	// BPLZapt
    5452U,	// BPLZnapn
    6191U,	// BPLZnapt
    5402U,	// BPNZapn
    4707U,	// BPNZapt
    5461U,	// BPNZnapn
    6197U,	// BPNZnapt
    2771869U,	// BPXCC
    740253U,	// BPXCCA
    805789U,	// BPXCCANT
    871325U,	// BPXCCNT
    5413U,	// BPZapn
    4715U,	// BPZapt
    5470U,	// BPZnapn
    6203U,	// BPZnapt
    20984827U,	// BSHUFFLE
    70785U,	// CALL
    87169U,	// CALLri
    87169U,	// CALLrr
    932659U,	// CASAasi10
    7289651U,	// CASArr
    22035349U,	// CASXrr
    22035330U,	// CASrr
    2247580U,	// CBCOND
    2313116U,	// CBCONDA
    69988U,	// CMASK16
    69820U,	// CMASK32
    70137U,	// CMASK8
    5498U,	// CMPri
    5498U,	// CMPrr
    20984127U,	// EDGE16
    20984932U,	// EDGE16L
    20985049U,	// EDGE16LN
    20985016U,	// EDGE16N
    20983959U,	// EDGE32
    20984923U,	// EDGE32L
    20985039U,	// EDGE32LN
    20985007U,	// EDGE32N
    20984306U,	// EDGE8
    20984941U,	// EDGE8L
    20985059U,	// EDGE8LN
    20985025U,	// EDGE8N
    2110416U,	// FABSD
    2110938U,	// FABSQ
    2111301U,	// FABSS
    20984653U,	// FADDD
    20985234U,	// FADDQ
    20985514U,	// FADDS
    20984463U,	// FALIGNADATA
    20984715U,	// FAND
    20983907U,	// FANDNOT1
    20985413U,	// FANDNOT1S
    20984066U,	// FANDNOT2
    20985460U,	// FANDNOT2S
    20985546U,	// FANDS
    2247583U,	// FBCOND
    2313119U,	// FBCONDA
    1133471U,	// FBCONDA_V9
    3296159U,	// FBCOND_V9
    20984189U,	// FCHKSM16
    5053U,	// FCMPD
    4097U,	// FCMPD_V9
    20984208U,	// FCMPEQ16
    20984021U,	// FCMPEQ32
    20984227U,	// FCMPGT16
    20984040U,	// FCMPGT32
    20984135U,	// FCMPLE16
    20983967U,	// FCMPLE32
    20984145U,	// FCMPNE16
    20983977U,	// FCMPNE32
    5587U,	// FCMPQ
    4111U,	// FCMPQ_V9
    5914U,	// FCMPS
    4125U,	// FCMPS_V9
    20984804U,	// FDIVD
    20985326U,	// FDIVQ
    20985684U,	// FDIVS
    20985256U,	// FDMULQ
    2110527U,	// FDTOI
    2110903U,	// FDTOQ
    2111230U,	// FDTOS
    2111466U,	// FDTOX
    2110360U,	// FEXPAND
    20984660U,	// FHADDD
    20985521U,	// FHADDS
    20984640U,	// FHSUBD
    20985506U,	// FHSUBS
    2110369U,	// FITOD
    2110910U,	// FITOQ
    2111237U,	// FITOS
    151000004U,	// FLCMPD
    151000865U,	// FLCMPS
    2611U,	// FLUSH
    3066U,	// FLUSHW
    87066U,	// FLUSHri
    87066U,	// FLUSHrr
    20984199U,	// FMEAN16
    2110443U,	// FMOVD
    17984425U,	// FMOVD_FCC
    17197993U,	// FMOVD_ICC
    17460137U,	// FMOVD_XCC
    2110965U,	// FMOVQ
    17984470U,	// FMOVQ_FCC
    17198038U,	// FMOVQ_ICC
    17460182U,	// FMOVQ_XCC
    31650U,	// FMOVRD
    31695U,	// FMOVRQ
    31719U,	// FMOVRS
    2111323U,	// FMOVS
    17984494U,	// FMOVS_FCC
    17198062U,	// FMOVS_ICC
    17460206U,	// FMOVS_XCC
    20984285U,	// FMUL8SUX16
    20984260U,	// FMUL8ULX16
    20984237U,	// FMUL8X16
    20984949U,	// FMUL8X16AL
    20985723U,	// FMUL8X16AU
    20984700U,	// FMULD
    20984272U,	// FMULD8SUX16
    20984247U,	// FMULD8ULX16
    20985264U,	// FMULQ
    20985583U,	// FMULS
    20984677U,	// FNADDD
    20985538U,	// FNADDS
    20984721U,	// FNAND
    20985553U,	// FNANDS
    2110325U,	// FNEGD
    2110881U,	// FNEGQ
    2111208U,	// FNEGS
    20984668U,	// FNHADDD
    20985529U,	// FNHADDS
    20984668U,	// FNMULD
    20985529U,	// FNMULS
    20985369U,	// FNOR
    20985647U,	// FNORS
    2109549U,	// FNOT1
    2111056U,	// FNOT1S
    2109708U,	// FNOT2
    2111103U,	// FNOT2S
    20985529U,	// FNSMULD
    70661U,	// FONE
    71385U,	// FONES
    20985364U,	// FOR
    20983924U,	// FORNOT1
    20985432U,	// FORNOT1S
    20984083U,	// FORNOT2
    20985479U,	// FORNOT2S
    20985641U,	// FORS
    2109787U,	// FPACK16
    20983987U,	// FPACK32
    2111437U,	// FPACKFIX
    20984118U,	// FPADD16
    20985489U,	// FPADD16S
    20983950U,	// FPADD32
    20985442U,	// FPADD32S
    20984092U,	// FPADD64
    20984818U,	// FPMERGE
    20984109U,	// FPSUB16
    20984375U,	// FPSUB16S
    20983941U,	// FPSUB32
    20984365U,	// FPSUB32S
    2110376U,	// FQTOD
    2110534U,	// FQTOI
    2111244U,	// FQTOS
    2111482U,	// FQTOX
    20984218U,	// FSLAS16
    20984031U,	// FSLAS32
    20984173U,	// FSLL16
    20984005U,	// FSLL32
    20984707U,	// FSMULD
    2110423U,	// FSQRTD
    2110945U,	// FSQRTQ
    2111308U,	// FSQRTS
    20984101U,	// FSRA16
    20983933U,	// FSRA32
    2109532U,	// FSRC1
    2111037U,	// FSRC1S
    2109691U,	// FSRC2
    2111084U,	// FSRC2S
    20984181U,	// FSRL16
    20984013U,	// FSRL32
    2110383U,	// FSTOD
    2110541U,	// FSTOI
    2110917U,	// FSTOQ
    2111489U,	// FSTOX
    20984633U,	// FSUBD
    20985227U,	// FSUBQ
    20985499U,	// FSUBS
    20985375U,	// FXNOR
    20985654U,	// FXNORS
    20985382U,	// FXOR
    20985662U,	// FXORS
    2110390U,	// FXTOD
    2110924U,	// FXTOQ
    2111251U,	// FXTOS
    71027U,	// FZERO
    71414U,	// FZEROS
    288394127U,	// GDOP_LDXrr
    288394071U,	// GDOP_LDrr
    2131084U,	// JMPLri
    2131084U,	// JMPLrr
    26184462U,	// LDArr
    1268567U,	// LDCSRri
    1268567U,	// LDCSRrr
    3181399U,	// LDCri
    3181399U,	// LDCrr
    26184455U,	// LDDArr
    3181393U,	// LDDCri
    3181393U,	// LDDCrr
    26184455U,	// LDDFArr
    3181393U,	// LDDFri
    3181393U,	// LDDFrr
    3181393U,	// LDDri
    3181393U,	// LDDrr
    26184462U,	// LDFArr
    1334103U,	// LDFSRri
    1334103U,	// LDFSRrr
    3181399U,	// LDFri
    3181399U,	// LDFrr
    26184492U,	// LDQFArr
    3181436U,	// LDQFri
    3181436U,	// LDQFrr
    26184429U,	// LDSBArr
    3181370U,	// LDSBri
    3181370U,	// LDSBrr
    26184468U,	// LDSHArr
    3181415U,	// LDSHri
    3181415U,	// LDSHrr
    26184445U,	// LDSTUBArr
    3181384U,	// LDSTUBri
    3181384U,	// LDSTUBrr
    3181448U,	// LDSWri
    3181448U,	// LDSWrr
    26184437U,	// LDUBArr
    3181377U,	// LDUBri
    3181377U,	// LDUBrr
    26184476U,	// LDUHArr
    3181422U,	// LDUHri
    3181422U,	// LDUHrr
    1334159U,	// LDXFSRri
    1334159U,	// LDXFSRrr
    3181455U,	// LDXri
    3181455U,	// LDXrr
    3181399U,	// LDri
    3181399U,	// LDrr
    37704U,	// LEAX_ADDri
    37704U,	// LEA_ADDri
    2111335U,	// LZCNT
    42492U,	// MEMBARi
    2111473U,	// MOVDTOX
    17984502U,	// MOVFCCri
    17984502U,	// MOVFCCrr
    17198070U,	// MOVICCri
    17198070U,	// MOVICCrr
    31714U,	// MOVRri
    31714U,	// MOVRrr
    2111399U,	// MOVSTOSW
    2111409U,	// MOVSTOUW
    2111473U,	// MOVWTOS
    17460214U,	// MOVXCCri
    17460214U,	// MOVXCCrr
    2111473U,	// MOVXTOD
    20984580U,	// MULSCCri
    20984580U,	// MULSCCrr
    20985828U,	// MULXri
    20985828U,	// MULXrr
    3019U,	// NOP
    20984567U,	// ORCCri
    20984567U,	// ORCCrr
    20984558U,	// ORNCCri
    20984558U,	// ORNCCrr
    20985190U,	// ORNri
    20985190U,	// ORNrr
    20985190U,	// ORXNrr
    20985365U,	// ORXri
    20985365U,	// ORXrr
    20985365U,	// ORri
    20985365U,	// ORrr
    20985710U,	// PDIST
    20985195U,	// PDISTN
    2110252U,	// POPCrr
    5266268U,	// PREFETCHi
    5266268U,	// PREFETCHr
    33560120U,	// PWRPSRri
    33560120U,	// PWRPSRrr
    2110412U,	// RDASR
    69685U,	// RDPC
    2111020U,	// RDPR
    69714U,	// RDPSR
    69704U,	// RDTBR
    69694U,	// RDWIM
    20984843U,	// RESTOREri
    20984843U,	// RESTORErr
    72077U,	// RET
    72086U,	// RETL
    87925U,	// RETTri
    87925U,	// RETTrr
    20984852U,	// SAVEri
    20984852U,	// SAVErr
    20984588U,	// SDIVCCri
    20984588U,	// SDIVCCrr
    20985869U,	// SDIVXri
    20985869U,	// SDIVXrr
    20985735U,	// SDIVri
    20985735U,	// SDIVrr
    2110502U,	// SETHIXi
    2110502U,	// SETHIi
    3010U,	// SHUTDOWN
    3005U,	// SIAM
    71183U,	// SIR
    20985815U,	// SLLXri
    20985815U,	// SLLXrr
    20984967U,	// SLLri
    20984967U,	// SLLrr
    20984490U,	// SMACri
    20984490U,	// SMACrr
    20984534U,	// SMULCCri
    20984534U,	// SMULCCrr
    20984995U,	// SMULri
    20984995U,	// SMULrr
    20985787U,	// SRAXri
    20985787U,	// SRAXrr
    20984458U,	// SRAri
    20984458U,	// SRArr
    20985821U,	// SRLXri
    20985821U,	// SRLXrr
    20984990U,	// SRLri
    20984990U,	// SRLrr
    9417371U,	// STArr
    3036U,	// STBAR
    9417330U,	// STBArr
    1421984U,	// STBri
    1421984U,	// STBrr
    1399499U,	// STCSRri
    1399499U,	// STCSRrr
    1423217U,	// STCri
    1423217U,	// STCrr
    9417336U,	// STDArr
    1399477U,	// STDCQri
    1399477U,	// STDCQrr
    1422303U,	// STDCri
    1422303U,	// STDCrr
    9417336U,	// STDFArr
    1399488U,	// STDFQri
    1399488U,	// STDFQrr
    1422303U,	// STDFri
    1422303U,	// STDFrr
    1422303U,	// STDri
    1422303U,	// STDrr
    9417371U,	// STFArr
    1399510U,	// STFSRri
    1399510U,	// STFSRrr
    1423217U,	// STFri
    1423217U,	// STFrr
    9417342U,	// STHArr
    1422369U,	// STHri
    1422369U,	// STHrr
    9417348U,	// STQFArr
    1422825U,	// STQFri
    1422825U,	// STQFrr
    1399521U,	// STXFSRri
    1399521U,	// STXFSRrr
    1423368U,	// STXri
    1423368U,	// STXrr
    1423217U,	// STri
    1423217U,	// STrr
    20984503U,	// SUBCCri
    20984503U,	// SUBCCrr
    20985793U,	// SUBCri
    20985793U,	// SUBCrr
    20984604U,	// SUBEri
    20984604U,	// SUBErr
    20984485U,	// SUBXri
    20984485U,	// SUBXrr
    20984485U,	// SUBri
    20984485U,	// SUBrr
    26184484U,	// SWAPArr
    3181429U,	// SWAPri
    3181429U,	// SWAPrr
    2621U,	// TA1
    2626U,	// TA3
    2631U,	// TA5
    20985757U,	// TADDCCTVri
    20985757U,	// TADDCCTVrr
    20984519U,	// TADDCCri
    20984519U,	// TADDCCrr
    70785U,	// TAIL_CALL
    87430U,	// TAIL_CALLri
    52874228U,	// TICCri
    52874228U,	// TICCrr
    557855560U,	// TLS_ADDXrr
    557855560U,	// TLS_ADDrr
    5249U,	// TLS_CALL
    288394127U,	// TLS_LDXrr
    288394071U,	// TLS_LDrr
    52612084U,	// TRAPri
    52612084U,	// TRAPrr
    20985747U,	// TSUBCCTVri
    20985747U,	// TSUBCCTVrr
    20984502U,	// TSUBCCri
    20984502U,	// TSUBCCrr
    53136372U,	// TXCCri
    53136372U,	// TXCCrr
    20984596U,	// UDIVCCri
    20984596U,	// UDIVCCrr
    20985876U,	// UDIVXri
    20985876U,	// UDIVXrr
    20985741U,	// UDIVri
    20985741U,	// UDIVrr
    20984496U,	// UMACri
    20984496U,	// UMACrr
    20984542U,	// UMULCCri
    20984542U,	// UMULCCrr
    20984877U,	// UMULXHI
    20985001U,	// UMULri
    20985001U,	// UMULrr
    71039U,	// UNIMP
    150999997U,	// V9FCMPD
    150999917U,	// V9FCMPED
    151000473U,	// V9FCMPEQ
    151000800U,	// V9FCMPES
    151000531U,	// V9FCMPQ
    151000858U,	// V9FCMPS
    31657U,	// V9FMOVD_FCC
    31702U,	// V9FMOVQ_FCC
    31726U,	// V9FMOVS_FCC
    31734U,	// V9MOVFCCri
    31734U,	// V9MOVFCCrr
    20985401U,	// WRASRri
    20985401U,	// WRASRrr
    20985394U,	// WRPRri
    20985394U,	// WRPRrr
    33560121U,	// WRPSRri
    33560121U,	// WRPSRrr
    67114553U,	// WRTBRri
    67114553U,	// WRTBRrr
    83891769U,	// WRWIMri
    83891769U,	// WRWIMrr
    20985827U,	// XMULX
    20984886U,	// XMULXHI
    20984565U,	// XNORCCri
    20984565U,	// XNORCCrr
    20985376U,	// XNORXrr
    20985376U,	// XNORri
    20985376U,	// XNORrr
    20984573U,	// XORCCri
    20984573U,	// XORCCrr
    20985383U,	// XORXri
    20985383U,	// XORXrr
    20985383U,	// XORri
    20985383U,	// XORrr
  };

  // Emit the opcode for the instruction.
  uint32_t Bits = 0;
  Bits |= OpInfo0[MI->getOpcode()] << 0;
  return {AsmStrs+(Bits & 4095)-1, Bits};

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
LLVM_NO_PROFILE_INSTRUMENT_FUNCTION
void SparcInstPrinter::printInstruction(const MCInst *MI, uint64_t Address, const MCSubtargetInfo &STI, raw_ostream &O) {
  O << "\t";

  auto MnemonicInfo = getMnemonic(MI);

  O << MnemonicInfo.first;

  uint32_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 12) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, BA, BPA, BPGEZapn, BPGEZapt, BPGEZna...
    printOperand(MI, 0, STI, O);
    break;
  case 2:
    // GETPCX
    printGetPCX(MI, 0, STI, O);
    return;
    break;
  case 3:
    // SET, ADDCCri, ADDCCrr, ADDCri, ADDCrr, ADDEri, ADDErr, ADDXC, ADDXCCC,...
    printOperand(MI, 1, STI, O);
    break;
  case 4:
    // BCOND, BCONDA, BPFCC, BPFCCA, BPFCCANT, BPFCCNT, BPICC, BPICCA, BPICCA...
    printCCOperand(MI, 1, STI, O);
    break;
  case 5:
    // BINDri, BINDrr, CALLri, CALLrr, FLUSHri, FLUSHrr, LDCSRri, LDCSRrr, LD...
    printMemOperand(MI, 0, STI, O);
    break;
  case 6:
    // FMOVD_FCC, FMOVD_ICC, FMOVD_XCC, FMOVQ_FCC, FMOVQ_ICC, FMOVQ_XCC, FMOV...
    printCCOperand(MI, 3, STI, O);
    break;
  case 7:
    // FMOVRD, FMOVRQ, FMOVRS, MOVRri, MOVRrr, V9FMOVD_FCC, V9FMOVQ_FCC, V9FM...
    printCCOperand(MI, 4, STI, O);
    O << ' ';
    printOperand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 8:
    // GDOP_LDXrr, GDOP_LDrr, JMPLri, JMPLrr, LDArr, LDCri, LDCrr, LDDArr, LD...
    printMemOperand(MI, 1, STI, O);
    break;
  case 9:
    // LEAX_ADDri, LEA_ADDri
    printMemOperand(MI, 1, STI, O, "arith");
    O << ", ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 10:
    // MEMBARi
    printMembarTag(MI, 0, STI, O);
    return;
    break;
  case 11:
    // STArr, STBArr, STBri, STBrr, STCri, STCrr, STDArr, STDCri, STDCrr, STD...
    printOperand(MI, 2, STI, O);
    O << ", [";
    printMemOperand(MI, 0, STI, O);
    break;
  case 12:
    // TICCri, TICCrr, TRAPri, TRAPrr, TXCCri, TXCCrr
    printCCOperand(MI, 2, STI, O);
    break;
  }


  // Fragment 1 encoded into 5 bits for 22 unique commands.
  switch ((Bits >> 16) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADJCALLSTACKDOWN, SET, ADDCCri, ADDCCrr, ADDCri, ADDCrr, ADDEri, ADDEr...
    O << ", ";
    break;
  case 1:
    // ADJCALLSTACKUP, BA, BINDri, BINDrr, BPA, CALL, CALLri, CALLrr, CMASK16...
    return;
    break;
  case 2:
    // BCOND, BPFCC, CBCOND, FBCOND, TRAPri, TRAPrr
    O << ' ';
    break;
  case 3:
    // BCONDA, BPFCCA, CBCONDA, FBCONDA
    O << ",a ";
    break;
  case 4:
    // BPFCCANT
    O << ",a,pn ";
    printOperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 5:
    // BPFCCNT
    O << ",pn ";
    printOperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 6:
    // BPICC, FMOVD_ICC, FMOVQ_ICC, FMOVS_ICC, MOVICCri, MOVICCrr, TICCri, TI...
    O << " %icc, ";
    break;
  case 7:
    // BPICCA
    O << ",a %icc, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 8:
    // BPICCANT
    O << ",a,pn %icc, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 9:
    // BPICCNT
    O << ",pn %icc, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 10:
    // BPXCC, FMOVD_XCC, FMOVQ_XCC, FMOVS_XCC, MOVXCCri, MOVXCCrr, TXCCri, TX...
    O << " %xcc, ";
    break;
  case 11:
    // BPXCCA
    O << ",a %xcc, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 12:
    // BPXCCANT
    O << ",a,pn %xcc, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 13:
    // BPXCCNT
    O << ",pn %xcc, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 14:
    // CASAasi10
    O << "] 10, ";
    printOperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 15:
    // CASArr, LDArr, LDDArr, LDDFArr, LDFArr, LDQFArr, LDSBArr, LDSHArr, LDS...
    O << "] ";
    break;
  case 16:
    // CASXrr, CASrr, GDOP_LDXrr, GDOP_LDrr, LDCri, LDCrr, LDDCri, LDDCrr, LD...
    O << "], ";
    break;
  case 17:
    // FBCONDA_V9
    O << ",a %fcc0, ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 18:
    // FBCOND_V9, FMOVD_FCC, FMOVQ_FCC, FMOVS_FCC, MOVFCCri, MOVFCCrr
    O << " %fcc0, ";
    break;
  case 19:
    // LDCSRri, LDCSRrr
    O << "], %csr";
    return;
    break;
  case 20:
    // LDFSRri, LDFSRrr, LDXFSRri, LDXFSRrr
    O << "], %fsr";
    return;
    break;
  case 21:
    // STBri, STBrr, STCSRri, STCSRrr, STCri, STCrr, STDCQri, STDCQrr, STDCri...
    O << ']';
    return;
    break;
  }


  // Fragment 2 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 21) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADJCALLSTACKDOWN, BPGEZapn, BPGEZapt, BPGEZnapn, BPGEZnapt, BPGZapn, B...
    printOperand(MI, 1, STI, O);
    break;
  case 1:
    // SET, BCOND, BCONDA, BPICC, BPXCC, CBCOND, CBCONDA, FABSD, FABSQ, FABSS...
    printOperand(MI, 0, STI, O);
    break;
  case 2:
    // ADDCCri, ADDCCrr, ADDCri, ADDCrr, ADDEri, ADDErr, ADDXC, ADDXCCC, ADDX...
    printOperand(MI, 2, STI, O);
    break;
  case 3:
    // CASArr
    printOperand(MI, 4, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 4:
    // LDArr, LDDArr, LDDFArr, LDFArr, LDQFArr, LDSBArr, LDSHArr, LDSTUBArr, ...
    printOperand(MI, 3, STI, O);
    break;
  }


  // Fragment 3 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 24) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADJCALLSTACKDOWN, SET, BCOND, BCONDA, BPGEZapn, BPGEZapt, BPGEZnapn, B...
    return;
    break;
  case 1:
    // ADDCCri, ADDCCrr, ADDCri, ADDCrr, ADDEri, ADDErr, ADDXC, ADDXCCC, ADDX...
    O << ", ";
    break;
  case 2:
    // PWRPSRri, PWRPSRrr, WRPSRri, WRPSRrr
    O << ", %psr";
    return;
    break;
  case 3:
    // TICCri, TICCrr, TRAPri, TRAPrr, TXCCri, TXCCrr
    O << " + ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 4:
    // WRTBRri, WRTBRrr
    O << ", %tbr";
    return;
    break;
  case 5:
    // WRWIMri, WRWIMrr
    O << ", %wim";
    return;
    break;
  }


  // Fragment 4 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 27) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADDCCri, ADDCCrr, ADDCri, ADDCrr, ADDEri, ADDErr, ADDXC, ADDXCCC, ADDX...
    printOperand(MI, 0, STI, O);
    break;
  case 1:
    // FLCMPD, FLCMPS, V9FCMPD, V9FCMPED, V9FCMPEQ, V9FCMPES, V9FCMPQ, V9FCMP...
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 2:
    // GDOP_LDXrr, GDOP_LDrr, TLS_LDXrr, TLS_LDrr
    printOperand(MI, 3, STI, O);
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 29) & 1) {
    // TLS_ADDXrr, TLS_ADDrr
    O << ", ";
    printOperand(MI, 3, STI, O);
    return;
  } else {
    // ADDCCri, ADDCCrr, ADDCri, ADDCrr, ADDEri, ADDErr, ADDXC, ADDXCCC, ADDX...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *SparcInstPrinter::getRegisterName(MCRegister Reg) {
  unsigned RegNo = Reg.id();
  assert(RegNo && RegNo < 237 && "Invalid register number!");


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrs[] = {
  /* 0 */ "C10\0"
  /* 4 */ "F10\0"
  /* 8 */ "ASR10\0"
  /* 14 */ "C20\0"
  /* 18 */ "F20\0"
  /* 22 */ "ASR20\0"
  /* 28 */ "C30\0"
  /* 32 */ "F30\0"
  /* 36 */ "ASR30\0"
  /* 42 */ "F40\0"
  /* 46 */ "F50\0"
  /* 50 */ "F60\0"
  /* 54 */ "FCC0\0"
  /* 59 */ "F0\0"
  /* 62 */ "G0\0"
  /* 65 */ "I0\0"
  /* 68 */ "L0\0"
  /* 71 */ "O0\0"
  /* 74 */ "C11\0"
  /* 78 */ "F11\0"
  /* 82 */ "ASR11\0"
  /* 88 */ "C21\0"
  /* 92 */ "F21\0"
  /* 96 */ "ASR21\0"
  /* 102 */ "C31\0"
  /* 106 */ "F31\0"
  /* 110 */ "ASR31\0"
  /* 116 */ "FCC1\0"
  /* 121 */ "F1\0"
  /* 124 */ "G1\0"
  /* 127 */ "I1\0"
  /* 130 */ "L1\0"
  /* 133 */ "O1\0"
  /* 136 */ "ASR1\0"
  /* 141 */ "C12\0"
  /* 145 */ "F12\0"
  /* 149 */ "ASR12\0"
  /* 155 */ "C22\0"
  /* 159 */ "F22\0"
  /* 163 */ "ASR22\0"
  /* 169 */ "F32\0"
  /* 173 */ "F42\0"
  /* 177 */ "F52\0"
  /* 181 */ "F62\0"
  /* 185 */ "FCC2\0"
  /* 190 */ "F2\0"
  /* 193 */ "G2\0"
  /* 196 */ "I2\0"
  /* 199 */ "L2\0"
  /* 202 */ "O2\0"
  /* 205 */ "ASR2\0"
  /* 210 */ "C13\0"
  /* 214 */ "F13\0"
  /* 218 */ "ASR13\0"
  /* 224 */ "C23\0"
  /* 228 */ "F23\0"
  /* 232 */ "ASR23\0"
  /* 238 */ "FCC3\0"
  /* 243 */ "F3\0"
  /* 246 */ "G3\0"
  /* 249 */ "I3\0"
  /* 252 */ "L3\0"
  /* 255 */ "O3\0"
  /* 258 */ "ASR3\0"
  /* 263 */ "C14\0"
  /* 267 */ "F14\0"
  /* 271 */ "ASR14\0"
  /* 277 */ "C24\0"
  /* 281 */ "F24\0"
  /* 285 */ "ASR24\0"
  /* 291 */ "F34\0"
  /* 295 */ "F44\0"
  /* 299 */ "F54\0"
  /* 303 */ "C4\0"
  /* 306 */ "F4\0"
  /* 309 */ "G4\0"
  /* 312 */ "I4\0"
  /* 315 */ "L4\0"
  /* 318 */ "O4\0"
  /* 321 */ "ASR4\0"
  /* 326 */ "C15\0"
  /* 330 */ "F15\0"
  /* 334 */ "ASR15\0"
  /* 340 */ "C25\0"
  /* 344 */ "F25\0"
  /* 348 */ "ASR25\0"
  /* 354 */ "C5\0"
  /* 357 */ "F5\0"
  /* 360 */ "G5\0"
  /* 363 */ "I5\0"
  /* 366 */ "L5\0"
  /* 369 */ "O5\0"
  /* 372 */ "ASR5\0"
  /* 377 */ "C16\0"
  /* 381 */ "F16\0"
  /* 385 */ "ASR16\0"
  /* 391 */ "C26\0"
  /* 395 */ "F26\0"
  /* 399 */ "ASR26\0"
  /* 405 */ "F36\0"
  /* 409 */ "F46\0"
  /* 413 */ "F56\0"
  /* 417 */ "C6\0"
  /* 420 */ "F6\0"
  /* 423 */ "G6\0"
  /* 426 */ "I6\0"
  /* 429 */ "L6\0"
  /* 432 */ "O6\0"
  /* 435 */ "ASR6\0"
  /* 440 */ "C17\0"
  /* 444 */ "F17\0"
  /* 448 */ "ASR17\0"
  /* 454 */ "C27\0"
  /* 458 */ "F27\0"
  /* 462 */ "ASR27\0"
  /* 468 */ "C7\0"
  /* 471 */ "F7\0"
  /* 474 */ "G7\0"
  /* 477 */ "I7\0"
  /* 480 */ "L7\0"
  /* 483 */ "O7\0"
  /* 486 */ "ASR7\0"
  /* 491 */ "C18\0"
  /* 495 */ "F18\0"
  /* 499 */ "ASR18\0"
  /* 505 */ "C28\0"
  /* 509 */ "F28\0"
  /* 513 */ "ASR28\0"
  /* 519 */ "F38\0"
  /* 523 */ "F48\0"
  /* 527 */ "F58\0"
  /* 531 */ "C8\0"
  /* 534 */ "F8\0"
  /* 537 */ "ASR8\0"
  /* 542 */ "C19\0"
  /* 546 */ "F19\0"
  /* 550 */ "ASR19\0"
  /* 556 */ "C29\0"
  /* 560 */ "F29\0"
  /* 564 */ "ASR29\0"
  /* 570 */ "C9\0"
  /* 573 */ "F9\0"
  /* 576 */ "ASR9\0"
  /* 581 */ "TBA\0"
  /* 585 */ "ICC\0"
  /* 589 */ "TNPC\0"
  /* 594 */ "TPC\0"
  /* 598 */ "CANRESTORE\0"
  /* 609 */ "PSTATE\0"
  /* 616 */ "TSTATE\0"
  /* 623 */ "WSTATE\0"
  /* 630 */ "CANSAVE\0"
  /* 638 */ "TICK\0"
  /* 643 */ "PIL\0"
  /* 647 */ "TL\0"
  /* 650 */ "WIM\0"
  /* 654 */ "CLEANWIN\0"
  /* 663 */ "OTHERWIN\0"
  /* 672 */ "FP\0"
  /* 675 */ "SP\0"
  /* 678 */ "CWP\0"
  /* 682 */ "FQ\0"
  /* 685 */ "CPQ\0"
  /* 689 */ "TBR\0"
  /* 693 */ "FSR\0"
  /* 697 */ "CPSR\0"
  /* 702 */ "TT\0"
  /* 705 */ "Y\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint16_t RegAsmOffset[] = {
    598, 630, 654, 685, 697, 678, 682, 693, 585, 663, 591, 643, 698, 609, 
    581, 689, 638, 647, 589, 594, 616, 702, 650, 623, 705, 136, 205, 258, 
    321, 372, 435, 486, 537, 576, 8, 82, 149, 218, 271, 334, 385, 448, 
    499, 550, 22, 96, 163, 232, 285, 348, 399, 462, 513, 564, 36, 110, 
    56, 118, 187, 240, 303, 354, 417, 468, 531, 570, 0, 74, 141, 210, 
    263, 326, 377, 440, 491, 542, 14, 88, 155, 224, 277, 340, 391, 454, 
    505, 556, 28, 102, 59, 190, 306, 420, 534, 4, 145, 267, 381, 495, 
    18, 159, 281, 395, 509, 32, 169, 291, 405, 519, 42, 173, 295, 409, 
    523, 46, 177, 299, 413, 527, 50, 181, 59, 121, 190, 243, 306, 357, 
    420, 471, 534, 573, 4, 78, 145, 214, 267, 330, 381, 444, 495, 546, 
    18, 92, 159, 228, 281, 344, 395, 458, 509, 560, 32, 106, 54, 116, 
    185, 238, 62, 124, 193, 246, 309, 360, 423, 474, 65, 127, 196, 249, 
    312, 363, 672, 477, 68, 130, 199, 252, 315, 366, 429, 480, 71, 133, 
    202, 255, 318, 369, 675, 483, 59, 306, 534, 145, 381, 18, 281, 509, 
    169, 405, 42, 295, 523, 177, 413, 50, 56, 187, 303, 417, 531, 0, 
    141, 263, 377, 491, 14, 155, 277, 391, 505, 28, 62, 193, 309, 423, 
    65, 196, 312, 426, 68, 199, 315, 429, 71, 202, 318, 432, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool SparcInstPrinter::printAliasInstr(const MCInst *MI, uint64_t Address, const MCSubtargetInfo &STI, raw_ostream &OS) {
  static const PatternsForOpcode OpToPatterns[] = {
    {SP::BCOND, 0, 16 },
    {SP::BCONDA, 16, 16 },
    {SP::BPFCCANT, 32, 16 },
    {SP::BPFCCNT, 48, 16 },
    {SP::BPICCANT, 64, 16 },
    {SP::BPICCNT, 80, 16 },
    {SP::BPXCCANT, 96, 16 },
    {SP::BPXCCNT, 112, 16 },
    {SP::FMOVD_ICC, 128, 16 },
    {SP::FMOVD_XCC, 144, 16 },
    {SP::FMOVQ_ICC, 160, 16 },
    {SP::FMOVQ_XCC, 176, 16 },
    {SP::FMOVRD, 192, 6 },
    {SP::FMOVRQ, 198, 6 },
    {SP::FMOVRS, 204, 6 },
    {SP::FMOVS_ICC, 210, 16 },
    {SP::FMOVS_XCC, 226, 16 },
    {SP::MOVICCri, 242, 16 },
    {SP::MOVICCrr, 258, 16 },
    {SP::MOVRri, 274, 6 },
    {SP::MOVRrr, 280, 6 },
    {SP::MOVXCCri, 286, 16 },
    {SP::MOVXCCrr, 302, 16 },
    {SP::ORCCrr, 318, 1 },
    {SP::ORri, 319, 1 },
    {SP::ORrr, 320, 1 },
    {SP::RESTORErr, 321, 1 },
    {SP::RET, 322, 1 },
    {SP::RETL, 323, 1 },
    {SP::SAVErr, 324, 1 },
    {SP::TICCri, 325, 32 },
    {SP::TICCrr, 357, 32 },
    {SP::TRAPri, 389, 32 },
    {SP::TRAPrr, 421, 32 },
    {SP::TXCCri, 453, 32 },
    {SP::TXCCrr, 485, 32 },
    {SP::V9FCMPD, 517, 1 },
    {SP::V9FCMPED, 518, 1 },
    {SP::V9FCMPEQ, 519, 1 },
    {SP::V9FCMPES, 520, 1 },
    {SP::V9FCMPQ, 521, 1 },
    {SP::V9FCMPS, 522, 1 },
    {SP::V9FMOVD_FCC, 523, 16 },
    {SP::V9FMOVQ_FCC, 539, 16 },
    {SP::V9FMOVS_FCC, 555, 16 },
    {SP::V9MOVFCCri, 571, 16 },
    {SP::V9MOVFCCrr, 587, 16 },
  };

  static const AliasPattern Patterns[] = {
    // SP::BCOND - 0
    {0, 0, 2, 2 },
    {6, 2, 2, 2 },
    {12, 4, 2, 2 },
    {19, 6, 2, 2 },
    {25, 8, 2, 2 },
    {31, 10, 2, 2 },
    {38, 12, 2, 2 },
    {45, 14, 2, 2 },
    {51, 16, 2, 2 },
    {58, 18, 2, 2 },
    {66, 20, 2, 2 },
    {73, 22, 2, 2 },
    {80, 24, 2, 2 },
    {88, 26, 2, 2 },
    {96, 28, 2, 2 },
    {103, 30, 2, 2 },
    // SP::BCONDA - 16
    {110, 32, 2, 2 },
    {118, 34, 2, 2 },
    {126, 36, 2, 2 },
    {135, 38, 2, 2 },
    {143, 40, 2, 2 },
    {151, 42, 2, 2 },
    {160, 44, 2, 2 },
    {169, 46, 2, 2 },
    {177, 48, 2, 2 },
    {186, 50, 2, 2 },
    {196, 52, 2, 2 },
    {205, 54, 2, 2 },
    {214, 56, 2, 2 },
    {224, 58, 2, 2 },
    {234, 60, 2, 2 },
    {243, 62, 2, 2 },
    // SP::BPFCCANT - 32
    {252, 64, 3, 4 },
    {268, 68, 3, 4 },
    {284, 72, 3, 4 },
    {300, 76, 3, 4 },
    {316, 80, 3, 4 },
    {333, 84, 3, 4 },
    {349, 88, 3, 4 },
    {366, 92, 3, 4 },
    {383, 96, 3, 4 },
    {400, 100, 3, 4 },
    {416, 104, 3, 4 },
    {433, 108, 3, 4 },
    {450, 112, 3, 4 },
    {468, 116, 3, 4 },
    {485, 120, 3, 4 },
    {503, 124, 3, 4 },
    // SP::BPFCCNT - 48
    {519, 128, 3, 4 },
    {533, 132, 3, 4 },
    {547, 136, 3, 4 },
    {561, 140, 3, 4 },
    {575, 144, 3, 4 },
    {590, 148, 3, 4 },
    {604, 152, 3, 4 },
    {619, 156, 3, 4 },
    {634, 160, 3, 4 },
    {649, 164, 3, 4 },
    {663, 168, 3, 4 },
    {678, 172, 3, 4 },
    {693, 176, 3, 4 },
    {709, 180, 3, 4 },
    {724, 184, 3, 4 },
    {740, 188, 3, 4 },
    // SP::BPICCANT - 64
    {754, 192, 2, 3 },
    {771, 195, 2, 3 },
    {788, 198, 2, 3 },
    {806, 201, 2, 3 },
    {823, 204, 2, 3 },
    {840, 207, 2, 3 },
    {858, 210, 2, 3 },
    {876, 213, 2, 3 },
    {893, 216, 2, 3 },
    {911, 219, 2, 3 },
    {930, 222, 2, 3 },
    {948, 225, 2, 3 },
    {966, 228, 2, 3 },
    {985, 231, 2, 3 },
    {1004, 234, 2, 3 },
    {1022, 237, 2, 3 },
    // SP::BPICCNT - 80
    {1040, 240, 2, 3 },
    {1055, 243, 2, 3 },
    {1070, 246, 2, 3 },
    {1086, 249, 2, 3 },
    {1101, 252, 2, 3 },
    {1116, 255, 2, 3 },
    {1132, 258, 2, 3 },
    {1148, 261, 2, 3 },
    {1163, 264, 2, 3 },
    {1179, 267, 2, 3 },
    {1196, 270, 2, 3 },
    {1212, 273, 2, 3 },
    {1228, 276, 2, 3 },
    {1245, 279, 2, 3 },
    {1262, 282, 2, 3 },
    {1278, 285, 2, 3 },
    // SP::BPXCCANT - 96
    {1294, 288, 2, 2 },
    {1311, 290, 2, 2 },
    {1328, 292, 2, 2 },
    {1346, 294, 2, 2 },
    {1363, 296, 2, 2 },
    {1380, 298, 2, 2 },
    {1398, 300, 2, 2 },
    {1416, 302, 2, 2 },
    {1433, 304, 2, 2 },
    {1451, 306, 2, 2 },
    {1470, 308, 2, 2 },
    {1488, 310, 2, 2 },
    {1506, 312, 2, 2 },
    {1525, 314, 2, 2 },
    {1544, 316, 2, 2 },
    {1562, 318, 2, 2 },
    // SP::BPXCCNT - 112
    {1580, 320, 2, 2 },
    {1595, 322, 2, 2 },
    {1610, 324, 2, 2 },
    {1626, 326, 2, 2 },
    {1641, 328, 2, 2 },
    {1656, 330, 2, 2 },
    {1672, 332, 2, 2 },
    {1688, 334, 2, 2 },
    {1703, 336, 2, 2 },
    {1719, 338, 2, 2 },
    {1736, 340, 2, 2 },
    {1752, 342, 2, 2 },
    {1768, 344, 2, 2 },
    {1785, 346, 2, 2 },
    {1802, 348, 2, 2 },
    {1818, 350, 2, 2 },
    // SP::FMOVD_ICC - 128
    {1834, 352, 4, 5 },
    {1854, 357, 4, 5 },
    {1874, 362, 4, 5 },
    {1895, 367, 4, 5 },
    {1915, 372, 4, 5 },
    {1935, 377, 4, 5 },
    {1956, 382, 4, 5 },
    {1977, 387, 4, 5 },
    {1997, 392, 4, 5 },
    {2018, 397, 4, 5 },
    {2040, 402, 4, 5 },
    {2061, 407, 4, 5 },
    {2082, 412, 4, 5 },
    {2104, 417, 4, 5 },
    {2126, 422, 4, 5 },
    {2147, 427, 4, 5 },
    // SP::FMOVD_XCC - 144
    {2168, 432, 4, 4 },
    {2188, 436, 4, 4 },
    {2208, 440, 4, 4 },
    {2229, 444, 4, 4 },
    {2249, 448, 4, 4 },
    {2269, 452, 4, 4 },
    {2290, 456, 4, 4 },
    {2311, 460, 4, 4 },
    {2331, 464, 4, 4 },
    {2352, 468, 4, 4 },
    {2374, 472, 4, 4 },
    {2395, 476, 4, 4 },
    {2416, 480, 4, 4 },
    {2438, 484, 4, 4 },
    {2460, 488, 4, 4 },
    {2481, 492, 4, 4 },
    // SP::FMOVQ_ICC - 160
    {2502, 496, 4, 5 },
    {2522, 501, 4, 5 },
    {2542, 506, 4, 5 },
    {2563, 511, 4, 5 },
    {2583, 516, 4, 5 },
    {2603, 521, 4, 5 },
    {2624, 526, 4, 5 },
    {2645, 531, 4, 5 },
    {2665, 536, 4, 5 },
    {2686, 541, 4, 5 },
    {2708, 546, 4, 5 },
    {2729, 551, 4, 5 },
    {2750, 556, 4, 5 },
    {2772, 561, 4, 5 },
    {2794, 566, 4, 5 },
    {2815, 571, 4, 5 },
    // SP::FMOVQ_XCC - 176
    {2836, 576, 4, 4 },
    {2856, 580, 4, 4 },
    {2876, 584, 4, 4 },
    {2897, 588, 4, 4 },
    {2917, 592, 4, 4 },
    {2937, 596, 4, 4 },
    {2958, 600, 4, 4 },
    {2979, 604, 4, 4 },
    {2999, 608, 4, 4 },
    {3020, 612, 4, 4 },
    {3042, 616, 4, 4 },
    {3063, 620, 4, 4 },
    {3084, 624, 4, 4 },
    {3106, 628, 4, 4 },
    {3128, 632, 4, 4 },
    {3149, 636, 4, 4 },
    // SP::FMOVRD - 192
    {3170, 640, 5, 5 },
    {3189, 645, 5, 5 },
    {3210, 650, 5, 5 },
    {3230, 655, 5, 5 },
    {3250, 660, 5, 5 },
    {3270, 665, 5, 5 },
    // SP::FMOVRQ - 198
    {3291, 670, 5, 5 },
    {3310, 675, 5, 5 },
    {3331, 680, 5, 5 },
    {3351, 685, 5, 5 },
    {3371, 690, 5, 5 },
    {3391, 695, 5, 5 },
    // SP::FMOVRS - 204
    {3412, 700, 5, 5 },
    {3431, 705, 5, 5 },
    {3452, 710, 5, 5 },
    {3472, 715, 5, 5 },
    {3492, 720, 5, 5 },
    {3512, 725, 5, 5 },
    // SP::FMOVS_ICC - 210
    {3533, 730, 4, 5 },
    {3553, 735, 4, 5 },
    {3573, 740, 4, 5 },
    {3594, 745, 4, 5 },
    {3614, 750, 4, 5 },
    {3634, 755, 4, 5 },
    {3655, 760, 4, 5 },
    {3676, 765, 4, 5 },
    {3696, 770, 4, 5 },
    {3717, 775, 4, 5 },
    {3739, 780, 4, 5 },
    {3760, 785, 4, 5 },
    {3781, 790, 4, 5 },
    {3803, 795, 4, 5 },
    {3825, 800, 4, 5 },
    {3846, 805, 4, 5 },
    // SP::FMOVS_XCC - 226
    {3867, 810, 4, 4 },
    {3887, 814, 4, 4 },
    {3907, 818, 4, 4 },
    {3928, 822, 4, 4 },
    {3948, 826, 4, 4 },
    {3968, 830, 4, 4 },
    {3989, 834, 4, 4 },
    {4010, 838, 4, 4 },
    {4030, 842, 4, 4 },
    {4051, 846, 4, 4 },
    {4073, 850, 4, 4 },
    {4094, 854, 4, 4 },
    {4115, 858, 4, 4 },
    {4137, 862, 4, 4 },
    {4159, 866, 4, 4 },
    {4180, 870, 4, 4 },
    // SP::MOVICCri - 242
    {4201, 874, 4, 5 },
    {4219, 879, 4, 5 },
    {4237, 884, 4, 5 },
    {4256, 889, 4, 5 },
    {4274, 894, 4, 5 },
    {4292, 899, 4, 5 },
    {4311, 904, 4, 5 },
    {4330, 909, 4, 5 },
    {4348, 914, 4, 5 },
    {4367, 919, 4, 5 },
    {4387, 924, 4, 5 },
    {4406, 929, 4, 5 },
    {4425, 934, 4, 5 },
    {4445, 939, 4, 5 },
    {4465, 944, 4, 5 },
    {4484, 949, 4, 5 },
    // SP::MOVICCrr - 258
    {4201, 954, 4, 5 },
    {4219, 959, 4, 5 },
    {4237, 964, 4, 5 },
    {4256, 969, 4, 5 },
    {4274, 974, 4, 5 },
    {4292, 979, 4, 5 },
    {4311, 984, 4, 5 },
    {4330, 989, 4, 5 },
    {4348, 994, 4, 5 },
    {4367, 999, 4, 5 },
    {4387, 1004, 4, 5 },
    {4406, 1009, 4, 5 },
    {4425, 1014, 4, 5 },
    {4445, 1019, 4, 5 },
    {4465, 1024, 4, 5 },
    {4484, 1029, 4, 5 },
    // SP::MOVRri - 274
    {4503, 1034, 5, 5 },
    {4520, 1039, 5, 5 },
    {4539, 1044, 5, 5 },
    {4557, 1049, 5, 5 },
    {4575, 1054, 5, 5 },
    {4593, 1059, 5, 5 },
    // SP::MOVRrr - 280
    {4503, 1064, 5, 5 },
    {4520, 1069, 5, 5 },
    {4539, 1074, 5, 5 },
    {4557, 1079, 5, 5 },
    {4575, 1084, 5, 5 },
    {4593, 1089, 5, 5 },
    // SP::MOVXCCri - 286
    {4612, 1094, 4, 4 },
    {4630, 1098, 4, 4 },
    {4648, 1102, 4, 4 },
    {4667, 1106, 4, 4 },
    {4685, 1110, 4, 4 },
    {4703, 1114, 4, 4 },
    {4722, 1118, 4, 4 },
    {4741, 1122, 4, 4 },
    {4759, 1126, 4, 4 },
    {4778, 1130, 4, 4 },
    {4798, 1134, 4, 4 },
    {4817, 1138, 4, 4 },
    {4836, 1142, 4, 4 },
    {4856, 1146, 4, 4 },
    {4876, 1150, 4, 4 },
    {4895, 1154, 4, 4 },
    // SP::MOVXCCrr - 302
    {4612, 1158, 4, 4 },
    {4630, 1162, 4, 4 },
    {4648, 1166, 4, 4 },
    {4667, 1170, 4, 4 },
    {4685, 1174, 4, 4 },
    {4703, 1178, 4, 4 },
    {4722, 1182, 4, 4 },
    {4741, 1186, 4, 4 },
    {4759, 1190, 4, 4 },
    {4778, 1194, 4, 4 },
    {4798, 1198, 4, 4 },
    {4817, 1202, 4, 4 },
    {4836, 1206, 4, 4 },
    {4856, 1210, 4, 4 },
    {4876, 1214, 4, 4 },
    {4895, 1218, 4, 4 },
    // SP::ORCCrr - 318
    {4914, 1222, 3, 3 },
    // SP::ORri - 319
    {4921, 1225, 3, 2 },
    // SP::ORrr - 320
    {4921, 1227, 3, 3 },
    // SP::RESTORErr - 321
    {4932, 1230, 3, 3 },
    // SP::RET - 322
    {4940, 1233, 1, 1 },
    // SP::RETL - 323
    {4944, 1234, 1, 1 },
    // SP::SAVErr - 324
    {4949, 1235, 3, 3 },
    // SP::TICCri - 325
    {4954, 1238, 3, 4 },
    {4966, 1242, 3, 4 },
    {4983, 1246, 3, 4 },
    {4995, 1250, 3, 4 },
    {5012, 1254, 3, 4 },
    {5025, 1258, 3, 4 },
    {5043, 1262, 3, 4 },
    {5055, 1266, 3, 4 },
    {5072, 1270, 3, 4 },
    {5084, 1274, 3, 4 },
    {5101, 1278, 3, 4 },
    {5114, 1282, 3, 4 },
    {5132, 1286, 3, 4 },
    {5145, 1290, 3, 4 },
    {5163, 1294, 3, 4 },
    {5175, 1298, 3, 4 },
    {5192, 1302, 3, 4 },
    {5205, 1306, 3, 4 },
    {5223, 1310, 3, 4 },
    {5237, 1314, 3, 4 },
    {5256, 1318, 3, 4 },
    {5269, 1322, 3, 4 },
    {5287, 1326, 3, 4 },
    {5300, 1330, 3, 4 },
    {5318, 1334, 3, 4 },
    {5332, 1338, 3, 4 },
    {5351, 1342, 3, 4 },
    {5365, 1346, 3, 4 },
    {5384, 1350, 3, 4 },
    {5397, 1354, 3, 4 },
    {5415, 1358, 3, 4 },
    {5428, 1362, 3, 4 },
    // SP::TICCrr - 357
    {4954, 1366, 3, 4 },
    {4966, 1370, 3, 4 },
    {4983, 1374, 3, 4 },
    {4995, 1378, 3, 4 },
    {5012, 1382, 3, 4 },
    {5025, 1386, 3, 4 },
    {5043, 1390, 3, 4 },
    {5055, 1394, 3, 4 },
    {5072, 1398, 3, 4 },
    {5084, 1402, 3, 4 },
    {5101, 1406, 3, 4 },
    {5114, 1410, 3, 4 },
    {5132, 1414, 3, 4 },
    {5145, 1418, 3, 4 },
    {5163, 1422, 3, 4 },
    {5175, 1426, 3, 4 },
    {5192, 1430, 3, 4 },
    {5205, 1434, 3, 4 },
    {5223, 1438, 3, 4 },
    {5237, 1442, 3, 4 },
    {5256, 1446, 3, 4 },
    {5269, 1450, 3, 4 },
    {5287, 1454, 3, 4 },
    {5300, 1458, 3, 4 },
    {5318, 1462, 3, 4 },
    {5332, 1466, 3, 4 },
    {5351, 1470, 3, 4 },
    {5365, 1474, 3, 4 },
    {5384, 1478, 3, 4 },
    {5397, 1482, 3, 4 },
    {5415, 1486, 3, 4 },
    {5428, 1490, 3, 4 },
    // SP::TRAPri - 389
    {5446, 1494, 3, 3 },
    {5452, 1497, 3, 3 },
    {5463, 1500, 3, 3 },
    {5469, 1503, 3, 3 },
    {5480, 1506, 3, 3 },
    {5487, 1509, 3, 3 },
    {5499, 1512, 3, 3 },
    {5505, 1515, 3, 3 },
    {5516, 1518, 3, 3 },
    {5522, 1521, 3, 3 },
    {5533, 1524, 3, 3 },
    {5540, 1527, 3, 3 },
    {5552, 1530, 3, 3 },
    {5559, 1533, 3, 3 },
    {5571, 1536, 3, 3 },
    {5577, 1539, 3, 3 },
    {5588, 1542, 3, 3 },
    {5595, 1545, 3, 3 },
    {5607, 1548, 3, 3 },
    {5615, 1551, 3, 3 },
    {5628, 1554, 3, 3 },
    {5635, 1557, 3, 3 },
    {5647, 1560, 3, 3 },
    {5654, 1563, 3, 3 },
    {5666, 1566, 3, 3 },
    {5674, 1569, 3, 3 },
    {5687, 1572, 3, 3 },
    {5695, 1575, 3, 3 },
    {5708, 1578, 3, 3 },
    {5715, 1581, 3, 3 },
    {5727, 1584, 3, 3 },
    {5734, 1587, 3, 3 },
    // SP::TRAPrr - 421
    {5446, 1590, 3, 3 },
    {5452, 1593, 3, 3 },
    {5463, 1596, 3, 3 },
    {5469, 1599, 3, 3 },
    {5480, 1602, 3, 3 },
    {5487, 1605, 3, 3 },
    {5499, 1608, 3, 3 },
    {5505, 1611, 3, 3 },
    {5516, 1614, 3, 3 },
    {5522, 1617, 3, 3 },
    {5533, 1620, 3, 3 },
    {5540, 1623, 3, 3 },
    {5552, 1626, 3, 3 },
    {5559, 1629, 3, 3 },
    {5571, 1632, 3, 3 },
    {5577, 1635, 3, 3 },
    {5588, 1638, 3, 3 },
    {5595, 1641, 3, 3 },
    {5607, 1644, 3, 3 },
    {5615, 1647, 3, 3 },
    {5628, 1650, 3, 3 },
    {5635, 1653, 3, 3 },
    {5647, 1656, 3, 3 },
    {5654, 1659, 3, 3 },
    {5666, 1662, 3, 3 },
    {5674, 1665, 3, 3 },
    {5687, 1668, 3, 3 },
    {5695, 1671, 3, 3 },
    {5708, 1674, 3, 3 },
    {5715, 1677, 3, 3 },
    {5727, 1680, 3, 3 },
    {5734, 1683, 3, 3 },
    // SP::TXCCri - 453
    {5746, 1686, 3, 4 },
    {5758, 1690, 3, 4 },
    {5775, 1694, 3, 4 },
    {5787, 1698, 3, 4 },
    {5804, 1702, 3, 4 },
    {5817, 1706, 3, 4 },
    {5835, 1710, 3, 4 },
    {5847, 1714, 3, 4 },
    {5864, 1718, 3, 4 },
    {5876, 1722, 3, 4 },
    {5893, 1726, 3, 4 },
    {5906, 1730, 3, 4 },
    {5924, 1734, 3, 4 },
    {5937, 1738, 3, 4 },
    {5955, 1742, 3, 4 },
    {5967, 1746, 3, 4 },
    {5984, 1750, 3, 4 },
    {5997, 1754, 3, 4 },
    {6015, 1758, 3, 4 },
    {6029, 1762, 3, 4 },
    {6048, 1766, 3, 4 },
    {6061, 1770, 3, 4 },
    {6079, 1774, 3, 4 },
    {6092, 1778, 3, 4 },
    {6110, 1782, 3, 4 },
    {6124, 1786, 3, 4 },
    {6143, 1790, 3, 4 },
    {6157, 1794, 3, 4 },
    {6176, 1798, 3, 4 },
    {6189, 1802, 3, 4 },
    {6207, 1806, 3, 4 },
    {6220, 1810, 3, 4 },
    // SP::TXCCrr - 485
    {5746, 1814, 3, 4 },
    {5758, 1818, 3, 4 },
    {5775, 1822, 3, 4 },
    {5787, 1826, 3, 4 },
    {5804, 1830, 3, 4 },
    {5817, 1834, 3, 4 },
    {5835, 1838, 3, 4 },
    {5847, 1842, 3, 4 },
    {5864, 1846, 3, 4 },
    {5876, 1850, 3, 4 },
    {5893, 1854, 3, 4 },
    {5906, 1858, 3, 4 },
    {5924, 1862, 3, 4 },
    {5937, 1866, 3, 4 },
    {5955, 1870, 3, 4 },
    {5967, 1874, 3, 4 },
    {5984, 1878, 3, 4 },
    {5997, 1882, 3, 4 },
    {6015, 1886, 3, 4 },
    {6029, 1890, 3, 4 },
    {6048, 1894, 3, 4 },
    {6061, 1898, 3, 4 },
    {6079, 1902, 3, 4 },
    {6092, 1906, 3, 4 },
    {6110, 1910, 3, 4 },
    {6124, 1914, 3, 4 },
    {6143, 1918, 3, 4 },
    {6157, 1922, 3, 4 },
    {6176, 1926, 3, 4 },
    {6189, 1930, 3, 4 },
    {6207, 1934, 3, 4 },
    {6220, 1938, 3, 4 },
    // SP::V9FCMPD - 517
    {6238, 1942, 3, 3 },
    // SP::V9FCMPED - 518
    {6251, 1945, 3, 3 },
    // SP::V9FCMPEQ - 519
    {6265, 1948, 3, 3 },
    // SP::V9FCMPES - 520
    {6279, 1951, 3, 3 },
    // SP::V9FCMPQ - 521
    {6293, 1954, 3, 3 },
    // SP::V9FCMPS - 522
    {6306, 1957, 3, 3 },
    // SP::V9FMOVD_FCC - 523
    {6319, 1960, 5, 6 },
    {6337, 1966, 5, 6 },
    {6355, 1972, 5, 6 },
    {6373, 1978, 5, 6 },
    {6391, 1984, 5, 6 },
    {6410, 1990, 5, 6 },
    {6428, 1996, 5, 6 },
    {6447, 2002, 5, 6 },
    {6466, 2008, 5, 6 },
    {6485, 2014, 5, 6 },
    {6503, 2020, 5, 6 },
    {6522, 2026, 5, 6 },
    {6541, 2032, 5, 6 },
    {6561, 2038, 5, 6 },
    {6580, 2044, 5, 6 },
    {6600, 2050, 5, 6 },
    // SP::V9FMOVQ_FCC - 539
    {6618, 2056, 5, 6 },
    {6636, 2062, 5, 6 },
    {6654, 2068, 5, 6 },
    {6672, 2074, 5, 6 },
    {6690, 2080, 5, 6 },
    {6709, 2086, 5, 6 },
    {6727, 2092, 5, 6 },
    {6746, 2098, 5, 6 },
    {6765, 2104, 5, 6 },
    {6784, 2110, 5, 6 },
    {6802, 2116, 5, 6 },
    {6821, 2122, 5, 6 },
    {6840, 2128, 5, 6 },
    {6860, 2134, 5, 6 },
    {6879, 2140, 5, 6 },
    {6899, 2146, 5, 6 },
    // SP::V9FMOVS_FCC - 555
    {6917, 2152, 5, 6 },
    {6935, 2158, 5, 6 },
    {6953, 2164, 5, 6 },
    {6971, 2170, 5, 6 },
    {6989, 2176, 5, 6 },
    {7008, 2182, 5, 6 },
    {7026, 2188, 5, 6 },
    {7045, 2194, 5, 6 },
    {7064, 2200, 5, 6 },
    {7083, 2206, 5, 6 },
    {7101, 2212, 5, 6 },
    {7120, 2218, 5, 6 },
    {7139, 2224, 5, 6 },
    {7159, 2230, 5, 6 },
    {7178, 2236, 5, 6 },
    {7198, 2242, 5, 6 },
    // SP::V9MOVFCCri - 571
    {7216, 2248, 5, 6 },
    {7232, 2254, 5, 6 },
    {7248, 2260, 5, 6 },
    {7264, 2266, 5, 6 },
    {7280, 2272, 5, 6 },
    {7297, 2278, 5, 6 },
    {7313, 2284, 5, 6 },
    {7330, 2290, 5, 6 },
    {7347, 2296, 5, 6 },
    {7364, 2302, 5, 6 },
    {7380, 2308, 5, 6 },
    {7397, 2314, 5, 6 },
    {7414, 2320, 5, 6 },
    {7432, 2326, 5, 6 },
    {7449, 2332, 5, 6 },
    {7467, 2338, 5, 6 },
    // SP::V9MOVFCCrr - 587
    {7216, 2344, 5, 6 },
    {7232, 2350, 5, 6 },
    {7248, 2356, 5, 6 },
    {7264, 2362, 5, 6 },
    {7280, 2368, 5, 6 },
    {7297, 2374, 5, 6 },
    {7313, 2380, 5, 6 },
    {7330, 2386, 5, 6 },
    {7347, 2392, 5, 6 },
    {7364, 2398, 5, 6 },
    {7380, 2404, 5, 6 },
    {7397, 2410, 5, 6 },
    {7414, 2416, 5, 6 },
    {7432, 2422, 5, 6 },
    {7449, 2428, 5, 6 },
    {7467, 2434, 5, 6 },
  };

  static const AliasPatternCond Conds[] = {
    // (BCOND brtarget:$imm, 8) - 0
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (BCOND brtarget:$imm, 0) - 2
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (BCOND brtarget:$imm, 9) - 4
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (BCOND brtarget:$imm, 1) - 6
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (BCOND brtarget:$imm, 10) - 8
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (BCOND brtarget:$imm, 2) - 10
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (BCOND brtarget:$imm, 11) - 12
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (BCOND brtarget:$imm, 3) - 14
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (BCOND brtarget:$imm, 12) - 16
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (BCOND brtarget:$imm, 4) - 18
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (BCOND brtarget:$imm, 13) - 20
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (BCOND brtarget:$imm, 5) - 22
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (BCOND brtarget:$imm, 14) - 24
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (BCOND brtarget:$imm, 6) - 26
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (BCOND brtarget:$imm, 15) - 28
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (BCOND brtarget:$imm, 7) - 30
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (BCONDA brtarget:$imm, 8) - 32
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (BCONDA brtarget:$imm, 0) - 34
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (BCONDA brtarget:$imm, 9) - 36
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (BCONDA brtarget:$imm, 1) - 38
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (BCONDA brtarget:$imm, 10) - 40
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (BCONDA brtarget:$imm, 2) - 42
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (BCONDA brtarget:$imm, 11) - 44
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (BCONDA brtarget:$imm, 3) - 46
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (BCONDA brtarget:$imm, 12) - 48
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (BCONDA brtarget:$imm, 4) - 50
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (BCONDA brtarget:$imm, 13) - 52
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (BCONDA brtarget:$imm, 5) - 54
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (BCONDA brtarget:$imm, 14) - 56
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (BCONDA brtarget:$imm, 6) - 58
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (BCONDA brtarget:$imm, 15) - 60
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (BCONDA brtarget:$imm, 7) - 62
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (BPFCCANT brtarget:$imm, 8, FCCRegs:$cc) - 64
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, 0, FCCRegs:$cc) - 68
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, 7, FCCRegs:$cc) - 72
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, 6, FCCRegs:$cc) - 76
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, 5, FCCRegs:$cc) - 80
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, 4, FCCRegs:$cc) - 84
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, 3, FCCRegs:$cc) - 88
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, 2, FCCRegs:$cc) - 92
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, 1, FCCRegs:$cc) - 96
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, 9, FCCRegs:$cc) - 100
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, 10, FCCRegs:$cc) - 104
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, 11, FCCRegs:$cc) - 108
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, 12, FCCRegs:$cc) - 112
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, 13, FCCRegs:$cc) - 116
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, 14, FCCRegs:$cc) - 120
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCANT brtarget:$imm, 15, FCCRegs:$cc) - 124
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 8, FCCRegs:$cc) - 128
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 0, FCCRegs:$cc) - 132
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 7, FCCRegs:$cc) - 136
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 6, FCCRegs:$cc) - 140
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 5, FCCRegs:$cc) - 144
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 4, FCCRegs:$cc) - 148
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 3, FCCRegs:$cc) - 152
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 2, FCCRegs:$cc) - 156
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 1, FCCRegs:$cc) - 160
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 9, FCCRegs:$cc) - 164
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 10, FCCRegs:$cc) - 168
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 11, FCCRegs:$cc) - 172
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 12, FCCRegs:$cc) - 176
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 13, FCCRegs:$cc) - 180
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 14, FCCRegs:$cc) - 184
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPFCCNT brtarget:$imm, 15, FCCRegs:$cc) - 188
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 8) - 192
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 0) - 195
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 9) - 198
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 1) - 201
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 10) - 204
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 2) - 207
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 11) - 210
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 3) - 213
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 12) - 216
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 4) - 219
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 13) - 222
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 5) - 225
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 14) - 228
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 6) - 231
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 15) - 234
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCANT brtarget:$imm, 7) - 237
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 8) - 240
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 0) - 243
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 9) - 246
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 1) - 249
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 10) - 252
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 2) - 255
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 11) - 258
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 3) - 261
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 12) - 264
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 4) - 267
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 13) - 270
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 5) - 273
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 14) - 276
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 6) - 279
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 15) - 282
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPICCNT brtarget:$imm, 7) - 285
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (BPXCCANT brtarget:$imm, 8) - 288
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (BPXCCANT brtarget:$imm, 0) - 290
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (BPXCCANT brtarget:$imm, 9) - 292
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (BPXCCANT brtarget:$imm, 1) - 294
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (BPXCCANT brtarget:$imm, 10) - 296
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (BPXCCANT brtarget:$imm, 2) - 298
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (BPXCCANT brtarget:$imm, 11) - 300
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (BPXCCANT brtarget:$imm, 3) - 302
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (BPXCCANT brtarget:$imm, 12) - 304
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (BPXCCANT brtarget:$imm, 4) - 306
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (BPXCCANT brtarget:$imm, 13) - 308
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (BPXCCANT brtarget:$imm, 5) - 310
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (BPXCCANT brtarget:$imm, 14) - 312
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (BPXCCANT brtarget:$imm, 6) - 314
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (BPXCCANT brtarget:$imm, 15) - 316
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (BPXCCANT brtarget:$imm, 7) - 318
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (BPXCCNT brtarget:$imm, 8) - 320
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (BPXCCNT brtarget:$imm, 0) - 322
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (BPXCCNT brtarget:$imm, 9) - 324
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (BPXCCNT brtarget:$imm, 1) - 326
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (BPXCCNT brtarget:$imm, 10) - 328
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (BPXCCNT brtarget:$imm, 2) - 330
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (BPXCCNT brtarget:$imm, 11) - 332
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (BPXCCNT brtarget:$imm, 3) - 334
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (BPXCCNT brtarget:$imm, 12) - 336
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (BPXCCNT brtarget:$imm, 4) - 338
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (BPXCCNT brtarget:$imm, 13) - 340
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (BPXCCNT brtarget:$imm, 5) - 342
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (BPXCCNT brtarget:$imm, 14) - 344
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (BPXCCNT brtarget:$imm, 6) - 346
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (BPXCCNT brtarget:$imm, 15) - 348
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (BPXCCNT brtarget:$imm, 7) - 350
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 8) - 352
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 0) - 357
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 9) - 362
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 1) - 367
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 10) - 372
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 2) - 377
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 11) - 382
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 3) - 387
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 12) - 392
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 4) - 397
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 13) - 402
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 5) - 407
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 14) - 412
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 6) - 417
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 15) - 422
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_ICC DFPRegs:$rd, DFPRegs:$rs2, 7) - 427
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 8) - 432
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 0) - 436
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 9) - 440
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 1) - 444
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 10) - 448
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 2) - 452
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 11) - 456
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 3) - 460
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 12) - 464
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 4) - 468
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 13) - 472
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 5) - 476
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 14) - 480
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 6) - 484
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 15) - 488
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (FMOVD_XCC DFPRegs:$rd, DFPRegs:$rs2, 7) - 492
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 8) - 496
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 0) - 501
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 9) - 506
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 1) - 511
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 10) - 516
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 2) - 521
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 11) - 526
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 3) - 531
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 12) - 536
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 4) - 541
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 13) - 546
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 5) - 551
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 14) - 556
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 6) - 561
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 15) - 566
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_ICC QFPRegs:$rd, QFPRegs:$rs2, 7) - 571
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 8) - 576
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 0) - 580
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 9) - 584
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 1) - 588
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 10) - 592
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 2) - 596
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 11) - 600
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 3) - 604
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 12) - 608
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 4) - 612
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 13) - 616
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 5) - 620
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 14) - 624
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 6) - 628
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 15) - 632
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (FMOVQ_XCC QFPRegs:$rd, QFPRegs:$rs2, 7) - 636
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (FMOVRD DFPRegs:$rd, I64Regs:$rs1, DFPRegs:$rs2, 1) - 640
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (FMOVRD DFPRegs:$rd, I64Regs:$rs1, DFPRegs:$rs2, 2) - 645
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (FMOVRD DFPRegs:$rd, I64Regs:$rs1, DFPRegs:$rs2, 3) - 650
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (FMOVRD DFPRegs:$rd, I64Regs:$rs1, DFPRegs:$rs2, 5) - 655
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (FMOVRD DFPRegs:$rd, I64Regs:$rs1, DFPRegs:$rs2, 6) - 660
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (FMOVRD DFPRegs:$rd, I64Regs:$rs1, DFPRegs:$rs2, 7) - 665
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (FMOVRQ QFPRegs:$rd, I64Regs:$rs1, QFPRegs:$rs2, 1) - 670
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (FMOVRQ QFPRegs:$rd, I64Regs:$rs1, QFPRegs:$rs2, 2) - 675
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (FMOVRQ QFPRegs:$rd, I64Regs:$rs1, QFPRegs:$rs2, 3) - 680
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (FMOVRQ QFPRegs:$rd, I64Regs:$rs1, QFPRegs:$rs2, 5) - 685
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (FMOVRQ QFPRegs:$rd, I64Regs:$rs1, QFPRegs:$rs2, 6) - 690
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (FMOVRQ QFPRegs:$rd, I64Regs:$rs1, QFPRegs:$rs2, 7) - 695
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (FMOVRS FPRegs:$rd, I64Regs:$rs1, FPRegs:$rs2, 1) - 700
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (FMOVRS FPRegs:$rd, I64Regs:$rs1, FPRegs:$rs2, 2) - 705
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (FMOVRS FPRegs:$rd, I64Regs:$rs1, FPRegs:$rs2, 3) - 710
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (FMOVRS FPRegs:$rd, I64Regs:$rs1, FPRegs:$rs2, 5) - 715
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (FMOVRS FPRegs:$rd, I64Regs:$rs1, FPRegs:$rs2, 6) - 720
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (FMOVRS FPRegs:$rd, I64Regs:$rs1, FPRegs:$rs2, 7) - 725
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 8) - 730
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 0) - 735
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 9) - 740
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 1) - 745
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 10) - 750
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 2) - 755
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 11) - 760
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 3) - 765
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 12) - 770
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 4) - 775
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 13) - 780
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 5) - 785
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 14) - 790
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 6) - 795
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 15) - 800
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_ICC FPRegs:$rd, FPRegs:$rs2, 7) - 805
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 8) - 810
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 0) - 814
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 9) - 818
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 1) - 822
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 10) - 826
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 2) - 830
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 11) - 834
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 3) - 838
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 12) - 842
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 4) - 846
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 13) - 850
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 5) - 854
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 14) - 858
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 6) - 862
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 15) - 866
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (FMOVS_XCC FPRegs:$rd, FPRegs:$rs2, 7) - 870
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 8) - 874
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 0) - 879
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 9) - 884
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 1) - 889
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 10) - 894
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 2) - 899
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 11) - 904
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 3) - 909
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 12) - 914
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 4) - 919
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 13) - 924
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 5) - 929
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 14) - 934
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 6) - 939
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 15) - 944
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCri IntRegs:$rd, i32imm:$simm11, 7) - 949
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 8) - 954
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 0) - 959
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 9) - 964
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 1) - 969
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 10) - 974
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 2) - 979
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 11) - 984
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 3) - 989
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 12) - 994
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 4) - 999
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 13) - 1004
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 5) - 1009
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 14) - 1014
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 6) - 1019
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 15) - 1024
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVICCrr IntRegs:$rd, IntRegs:$rs2, 7) - 1029
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (MOVRri IntRegs:$rd, I64Regs:$rs1, i32imm:$simm10, 1) - 1034
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (MOVRri IntRegs:$rd, I64Regs:$rs1, i32imm:$simm10, 2) - 1039
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (MOVRri IntRegs:$rd, I64Regs:$rs1, i32imm:$simm10, 3) - 1044
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (MOVRri IntRegs:$rd, I64Regs:$rs1, i32imm:$simm10, 5) - 1049
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (MOVRri IntRegs:$rd, I64Regs:$rs1, i32imm:$simm10, 6) - 1054
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (MOVRri IntRegs:$rd, I64Regs:$rs1, i32imm:$simm10, 7) - 1059
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (MOVRrr IntRegs:$rd, I64Regs:$rs1, IntRegs:$rs2, 1) - 1064
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (MOVRrr IntRegs:$rd, I64Regs:$rs1, IntRegs:$rs2, 2) - 1069
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (MOVRrr IntRegs:$rd, I64Regs:$rs1, IntRegs:$rs2, 3) - 1074
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (MOVRrr IntRegs:$rd, I64Regs:$rs1, IntRegs:$rs2, 5) - 1079
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (MOVRrr IntRegs:$rd, I64Regs:$rs1, IntRegs:$rs2, 6) - 1084
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (MOVRrr IntRegs:$rd, I64Regs:$rs1, IntRegs:$rs2, 7) - 1089
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::I64RegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 8) - 1094
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 0) - 1098
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 9) - 1102
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 1) - 1106
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 10) - 1110
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 2) - 1114
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 11) - 1118
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 3) - 1122
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 12) - 1126
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 4) - 1130
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 13) - 1134
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 5) - 1138
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 14) - 1142
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 6) - 1146
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 15) - 1150
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (MOVXCCri IntRegs:$rd, i32imm:$simm11, 7) - 1154
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 8) - 1158
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 0) - 1162
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 9) - 1166
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 1) - 1170
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 10) - 1174
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 2) - 1178
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 11) - 1182
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 3) - 1186
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 12) - 1190
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 4) - 1194
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 13) - 1198
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 5) - 1202
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 14) - 1206
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 6) - 1210
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 15) - 1214
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (MOVXCCrr IntRegs:$rd, IntRegs:$rs2, 7) - 1218
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (ORCCrr G0, IntRegs:$rs2, G0) - 1222
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Reg, Sparc::G0},
    // (ORri IntRegs:$rd, G0, i32imm:$simm13) - 1225
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Reg, Sparc::G0},
    // (ORrr IntRegs:$rd, G0, IntRegs:$rs2) - 1227
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    // (RESTORErr G0, G0, G0) - 1230
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Reg, Sparc::G0},
    // (RET 8) - 1233
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (RETL 8) - 1234
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (SAVErr G0, G0, G0) - 1235
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Reg, Sparc::G0},
    // (TICCri G0, i32imm:$imm, 8) - 1238
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 8) - 1242
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, 0) - 1246
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 0) - 1250
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, 9) - 1254
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 9) - 1258
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, 1) - 1262
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 1) - 1266
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, 10) - 1270
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 10) - 1274
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, 2) - 1278
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 2) - 1282
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, 11) - 1286
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 11) - 1290
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, 3) - 1294
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 3) - 1298
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, 12) - 1302
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 12) - 1306
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, 4) - 1310
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 4) - 1314
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, 13) - 1318
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 13) - 1322
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, 5) - 1326
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 5) - 1330
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, 14) - 1334
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 14) - 1338
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, 6) - 1342
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 6) - 1346
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, 15) - 1350
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 15) - 1354
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri G0, i32imm:$imm, 7) - 1358
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCri IntRegs:$rs1, i32imm:$imm, 7) - 1362
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 8) - 1366
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 8) - 1370
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 0) - 1374
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 0) - 1378
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 9) - 1382
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 9) - 1386
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 1) - 1390
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 1) - 1394
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 10) - 1398
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 10) - 1402
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 2) - 1406
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 2) - 1410
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 11) - 1414
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 11) - 1418
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 3) - 1422
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 3) - 1426
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 12) - 1430
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 12) - 1434
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 4) - 1438
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 4) - 1442
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 13) - 1446
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 13) - 1450
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 5) - 1454
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 5) - 1458
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 14) - 1462
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 14) - 1466
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 6) - 1470
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 6) - 1474
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 15) - 1478
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 15) - 1482
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr G0, IntRegs:$rs2, 7) - 1486
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TICCrr IntRegs:$rs1, IntRegs:$rs2, 7) - 1490
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TRAPri G0, i32imm:$imm, 8) - 1494
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 8) - 1497
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (TRAPri G0, i32imm:$imm, 0) - 1500
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 0) - 1503
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (TRAPri G0, i32imm:$imm, 9) - 1506
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 9) - 1509
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (TRAPri G0, i32imm:$imm, 1) - 1512
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 1) - 1515
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (TRAPri G0, i32imm:$imm, 10) - 1518
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 10) - 1521
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (TRAPri G0, i32imm:$imm, 2) - 1524
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 2) - 1527
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (TRAPri G0, i32imm:$imm, 11) - 1530
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 11) - 1533
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (TRAPri G0, i32imm:$imm, 3) - 1536
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 3) - 1539
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (TRAPri G0, i32imm:$imm, 12) - 1542
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 12) - 1545
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (TRAPri G0, i32imm:$imm, 4) - 1548
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 4) - 1551
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (TRAPri G0, i32imm:$imm, 13) - 1554
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 13) - 1557
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (TRAPri G0, i32imm:$imm, 5) - 1560
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 5) - 1563
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (TRAPri G0, i32imm:$imm, 14) - 1566
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 14) - 1569
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (TRAPri G0, i32imm:$imm, 6) - 1572
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 6) - 1575
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (TRAPri G0, i32imm:$imm, 15) - 1578
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 15) - 1581
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (TRAPri G0, i32imm:$imm, 7) - 1584
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (TRAPri IntRegs:$rs1, i32imm:$imm, 7) - 1587
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (TRAPrr G0, IntRegs:$rs1, 8) - 1590
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 8) - 1593
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    // (TRAPrr G0, IntRegs:$rs1, 0) - 1596
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 0) - 1599
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (TRAPrr G0, IntRegs:$rs1, 9) - 1602
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 9) - 1605
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    // (TRAPrr G0, IntRegs:$rs1, 1) - 1608
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 1) - 1611
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (TRAPrr G0, IntRegs:$rs1, 10) - 1614
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 10) - 1617
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    // (TRAPrr G0, IntRegs:$rs1, 2) - 1620
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 2) - 1623
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (TRAPrr G0, IntRegs:$rs1, 11) - 1626
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 11) - 1629
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    // (TRAPrr G0, IntRegs:$rs1, 3) - 1632
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 3) - 1635
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (TRAPrr G0, IntRegs:$rs1, 12) - 1638
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 12) - 1641
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    // (TRAPrr G0, IntRegs:$rs1, 4) - 1644
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 4) - 1647
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (TRAPrr G0, IntRegs:$rs1, 13) - 1650
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 13) - 1653
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    // (TRAPrr G0, IntRegs:$rs1, 5) - 1656
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 5) - 1659
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (TRAPrr G0, IntRegs:$rs1, 14) - 1662
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 14) - 1665
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    // (TRAPrr G0, IntRegs:$rs1, 6) - 1668
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 6) - 1671
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (TRAPrr G0, IntRegs:$rs1, 15) - 1674
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 15) - 1677
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (TRAPrr G0, IntRegs:$rs1, 7) - 1680
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (TRAPrr IntRegs:$rs1, IntRegs:$rs2, 7) - 1683
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (TXCCri G0, i32imm:$imm, 8) - 1686
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 8) - 1690
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, 0) - 1694
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 0) - 1698
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, 9) - 1702
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 9) - 1706
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, 1) - 1710
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 1) - 1714
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, 10) - 1718
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 10) - 1722
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, 2) - 1726
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 2) - 1730
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, 11) - 1734
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 11) - 1738
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, 3) - 1742
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 3) - 1746
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, 12) - 1750
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 12) - 1754
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, 4) - 1758
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 4) - 1762
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, 13) - 1766
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 13) - 1770
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, 5) - 1774
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 5) - 1778
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, 14) - 1782
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 14) - 1786
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, 6) - 1790
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 6) - 1794
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, 15) - 1798
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 15) - 1802
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri G0, i32imm:$imm, 7) - 1806
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCri IntRegs:$rs1, i32imm:$imm, 7) - 1810
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 8) - 1814
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 8) - 1818
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 0) - 1822
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 0) - 1826
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 9) - 1830
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 9) - 1834
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 1) - 1838
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 1) - 1842
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 10) - 1846
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 10) - 1850
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 2) - 1854
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 2) - 1858
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 11) - 1862
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 11) - 1866
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 3) - 1870
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 3) - 1874
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 12) - 1878
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 12) - 1882
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 4) - 1886
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 4) - 1890
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 13) - 1894
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 13) - 1898
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 5) - 1902
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 5) - 1906
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 14) - 1910
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 14) - 1914
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 6) - 1918
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 6) - 1922
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 15) - 1926
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 15) - 1930
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr G0, IntRegs:$rs2, 7) - 1934
    {AliasPatternCond::K_Reg, Sparc::G0},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (TXCCrr IntRegs:$rs1, IntRegs:$rs2, 7) - 1938
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FCMPD FCC0, DFPRegs:$rs1, DFPRegs:$rs2) - 1942
    {AliasPatternCond::K_Reg, Sparc::FCC0},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    // (V9FCMPED FCC0, DFPRegs:$rs1, DFPRegs:$rs2) - 1945
    {AliasPatternCond::K_Reg, Sparc::FCC0},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    // (V9FCMPEQ FCC0, QFPRegs:$rs1, QFPRegs:$rs2) - 1948
    {AliasPatternCond::K_Reg, Sparc::FCC0},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    // (V9FCMPES FCC0, FPRegs:$rs1, FPRegs:$rs2) - 1951
    {AliasPatternCond::K_Reg, Sparc::FCC0},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    // (V9FCMPQ FCC0, QFPRegs:$rs1, QFPRegs:$rs2) - 1954
    {AliasPatternCond::K_Reg, Sparc::FCC0},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    // (V9FCMPS FCC0, FPRegs:$rs1, FPRegs:$rs2) - 1957
    {AliasPatternCond::K_Reg, Sparc::FCC0},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 8) - 1960
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 0) - 1966
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 7) - 1972
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 6) - 1978
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 5) - 1984
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 4) - 1990
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 3) - 1996
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 2) - 2002
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 1) - 2008
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 9) - 2014
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 10) - 2020
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 11) - 2026
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 12) - 2032
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 13) - 2038
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 14) - 2044
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVD_FCC DFPRegs:$rd, FCCRegs:$cc, DFPRegs:$rs2, 15) - 2050
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::DFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 8) - 2056
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 0) - 2062
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 7) - 2068
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 6) - 2074
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 5) - 2080
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 4) - 2086
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 3) - 2092
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 2) - 2098
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 1) - 2104
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 9) - 2110
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 10) - 2116
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 11) - 2122
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 12) - 2128
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 13) - 2134
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 14) - 2140
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVQ_FCC QFPRegs:$rd, FCCRegs:$cc, QFPRegs:$rs2, 15) - 2146
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::QFPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 8) - 2152
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 0) - 2158
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 7) - 2164
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 6) - 2170
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 5) - 2176
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 4) - 2182
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 3) - 2188
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 2) - 2194
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 1) - 2200
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 9) - 2206
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 10) - 2212
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 11) - 2218
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 12) - 2224
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 13) - 2230
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 14) - 2236
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9FMOVS_FCC FPRegs:$rd, FCCRegs:$cc, FPRegs:$rs2, 15) - 2242
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FPRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 8) - 2248
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 0) - 2254
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 7) - 2260
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 6) - 2266
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 5) - 2272
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 4) - 2278
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 3) - 2284
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 2) - 2290
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 1) - 2296
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 9) - 2302
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 10) - 2308
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 11) - 2314
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 12) - 2320
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 13) - 2326
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 14) - 2332
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCri IntRegs:$rd, FCCRegs:$cc, i32imm:$simm11, 15) - 2338
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 8) - 2344
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(8)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 0) - 2350
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 7) - 2356
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 6) - 2362
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(6)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 5) - 2368
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(5)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 4) - 2374
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(4)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 3) - 2380
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 2) - 2386
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 1) - 2392
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 9) - 2398
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(9)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 10) - 2404
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(10)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 11) - 2410
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(11)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 12) - 2416
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(12)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 13) - 2422
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(13)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 14) - 2428
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(14)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
    // (V9MOVFCCrr IntRegs:$rd, FCCRegs:$cc, IntRegs:$rs2, 15) - 2434
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::FCCRegsRegClassID},
    {AliasPatternCond::K_RegClass, Sparc::IntRegsRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Feature, Sparc::FeatureV9},
  };

  static const char AsmStrings[] =
    /* 0 */ "ba $\x01\0"
    /* 6 */ "bn $\x01\0"
    /* 12 */ "bne $\x01\0"
    /* 19 */ "be $\x01\0"
    /* 25 */ "bg $\x01\0"
    /* 31 */ "ble $\x01\0"
    /* 38 */ "bge $\x01\0"
    /* 45 */ "bl $\x01\0"
    /* 51 */ "bgu $\x01\0"
    /* 58 */ "bleu $\x01\0"
    /* 66 */ "bcc $\x01\0"
    /* 73 */ "bcs $\x01\0"
    /* 80 */ "bpos $\x01\0"
    /* 88 */ "bneg $\x01\0"
    /* 96 */ "bvc $\x01\0"
    /* 103 */ "bvs $\x01\0"
    /* 110 */ "ba,a $\x01\0"
    /* 118 */ "bn,a $\x01\0"
    /* 126 */ "bne,a $\x01\0"
    /* 135 */ "be,a $\x01\0"
    /* 143 */ "bg,a $\x01\0"
    /* 151 */ "ble,a $\x01\0"
    /* 160 */ "bge,a $\x01\0"
    /* 169 */ "bl,a $\x01\0"
    /* 177 */ "bgu,a $\x01\0"
    /* 186 */ "bleu,a $\x01\0"
    /* 196 */ "bcc,a $\x01\0"
    /* 205 */ "bcs,a $\x01\0"
    /* 214 */ "bpos,a $\x01\0"
    /* 224 */ "bneg,a $\x01\0"
    /* 234 */ "bvc,a $\x01\0"
    /* 243 */ "bvs,a $\x01\0"
    /* 252 */ "fba,a,pn $\x03, $\x01\0"
    /* 268 */ "fbn,a,pn $\x03, $\x01\0"
    /* 284 */ "fbu,a,pn $\x03, $\x01\0"
    /* 300 */ "fbg,a,pn $\x03, $\x01\0"
    /* 316 */ "fbug,a,pn $\x03, $\x01\0"
    /* 333 */ "fbl,a,pn $\x03, $\x01\0"
    /* 349 */ "fbul,a,pn $\x03, $\x01\0"
    /* 366 */ "fblg,a,pn $\x03, $\x01\0"
    /* 383 */ "fbne,a,pn $\x03, $\x01\0"
    /* 400 */ "fbe,a,pn $\x03, $\x01\0"
    /* 416 */ "fbue,a,pn $\x03, $\x01\0"
    /* 433 */ "fbge,a,pn $\x03, $\x01\0"
    /* 450 */ "fbuge,a,pn $\x03, $\x01\0"
    /* 468 */ "fble,a,pn $\x03, $\x01\0"
    /* 485 */ "fbule,a,pn $\x03, $\x01\0"
    /* 503 */ "fbo,a,pn $\x03, $\x01\0"
    /* 519 */ "fba,pn $\x03, $\x01\0"
    /* 533 */ "fbn,pn $\x03, $\x01\0"
    /* 547 */ "fbu,pn $\x03, $\x01\0"
    /* 561 */ "fbg,pn $\x03, $\x01\0"
    /* 575 */ "fbug,pn $\x03, $\x01\0"
    /* 590 */ "fbl,pn $\x03, $\x01\0"
    /* 604 */ "fbul,pn $\x03, $\x01\0"
    /* 619 */ "fblg,pn $\x03, $\x01\0"
    /* 634 */ "fbne,pn $\x03, $\x01\0"
    /* 649 */ "fbe,pn $\x03, $\x01\0"
    /* 663 */ "fbue,pn $\x03, $\x01\0"
    /* 678 */ "fbge,pn $\x03, $\x01\0"
    /* 693 */ "fbuge,pn $\x03, $\x01\0"
    /* 709 */ "fble,pn $\x03, $\x01\0"
    /* 724 */ "fbule,pn $\x03, $\x01\0"
    /* 740 */ "fbo,pn $\x03, $\x01\0"
    /* 754 */ "ba,a,pn %icc, $\x01\0"
    /* 771 */ "bn,a,pn %icc, $\x01\0"
    /* 788 */ "bne,a,pn %icc, $\x01\0"
    /* 806 */ "be,a,pn %icc, $\x01\0"
    /* 823 */ "bg,a,pn %icc, $\x01\0"
    /* 840 */ "ble,a,pn %icc, $\x01\0"
    /* 858 */ "bge,a,pn %icc, $\x01\0"
    /* 876 */ "bl,a,pn %icc, $\x01\0"
    /* 893 */ "bgu,a,pn %icc, $\x01\0"
    /* 911 */ "bleu,a,pn %icc, $\x01\0"
    /* 930 */ "bcc,a,pn %icc, $\x01\0"
    /* 948 */ "bcs,a,pn %icc, $\x01\0"
    /* 966 */ "bpos,a,pn %icc, $\x01\0"
    /* 985 */ "bneg,a,pn %icc, $\x01\0"
    /* 1004 */ "bvc,a,pn %icc, $\x01\0"
    /* 1022 */ "bvs,a,pn %icc, $\x01\0"
    /* 1040 */ "ba,pn %icc, $\x01\0"
    /* 1055 */ "bn,pn %icc, $\x01\0"
    /* 1070 */ "bne,pn %icc, $\x01\0"
    /* 1086 */ "be,pn %icc, $\x01\0"
    /* 1101 */ "bg,pn %icc, $\x01\0"
    /* 1116 */ "ble,pn %icc, $\x01\0"
    /* 1132 */ "bge,pn %icc, $\x01\0"
    /* 1148 */ "bl,pn %icc, $\x01\0"
    /* 1163 */ "bgu,pn %icc, $\x01\0"
    /* 1179 */ "bleu,pn %icc, $\x01\0"
    /* 1196 */ "bcc,pn %icc, $\x01\0"
    /* 1212 */ "bcs,pn %icc, $\x01\0"
    /* 1228 */ "bpos,pn %icc, $\x01\0"
    /* 1245 */ "bneg,pn %icc, $\x01\0"
    /* 1262 */ "bvc,pn %icc, $\x01\0"
    /* 1278 */ "bvs,pn %icc, $\x01\0"
    /* 1294 */ "ba,a,pn %xcc, $\x01\0"
    /* 1311 */ "bn,a,pn %xcc, $\x01\0"
    /* 1328 */ "bne,a,pn %xcc, $\x01\0"
    /* 1346 */ "be,a,pn %xcc, $\x01\0"
    /* 1363 */ "bg,a,pn %xcc, $\x01\0"
    /* 1380 */ "ble,a,pn %xcc, $\x01\0"
    /* 1398 */ "bge,a,pn %xcc, $\x01\0"
    /* 1416 */ "bl,a,pn %xcc, $\x01\0"
    /* 1433 */ "bgu,a,pn %xcc, $\x01\0"
    /* 1451 */ "bleu,a,pn %xcc, $\x01\0"
    /* 1470 */ "bcc,a,pn %xcc, $\x01\0"
    /* 1488 */ "bcs,a,pn %xcc, $\x01\0"
    /* 1506 */ "bpos,a,pn %xcc, $\x01\0"
    /* 1525 */ "bneg,a,pn %xcc, $\x01\0"
    /* 1544 */ "bvc,a,pn %xcc, $\x01\0"
    /* 1562 */ "bvs,a,pn %xcc, $\x01\0"
    /* 1580 */ "ba,pn %xcc, $\x01\0"
    /* 1595 */ "bn,pn %xcc, $\x01\0"
    /* 1610 */ "bne,pn %xcc, $\x01\0"
    /* 1626 */ "be,pn %xcc, $\x01\0"
    /* 1641 */ "bg,pn %xcc, $\x01\0"
    /* 1656 */ "ble,pn %xcc, $\x01\0"
    /* 1672 */ "bge,pn %xcc, $\x01\0"
    /* 1688 */ "bl,pn %xcc, $\x01\0"
    /* 1703 */ "bgu,pn %xcc, $\x01\0"
    /* 1719 */ "bleu,pn %xcc, $\x01\0"
    /* 1736 */ "bcc,pn %xcc, $\x01\0"
    /* 1752 */ "bcs,pn %xcc, $\x01\0"
    /* 1768 */ "bpos,pn %xcc, $\x01\0"
    /* 1785 */ "bneg,pn %xcc, $\x01\0"
    /* 1802 */ "bvc,pn %xcc, $\x01\0"
    /* 1818 */ "bvs,pn %xcc, $\x01\0"
    /* 1834 */ "fmovda %icc, $\x02, $\x01\0"
    /* 1854 */ "fmovdn %icc, $\x02, $\x01\0"
    /* 1874 */ "fmovdne %icc, $\x02, $\x01\0"
    /* 1895 */ "fmovde %icc, $\x02, $\x01\0"
    /* 1915 */ "fmovdg %icc, $\x02, $\x01\0"
    /* 1935 */ "fmovdle %icc, $\x02, $\x01\0"
    /* 1956 */ "fmovdge %icc, $\x02, $\x01\0"
    /* 1977 */ "fmovdl %icc, $\x02, $\x01\0"
    /* 1997 */ "fmovdgu %icc, $\x02, $\x01\0"
    /* 2018 */ "fmovdleu %icc, $\x02, $\x01\0"
    /* 2040 */ "fmovdcc %icc, $\x02, $\x01\0"
    /* 2061 */ "fmovdcs %icc, $\x02, $\x01\0"
    /* 2082 */ "fmovdpos %icc, $\x02, $\x01\0"
    /* 2104 */ "fmovdneg %icc, $\x02, $\x01\0"
    /* 2126 */ "fmovdvc %icc, $\x02, $\x01\0"
    /* 2147 */ "fmovdvs %icc, $\x02, $\x01\0"
    /* 2168 */ "fmovda %xcc, $\x02, $\x01\0"
    /* 2188 */ "fmovdn %xcc, $\x02, $\x01\0"
    /* 2208 */ "fmovdne %xcc, $\x02, $\x01\0"
    /* 2229 */ "fmovde %xcc, $\x02, $\x01\0"
    /* 2249 */ "fmovdg %xcc, $\x02, $\x01\0"
    /* 2269 */ "fmovdle %xcc, $\x02, $\x01\0"
    /* 2290 */ "fmovdge %xcc, $\x02, $\x01\0"
    /* 2311 */ "fmovdl %xcc, $\x02, $\x01\0"
    /* 2331 */ "fmovdgu %xcc, $\x02, $\x01\0"
    /* 2352 */ "fmovdleu %xcc, $\x02, $\x01\0"
    /* 2374 */ "fmovdcc %xcc, $\x02, $\x01\0"
    /* 2395 */ "fmovdcs %xcc, $\x02, $\x01\0"
    /* 2416 */ "fmovdpos %xcc, $\x02, $\x01\0"
    /* 2438 */ "fmovdneg %xcc, $\x02, $\x01\0"
    /* 2460 */ "fmovdvc %xcc, $\x02, $\x01\0"
    /* 2481 */ "fmovdvs %xcc, $\x02, $\x01\0"
    /* 2502 */ "fmovqa %icc, $\x02, $\x01\0"
    /* 2522 */ "fmovqn %icc, $\x02, $\x01\0"
    /* 2542 */ "fmovqne %icc, $\x02, $\x01\0"
    /* 2563 */ "fmovqe %icc, $\x02, $\x01\0"
    /* 2583 */ "fmovqg %icc, $\x02, $\x01\0"
    /* 2603 */ "fmovqle %icc, $\x02, $\x01\0"
    /* 2624 */ "fmovqge %icc, $\x02, $\x01\0"
    /* 2645 */ "fmovql %icc, $\x02, $\x01\0"
    /* 2665 */ "fmovqgu %icc, $\x02, $\x01\0"
    /* 2686 */ "fmovqleu %icc, $\x02, $\x01\0"
    /* 2708 */ "fmovqcc %icc, $\x02, $\x01\0"
    /* 2729 */ "fmovqcs %icc, $\x02, $\x01\0"
    /* 2750 */ "fmovqpos %icc, $\x02, $\x01\0"
    /* 2772 */ "fmovqneg %icc, $\x02, $\x01\0"
    /* 2794 */ "fmovqvc %icc, $\x02, $\x01\0"
    /* 2815 */ "fmovqvs %icc, $\x02, $\x01\0"
    /* 2836 */ "fmovqa %xcc, $\x02, $\x01\0"
    /* 2856 */ "fmovqn %xcc, $\x02, $\x01\0"
    /* 2876 */ "fmovqne %xcc, $\x02, $\x01\0"
    /* 2897 */ "fmovqe %xcc, $\x02, $\x01\0"
    /* 2917 */ "fmovqg %xcc, $\x02, $\x01\0"
    /* 2937 */ "fmovqle %xcc, $\x02, $\x01\0"
    /* 2958 */ "fmovqge %xcc, $\x02, $\x01\0"
    /* 2979 */ "fmovql %xcc, $\x02, $\x01\0"
    /* 2999 */ "fmovqgu %xcc, $\x02, $\x01\0"
    /* 3020 */ "fmovqleu %xcc, $\x02, $\x01\0"
    /* 3042 */ "fmovqcc %xcc, $\x02, $\x01\0"
    /* 3063 */ "fmovqcs %xcc, $\x02, $\x01\0"
    /* 3084 */ "fmovqpos %xcc, $\x02, $\x01\0"
    /* 3106 */ "fmovqneg %xcc, $\x02, $\x01\0"
    /* 3128 */ "fmovqvc %xcc, $\x02, $\x01\0"
    /* 3149 */ "fmovqvs %xcc, $\x02, $\x01\0"
    /* 3170 */ "fmovrdz $\x02, $\x03, $\x01\0"
    /* 3189 */ "fmovrdlez $\x02, $\x03, $\x01\0"
    /* 3210 */ "fmovrdlz $\x02, $\x03, $\x01\0"
    /* 3230 */ "fmovrdnz $\x02, $\x03, $\x01\0"
    /* 3250 */ "fmovrdgz $\x02, $\x03, $\x01\0"
    /* 3270 */ "fmovrdgez $\x02, $\x03, $\x01\0"
    /* 3291 */ "fmovrqz $\x02, $\x03, $\x01\0"
    /* 3310 */ "fmovrqlez $\x02, $\x03, $\x01\0"
    /* 3331 */ "fmovrqlz $\x02, $\x03, $\x01\0"
    /* 3351 */ "fmovrqnz $\x02, $\x03, $\x01\0"
    /* 3371 */ "fmovrqgz $\x02, $\x03, $\x01\0"
    /* 3391 */ "fmovrqgez $\x02, $\x03, $\x01\0"
    /* 3412 */ "fmovrsz $\x02, $\x03, $\x01\0"
    /* 3431 */ "fmovrslez $\x02, $\x03, $\x01\0"
    /* 3452 */ "fmovrslz $\x02, $\x03, $\x01\0"
    /* 3472 */ "fmovrsnz $\x02, $\x03, $\x01\0"
    /* 3492 */ "fmovrsgz $\x02, $\x03, $\x01\0"
    /* 3512 */ "fmovrsgez $\x02, $\x03, $\x01\0"
    /* 3533 */ "fmovsa %icc, $\x02, $\x01\0"
    /* 3553 */ "fmovsn %icc, $\x02, $\x01\0"
    /* 3573 */ "fmovsne %icc, $\x02, $\x01\0"
    /* 3594 */ "fmovse %icc, $\x02, $\x01\0"
    /* 3614 */ "fmovsg %icc, $\x02, $\x01\0"
    /* 3634 */ "fmovsle %icc, $\x02, $\x01\0"
    /* 3655 */ "fmovsge %icc, $\x02, $\x01\0"
    /* 3676 */ "fmovsl %icc, $\x02, $\x01\0"
    /* 3696 */ "fmovsgu %icc, $\x02, $\x01\0"
    /* 3717 */ "fmovsleu %icc, $\x02, $\x01\0"
    /* 3739 */ "fmovscc %icc, $\x02, $\x01\0"
    /* 3760 */ "fmovscs %icc, $\x02, $\x01\0"
    /* 3781 */ "fmovspos %icc, $\x02, $\x01\0"
    /* 3803 */ "fmovsneg %icc, $\x02, $\x01\0"
    /* 3825 */ "fmovsvc %icc, $\x02, $\x01\0"
    /* 3846 */ "fmovsvs %icc, $\x02, $\x01\0"
    /* 3867 */ "fmovsa %xcc, $\x02, $\x01\0"
    /* 3887 */ "fmovsn %xcc, $\x02, $\x01\0"
    /* 3907 */ "fmovsne %xcc, $\x02, $\x01\0"
    /* 3928 */ "fmovse %xcc, $\x02, $\x01\0"
    /* 3948 */ "fmovsg %xcc, $\x02, $\x01\0"
    /* 3968 */ "fmovsle %xcc, $\x02, $\x01\0"
    /* 3989 */ "fmovsge %xcc, $\x02, $\x01\0"
    /* 4010 */ "fmovsl %xcc, $\x02, $\x01\0"
    /* 4030 */ "fmovsgu %xcc, $\x02, $\x01\0"
    /* 4051 */ "fmovsleu %xcc, $\x02, $\x01\0"
    /* 4073 */ "fmovscc %xcc, $\x02, $\x01\0"
    /* 4094 */ "fmovscs %xcc, $\x02, $\x01\0"
    /* 4115 */ "fmovspos %xcc, $\x02, $\x01\0"
    /* 4137 */ "fmovsneg %xcc, $\x02, $\x01\0"
    /* 4159 */ "fmovsvc %xcc, $\x02, $\x01\0"
    /* 4180 */ "fmovsvs %xcc, $\x02, $\x01\0"
    /* 4201 */ "mova %icc, $\x02, $\x01\0"
    /* 4219 */ "movn %icc, $\x02, $\x01\0"
    /* 4237 */ "movne %icc, $\x02, $\x01\0"
    /* 4256 */ "move %icc, $\x02, $\x01\0"
    /* 4274 */ "movg %icc, $\x02, $\x01\0"
    /* 4292 */ "movle %icc, $\x02, $\x01\0"
    /* 4311 */ "movge %icc, $\x02, $\x01\0"
    /* 4330 */ "movl %icc, $\x02, $\x01\0"
    /* 4348 */ "movgu %icc, $\x02, $\x01\0"
    /* 4367 */ "movleu %icc, $\x02, $\x01\0"
    /* 4387 */ "movcc %icc, $\x02, $\x01\0"
    /* 4406 */ "movcs %icc, $\x02, $\x01\0"
    /* 4425 */ "movpos %icc, $\x02, $\x01\0"
    /* 4445 */ "movneg %icc, $\x02, $\x01\0"
    /* 4465 */ "movvc %icc, $\x02, $\x01\0"
    /* 4484 */ "movvs %icc, $\x02, $\x01\0"
    /* 4503 */ "movrz $\x02, $\x03, $\x01\0"
    /* 4520 */ "movrlez $\x02, $\x03, $\x01\0"
    /* 4539 */ "movrlz $\x02, $\x03, $\x01\0"
    /* 4557 */ "movrnz $\x02, $\x03, $\x01\0"
    /* 4575 */ "movrgz $\x02, $\x03, $\x01\0"
    /* 4593 */ "movrgez $\x02, $\x03, $\x01\0"
    /* 4612 */ "mova %xcc, $\x02, $\x01\0"
    /* 4630 */ "movn %xcc, $\x02, $\x01\0"
    /* 4648 */ "movne %xcc, $\x02, $\x01\0"
    /* 4667 */ "move %xcc, $\x02, $\x01\0"
    /* 4685 */ "movg %xcc, $\x02, $\x01\0"
    /* 4703 */ "movle %xcc, $\x02, $\x01\0"
    /* 4722 */ "movge %xcc, $\x02, $\x01\0"
    /* 4741 */ "movl %xcc, $\x02, $\x01\0"
    /* 4759 */ "movgu %xcc, $\x02, $\x01\0"
    /* 4778 */ "movleu %xcc, $\x02, $\x01\0"
    /* 4798 */ "movcc %xcc, $\x02, $\x01\0"
    /* 4817 */ "movcs %xcc, $\x02, $\x01\0"
    /* 4836 */ "movpos %xcc, $\x02, $\x01\0"
    /* 4856 */ "movneg %xcc, $\x02, $\x01\0"
    /* 4876 */ "movvc %xcc, $\x02, $\x01\0"
    /* 4895 */ "movvs %xcc, $\x02, $\x01\0"
    /* 4914 */ "tst $\x02\0"
    /* 4921 */ "mov $\x03, $\x01\0"
    /* 4932 */ "restore\0"
    /* 4940 */ "ret\0"
    /* 4944 */ "retl\0"
    /* 4949 */ "save\0"
    /* 4954 */ "ta %icc, $\x02\0"
    /* 4966 */ "ta %icc, $\x01 + $\x02\0"
    /* 4983 */ "tn %icc, $\x02\0"
    /* 4995 */ "tn %icc, $\x01 + $\x02\0"
    /* 5012 */ "tne %icc, $\x02\0"
    /* 5025 */ "tne %icc, $\x01 + $\x02\0"
    /* 5043 */ "te %icc, $\x02\0"
    /* 5055 */ "te %icc, $\x01 + $\x02\0"
    /* 5072 */ "tg %icc, $\x02\0"
    /* 5084 */ "tg %icc, $\x01 + $\x02\0"
    /* 5101 */ "tle %icc, $\x02\0"
    /* 5114 */ "tle %icc, $\x01 + $\x02\0"
    /* 5132 */ "tge %icc, $\x02\0"
    /* 5145 */ "tge %icc, $\x01 + $\x02\0"
    /* 5163 */ "tl %icc, $\x02\0"
    /* 5175 */ "tl %icc, $\x01 + $\x02\0"
    /* 5192 */ "tgu %icc, $\x02\0"
    /* 5205 */ "tgu %icc, $\x01 + $\x02\0"
    /* 5223 */ "tleu %icc, $\x02\0"
    /* 5237 */ "tleu %icc, $\x01 + $\x02\0"
    /* 5256 */ "tcc %icc, $\x02\0"
    /* 5269 */ "tcc %icc, $\x01 + $\x02\0"
    /* 5287 */ "tcs %icc, $\x02\0"
    /* 5300 */ "tcs %icc, $\x01 + $\x02\0"
    /* 5318 */ "tpos %icc, $\x02\0"
    /* 5332 */ "tpos %icc, $\x01 + $\x02\0"
    /* 5351 */ "tneg %icc, $\x02\0"
    /* 5365 */ "tneg %icc, $\x01 + $\x02\0"
    /* 5384 */ "tvc %icc, $\x02\0"
    /* 5397 */ "tvc %icc, $\x01 + $\x02\0"
    /* 5415 */ "tvs %icc, $\x02\0"
    /* 5428 */ "tvs %icc, $\x01 + $\x02\0"
    /* 5446 */ "ta $\x02\0"
    /* 5452 */ "ta $\x01 + $\x02\0"
    /* 5463 */ "tn $\x02\0"
    /* 5469 */ "tn $\x01 + $\x02\0"
    /* 5480 */ "tne $\x02\0"
    /* 5487 */ "tne $\x01 + $\x02\0"
    /* 5499 */ "te $\x02\0"
    /* 5505 */ "te $\x01 + $\x02\0"
    /* 5516 */ "tg $\x02\0"
    /* 5522 */ "tg $\x01 + $\x02\0"
    /* 5533 */ "tle $\x02\0"
    /* 5540 */ "tle $\x01 + $\x02\0"
    /* 5552 */ "tge $\x02\0"
    /* 5559 */ "tge $\x01 + $\x02\0"
    /* 5571 */ "tl $\x02\0"
    /* 5577 */ "tl $\x01 + $\x02\0"
    /* 5588 */ "tgu $\x02\0"
    /* 5595 */ "tgu $\x01 + $\x02\0"
    /* 5607 */ "tleu $\x02\0"
    /* 5615 */ "tleu $\x01 + $\x02\0"
    /* 5628 */ "tcc $\x02\0"
    /* 5635 */ "tcc $\x01 + $\x02\0"
    /* 5647 */ "tcs $\x02\0"
    /* 5654 */ "tcs $\x01 + $\x02\0"
    /* 5666 */ "tpos $\x02\0"
    /* 5674 */ "tpos $\x01 + $\x02\0"
    /* 5687 */ "tneg $\x02\0"
    /* 5695 */ "tneg $\x01 + $\x02\0"
    /* 5708 */ "tvc $\x02\0"
    /* 5715 */ "tvc $\x01 + $\x02\0"
    /* 5727 */ "tvs $\x02\0"
    /* 5734 */ "tvs $\x01 + $\x02\0"
    /* 5746 */ "ta %xcc, $\x02\0"
    /* 5758 */ "ta %xcc, $\x01 + $\x02\0"
    /* 5775 */ "tn %xcc, $\x02\0"
    /* 5787 */ "tn %xcc, $\x01 + $\x02\0"
    /* 5804 */ "tne %xcc, $\x02\0"
    /* 5817 */ "tne %xcc, $\x01 + $\x02\0"
    /* 5835 */ "te %xcc, $\x02\0"
    /* 5847 */ "te %xcc, $\x01 + $\x02\0"
    /* 5864 */ "tg %xcc, $\x02\0"
    /* 5876 */ "tg %xcc, $\x01 + $\x02\0"
    /* 5893 */ "tle %xcc, $\x02\0"
    /* 5906 */ "tle %xcc, $\x01 + $\x02\0"
    /* 5924 */ "tge %xcc, $\x02\0"
    /* 5937 */ "tge %xcc, $\x01 + $\x02\0"
    /* 5955 */ "tl %xcc, $\x02\0"
    /* 5967 */ "tl %xcc, $\x01 + $\x02\0"
    /* 5984 */ "tgu %xcc, $\x02\0"
    /* 5997 */ "tgu %xcc, $\x01 + $\x02\0"
    /* 6015 */ "tleu %xcc, $\x02\0"
    /* 6029 */ "tleu %xcc, $\x01 + $\x02\0"
    /* 6048 */ "tcc %xcc, $\x02\0"
    /* 6061 */ "tcc %xcc, $\x01 + $\x02\0"
    /* 6079 */ "tcs %xcc, $\x02\0"
    /* 6092 */ "tcs %xcc, $\x01 + $\x02\0"
    /* 6110 */ "tpos %xcc, $\x02\0"
    /* 6124 */ "tpos %xcc, $\x01 + $\x02\0"
    /* 6143 */ "tneg %xcc, $\x02\0"
    /* 6157 */ "tneg %xcc, $\x01 + $\x02\0"
    /* 6176 */ "tvc %xcc, $\x02\0"
    /* 6189 */ "tvc %xcc, $\x01 + $\x02\0"
    /* 6207 */ "tvs %xcc, $\x02\0"
    /* 6220 */ "tvs %xcc, $\x01 + $\x02\0"
    /* 6238 */ "fcmpd $\x02, $\x03\0"
    /* 6251 */ "fcmped $\x02, $\x03\0"
    /* 6265 */ "fcmpeq $\x02, $\x03\0"
    /* 6279 */ "fcmpes $\x02, $\x03\0"
    /* 6293 */ "fcmpq $\x02, $\x03\0"
    /* 6306 */ "fcmps $\x02, $\x03\0"
    /* 6319 */ "fmovda $\x02, $\x03, $\x01\0"
    /* 6337 */ "fmovdn $\x02, $\x03, $\x01\0"
    /* 6355 */ "fmovdu $\x02, $\x03, $\x01\0"
    /* 6373 */ "fmovdg $\x02, $\x03, $\x01\0"
    /* 6391 */ "fmovdug $\x02, $\x03, $\x01\0"
    /* 6410 */ "fmovdl $\x02, $\x03, $\x01\0"
    /* 6428 */ "fmovdul $\x02, $\x03, $\x01\0"
    /* 6447 */ "fmovdlg $\x02, $\x03, $\x01\0"
    /* 6466 */ "fmovdne $\x02, $\x03, $\x01\0"
    /* 6485 */ "fmovde $\x02, $\x03, $\x01\0"
    /* 6503 */ "fmovdue $\x02, $\x03, $\x01\0"
    /* 6522 */ "fmovdge $\x02, $\x03, $\x01\0"
    /* 6541 */ "fmovduge $\x02, $\x03, $\x01\0"
    /* 6561 */ "fmovdle $\x02, $\x03, $\x01\0"
    /* 6580 */ "fmovdule $\x02, $\x03, $\x01\0"
    /* 6600 */ "fmovdo $\x02, $\x03, $\x01\0"
    /* 6618 */ "fmovqa $\x02, $\x03, $\x01\0"
    /* 6636 */ "fmovqn $\x02, $\x03, $\x01\0"
    /* 6654 */ "fmovqu $\x02, $\x03, $\x01\0"
    /* 6672 */ "fmovqg $\x02, $\x03, $\x01\0"
    /* 6690 */ "fmovqug $\x02, $\x03, $\x01\0"
    /* 6709 */ "fmovql $\x02, $\x03, $\x01\0"
    /* 6727 */ "fmovqul $\x02, $\x03, $\x01\0"
    /* 6746 */ "fmovqlg $\x02, $\x03, $\x01\0"
    /* 6765 */ "fmovqne $\x02, $\x03, $\x01\0"
    /* 6784 */ "fmovqe $\x02, $\x03, $\x01\0"
    /* 6802 */ "fmovque $\x02, $\x03, $\x01\0"
    /* 6821 */ "fmovqge $\x02, $\x03, $\x01\0"
    /* 6840 */ "fmovquge $\x02, $\x03, $\x01\0"
    /* 6860 */ "fmovqle $\x02, $\x03, $\x01\0"
    /* 6879 */ "fmovqule $\x02, $\x03, $\x01\0"
    /* 6899 */ "fmovqo $\x02, $\x03, $\x01\0"
    /* 6917 */ "fmovsa $\x02, $\x03, $\x01\0"
    /* 6935 */ "fmovsn $\x02, $\x03, $\x01\0"
    /* 6953 */ "fmovsu $\x02, $\x03, $\x01\0"
    /* 6971 */ "fmovsg $\x02, $\x03, $\x01\0"
    /* 6989 */ "fmovsug $\x02, $\x03, $\x01\0"
    /* 7008 */ "fmovsl $\x02, $\x03, $\x01\0"
    /* 7026 */ "fmovsul $\x02, $\x03, $\x01\0"
    /* 7045 */ "fmovslg $\x02, $\x03, $\x01\0"
    /* 7064 */ "fmovsne $\x02, $\x03, $\x01\0"
    /* 7083 */ "fmovse $\x02, $\x03, $\x01\0"
    /* 7101 */ "fmovsue $\x02, $\x03, $\x01\0"
    /* 7120 */ "fmovsge $\x02, $\x03, $\x01\0"
    /* 7139 */ "fmovsuge $\x02, $\x03, $\x01\0"
    /* 7159 */ "fmovsle $\x02, $\x03, $\x01\0"
    /* 7178 */ "fmovsule $\x02, $\x03, $\x01\0"
    /* 7198 */ "fmovso $\x02, $\x03, $\x01\0"
    /* 7216 */ "mova $\x02, $\x03, $\x01\0"
    /* 7232 */ "movn $\x02, $\x03, $\x01\0"
    /* 7248 */ "movu $\x02, $\x03, $\x01\0"
    /* 7264 */ "movg $\x02, $\x03, $\x01\0"
    /* 7280 */ "movug $\x02, $\x03, $\x01\0"
    /* 7297 */ "movl $\x02, $\x03, $\x01\0"
    /* 7313 */ "movul $\x02, $\x03, $\x01\0"
    /* 7330 */ "movlg $\x02, $\x03, $\x01\0"
    /* 7347 */ "movne $\x02, $\x03, $\x01\0"
    /* 7364 */ "move $\x02, $\x03, $\x01\0"
    /* 7380 */ "movue $\x02, $\x03, $\x01\0"
    /* 7397 */ "movge $\x02, $\x03, $\x01\0"
    /* 7414 */ "movuge $\x02, $\x03, $\x01\0"
    /* 7432 */ "movle $\x02, $\x03, $\x01\0"
    /* 7449 */ "movule $\x02, $\x03, $\x01\0"
    /* 7467 */ "movo $\x02, $\x03, $\x01\0"
  ;

#ifndef NDEBUG
  static struct SortCheck {
    SortCheck(ArrayRef<PatternsForOpcode> OpToPatterns) {
      assert(std::is_sorted(
                 OpToPatterns.begin(), OpToPatterns.end(),
                 [](const PatternsForOpcode &L, const PatternsForOpcode &R) {
                   return L.Opcode < R.Opcode;
                 }) &&
             "tablegen failed to sort opcode patterns");
    }
  } sortCheckVar(OpToPatterns);
#endif

  AliasMatchingData M {
    ArrayRef(OpToPatterns),
    ArrayRef(Patterns),
    ArrayRef(Conds),
    StringRef(AsmStrings, std::size(AsmStrings)),
    nullptr,
  };
  const char *AsmString = matchAliasPatterns(MI, &STI, M);
  if (!AsmString) return false;

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      OS << '\t';
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, Address, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void SparcInstPrinter::printCustomAliasOperand(
         const MCInst *MI, uint64_t Address, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  llvm_unreachable("Unknown PrintMethod kind");
}

#endif // PRINT_ALIAS_INSTR
